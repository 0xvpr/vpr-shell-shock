/**
 * Created by:      VPR
 * Created:         December 29th, 2022
 *
 * Updated by:      VPR
 * Updated:         March 9th, 2025
 *
 * Description:     C/C++ Header only library for position independent shell-code generation.
 *
 * Credits:
 *                  Credits due to Dark VortEx of https://bruteratel.com
 *                  https://bruteratel.com/research/feature-update/2021/01/30/OBJEXEC/
 *                  Without reading that tutorial, this project would not have been started
**/

#ifndef    VPR_SHELL_SHOCK_HEADER
#define    VPR_SHELL_SHOCK_HEADER

#ifndef    VC_EXTRA_LEAN
#define    VC_EXTRA_LEAN
#endif  // VC_EXTRA_LEAN
#include   <winternl.h>
#include   <windows.h>
#include   <winnt.h>
#include   <intrin.h>


#if        !defined(__cplusplus)
#include   <stdbool.h>
#include   <stdint.h>
#include   <string.h>
#include   <stdio.h>
#else   // defined(__cplusplus)
#include   <filesystem>
#include   <fstream>
#include   <cstring>
#include   <cstdint>
#endif  // defined(__cplusplus)


#if        !defined(__cplusplus)
#define    DEREF_64(name)        *((DWORD64 *)(name))
#define    DEREF_32(name)        *((DWORD *)(name))
#define    DEREF_16(name)        *((WORD *)(name))
#define    DEREF_8(name)         *((BYTE *)(name))
#define    DEREF(name)           *((UINT_PTR *)(name))
#else   // defined(__cplusplus)
#define    DEREF_64(name)        *(reinterpret_cast<DWORD64 *>(name))
#define    DEREF_32(name)        *(reinterpret_cast<DWORD *>(name))
#define    DEREF_16(name)        *(reinterpret_cast<WORD *>(name))
#define    DEREF_8(name)         *(reinterpret_cast<BYTE *>(name))
#define    DEREF(name)           *(reinterpret_cast<UINT_PTR *>(name))
#endif  // defined(__cplusplus)


////////////////////////////////////////////////////////////////////////////////
//                               Definitions
////////////////////////////////////////////////////////////////////////////////

#if       defined(__cplusplus)
constexpr DWORD KERNEL32DLL_HASH = 0x6A4ABC5B;
#else  // !defined(__cplusplus)
#define    KERNEL32DLL_HASH 0x6A4ABC5B
#endif // !defined(__cplusplus)

#if defined(_MSC_VER) && (!defined(__clang__) || !defined(__GNUC__) || !defined(__MINGW32__) || !defined(__MINGW64__) )

#ifndef __UNICODE_STRING_DEFINED
#define __UNICODE_STRING_DEFINED
  typedef struct _UNICODE_STRING {
    USHORT Length;
    USHORT MaximumLength;
    PWSTR Buffer;
  } UNICODE_STRING;
#endif

typedef struct _PEB_LDR_DATA {
  BYTE Reserved1[8];
  PVOID Reserved2[3];
  LIST_ENTRY InMemoryOrderModuleList;
} PEB_LDR_DATA,*PPEB_LDR_DATA;

typedef struct _LDR_DATA_TABLE_ENTRY {
  PVOID Reserved1[2];
  LIST_ENTRY InMemoryOrderLinks;
  PVOID Reserved2[2];
  PVOID DllBase;
  PVOID Reserved3[2];
  UNICODE_STRING FullDllName;
  BYTE Reserved4[8];
  PVOID Reserved5[3];
  union {
    ULONG CheckSum;
    PVOID Reserved6;
  };
  ULONG TimeDateStamp;
} LDR_DATA_TABLE_ENTRY,*PLDR_DATA_TABLE_ENTRY;

typedef struct _RTL_USER_PROCESS_PARAMETERS {
  BYTE Reserved1[16];
  PVOID Reserved2[10];
  UNICODE_STRING ImagePathName;
  UNICODE_STRING CommandLine;
} RTL_USER_PROCESS_PARAMETERS,*PRTL_USER_PROCESS_PARAMETERS;

/* This function pointer is undocumented and just valid for windows 2000.
   Therefore I guess.  */
typedef VOID (NTAPI *PPS_POST_PROCESS_INIT_ROUTINE)(VOID);

//redefine PEB struct
typedef struct _PEB {
    BYTE Reserved1[2];
    BYTE BeingDebugged;
    BYTE Reserved2[1];
    PVOID Reserved3[2];
    PPEB_LDR_DATA Ldr;
    PRTL_USER_PROCESS_PARAMETERS ProcessParameters;
    PVOID Reserved4[3];
    PVOID AtlThunkSListPtr;
    PVOID Reserved5;
    ULONG Reserved6;
    PVOID Reserved7;
    ULONG Reserved8;
    ULONG AtlThunkSListPtr32;
    PVOID Reserved9[45];
    BYTE Reserved10[96];
    PPS_POST_PROCESS_INIT_ROUTINE PostProcessInitRoutine;
    BYTE Reserved11[128];
    PVOID Reserved12[1];
    ULONG SessionId;
  } PEB,*PPEB;
#endif // MSVC && not clang, gnu, or mingw

////////////////////////////////////////////////////////////////////////////////
//                                   C API
////////////////////////////////////////////////////////////////////////////////

/** 
 * Rotate bits right by 13.
**/
__forceinline
DWORD ror13(DWORD d) {
    return (d >> 13) | (d << (19));
}

/** 
 * Case-insensitive string compare.
**/
__forceinline
bool istreq(char* const _a, char* const _b) {
    for (char *a = _a, *b = _b; *a; ++a, ++b) {
        if ((*a | 0x20) != (*b | 0x20) ) {
            return false;
        }
    }

    return true;
}

/** 
 * Function to fetch the base address of kernel32.dll from the Process Environment Block.
**/
__forceinline
UINT_PTR get_kernel_32(void) {

#if       defined(__WIN64) || defined(_M_X64) || defined(__amd64__)
    PPEB peb = (PPEB)__readgsqword(0x60); // PEB is at gs:[0x60] in 64 bit
#else  // !defined(__WIN64) || !defined(_M_X64) || !defined(__amd64__)
    PPEB peb = (PPEB)__readfsdword(0x30); // PEB is at fs:[0x30] in 32 bit
#endif // defined(__WIN64) || !defined(_M_X64) || !defined(__amd64__)

    PPEB_LDR_DATA ldr = peb->Ldr;
    for ( LIST_ENTRY* entry = ldr->InMemoryOrderModuleList.Flink->Flink;
          entry->Flink != (LIST_ENTRY *)ldr->InMemoryOrderModuleList.Flink;
          entry = entry->Flink)
    {
        UNICODE_STRING dll_name_us = ((LDR_DATA_TABLE_ENTRY *)entry)->FullDllName;
        PBYTE char_buffer = (PBYTE)dll_name_us.Buffer;

        DWORD hash = 0;
        for (USHORT i = dll_name_us.Length; i; --i, ++char_buffer) {
            hash = ror13(hash) + (DWORD)((*char_buffer)); 
        }

        if (hash == KERNEL32DLL_HASH) {
            return (ULONG_PTR)(((PLDR_DATA_TABLE_ENTRY)entry)->Reserved2[0]);
        }
    }

    return 0;
}

__forceinline
UINT_PTR get_symbol_address( UINT_PTR hModule,
                             LPCSTR lpProcName )
{
    UINT_PTR dllAddress             = hModule;
    UINT_PTR symbolAddress          = 0;
    UINT_PTR exportedAddressTable   = 0;
    UINT_PTR namePointerTable       = 0;
    UINT_PTR ordinalTable           = 0;

    if (hModule == 0) {
        return 0;
    }

    PIMAGE_NT_HEADERS ntHeaders = NULL;
    PIMAGE_DATA_DIRECTORY dataDirectory = NULL;
    PIMAGE_EXPORT_DIRECTORY exportDirectory = NULL;

    ntHeaders = (PIMAGE_NT_HEADERS)(dllAddress + (UINT_PTR)(((PIMAGE_DOS_HEADER)dllAddress)->e_lfanew));
    dataDirectory = (PIMAGE_DATA_DIRECTORY)&ntHeaders->OptionalHeader.DataDirectory[ IMAGE_DIRECTORY_ENTRY_EXPORT ];
    exportDirectory = (PIMAGE_EXPORT_DIRECTORY)( dllAddress + dataDirectory->VirtualAddress );
        
    exportedAddressTable = ( dllAddress + exportDirectory->AddressOfFunctions );
    namePointerTable = ( dllAddress + exportDirectory->AddressOfNames );
    ordinalTable = ( dllAddress + exportDirectory->AddressOfNameOrdinals );

    if (((UINT_PTR)lpProcName & 0xFFFF0000 ) == 0x00000000) {
        exportedAddressTable += ( ( IMAGE_ORDINAL( (UINT_PTR)lpProcName ) - exportDirectory->Base ) * sizeof(DWORD) );
        symbolAddress = (UINT_PTR)( dllAddress + DEREF_32(exportedAddressTable) );
    } else {
        DWORD dwCounter = exportDirectory->NumberOfNames;
        while (dwCounter--) {
            char* cpExportedFunctionName = (char *)(dllAddress + DEREF_32(namePointerTable));
            if ( istreq(cpExportedFunctionName, (char *)(lpProcName)) ) {
                exportedAddressTable += ( DEREF_16( ordinalTable ) * sizeof(DWORD) );
                symbolAddress = (UINT_PTR)(dllAddress + DEREF_32( exportedAddressTable ));
                break;
            }

            namePointerTable += sizeof(DWORD);
            ordinalTable += sizeof(WORD);
        }
    }

    return symbolAddress;
}

////////////////////////////////////////////////////////////////////////////////
//                                 C++ API
////////////////////////////////////////////////////////////////////////////////

#if defined(__cplusplus)
namespace vpr {
namespace ss {

class [[nodiscard]] shellshock {
    typedef UINT_PTR (WINAPI * LoadLibraryA_t)(LPCSTR);
public:
    shellshock(const shellshock&) = delete;
    shellshock& operator = (const shellshock&) = delete;
    shellshock(const shellshock&&) = delete;
    shellshock& operator = (const shellshock&&) = delete;

    __forceinline shellshock() noexcept
        : kernel32dll(get_kernel_32())
        , f_LoadLibraryA(set_loadlibrary_a(kernel32dll))
        ////////////////////////////////////////////////////////////////////////
        //               Generated using generator python script
        ////////////////////////////////////////////////////////////////////////
        , aadauthhelperdll(0)
        , aadcloudapdll(0)
        , aadjcspdll(0)
        , aadtbdll(0)
        , aadWamExtensiondll(0)
        , AarSvcdll(0)
        , AboutSettingsHandlersdll(0)
        , AboveLockAppHostdll(0)
        , accessibilitycpldll(0)
        , accountaccessordll(0)
        , AccountsRtdll(0)
        , AcGenraldll(0)
        , AcLayersdll(0)
        , acleditdll(0)
        , acluidll(0)
        , acmigrationdll(0)
        , ACPBackgroundManagerPolicydll(0)
        , acppagedll(0)
        , acproxydll(0)
        , AcSpecfcdll(0)
        , ActionCenterdll(0)
        , ActionCenterCPLdll(0)
        , ActionQueuedll(0)
        , ActivationClientdll(0)
        , ActivationManagerdll(0)
        , ActivationVdevdll(0)
        , activedsdll(0)
        , ActiveSyncCspdll(0)
        , ActiveSyncProviderdll(0)
        , actxprxydll(0)
        , AcWinRTdll(0)
        , AcXtrnaldll(0)
        , AdaptiveCardsdll(0)
        , AddressParserdll(0)
        , adhapidll(0)
        , adhsvcdll(0)
        , AdmTmpldll(0)
        , admwproxdll(0)
        , adproviderdll(0)
        , adrclientdll(0)
        , adsldpdll(0)
        , adsldpcdll(0)
        , adsmsextdll(0)
        , adsntdll(0)
        , adtschemadll(0)
        , AdvancedEmojiDSdll(0)
        , advapi32dll(0)
        , advapi32resdll(0)
        , advpackdll(0)
        , aeevtsdll(0)
        , aeinvdll(0)
        , aemarebackupdll(0)
        , aepicdll(0)
        , agentactivationruntimedll(0)
        , agentactivationruntimewindowsdll(0)
        , ahadmindll(0)
        , AJRouterdll(0)
        , amsidll(0)
        , amsiproxydll(0)
        , amstreamdll(0)
        , AnalogShellBrokerdll(0)
        , AnalogCommonProxyStubdll(0)
        , apdsdll(0)
        , APHostClientdll(0)
        , APHostResdll(0)
        , APHostServicedll(0)
        , apisamplingdll(0)
        , ApiSetHostAppExecutionAliasdll(0)
        , apisetschemadll(0)
        , APMondll(0)
        , APMonUIdll(0)
        , AppContractsdll(0)
        , AppExtensiondll(0)
        , apphelpdll(0)
        , Apphlpdmdll(0)
        , appidapidll(0)
        , AppIdPolicyEngineApidll(0)
        , appidsvcdll(0)
        , appinfodll(0)
        , appinfoextdll(0)
        , AppInstallerPromptDesktopdll(0)
        , ApplicationControlCSPdll(0)
        , ApplicationFramedll(0)
        , ApplicationTargetedFeatureDatabasedll(0)
        , AppListBackupLauncherdll(0)
        , AppLockerCSPdll(0)
        , AppManagementConfigurationdll(0)
        , appmgmtsdll(0)
        , appmgrdll(0)
        , AppMondll(0)
        , AppointmentActivationdll(0)
        , AppointmentApisdll(0)
        , appraiserdll(0)
        , AppReadinessdll(0)
        , apprepapidll(0)
        , AppResolverdll(0)
        , appsruprovdll(0)
        , AppVCatalogdll(0)
        , AppvClientEventLogdll(0)
        , AppVClientPSdll(0)
        , AppVEntStreamingManagerdll(0)
        , AppVEntSubsystemControllerdll(0)
        , AppVEntSubsystems64dll(0)
        , AppVEntVirtualizationdll(0)
        , appverifUIdll(0)
        , appvetwclientresdll(0)
        , appvetwsharedperformancedll(0)
        , appvetwstreaminguxdll(0)
        , AppVFileSystemMetadatadll(0)
        , AppVIntegrationdll(0)
        , AppVManifestdll(0)
        , AppVOrchestrationdll(0)
        , AppVPolicydll(0)
        , AppVPublishingdll(0)
        , AppVReportingdll(0)
        , AppVScriptingdll(0)
        , AppVSentineldll(0)
        , AppVStreamingUXdll(0)
        , AppVStreamMapdll(0)
        , AppVTerminatordll(0)
        , AppxAllUserStoredll(0)
        , AppXApplicabilityBlobdll(0)
        , AppxApplicabilityEnginedll(0)
        , AppXDeploymentClientdll(0)
        , AppXDeploymentExtensionsdesktopdll(0)
        , AppXDeploymentExtensionsonecoredll(0)
        , AppXDeploymentServerdll(0)
        , AppxPackagingdll(0)
        , AppxSipdll(0)
        , AppxStreamingDataSourcePSdll(0)
        , AppxSysprepdll(0)
        , Apx01000dll(0)
        , archiveintdll(0)
        , asferrordll(0)
        , aspnet_countersdll(0)
        , AssignedAccessCspdll(0)
        , AssignedAccessManagerdll(0)
        , assignedaccessmanagersvcdll(0)
        , assignedaccessprovidereventsdll(0)
        , AssignedAccessRuntimedll(0)
        , AssignedAccessShellProxydll(0)
        , asycfiltdll(0)
        , atldll(0)
        , atl100dll(0)
        , atl110dll(0)
        , atlthunkdll(0)
        , atmlibdll(0)
        , AttestationWmiProviderdll(0)
        , AudioEndpointBuilderdll(0)
        , AudioEngdll(0)
        , AudioHandlersdll(0)
        , AUDIOKSEdll(0)
        , audioresourceregistrardll(0)
        , AudioSesdll(0)
        , audiosrvdll(0)
        , AudioSrvPolicyManagerdll(0)
        , auditcsedll(0)
        , AuditNativeSnapIndll(0)
        , auditpolcoredll(0)
        , AuditPolicyGPInteropdll(0)
        , auditpolmsgdll(0)
        , AuthBrokerdll(0)
        , AuthBrokerUIdll(0)
        , authenticationdll(0)
        , AuthExtdll(0)
        , authfwcfgdll(0)
        , AuthFWGPdll(0)
        , AuthFWSnapindll(0)
        , AuthFWWizFwkdll(0)
        , AuthHostProxydll(0)
        , authuidll(0)
        , authzdll(0)
        , AutomaticAppSignInPolicydll(0)
        , autopilotdll(0)
        , autopilotdiagdll(0)
        , autoplaydll(0)
        , autotimesvcdll(0)
        , avicap32dll(0)
        , avifil32dll(0)
        , avrtdll(0)
        , AxInstSvdll(0)
        , azrolesdll(0)
        , azroleuidll(0)
        , AzSqlExtdll(0)
        , BackgroundMediaPolicydll(0)
        , BamSettingsClientdll(0)
        , BarcodeProvisioningPlugindll(0)
        , basecspdll(0)
        , basesrvdll(0)
        , batmeterdll(0)
        , bcastdvrproxydll(0)
        , BcastDVRBrokerdll(0)
        , BcastDVRClientdll(0)
        , BcastDVRCommondll(0)
        , bcastdvruserservicedll(0)
        , bcddll(0)
        , bcdprovdll(0)
        , bcdsrvdll(0)
        , BCP47Langsdll(0)
        , BCP47mrmdll(0)
        , bcryptdll(0)
        , bcryptprimitivesdll(0)
        , BdeHdCfgLibdll(0)
        , bderepairdll(0)
        , bdesvcdll(0)
        , BdeSysprepdll(0)
        , bdeuidll(0)
        , bidll(0)
        , bidispldll(0)
        , bindfltapidll(0)
        , BingASDSdll(0)
        , BingFilterDSdll(0)
        , BingMapsdll(0)
        , BingOnlineServicesdll(0)
        , BioCredProvdll(0)
        , bisrvdll(0)
        , BitLockerCspdll(0)
        , bitsigddll(0)
        , bitsperfdll(0)
        , BitsProxydll(0)
        , biwinrtdll(0)
        , BlbEventsdll(0)
        , blbresdll(0)
        , blb_psdll(0)
        , BluetoothApisdll(0)
        , BluetoothDesktopHandlersdll(0)
        , BluetoothOppPushClientdll(0)
        , bnmanagerdll(0)
        , BootMenuUXdll(0)
        , bootstrdll(0)
        , bootsvcdll(0)
        , bootuxdll(0)
        , bridgeresdll(0)
        , BrokerFileDialogdll(0)
        , BrokerLibdll(0)
        , browclidll(0)
        , browserbrokerdll(0)
        , browseuidll(0)
        , BTAGServicedll(0)
        , BthAvctpSvcdll(0)
        , BthAvrcpdll(0)
        , BthAvrcpAppSvcdll(0)
        , bthcidll(0)
        , BthMtpContextHandlerdll(0)
        , bthpanapidll(0)
        , BthpanContextHandlerdll(0)
        , BthRadioMediadll(0)
        , bthservdll(0)
        , BthTelemetrydll(0)
        , btpanuidll(0)
        , BWContextHandlerdll(0)
        , c28c7a4e_a619_4463_82b7_0fc9cc7187f5_HyperV_ComputeStoragedll(0)
        , c4d66f00_b6f0_4439_ac9b_c5ea13fe54d7_HyperV_ComputeCoredll(0)
        , cabapidll(0)
        , cabinetdll(0)
        , cabviewdll(0)
        , CallButtonsdll(0)
        , CallButtonsProxyStubdll(0)
        , CallHistoryClientdll(0)
        , CameraCaptureUIdll(0)
        , camextdll(0)
        , CapabilityAccessHandlersdll(0)
        , CapabilityAccessManagerdll(0)
        , CapabilityAccessManagerClientdll(0)
        , capauthzdll(0)
        , capiproviderdll(0)
        , capispdll(0)
        , CaptureServicedll(0)
        , CastingShellExtdll(0)
        , CastLaunchdll(0)
        , catsrvdll(0)
        , catsrvpsdll(0)
        , catsrvutdll(0)
        , CBDHSvcdll(0)
        , ccadll(0)
        , CCGLaunchPaddll(0)
        , cdddll(0)
        , cdosysdll(0)
        , cdpdll(0)
        , cdprtdll(0)
        , cdpsvcdll(0)
        , cdpusersvcdll(0)
        , cellulardatacapabilityhandlerdll(0)
        , cemapidll(0)
        , certcadll(0)
        , certclidll(0)
        , certCredProviderdll(0)
        , certencdll(0)
        , CertEnrolldll(0)
        , CertEnrollUIdll(0)
        , certmgrdll(0)
        , CertPKICmdletdll(0)
        , CertPolEngdll(0)
        , certpropdll(0)
        , cewmdmdll(0)
        , cfgbkenddll(0)
        , cfgmgr32dll(0)
        , CfgSPCellulardll(0)
        , CfgSPPolicydll(0)
        , cflapidll(0)
        , cfmifsdll(0)
        , cfmifsproxydll(0)
        , Chakradll(0)
        , Chakradiagdll(0)
        , Chakrathunkdll(0)
        , chartvdll(0)
        , ChatApisdll(0)
        , ChsStrokeDSdll(0)
        , ChtBopomofoDSdll(0)
        , ChtCangjieDSdll(0)
        , ChtHkStrokeDSdll(0)
        , ChtQuickDSdll(0)
        , ChxAPDSdll(0)
        , ChxDecoderdll(0)
        , ChxHAPDSdll(0)
        , chxinputrouterdll(0)
        , chxrankerdll(0)
        , CHxReadingStringIMEdll(0)
        , cidll(0)
        , cicdll(0)
        , cimfsdll(0)
        , CIRCoInstdll(0)
        , CIWmidll(0)
        , clbcatqdll(0)
        , cldapidll(0)
        , CleanPCCSPdll(0)
        , clfsw32dll(0)
        , cliconfgdll(0)
        , ClipboardServerdll(0)
        , Clipcdll(0)
        , ClipSVCdll(0)
        , clipwinrtdll(0)
        , cloudAPdll(0)
        , CloudDesktopCSPdll(0)
        , CloudDomainJoinAUGdll(0)
        , CloudDomainJoinDataModelServerdll(0)
        , CloudExperienceHostdll(0)
        , CloudExperienceHostBrokerdll(0)
        , CloudExperienceHostCommondll(0)
        , CloudExperienceHostRedirectiondll(0)
        , CloudExperienceHostUserdll(0)
        , cloudidsvcdll(0)
        , CloudIdWxhExtensiondll(0)
        , CloudRecoveryDownloadTooldll(0)
        , CloudRestoreLauncherdll(0)
        , clrhostdll(0)
        , clusapidll(0)
        , cmcfg32dll(0)
        , cmdextdll(0)
        , cmdial32dll(0)
        , cmgrcsppsdll(0)
        , cmifwdll(0)
        , cmintegratordll(0)
        , cmluadll(0)
        , cmpbk32dll(0)
        , cmstpluadll(0)
        , cmutildll(0)
        , cngcreduidll(0)
        , cngkeyhelperdll(0)
        , cngproviderdll(0)
        , cnvfatdll(0)
        , CodeIntegrityAggregatordll(0)
        , cofiredmdll(0)
        , colbactdll(0)
        , coloruidll(0)
        , combasedll(0)
        , comcatdll(0)
        , comctl32dll(0)
        , comdlg32dll(0)
        , coml2dll(0)
        , CompatAggregatordll(0)
        , ComposableShellProxyStubdll(0)
        , ComposerFrameworkdll(0)
        , CompPkgSupdll(0)
        , compstuidll(0)
        , computecoredll(0)
        , computelibeventlogdll(0)
        , computenetworkdll(0)
        , computestoragedll(0)
        , comrepldll(0)
        , comresdll(0)
        , comsnapdll(0)
        , comsvcsdll(0)
        , comuiddll(0)
        , concrt140dll(0)
        , concrt140ddll(0)
        , configmanager2dll(0)
        , ConfigureExpandedStoragedll(0)
        , ConhostV1dll(0)
        , connectdll(0)
        , ConnectedAccountStatedll(0)
        , ConsentExperienceCommondll(0)
        , ConsentUXdll(0)
        , ConsentUxClientdll(0)
        , consoledll(0)
        , ConsoleLogondll(0)
        , ConstraintIndexSearchdll(0)
        , ContactActivationdll(0)
        , ContactApisdll(0)
        , ContactHarvesterDSdll(0)
        , containerdll(0)
        , containerdevicemanagementdll(0)
        , ContentDeliveryManagerUtilitiesdll(0)
        , coreaudiopolicymanagerextdll(0)
        , coredpusdll(0)
        , coreglobconfigdll(0)
        , CoreMasdll(0)
        , CoreMessagingdll(0)
        , CoreMmResdll(0)
        , CorePrivacySettingsStoredll(0)
        , CoreShelldll(0)
        , CoreShellAPIdll(0)
        , CoreShellExtFrameworkdll(0)
        , CoreUIComponentsdll(0)
        , correnginedll(0)
        , CourtesyEnginedll(0)
        , CPFiltersdll(0)
        , CredDialogBrokerdll(0)
        , CredentialEnrollmentManagerForUserdll(0)
        , CredProv2faHelperdll(0)
        , CredProvCommonCoredll(0)
        , CredProvDataModeldll(0)
        , CredProvHelperdll(0)
        , credprovhostdll(0)
        , credprovsdll(0)
        , credprovslegacydll(0)
        , credsspdll(0)
        , creduidll(0)
        , crypt32dll(0)
        , cryptbasedll(0)
        , cryptcatsvcdll(0)
        , cryptdlgdll(0)
        , cryptdlldll(0)
        , cryptextdll(0)
        , cryptnetdll(0)
        , cryptngcdll(0)
        , CryptoWinRTdll(0)
        , cryptspdll(0)
        , cryptsvcdll(0)
        , crypttpmeksvcdll(0)
        , cryptuidll(0)
        , cryptuiwizarddll(0)
        , cryptxmldll(0)
        , cscapidll(0)
        , cscdlldll(0)
        , CscMigdll(0)
        , cscobjdll(0)
        , cscsvcdll(0)
        , cscuidll(0)
        , CspCellularSettingsdll(0)
        , cspltedll(0)
        , CspProxydll(0)
        , csrsrvdll(0)
        , CSystemEventsBrokerClientdll(0)
        , cuzzapidll(0)
        , cxcredprovdll(0)
        , CXHProvisioningServerdll(0)
        , d2d1dll(0)
        , d2d1debug3dll(0)
        , d3d10dll(0)
        , d3d10coredll(0)
        , d3d10level9dll(0)
        , d3d10refdll(0)
        , d3d10sdklayersdll(0)
        , d3d10warpdll(0)
        , d3d10_1dll(0)
        , d3d10_1coredll(0)
        , d3d11dll(0)
        , d3d11on12dll(0)
        , d3d11_3SDKLayersdll(0)
        , D3D12dll(0)
        , D3D12Coredll(0)
        , d3d12SDKLayersdll(0)
        , d3d8thkdll(0)
        , d3d9dll(0)
        , d3d9on12dll(0)
        , D3DCompiler_33dll(0)
        , D3DCompiler_34dll(0)
        , D3DCompiler_35dll(0)
        , D3DCompiler_36dll(0)
        , D3DCompiler_37dll(0)
        , D3DCompiler_38dll(0)
        , D3DCompiler_39dll(0)
        , D3DCompiler_40dll(0)
        , D3DCompiler_41dll(0)
        , D3DCompiler_42dll(0)
        , D3DCompiler_43dll(0)
        , D3DCompiler_47dll(0)
        , d3dcsx_42dll(0)
        , d3dcsx_43dll(0)
        , d3dref9dll(0)
        , D3DSCachedll(0)
        , d3dx10dll(0)
        , d3dx10_33dll(0)
        , d3dx10_34dll(0)
        , d3dx10_35dll(0)
        , d3dx10_36dll(0)
        , d3dx10_37dll(0)
        , d3dx10_38dll(0)
        , d3dx10_39dll(0)
        , d3dx10_40dll(0)
        , d3dx10_41dll(0)
        , d3dx10_42dll(0)
        , d3dx10_43dll(0)
        , d3dx11_42dll(0)
        , d3dx11_43dll(0)
        , d3dx9_24dll(0)
        , d3dx9_25dll(0)
        , d3dx9_26dll(0)
        , d3dx9_27dll(0)
        , d3dx9_28dll(0)
        , d3dx9_29dll(0)
        , d3dx9_30dll(0)
        , d3dx9_31dll(0)
        , d3dx9_32dll(0)
        , d3dx9_33dll(0)
        , d3dx9_34dll(0)
        , d3dx9_35dll(0)
        , d3dx9_36dll(0)
        , D3DX9_37dll(0)
        , D3DX9_38dll(0)
        , D3DX9_39dll(0)
        , D3DX9_40dll(0)
        , D3DX9_41dll(0)
        , D3DX9_42dll(0)
        , D3DX9_43dll(0)
        , d4d78066_e6db_44b7_b5cd_2eb82dce620c_HyperV_ComputeLegacydll(0)
        , dabdll(0)
        , dabapidll(0)
        , DAConndll(0)
        , dafAspInfraProviderdll(0)
        , dafBthdll(0)
        , DafDnsSddll(0)
        , dafDockingProviderdll(0)
        , DAFESCLdll(0)
        , DafGipdll(0)
        , DAFIoTdll(0)
        , DAFIPPdll(0)
        , DAFMCPdll(0)
        , dafposdll(0)
        , DafPrintProviderdll(0)
        , dafupnpdll(0)
        , dafWCNdll(0)
        , dafWfdProviderdll(0)
        , DAFWiProvdll(0)
        , DAFWSDdll(0)
        , DAMediaManagerdll(0)
        , DAMMdll(0)
        , DaOtpCredentialProviderdll(0)
        , dasdll(0)
        , dataclendll(0)
        , DataExchangedll(0)
        , datusagedll(0)
        , davclntdll(0)
        , davhlprdll(0)
        , DavSyncProviderdll(0)
        , daxexecdll(0)
        , dbgcoredll(0)
        , dbgengdll(0)
        , dbghelpdll(0)
        , DbgModeldll(0)
        , dbnetlibdll(0)
        , dbnmpntwdll(0)
        , dciman32dll(0)
        , dcnteldll(0)
        , dcompdll(0)
        , dcsvcdll(0)
        , DDACLSysdll(0)
        , DdcClaimsApidll(0)
        , DdcComImplementationsDesktopdll(0)
        , DDDSdll(0)
        , ddisplaydll(0)
        , DDOIProxydll(0)
        , DDOResdll(0)
        , ddpchunkdll(0)
        , ddptracedll(0)
        , ddputilsdll(0)
        , ddp_psdll(0)
        , ddrawdll(0)
        , ddrawexdll(0)
        , debugregsvcdll(0)
        , debugregsvcapidll(0)
        , declaredconfigurationdll(0)
        , DefaultDeviceManagerdll(0)
        , DefaultPrinterProviderdll(0)
        , defragproxydll(0)
        , defragresdll(0)
        , defragsvcdll(0)
        , delegatorproviderdll(0)
        , deploymentcspsdll(0)
        , deskadpdll(0)
        , deskmondll(0)
        , DesktopShellAppStateContractdll(0)
        , DesktopShellExtdll(0)
        , DesktopSwitcherDataModeldll(0)
        , DesktopViewInternalBrokerdll(0)
        , DesktopViewInternalBrokerProxyStubdll(0)
        , DevDispItemProviderdll(0)
        , DeveloperOptionsSettingsHandlersdll(0)
        , DeveloperSetupCSPdll(0)
        , DeveloperToolsProxyStubdll(0)
        , DeveloperToolsMgrdll(0)
        , devenumdll(0)
        , deviceaccessdll(0)
        , deviceassociationdll(0)
        , DeviceCenterdll(0)
        , DeviceCompanionAppInstalldll(0)
        , DeviceCredentialdll(0)
        , DeviceDirectoryClientdll(0)
        , DeviceDisplayStatusManagerdll(0)
        , DeviceDriverRetrievalClientdll(0)
        , DeviceElementSourcedll(0)
        , DeviceFlowsDataModeldll(0)
        , DeviceMetadataRetrievalClientdll(0)
        , devicengccredprovdll(0)
        , DevicePairingdll(0)
        , DevicePairingExperienceMEMdll(0)
        , DevicePairingFolderdll(0)
        , DevicePairingProxydll(0)
        , DeviceReactivationdll(0)
        , deviceregistrationdll(0)
        , DeviceSetupManagerdll(0)
        , DeviceSetupManagerAPIdll(0)
        , DeviceSetupStatusProviderdll(0)
        , DevicesFlowBrokerdll(0)
        , DeviceSoftwareInstallationClientdll(0)
        , DeviceUpdateAgentdll(0)
        , DeviceUpdateCenterCspdll(0)
        , DeviceUxResdll(0)
        , devinvdll(0)
        , devmgrdll(0)
        , devobjdll(0)
        , DevPropMgrdll(0)
        , DevQueryBrokerdll(0)
        , devrtldll(0)
        , dfdtsdll(0)
        , dfsclidll(0)
        , dfshimdll(0)
        , DfsShlExdll(0)
        , dggpextdll(0)
        , dhcpcmonitordll(0)
        , dhcpcoredll(0)
        , dhcpcore6dll(0)
        , dhcpcsvcdll(0)
        , dhcpcsvc6dll(0)
        , dhcpsapidll(0)
        , DHolographicDisplaydll(0)
        , DiagCpldll(0)
        , diagnosticdataquerydll(0)
        , DiagnosticDataSettingsdll(0)
        , DiagnosticInvokerdll(0)
        , DiagnosticLogCSPdll(0)
        , diagperfdll(0)
        , DiagSvcdll(0)
        , diagtrackdll(0)
        , dialclientdll(0)
        , DialogBlockerProcdll(0)
        , DialogBlockingManagerdll(0)
        , DialogBlockingServicedll(0)
        , dialserverdll(0)
        , DictationManagerdll(0)
        , difxapidll(0)
        , dimsjobdll(0)
        , dimsroamdll(0)
        , dinputdll(0)
        , dinput8dll(0)
        , Direct2DDesktopdll(0)
        , directmanipulationdll(0)
        , DirectMLDebugdll(0)
        , directmldll(0)
        , directxdatabasehelperdll(0)
        , discandll(0)
        , DismApidll(0)
        , DispBrokerDesktopdll(0)
        , DispBrokerdll(0)
        , dispexdll(0)
        , Displaydll(0)
        , DisplayManagerdll(0)
        , dlnashextdll(0)
        , DMAlertListenerProxyStubdll(0)
        , DmApiSetExtImplDesktopdll(0)
        , DMAppsResdll(0)
        , dmcfgutilsdll(0)
        , dmcmnutilsdll(0)
        , dmcommandlineutilsdll(0)
        , dmcspsdll(0)
        , dmdlgsdll(0)
        , dmdskmgrdll(0)
        , dmdskresdll(0)
        , dmdskres2dll(0)
        , dmenrollenginedll(0)
        , dmenterprisediagnosticsdll(0)
        , dmintfdll(0)
        , dmiso8601utilsdll(0)
        , dmloaderdll(0)
        , dmocxdll(0)
        , dmoleaututilsdll(0)
        , dmprocessxmlfiltereddll(0)
        , dmpushproxydll(0)
        , DMPushRouterCoredll(0)
        , DMRCDecoderdll(0)
        , DMRServerdll(0)
        , dmsynthdll(0)
        , dmusicdll(0)
        , dmutildll(0)
        , dmvdsitfdll(0)
        , dmwappushsvcdll(0)
        , dmwmicspdll(0)
        , dmxmlhelputilsdll(0)
        , dnsapidll(0)
        , dnscmmcdll(0)
        , dnsextdll(0)
        , dnshcdll(0)
        , dnsrslvrdll(0)
        , DockingVirtualInputdll(0)
        , DockInterfaceProxyStubdll(0)
        , doclientdll(0)
        , docpropdll(0)
        , DocumentPerformanceEventsdll(0)
        , DolbyDecMFTdll(0)
        , domgmtdll(0)
        , domiprovdll(0)
        , dosettingsdll(0)
        , dosvcdll(0)
        , dot3apidll(0)
        , dot3cfgdll(0)
        , Dot3Conndll(0)
        , dot3dlgdll(0)
        , dot3gpclntdll(0)
        , dot3gpuidll(0)
        , dot3hcdll(0)
        , dot3mmdll(0)
        , dot3msmdll(0)
        , dot3svcdll(0)
        , dot3uidll(0)
        , dpapidll(0)
        , dpapiproviderdll(0)
        , dpapisrvdll(0)
        , dplcspdll(0)
        , dpnaddrdll(0)
        , dpnathlpdll(0)
        , dpnetdll(0)
        , dpnhpastdll(0)
        , dpnhupnpdll(0)
        , dpnlobbydll(0)
        , dpsdll(0)
        , dpxdll(0)
        , DragDropExperienceCommondll(0)
        , DragDropExperienceDataExchangeDelegateddll(0)
        , drprovdll(0)
        , drtdll(0)
        , drtprovdll(0)
        , drttransportdll(0)
        , drvsetupdll(0)
        , drvstoredll(0)
        , dsauthdll(0)
        , DscCoredll(0)
        , DscCoreConfProvdll(0)
        , dsclientdll(0)
        , dscproxydll(0)
        , DscTimerdll(0)
        , dsdmodll(0)
        , dskquotadll(0)
        , dskquouidll(0)
        , dsounddll(0)
        , dsparsedll(0)
        , dspropdll(0)
        , dsquerydll(0)
        , dsregdll(0)
        , dsregtaskdll(0)
        , dsroledll(0)
        , dssecdll(0)
        , dssenhdll(0)
        , dssvcdll(0)
        , Dsuidll(0)
        , dsuiextdll(0)
        , dswavedll(0)
        , dtshdll(0)
        , DuCspsdll(0)
        , dui70dll(0)
        , duserdll(0)
        , dusmapidll(0)
        , dusmsvcdll(0)
        , dwmapidll(0)
        , dwmcoredll(0)
        , dwmghostdll(0)
        , dwminitdll(0)
        , dwmredirdll(0)
        , dwmscenedll(0)
        , DWritedll(0)
        , DXCaptureReplaydll(0)
        , DXCoredll(0)
        , dxdiagndll(0)
        , dxgidll(0)
        , DXGIDebugdll(0)
        , dxgwdidll(0)
        , dxilconvdll(0)
        , DXPdll(0)
        , dxppsdll(0)
        , DxpTaskSyncdll(0)
        , dxtmsftdll(0)
        , DXToolsMonitordll(0)
        , DXToolsOfflineAnalysisdll(0)
        , DxToolsReportGeneratordll(0)
        , DXToolsReportingdll(0)
        , dxtransdll(0)
        , dxva2dll(0)
        , dynamoapidll(0)
        , EAMProgressHandlerdll(0)
        , eapp3hstdll(0)
        , eappcfgdll(0)
        , eappcfguidll(0)
        , eappgnuidll(0)
        , eapphostdll(0)
        , eappprxydll(0)
        , eapprovpdll(0)
        , eapputildll(0)
        , eapsimextdesktopdll(0)
        , eapsvcdll(0)
        , EapTeapAuthdll(0)
        , EapTeapConfigdll(0)
        , EapTeapExtdll(0)
        , easconsentdll(0)
        , easinvokerproxystubdll(0)
        , EasPolicyManagerBrokerPSdll(0)
        , easwrtdll(0)
        , edgeangledll(0)
        , EdgeContentdll(0)
        , edgehtmldll(0)
        , edgeIsodll(0)
        , EdgeManagerdll(0)
        , EdgeResetPlugindll(0)
        , EditBufferTestHookdll(0)
        , EditionUpgradeHelperdll(0)
        , EditionUpgradeManagerObjdll(0)
        , edpauditapidll(0)
        , edpcspdll(0)
        , edptaskdll(0)
        , edputildll(0)
        , eeprovdll(0)
        , eeutildll(0)
        , efsadudll(0)
        , efscoredll(0)
        , efsextdll(0)
        , efslsaextdll(0)
        , efssvcdll(0)
        , efsutildll(0)
        , efswrtdll(0)
        , EhStorAPIdll(0)
        , EhStorPwdMgrdll(0)
        , EhStorShelldll(0)
        , elsdll(0)
        , ELSCoredll(0)
        , elshyphdll(0)
        , elsladdll(0)
        , elsTransdll(0)
        , EmailApisdll(0)
        , embeddedmodesvcdll(0)
        , embeddedmodesvcapidll(0)
        , EmojiDSdll(0)
        , encapidll(0)
        , energydll(0)
        , energyprovdll(0)
        , energytaskdll(0)
        , enrollmentapidll(0)
        , EnterpriseAPNCspdll(0)
        , EnterpriseAppMgmtClientdll(0)
        , EnterpriseAppMgmtSvcdll(0)
        , EnterpriseAppVMgmtCSPdll(0)
        , enterprisecspsdll(0)
        , EnterpriseDesktopAppMgmtCSPdll(0)
        , enterpriseetwdll(0)
        , EnterpriseModernAppMgmtCSPdll(0)
        , enterpriseresourcemanagerdll(0)
        , eqossnapdll(0)
        , ErrorDetailsdll(0)
        , ErrorDetailsCoredll(0)
        , esdll(0)
        , EsclProtocoldll(0)
        , EsclScandll(0)
        , EsclWiaDriverdll(0)
        , EsdSipdll(0)
        , esentdll(0)
        , esentprfdll(0)
        , esevssdll(0)
        , eShimsdll(0)
        , EthernetMediaManagerdll(0)
        , ETWCoreUIComponentsResourcesdll(0)
        , ETWESEProviderResourcesdll(0)
        , EtwRundowndll(0)
        , eUICCsCSPdll(0)
        , EventAggregationdll(0)
        , eventclsdll(0)
        , evrdll(0)
        , ExecModelClientdll(0)
        , execmodelproxydll(0)
        , ExplorerFramedll(0)
        , ExSMimedll(0)
        , ExtrasXmlParserdll(0)
        , f1db7d81_95be_4911_935a_8ab71629112a_HyperV_IsolatedVMdll(0)
        , f3ahvoasdll(0)
        , f989b52d_f928_44a3_9bf1_bf0c1da6a0d6_HyperV_DeviceVirtualizationdll(0)
        , facecredentialproviderdll(0)
        , Facilitatordll(0)
        , FamilyAuthenticationdll(0)
        , FamilyCachedll(0)
        , FamilyClientdll(0)
        , FamilySyncEnginedll(0)
        , FamilySafetyExtdll(0)
        , Faultrepdll(0)
        , FaxPrinterInstallerdll(0)
        , fcondll(0)
        , fdBthdll(0)
        , fdBthProxydll(0)
        , FdDevQuerydll(0)
        , fdedll(0)
        , fdeploydll(0)
        , fdPHostdll(0)
        , fdPnpdll(0)
        , fdprintdll(0)
        , fdProxydll(0)
        , FDResPubdll(0)
        , fdSSDPdll(0)
        , fdWCNdll(0)
        , fdWNetdll(0)
        , fdWSDdll(0)
        , feclientdll(0)
        , ffbrokerdll(0)
        , fhcatdll(0)
        , fhcfgdll(0)
        , fhcleanupdll(0)
        , fhcpldll(0)
        , fhenginedll(0)
        , fheventsdll(0)
        , fhsettingsproviderdll(0)
        , fhshldll(0)
        , fhsrchapidll(0)
        , fhsrchphdll(0)
        , fhsvcdll(0)
        , fhsvcctldll(0)
        , fhtaskdll(0)
        , fhuxadapterdll(0)
        , fhuxapidll(0)
        , fhuxcommondll(0)
        , fhuxgraphicsdll(0)
        , fhuxpresentationdll(0)
        , fidocredprovdll(0)
        , FileAppxStreamingDataSourcedll(0)
        , filemgmtdll(0)
        , FilterDSdll(0)
        , findnetprintersdll(0)
        , fingerprintcredentialdll(0)
        , FirewallAPIdll(0)
        , FirewallControlPaneldll(0)
        , FirewallUXdll(0)
        , FirmwareAttestationServerProxyStubdll(0)
        , FlightSettingsdll(0)
        , fltLibdll(0)
        , FluencyDSdll(0)
        , fmapidll(0)
        , fmifsdll(0)
        , fmsdll(0)
        , FntCachedll(0)
        , fontextdll(0)
        , FontGlyphAnimatordll(0)
        , fontgroupsoverridedll(0)
        , FontProviderdll(0)
        , fontsubdll(0)
        , fphcdll(0)
        , framedyndll(0)
        , framedynosdll(0)
        , FrameServerdll(0)
        , FrameServerClientdll(0)
        , FrameServerMonitordll(0)
        , FrameServerMonitorClientdll(0)
        , frprovdll(0)
        , FsNVSDeviceSourcedll(0)
        , fsutilextdll(0)
        , fthsvcdll(0)
        , fundiscdll(0)
        , fveapidll(0)
        , fveapibasedll(0)
        , fvecertsdll(0)
        , fvecpldll(0)
        , fveskybackupdll(0)
        , fveuidll(0)
        , fvewizdll(0)
        , FvSDK_x64dll(0)
        , fwbasedll(0)
        , fwcfgdll(0)
        , fwmdmcspdll(0)
        , fwpolicyiomgrdll(0)
        , FwRemoteSvrdll(0)
        , GameBarPresenceWriterproxydll(0)
        , GameChatOverlayExtdll(0)
        , GameChatTranscriptiondll(0)
        , GameInputdll(0)
        , GameInputInboxdll(0)
        , gamemodedll(0)
        , GamePanelExternalHookdll(0)
        , gamestreamingextdll(0)
        , gameuxdll(0)
        , gamingtcuidll(0)
        , gcdefdll(0)
        , gdi32dll(0)
        , gdi32fulldll(0)
        , GdiPlusdll(0)
        , generalteldll(0)
        , Geocommondll(0)
        , Geolocationdll(0)
        , getunamedll(0)
        , glmf32dll(0)
        , globinputhostdll(0)
        , glu32dll(0)
        , gmsaclientdll(0)
        , gpapidll(0)
        , GPCSEWrapperCspdll(0)
        , gpeditdll(0)
        , gpprefcldll(0)
        , gpprnextdll(0)
        , gpscriptdll(0)
        , gpsvcdll(0)
        , gptextdll(0)
        , gpupvdevdll(0)
        , GraphicsCapturedll(0)
        , GraphicsPerfSvcdll(0)
        , Groupinghcdll(0)
        , haldll(0)
        , HalExtIntcLpioDMAdll(0)
        , HalExtIntcPseDMAdll(0)
        , HalExtPL080dll(0)
        , HanjaDSdll(0)
        , hascspdll(0)
        , HashtagDSdll(0)
        , hbaapidll(0)
        , hcprovidersdll(0)
        , HdcpHandlerdll(0)
        , HeatCoredll(0)
        , HelpPaneProxydll(0)
        , hgattestdll(0)
        , hgclientservicedll(0)
        , hgclientservicepsdll(0)
        , hgcpldll(0)
        , hgsclientplugindll(0)
        , HgsClientWmidll(0)
        , hhsetupdll(0)
        , hiddll(0)
        , HidCfudll(0)
        , hidservdll(0)
        , hlinkdll(0)
        , hmkddll(0)
        , hnetcfgdll(0)
        , HNetCfgClientdll(0)
        , hnetmondll(0)
        , hnsproxydll(0)
        , HologramCompositordll(0)
        , HologramWorlddll(0)
        , HolographicExtensionsdll(0)
        , HolographicRuntimesdll(0)
        , HoloShellRuntimedll(0)
        , HoloSHExtensionsdll(0)
        , HoloSIPCShelldll(0)
        , HostGuardianServiceClientResourcesdll(0)
        , HostNetSvcdll(0)
        , hotplugdll(0)
        , HrtfApodll(0)
        , HrtfDspCpudll(0)
        , hspapidll(0)
        , hspfwdll(0)
        , httpapidll(0)
        , httpprxcdll(0)
        , httpprxmdll(0)
        , httpprxpdll(0)
        , HttpsDataSourcedll(0)
        , htuidll(0)
        , hvhostsvcdll(0)
        , hvloaderdll(0)
        , hvsigpextdll(0)
        , HvsiManagementApidll(0)
        , HvSocketdll(0)
        , hwreqchkdll(0)
        , Hydrogendll(0)
        , HyperVSysprepProviderdll(0)
        , IA2ComProxydll(0)
        , iasdll(0)
        , iasacctdll(0)
        , iasadsdll(0)
        , iasdatastoredll(0)
        , iashlprdll(0)
        , IasMigPlugindll(0)
        , iasnapdll(0)
        , iaspolcydll(0)
        , iasraddll(0)
        , iasrecstdll(0)
        , iassamdll(0)
        , iassdodll(0)
        , iassvcsdll(0)
        , icfupgddll(0)
        , icm32dll(0)
        , icmpdll(0)
        , icmuidll(0)
        , IconCodecServicedll(0)
        , icsigddll(0)
        , icsvcdll(0)
        , icsvcextdll(0)
        , icsvcvssdll(0)
        , icudll(0)
        , icuindll(0)
        , icuucdll(0)
        , IdCtrlsdll(0)
        , IDStoredll(0)
        , IEAdvpackdll(0)
        , ieapfltrdll(0)
        , iedkcs32dll(0)
        , ieframedll(0)
        , iemigplugindll(0)
        , iepeersdll(0)
        , ieproxydll(0)
        , IEProxyDesktopdll(0)
        , iernoncedll(0)
        , iertutildll(0)
        , iesetupdll(0)
        , iesysprepdll(0)
        , ieuidll(0)
        , ifmondll(0)
        , ifsutildll(0)
        , ifsutilxdll(0)
        , igdDiagdll(0)
        , IHDSdll(0)
        , iisrstapdll(0)
        , iisRtldll(0)
        , imagehlpdll(0)
        , imageresdll(0)
        , imagesp1dll(0)
        , imapidll(0)
        , imapi2dll(0)
        , imapi2fsdll(0)
        , ime_textinputhelpersdll(0)
        , imgutildll(0)
        , imm32dll(0)
        , ImplatSetupdll(0)
        , IndexedDbLegacydll(0)
        , inetcommdll(0)
        , inetmib1dll(0)
        , INETRESdll(0)
        , InkEddll(0)
        , InkObjCoredll(0)
        , InprocLoggerdll(0)
        , inputdll(0)
        , InputCloudStoredll(0)
        , InputControllerdll(0)
        , InputHostdll(0)
        , InputInjectionBrokerdll(0)
        , InputLocaleManagerdll(0)
        , InputServicedll(0)
        , InputSwitchdll(0)
        , InputViewExperiencedll(0)
        , insengdll(0)
        , InstallServicedll(0)
        , InstallServiceTasksdll(0)
        , IntelIHVRouter08dll(0)
        , IntelligentPwdlessTaskdll(0)
        , intel_gfx_api_x64dll(0)
        , internetmaildll(0)
        , InternetMailCspdll(0)
        , invagentdll(0)
        , InventorySvcdll(0)
        , iologmsgdll(0)
        , IoTAssignedAccessLockFrameworkdll(0)
        , IPELoggingDictationHelperdll(0)
        , iphlpsvcdll(0)
        , ipnathlpdll(0)
        , IpNatHlpClientdll(0)
        , IppCommondll(0)
        , IppCommonProxydll(0)
        , iprtpriodll(0)
        , iprtrmgrdll(0)
        , ipsecsnpdll(0)
        , ipsmsnapdll(0)
        , ipxlatcfgdll(0)
        , iridll(0)
        , iscsicpldll(0)
        , iscsidscdll(0)
        , iscsieddll(0)
        , iscsiexedll(0)
        , iscsilogdll(0)
        , iscsiumdll(0)
        , iscsiwmidll(0)
        , iscsiwmiv2dll(0)
        , ISMdll(0)
        , itircldll(0)
        , itssdll(0)
        , iuilpdll(0)
        , iumbasedll(0)
        , iumcryptdll(0)
        , iumdlldll(0)
        , IumSdkdll(0)
        , iyuv_32dll(0)
        , JavaScriptCollectionAgentdll(0)
        , JHI64dll(0)
        , joinprovideroldll(0)
        , joinutildll(0)
        , JpMapControldll(0)
        , jpndecoderdll(0)
        , jpninputrouterdll(0)
        , jpnrankerdll(0)
        , JpnServiceDSdll(0)
        , jscriptdll(0)
        , jscript9dll(0)
        , jscript9diagdll(0)
        , jscript9Legacydll(0)
        , jsproxydll(0)
        , kbd101dll(0)
        , kbd101adll(0)
        , kbd101bdll(0)
        , kbd101cdll(0)
        , kbd103dll(0)
        , kbd106dll(0)
        , kbd106ndll(0)
        , kbdarmphdll(0)
        , kbdarmtydll(0)
        , kbdax2dll(0)
        , kbdfardll(0)
        , kbdgeoerdll(0)
        , kbdgeomedll(0)
        , kbdgeooadll(0)
        , kbdgeoqwdll(0)
        , kbdhebl3dll(0)
        , kbdibm02dll(0)
        , kbdlisubdll(0)
        , kbdlisusdll(0)
        , kbdlk41adll(0)
        , kbdnecdll(0)
        , kbdnec95dll(0)
        , kbdnecatdll(0)
        , kbdnecntdll(0)
        , kbdnkodll(0)
        , kbdphagsdll(0)
        , kddll(0)
        , kdcomdll(0)
        , kdcpwdll(0)
        , kdhvcomdll(0)
        , kdnetdll(0)
        , kdnet_uart16550dll(0)
        , KdsClidll(0)
        , kdstubdll(0)
        , kdusbdll(0)
        , kd_02_10dfdll(0)
        , kd_02_10ecdll(0)
        , kd_02_1137dll(0)
        , kd_02_14e4dll(0)
        , kd_02_15b3dll(0)
        , kd_02_1969dll(0)
        , kd_02_19a2dll(0)
        , kd_02_1af4dll(0)
        , kd_02_8086dll(0)
        , kd_07_1415dll(0)
        , kd_0C_8086dll(0)
        , keepaliveproviderdll(0)
        , KerbClientShareddll(0)
        , kerberosdll(0)
        , kernelappcoredll(0)
        , KernelBasedll(0)
        , KeyboardFilterCoredll(0)
        , KeyboardFilterManagerdll(0)
        , KeyboardFilterShimdll(0)
        , KeyboardFilterSvcdll(0)
        , KeyCredMgrdll(0)
        , keyisodll(0)
        , keymgrdll(0)
        , KeywordDetectorMsftSidAdapterdll(0)
        , KnobsCoredll(0)
        , KnobsCspdll(0)
        , ksuserdll(0)
        , ktmw32dll(0)
        , l2gpstoredll(0)
        , l2nacpdll(0)
        , L2SecHCdll(0)
        , LangCleanupSysprepActiondll(0)
        , LanguageComponentsInstallerdll(0)
        , LanguageOverlayServerdll(0)
        , LanguageOverlayUtildll(0)
        , LanguagePackDiskCleanupdll(0)
        , LanguagePackManagementCSPdll(0)
        , lapsdll(0)
        , lapscspdll(0)
        , LegacyNetUXdll(0)
        , LegacySystemSettingsdll(0)
        , lfsvcdll(0)
        , libcryptodll(0)
        , libmfxhw64dll(0)
        , libomp140x86_64dll(0)
        , libomp140dx86_64dll(0)
        , LicenseManagerdll(0)
        , LicenseManagerApidll(0)
        , LicenseManagerSvcdll(0)
        , licenseprotectiondll(0)
        , LicensingCSPdll(0)
        , LicensingDiagSppdll(0)
        , LicensingWinRTdll(0)
        , licmgr10dll(0)
        , linkinfodll(0)
        , lltdapidll(0)
        , lltdresdll(0)
        , lltdsvcdll(0)
        , lmhsvcdll(0)
        , loadperfdll(0)
        , localsecdll(0)
        , localspldll(0)
        , localuidll(0)
        , LocationApidll(0)
        , LocationFrameworkdll(0)
        , LocationFrameworkInternalPSdll(0)
        , LocationFrameworkPSdll(0)
        , LocationWinPalMiscdll(0)
        , LockAppBrokerdll(0)
        , LockControllerdll(0)
        , LockHostingFrameworkdll(0)
        , LockScreenContentdll(0)
        , LockScreenContentHostdll(0)
        , LockScreenDatadll(0)
        , loghoursdll(0)
        , logonclidll(0)
        , LogonControllerdll(0)
        , lpasvcdll(0)
        , lpkdll(0)
        , lpksetupproxyservdll(0)
        , lsaadtdll(0)
        , lsasrvdll(0)
        , LSCSHostPolicydll(0)
        , lsmdll(0)
        , lsmproxydll(0)
        , lstelemetrydll(0)
        , luiapidll(0)
        , lxutildll(0)
        , lz32dll(0)
        , Magnificationdll(0)
        , MaintenanceUIdll(0)
        , ManageCIdll(0)
        , MapConfigurationdll(0)
        , MapControlCoredll(0)
        , MapControlStringsResdll(0)
        , MapGeocoderdll(0)
        , mapi32dll(0)
        , mapistubdll(0)
        , MapRouterdll(0)
        , MapsBtSvcdll(0)
        , MapsBtSvcProxydll(0)
        , MapsCSPdll(0)
        , MapsStoredll(0)
        , mapstoasttaskdll(0)
        , mapsupdatetaskdll(0)
        , MbaeApidll(0)
        , MbaeApiPublicdll(0)
        , MBMediaManagerdll(0)
        , mbsmsapidll(0)
        , mbussdapidll(0)
        , MCCSEngineShareddll(0)
        , MCCSPaldll(0)
        , mciavi32dll(0)
        , mcicdadll(0)
        , mciqtz32dll(0)
        , mciseqdll(0)
        , mciwavedll(0)
        , McpManagementProxydll(0)
        , McpManagementServicedll(0)
        , MCRecvSrcdll(0)
        , mcupdate_AuthenticAMDdll(0)
        , mcupdate_GenuineInteldll(0)
        , MdmCommondll(0)
        , MdmDiagnosticsdll(0)
        , mdminstdll(0)
        , mdmlocalmanagementdll(0)
        , mdmmigratordll(0)
        , mdmpostprocessevaluatordll(0)
        , mdmregistrationdll(0)
        , MediaFoundationDefaultPerceptionProviderdll(0)
        , MediaFoundationAggregatordll(0)
        , MemoryDiagnosticdll(0)
        , MessagingDataModel2dll(0)
        , MessagingServicedll(0)
        , mfdll(0)
        , mf3216dll(0)
        , mfAACEncdll(0)
        , mfasfsrcsnkdll(0)
        , mfaudiocnvdll(0)
        , mfc100dll(0)
        , mfc100chsdll(0)
        , mfc100chtdll(0)
        , mfc100deudll(0)
        , mfc100enudll(0)
        , mfc100esndll(0)
        , mfc100fradll(0)
        , mfc100itadll(0)
        , mfc100jpndll(0)
        , mfc100kordll(0)
        , mfc100rusdll(0)
        , mfc100udll(0)
        , mfc110dll(0)
        , mfc110chsdll(0)
        , mfc110chtdll(0)
        , mfc110deudll(0)
        , mfc110enudll(0)
        , mfc110esndll(0)
        , mfc110fradll(0)
        , mfc110itadll(0)
        , mfc110jpndll(0)
        , mfc110kordll(0)
        , mfc110rusdll(0)
        , mfc110udll(0)
        , mfc120dll(0)
        , mfc120chsdll(0)
        , mfc120chtdll(0)
        , mfc120deudll(0)
        , mfc120enudll(0)
        , mfc120esndll(0)
        , mfc120fradll(0)
        , mfc120itadll(0)
        , mfc120jpndll(0)
        , mfc120kordll(0)
        , mfc120rusdll(0)
        , mfc120udll(0)
        , mfc140dll(0)
        , mfc140chsdll(0)
        , mfc140chtdll(0)
        , mfc140ddll(0)
        , mfc140deudll(0)
        , mfc140enudll(0)
        , mfc140esndll(0)
        , mfc140fradll(0)
        , mfc140itadll(0)
        , mfc140jpndll(0)
        , mfc140kordll(0)
        , mfc140rusdll(0)
        , mfc140udll(0)
        , mfc140uddll(0)
        , mfc42dll(0)
        , mfc42udll(0)
        , MFCaptureEnginedll(0)
        , mfcm100dll(0)
        , mfcm100udll(0)
        , mfcm110dll(0)
        , mfcm110udll(0)
        , mfcm120dll(0)
        , mfcm120udll(0)
        , mfcm140dll(0)
        , mfcm140ddll(0)
        , mfcm140udll(0)
        , mfcm140uddll(0)
        , mfcoredll(0)
        , mfcsubsdll(0)
        , mfdsdll(0)
        , mfdvdecdll(0)
        , mferrordll(0)
        , mfh263encdll(0)
        , mfh264encdll(0)
        , mfksproxydll(0)
        , MFMediaEnginedll(0)
        , mfmjpegdecdll(0)
        , mfmkvsrcsnkdll(0)
        , mfmp4srcsnkdll(0)
        , mfmpeg2srcsnkdll(0)
        , mfnetcoredll(0)
        , mfnetsrcdll(0)
        , mfperfhelperdll(0)
        , mfplatdll(0)
        , MFPlaydll(0)
        , mfpsdll(0)
        , mfreadwritedll(0)
        , mfsensorgroupdll(0)
        , mfsrcsnkdll(0)
        , mfsvrdll(0)
        , mftranscodedll(0)
        , mfvdspdll(0)
        , mfvfwdll(0)
        , mfxplugin64_hwdll(0)
        , mfx_mft_encrypt_64dll(0)
        , mfx_mft_h264ve_64dll(0)
        , mfx_mft_h265ve_64dll(0)
        , mfx_mft_mjpgvd_64dll(0)
        , mfx_mft_vp9ve_64dll(0)
        , mgmtapidll(0)
        , mgmtrefreshcredprovdll(0)
        , midll(0)
        , mibincodecdll(0)
        , Microsoft_Windows_AppModelExecEventsdll(0)
        , microsoft_windows_battery_eventsdll(0)
        , microsoft_windows_hal_eventsdll(0)
        , Microsoft_Windows_Internal_Shell_NearShareExperiencedll(0)
        , microsoft_windows_kernel_cc_eventsdll(0)
        , microsoft_windows_kernel_pnp_eventsdll(0)
        , microsoft_windows_kernel_power_eventsdll(0)
        , microsoft_windows_kernel_processor_power_eventsdll(0)
        , Microsoft_Windows_MapControlsdll(0)
        , Microsoft_Windows_MosHostdll(0)
        , microsoft_windows_pdcdll(0)
        , microsoft_windows_power_cad_eventsdll(0)
        , microsoft_windows_processor_aggregator_eventsdll(0)
        , microsoft_windows_sleepstudy_eventsdll(0)
        , microsoft_windows_storage_tiering_eventsdll(0)
        , microsoft_windows_system_eventsdll(0)
        , Microsoft_WindowsPhone_SEManagementProviderdll(0)
        , MicrosoftBluetoothAudiodll(0)
        , MicrosoftBluetoothProxydll(0)
        , MicrosoftBluetoothServicedll(0)
        , MicrosoftBluetoothUserServicedll(0)
        , MicrosoftGraphicsDisplayDisplayEnhancementServicedll(0)
        , MicrosoftInternalFrameworkUdkSystemdll(0)
        , MicrosoftLocalUserImageProviderdll(0)
        , MicrosoftManagementInfrastructureNativeUnmanageddll(0)
        , MicrosoftUevAgentDriverEventsdll(0)
        , MicrosoftUevAppAgentdll(0)
        , MicrosoftUevCabUtildll(0)
        , MicrosoftUevCmUtildll(0)
        , MicrosoftUevCommondll(0)
        , MicrosoftUevCommonWinRTdll(0)
        , MicrosoftUevCommonBridgedll(0)
        , MicrosoftUevConfigWrapperdll(0)
        , MicrosoftUevEventLogMessagesdll(0)
        , MicrosoftUevLocalSyncProviderdll(0)
        , MicrosoftUevManagedEventLoggingdll(0)
        , MicrosoftUevManagementdll(0)
        , MicrosoftUevManagementWmiAccessdll(0)
        , MicrosoftUevModernAppAgentdll(0)
        , MicrosoftUevModernAppCoredll(0)
        , MicrosoftUevModernAppDataWinRTdll(0)
        , MicrosoftUevModernSyncdll(0)
        , MicrosoftUevMonitorSyncProviderdll(0)
        , MicrosoftUevOffice2010CustomActionsdll(0)
        , MicrosoftUevOffice2013CustomActionsdll(0)
        , MicrosoftUevPrinterCustomActionsdll(0)
        , MicrosoftUevSmbSyncProviderdll(0)
        , MicrosoftUevSyncCommondll(0)
        , MicrosoftUevSyncConditionsdll(0)
        , MicrosoftWindowsStorageCoredll(0)
        , MicrosoftWindowsStorageStorageBusCachedll(0)
        , MicrosoftAccountTokenProviderCoredll(0)
        , MicrosoftAccountCloudAPdll(0)
        , MicrosoftAccountExtensiondll(0)
        , MicrosoftAccountTokenProviderdll(0)
        , MicrosoftAccountWAMExtensiondll(0)
        , midimapdll(0)
        , migisoldll(0)
        , miguiresourcedll(0)
        , mimefiltdll(0)
        , mimofcodecdll(0)
        , MinstoreEventsdll(0)
        , MiracastInputMgrdll(0)
        , MiracastReceiverdll(0)
        , MiracastReceiverExtdll(0)
        , MirrorDrvCompatdll(0)
        , mispacedll(0)
        , MitigationClientdll(0)
        , MitigationConfigurationdll(0)
        , miutilsdll(0)
        , MixedRealityBrokerdll(0)
        , MixedRealityCapturePipelinedll(0)
        , MixedRealityCaptureProxyStubdll(0)
        , MixedRealityRuntimedll(0)
        , mlangdll(0)
        , mmcbasedll(0)
        , mmcndmgrdll(0)
        , mmcshextdll(0)
        , MMDevAPIdll(0)
        , mmgaclientdll(0)
        , mmgaproxystubdll(0)
        , mmresdll(0)
        , mobilenetworkingdll(0)
        , modemuidll(0)
        , modernexecserverdll(0)
        , moriconsdll(0)
        , moshostdll(0)
        , MosHostClientdll(0)
        , moshostcoredll(0)
        , MosStoragedll(0)
        , mpevaldll(0)
        , mprdll(0)
        , mprapidll(0)
        , mprddmdll(0)
        , mprdimdll(0)
        , mprextdll(0)
        , mprmsgdll(0)
        , MPSSVCdll(0)
        , mpunitsdll(0)
        , MrmCoreRdll(0)
        , MrmDeploydll(0)
        , MrmIndexerdll(0)
        , mrt100dll(0)
        , mrt_mapdll(0)
        , ms3dthumbnailproviderdll(0)
        , msaatextdll(0)
        , msacm32dll(0)
        , msafddll(0)
        , MSAJApidll(0)
        , MSAlacDecoderdll(0)
        , MSAlacEncoderdll(0)
        , MSAMRNBDecoderdll(0)
        , MSAMRNBEncoderdll(0)
        , MSAMRNBSinkdll(0)
        , MSAMRNBSourcedll(0)
        , MsApoFxProxydll(0)
        , MSAProfileNotificationHandlerdll(0)
        , msasn1dll(0)
        , MSAudDecMFTdll(0)
        , msauditedll(0)
        , msauserextdll(0)
        , mscanduidll(0)
        , mscat32dll(0)
        , msclmddll(0)
        , mscmsdll(0)
        , mscoreedll(0)
        , mscorierdll(0)
        , mscoriesdll(0)
        , msctfdll(0)
        , MsCtfMonitordll(0)
        , msctfpdll(0)
        , msctfuidll(0)
        , msctfuimanagerdll(0)
        , msdadiagdll(0)
        , msdartdll(0)
        , msdeltadll(0)
        , msdmodll(0)
        , msdrmdll(0)
        , msdtckrmdll(0)
        , msdtclogdll(0)
        , msdtcprxdll(0)
        , msdtcspofflndll(0)
        , msdtctmdll(0)
        , msdtcuiudll(0)
        , msdtcVSp1resdll(0)
        , msfeedsdll(0)
        , msfeedsbsdll(0)
        , MSFlacDecoderdll(0)
        , MSFlacEncoderdll(0)
        , msfteditdll(0)
        , MsftOemDllIgneousdll(0)
        , MSHEIFdll(0)
        , mshtmldll(0)
        , MshtmlDacdll(0)
        , mshtmleddll(0)
        , mshtmlerdll(0)
        , msidll(0)
        , MsiCofiredll(0)
        , msidcrl40dll(0)
        , msidentdll(0)
        , msidledll(0)
        , msidntlddll(0)
        , msieftpdll(0)
        , msihnddll(0)
        , msiltcfgdll(0)
        , msimg32dll(0)
        , msimsgdll(0)
        , msimtfdll(0)
        , msisipdll(0)
        , msIsodll(0)
        , msiwerdll(0)
        , MsixDataSourceExtensionPSdll(0)
        , mskeyprotclidll(0)
        , mskeyprotectdll(0)
        , msls31dll(0)
        , msmpeg2adecdll(0)
        , msmpeg2vdecdll(0)
        , msobjsdll(0)
        , msoert2dll(0)
        , MSOpusDecoderdll(0)
        , mspatchadll(0)
        , mspatchcdll(0)
        , MSPhotographydll(0)
        , msportsdll(0)
        , msprivsdll(0)
        , msrahcdll(0)
        , msratingdll(0)
        , MSRAWImagedll(0)
        , MsRdpWebAccessdll(0)
        , msrle32dll(0)
        , msscntrsdll(0)
        , mssecuserdll(0)
        , mssecwfpudll(0)
        , mssign32dll(0)
        , mssip32dll(0)
        , mssitlbdll(0)
        , MsSpellCheckingFacilitydll(0)
        , mssphdll(0)
        , mssprxydll(0)
        , mssrchdll(0)
        , mssvpdll(0)
        , mstaskdll(0)
        , msTextPredictiondll(0)
        , mstscaxdll(0)
        , msutbdll(0)
        , msv1_0dll(0)
        , msvcirtdll(0)
        , msvcp100dll(0)
        , msvcp110dll(0)
        , msvcp110_windll(0)
        , msvcp120dll(0)
        , msvcp120_clr0400dll(0)
        , msvcp140dll(0)
        , msvcp140ddll(0)
        , msvcp140d_atomic_waitdll(0)
        , msvcp140d_codecvt_idsdll(0)
        , msvcp140_1dll(0)
        , msvcp140_1ddll(0)
        , msvcp140_2dll(0)
        , msvcp140_2ddll(0)
        , msvcp140_atomic_waitdll(0)
        , msvcp140_clr0400dll(0)
        , msvcp140_codecvt_idsdll(0)
        , msvcp60dll(0)
        , msvcp_windll(0)
        , msvcr100dll(0)
        , msvcr100_clr0400dll(0)
        , msvcr110dll(0)
        , msvcr120dll(0)
        , msvcr120_clr0400dll(0)
        , msvcrtdll(0)
        , msvfw32dll(0)
        , msvidc32dll(0)
        , MSVidCtldll(0)
        , MSVideoDSPdll(0)
        , MSVP9DECdll(0)
        , msvprocdll(0)
        , MSVPXENCdll(0)
        , MSWB7dll(0)
        , MSWebpdll(0)
        , mswmdmdll(0)
        , mswsockdll(0)
        , msxml3dll(0)
        , msxml3rdll(0)
        , msxml6dll(0)
        , msxml6rdll(0)
        , msyuvdll(0)
        , MtcModeldll(0)
        , MTFdll(0)
        , MTFAppServiceDSdll(0)
        , MtfDecoderdll(0)
        , MTFFuzzyDSdll(0)
        , MTFServerdll(0)
        , MTFSpellcheckDSdll(0)
        , mtxcludll(0)
        , mtxdmdll(0)
        , mtxexdll(0)
        , mtxocidll(0)
        , muifontsetupdll(0)
        , MUILanguageCleanupdll(0)
        , museuxdockeddll(0)
        , MusUpdateHandlersdll(0)
        , mycomputdll(0)
        , mydocsdll(0)
        , NahimicAPO3ConfiguratorDaemonModuledll(0)
        , NahimicAPO4dll(0)
        , NahimicAPO4APIdll(0)
        , NahimicAPO4ConfiguratorDaemonModuledll(0)
        , NahimicAPO4ExpertAPIdll(0)
        , NahimicPnPAPO4ConfiguratorDaemonModuledll(0)
        , NahimicSharedMemorydll(0)
        , NapiNSPdll(0)
        , NaturalAuthdll(0)
        , NaturalAuthClientdll(0)
        , NaturalLanguage6dll(0)
        , navshutdowndll(0)
        , NcaApidll(0)
        , NcaSvcdll(0)
        , ncbservicedll(0)
        , NcdAutoSetupdll(0)
        , NcdPropdll(0)
        , ncidll(0)
        , ncobjapidll(0)
        , ncryptdll(0)
        , ncryptprovdll(0)
        , ncryptsslpdll(0)
        , ncsidll(0)
        , ncuprovdll(0)
        , nddeapidll(0)
        , ndfapidll(0)
        , ndfetwdll(0)
        , ndfhcdiscoverydll(0)
        , ndishcdll(0)
        , ndproxystubdll(0)
        , nduprovdll(0)
        , negoextsdll(0)
        , netapi32dll(0)
        , netbiosdll(0)
        , netcenterdll(0)
        , netcfgxdll(0)
        , netcorehcdll(0)
        , netdiagfxdll(0)
        , NetDriverInstalldll(0)
        , neteventdll(0)
        , netfxperfdll(0)
        , nethdll(0)
        , netiddll(0)
        , netiohlpdll(0)
        , netjoindll(0)
        , netlogondll(0)
        , netmandll(0)
        , NetMgmtIFdll(0)
        , netmsgdll(0)
        , netplwizdll(0)
        , netprofmdll(0)
        , netprofmsvcdll(0)
        , netprovfwdll(0)
        , netprovisionspdll(0)
        , NetSetupApidll(0)
        , NetSetupEnginedll(0)
        , NetSetupShimdll(0)
        , NetSetupSvcdll(0)
        , netshelldll(0)
        , nettracedll(0)
        , netutilsdll(0)
        , NetworkBindingEngineMigPlugindll(0)
        , NetworkCollectionAgentdll(0)
        , NetworkDesktopSettingsdll(0)
        , networkexplorerdll(0)
        , networkhelperdll(0)
        , NetworkIcondll(0)
        , networkitemfactorydll(0)
        , NetworkMobileSettingsdll(0)
        , NetworkProxyCspdll(0)
        , NetworkQoSPolicyCSPdll(0)
        , NetworkUXBrokerdll(0)
        , newdevdll(0)
        , NFCProvisioningPlugindll(0)
        , NfcRadioMediadll(0)
        , ngccredprovdll(0)
        , NgcCtnrdll(0)
        , NgcCtnrGidsHandlerdll(0)
        , NgcCtnrSvcdll(0)
        , NgcIsoCtnrdll(0)
        , ngckeyenumdll(0)
        , ngckspdll(0)
        , ngclocaldll(0)
        , ngcpopkeysrvdll(0)
        , NgcProCspdll(0)
        , ngcrecoverydll(0)
        , ngcsvcdll(0)
        , ngctasksdll(0)
        , ngcutilsdll(0)
        , NhNotifSysdll(0)
        , ninputdll(0)
        , nlaapidll(0)
        , nlahcdll(0)
        , nlansp_cdll(0)
        , nlhtmldll(0)
        , nlmgpdll(0)
        , nlmproxydll(0)
        , nlmsprepdll(0)
        , nlsbresdll(0)
        , NlsData0000dll(0)
        , NlsData0009dll(0)
        , Nlsdldll(0)
        , NlsLexicons0009dll(0)
        , NmaDirectdll(0)
        , noisedll(0)
        , nonarpinvdll(0)
        , normalizdll(0)
        , NotificationControllerdll(0)
        , NotificationControllerPSdll(0)
        , NotificationIntelligencePlatformdll(0)
        , notificationplatformcomponentdll(0)
        , npmproxydll(0)
        , NPSMdll(0)
        , NPSMDesktopProviderdll(0)
        , nrpsrvdll(0)
        , nrtapidll(0)
        , nshhttpdll(0)
        , nshipsecdll(0)
        , nshwfpdll(0)
        , nsidll(0)
        , nsisvcdll(0)
        , ntasn1dll(0)
        , ntdlldll(0)
        , ntdsapidll(0)
        , ntfsresdll(0)
        , ntlanmandll(0)
        , ntlanui2dll(0)
        , NtlmShareddll(0)
        , ntmartadll(0)
        , ntprintdll(0)
        , ntshruidll(0)
        , ntvdm64dll(0)
        , NvAgentdll(0)
        , nvapi64dll(0)
        , nvaudcap64vdll(0)
        , nvcpldll(0)
        , nvcudadll(0)
        , nvcudadebuggerdll(0)
        , nvcuviddll(0)
        , nvEncodeAPI64dll(0)
        , NvFBC64dll(0)
        , NvIFR64dll(0)
        , nvmldll(0)
        , nvofapi64dll(0)
        , NvRtmpStreamer64dll(0)
        , nvspcap64dll(0)
        , objseldll(0)
        , occachedll(0)
        , ocsetapidll(0)
        , odbc32dll(0)
        , odbcbcpdll(0)
        , odbcconfdll(0)
        , odbccp32dll(0)
        , odbccr32dll(0)
        , odbccu32dll(0)
        , odbcintdll(0)
        , odbctracdll(0)
        , OEMDefaultAssociationsdll(0)
        , oemlicensedll(0)
        , offfiltdll(0)
        , officecspdll(0)
        , offlinelsadll(0)
        , offlinesamdll(0)
        , offregdll(0)
        , ole32dll(0)
        , oleaccdll(0)
        , oleacchooksdll(0)
        , oleaccrcdll(0)
        , oleaut32dll(0)
        , oledlgdll(0)
        , oleprndll(0)
        , OmaDmAgentdll(0)
        , omadmapidll(0)
        , OnDemandBrokerClientdll(0)
        , OnDemandConnRouteHelperdll(0)
        , OneBackupHandlerdll(0)
        , OneCoreCommonProxyStubdll(0)
        , OneCoreUAPCommonProxyStubdll(0)
        , OneSettingsClientdll(0)
        , onexdll(0)
        , onexuidll(0)
        , onnxruntimedll(0)
        , OpcServicesdll(0)
        , OpenCLdll(0)
        , opengl32dll(0)
        , Optanedll(0)
        , OptaneEventLogMsgdll(0)
        , ortcenginedll(0)
        , osbaselndll(0)
        , OskSupportdll(0)
        , osuninstdll(0)
        , P2Pdll(0)
        , P2PGraphdll(0)
        , p2pnetshdll(0)
        , p2psvcdll(0)
        , p9npdll(0)
        , p9rdrservicedll(0)
        , packagerdll(0)
        , PackageStateChangeHandlerdll(0)
        , panmapdll(0)
        , PasswordEnrollmentManagerdll(0)
        , pautoenrdll(0)
        , PayloadRestrictionsdll(0)
        , PaymentMediatorServiceProxydll(0)
        , pcaclidll(0)
        , pcadmdll(0)
        , pcaevtsdll(0)
        , pcasvcdll(0)
        , pcauidll(0)
        , PCPKspdll(0)
        , PCShellCommonProxyStubdll(0)
        , pcsvDevicedll(0)
        , pcwumdll(0)
        , pcwutldll(0)
        , pdhdll(0)
        , pdhuidll(0)
        , PeerDistdll(0)
        , PeerDistADdll(0)
        , PeerDistCacheProviderdll(0)
        , PeerDistCleanerdll(0)
        , PeerDistHttpTransdll(0)
        , PeerDistShdll(0)
        , PeerDistSvcdll(0)
        , PeerDistWSDDiscoProvdll(0)
        , PenServicedll(0)
        , PeopleAPIsdll(0)
        , PeopleBanddll(0)
        , PerceptionDevicedll(0)
        , PerceptionSimulationProxyStubsdll(0)
        , PerceptionSimulationManagerdll(0)
        , perfdiskdll(0)
        , perfnetdll(0)
        , perfosdll(0)
        , perfprocdll(0)
        , perftsdll(0)
        , perf_gputimingdll(0)
        , PersonalizationCSPdll(0)
        , pfclientdll(0)
        , PhoneCallHistoryApisdll(0)
        , PhoneOmdll(0)
        , PhonePlatformAbstractiondll(0)
        , PhoneProvidersdll(0)
        , PhoneServicedll(0)
        , PhoneServiceResdll(0)
        , Phoneutildll(0)
        , PhoneutilResdll(0)
        , PhotoMetadataHandlerdll(0)
        , photowizdll(0)
        , PickerPlatformdll(0)
        , piddll(0)
        , pidgenxdll(0)
        , pifmgrdll(0)
        , PimIndexMaintenancedll(0)
        , PimIndexMaintenanceClientdll(0)
        , Pimstoredll(0)
        , PinEnrollmentHelperdll(0)
        , pkeyhelperdll(0)
        , PktMonApidll(0)
        , pku2udll(0)
        , pladll(0)
        , playlistfolderdll(0)
        , PlaySndSrvdll(0)
        , PlayToDevicedll(0)
        , PlayToManagerdll(0)
        , playtomenudll(0)
        , PlayToReceiverdll(0)
        , PlayToStatusProviderdll(0)
        , ploptindll(0)
        , pmcsnapdll(0)
        , pngfiltdll(0)
        , pniduidll(0)
        , pnpcleandll(0)
        , pnpdiagdll(0)
        , pnppolicydll(0)
        , pnptsdll(0)
        , pnpuidll(0)
        , PNPXAssocdll(0)
        , PNPXAssocPrxdll(0)
        , pnrpautodll(0)
        , Pnrphcdll(0)
        , pnrpnspdll(0)
        , pnrpsvcdll(0)
        , policymanagerdll(0)
        , policymanagerprecheckdll(0)
        , polstoredll(0)
        , PortableDeviceApidll(0)
        , PortableDeviceClassExtensiondll(0)
        , PortableDeviceConnectApidll(0)
        , PortableDeviceStatusdll(0)
        , PortableDeviceSyncProviderdll(0)
        , PortableDeviceTypesdll(0)
        , PortableDeviceWiaCompatdll(0)
        , posetupdll(0)
        , POSyncServicesdll(0)
        , potsdll(0)
        , powercpldll(0)
        , powrprofdll(0)
        , ppcsnapdll(0)
        , prauthprovidersdll(0)
        , PresentationCFFRasterizerNative_v0300dll(0)
        , PresentationHostProxydll(0)
        , PresentationNative_v0300dll(0)
        , prflbmsgdll(0)
        , PrintPrintSupportSourcedll(0)
        , PrintWorkflowSourcedll(0)
        , PrinterCleanupTaskdll(0)
        , printfilterpipelineprxydll(0)
        , PrintIsolationProxydll(0)
        , PrintNotificationdll(0)
        , PrintPlatformConfigdll(0)
        , printticketvalidationdll(0)
        , printuidll(0)
        , PrintWorkflowServicedll(0)
        , PrintWSDAHostdll(0)
        , prm0009dll(0)
        , prncachedll(0)
        , prnfldrdll(0)
        , prnntfydll(0)
        , prntvptdll(0)
        , ProductEnumeratordll(0)
        , profapidll(0)
        , profextdll(0)
        , profprovdll(0)
        , profsvcdll(0)
        , profsvcextdll(0)
        , propsysdll(0)
        , provcoredll(0)
        , provdatastoredll(0)
        , provdiagnosticsdll(0)
        , provenginedll(0)
        , provhandlersdll(0)
        , provisioningcommandscspdll(0)
        , provisioningcspdll(0)
        , ProvisioningHandlersdll(0)
        , provmigratedll(0)
        , provopsdll(0)
        , provpackageapidlldll(0)
        , provplatformdesktopdll(0)
        , ProvPluginEngdll(0)
        , ProvSysprepdll(0)
        , provthrddll(0)
        , ProximityCommondll(0)
        , ProximityCommonPaldll(0)
        , ProximityRtapiPaldll(0)
        , ProximityServicedll(0)
        , ProximityServicePaldll(0)
        , prvdmofcompdll(0)
        , prxyqrydll(0)
        , psapidll(0)
        , psisdecddll(0)
        , PSModuleDiscoveryProviderdll(0)
        , PsmServiceExtHostdll(0)
        , psmsrvdll(0)
        , pstaskdll(0)
        , pstorecdll(0)
        , ptpprovdll(0)
        , puiapidll(0)
        , puiobjdll(0)
        , PushToInstalldll(0)
        , PwdlessAggregatordll(0)
        , pwlauncherdll(0)
        , pwrshplugindll(0)
        , pwrshsipdll(0)
        , pwssodll(0)
        , qasfdll(0)
        , qcapdll(0)
        , qdvdll(0)
        , qdvddll(0)
        , qeditdll(0)
        , qedwipesdll(0)
        , qmgrdll(0)
        , QualityUpdateAssistantdll(0)
        , quartzdll(0)
        , Querydll(0)
        , QuickActionsDataModeldll(0)
        , QuietHoursdll(0)
        , qwavedll(0)
        , RacEngndll(0)
        , racpldlgdll(0)
        , radardtdll(0)
        , radarrsdll(0)
        , RADCUIdll(0)
        , RandomAccessStreamDataSourcedll(0)
        , rasadhlpdll(0)
        , rasapi32dll(0)
        , rasautodll(0)
        , raschapdll(0)
        , raschapextdll(0)
        , rasctrsdll(0)
        , rascustomdll(0)
        , rasdiagdll(0)
        , rasdlgdll(0)
        , rasgcwdll(0)
        , rasmandll(0)
        , rasmansdll(0)
        , rasmbmgrdll(0)
        , RasMediaManagerdll(0)
        , RASMMdll(0)
        , rasmontrdll(0)
        , rasplapdll(0)
        , raspppdll(0)
        , rastapidll(0)
        , rastlsdll(0)
        , rastlsextdll(0)
        , rdbuidll(0)
        , rdp4vsdll(0)
        , RdpAvencdll(0)
        , rdpbasedll(0)
        , rdpcfgexdll(0)
        , rdpcoretsdll(0)
        , rdpcredentialproviderdll(0)
        , rdpendpdll(0)
        , rdpnanoTransportdll(0)
        , RdpRelayTransportdll(0)
        , RdpSaPsdll(0)
        , rdpserverbasedll(0)
        , rdpsharercomdll(0)
        , rdpudddll(0)
        , rdpvieweraxdll(0)
        , RDSAppXHelperdll(0)
        , rdsdwmdrdll(0)
        , rdvvmtransportdll(0)
        , RDXServicedll(0)
        , RDXTaskFactorydll(0)
        , ReAgentdll(0)
        , ReAgentTaskdll(0)
        , recoverydll(0)
        , regapidll(0)
        , RegCtrldll(0)
        , regidledll(0)
        , regsvcdll(0)
        , reguwpapidll(0)
        , ReInfodll(0)
        , RemoteAppLifetimeManagerProxyStubdll(0)
        , remoteaudioendpointdll(0)
        , RemoteFileBrowsedll(0)
        , remotepgdll(0)
        , RemoteWipeCSPdll(0)
        , RemovableMediaProvisioningPlugindll(0)
        , RemoveDeviceContextHandlerdll(0)
        , RemoveDeviceElevateddll(0)
        , ReportingCSPdll(0)
        , ResBParserdll(0)
        , resetengdll(0)
        , ResetEnginedll(0)
        , ResetEngOnlinedll(0)
        , ResourceMapperdll(0)
        , ResourcePolicyClientdll(0)
        , ResourcePolicyServerdll(0)
        , resutilsdll(0)
        , rgb9rastdll(0)
        , riched20dll(0)
        , riched32dll(0)
        , RjvMDMConfigdll(0)
        , RMapidll(0)
        , rmclientdll(0)
        , RMSRoamingSecuritydll(0)
        , rnr20dll(0)
        , RoamingSecuritydll(0)
        , rometadatadll(0)
        , RotMgrdll(0)
        , RpcEpMapdll(0)
        , rpchttpdll(0)
        , RpcNs4dll(0)
        , rpcnshdll(0)
        , rpcrt4dll(0)
        , RpcRtRemotedll(0)
        , rpcssdll(0)
        , rsaenhdll(0)
        , rshx32dll(0)
        , RstMwEventLogMsgdll(0)
        , RstrtMgrdll(0)
        , rtffiltdll(0)
        , rtmdll(0)
        , rtmcodecsdll(0)
        , RTMediaFramedll(0)
        , rtmmvrortcdll(0)
        , rtmpaldll(0)
        , rtmpltfmdll(0)
        , rtpmdll(0)
        , rtutilsdll(0)
        , RTWorkQdll(0)
        , RuleBasedDSdll(0)
        , samclidll(0)
        , samlibdll(0)
        , samsrvdll(0)
        , sasdll(0)
        , sbedll(0)
        , sbeiodll(0)
        , sberesdll(0)
        , sbresourcesdll(0)
        , sbservicetriggerdll(0)
        , scansettingdll(0)
        , SCardBidll(0)
        , SCardDlgdll(0)
        , SCardSvrdll(0)
        , scavengeuidll(0)
        , ScDeviceEnumdll(0)
        , sceclidll(0)
        , scesrvdll(0)
        , schanneldll(0)
        , schedclidll(0)
        , schedsvcdll(0)
        , sckspdll(0)
        , scriptodll(0)
        , scrobjdll(0)
        , scrptadmdll(0)
        , scrrundll(0)
        , sdcpldll(0)
        , SDDSdll(0)
        , sdengin2dll(0)
        , SDFHostdll(0)
        , sdhcinstdll(0)
        , sdiagengdll(0)
        , sdiagprvdll(0)
        , sdiagschddll(0)
        , sdohlpdll(0)
        , sdrsvcdll(0)
        , sdshextdll(0)
        , SearchProtocolHandlerMAPI2dll(0)
        , SearchFolderdll(0)
        , SearchIndexerCoredll(0)
        , SebBackgroundManagerPolicydll(0)
        , secfw_AuthenticAMDdll(0)
        , sechostdll(0)
        , seclogondll(0)
        , secprocdll(0)
        , secproc_isvdll(0)
        , secproc_sspdll(0)
        , secproc_ssp_isvdll(0)
        , secur32dll(0)
        , SecureAssessmentHandlersdll(0)
        , SecureTimeAggregatordll(0)
        , securitydll(0)
        , SecurityCenterBrokerdll(0)
        , SecurityCenterBrokerPSdll(0)
        , SecurityHealthAgentdll(0)
        , SecurityHealthCoredll(0)
        , SecurityHealthProxyStubdll(0)
        , SecurityHealthSSOdll(0)
        , SecurityHealthSsoUdkdll(0)
        , SecurityHealthUdkdll(0)
        , sedpluginsdll(0)
        , SEMgrPSdll(0)
        , SEMgrSvcdll(0)
        , sendmaildll(0)
        , Sensdll(0)
        , SensApidll(0)
        , SensorPerformanceEventsdll(0)
        , SensorsApidll(0)
        , SensorsClassExtensiondll(0)
        , SensorsCpldll(0)
        , SensorServicedll(0)
        , SensorsNativeApidll(0)
        , SensorsNativeApiV2dll(0)
        , SensorsUtilsV2dll(0)
        , sensrsvcdll(0)
        , serialuidll(0)
        , ServicingCommondll(0)
        , ServicingUAPIdll(0)
        , serwvdrvdll(0)
        , SessEnvdll(0)
        , setbcdlocaledll(0)
        , SetNetworkLocationdll(0)
        , SetNetworkLocationFlyoutdll(0)
        , SetProxyCredentialdll(0)
        , SettingsEnvironmentDesktopdll(0)
        , SettingsExtensibilityHandlersdll(0)
        , SettingsHandlers_Accessibilitydll(0)
        , SettingsHandlers_AdvertisingIddll(0)
        , SettingsHandlers_AnalogShelldll(0)
        , SettingsHandlers_AppControldll(0)
        , SettingsHandlers_AppExecutionAliasdll(0)
        , SettingsHandlers_AssignedAccessdll(0)
        , SettingsHandlers_Authenticationdll(0)
        , SettingsHandlers_BackgroundAppsdll(0)
        , SettingsHandlers_Backupdll(0)
        , SettingsHandlers_BatteryUsagedll(0)
        , SettingsHandlers_Cameradll(0)
        , SettingsHandlers_CapabilityAccessdll(0)
        , SettingsHandlers_Clipboarddll(0)
        , SettingsHandlers_ClosedCaptioningdll(0)
        , SettingsHandlers_CloudPCdll(0)
        , SettingsHandlers_ContentDeliveryManagerdll(0)
        , SettingsHandlers_Cortanadll(0)
        , SettingsHandlers_DesktopTaskbardll(0)
        , SettingsHandlers_Devicesdll(0)
        , SettingsHandlers_Displaydll(0)
        , SettingsHandlers_Flightsdll(0)
        , SettingsHandlers_Fontsdll(0)
        , SettingsHandlers_ForceSyncdll(0)
        , SettingsHandlers_Gamingdll(0)
        , SettingsHandlers_Geolocationdll(0)
        , SettingsHandlers_Gpudll(0)
        , SettingsHandlers_HoloLens_Environmentdll(0)
        , SettingsHandlers_HumanPresencedll(0)
        , SettingsHandlers_IMEdll(0)
        , SettingsHandlers_InkingTypingPrivacydll(0)
        , SettingsHandlers_InputPersonalizationdll(0)
        , SettingsHandlers_InstalledUpdatesdll(0)
        , SettingsHandlers_Keyboarddll(0)
        , SettingsHandlers_Languagedll(0)
        , SettingsHandlers_Lightingdll(0)
        , SettingsHandlers_ManagePhonedll(0)
        , SettingsHandlers_Mapsdll(0)
        , SettingsHandlers_Mousedll(0)
        , SettingsHandlers_Notificationsdll(0)
        , SettingsHandlers_ntdll(0)
        , SettingsHandlers_OneCore_BatterySaverdll(0)
        , SettingsHandlers_OneCore_PowerAndSleepdll(0)
        , SettingsHandlers_OneDriveBackupdll(0)
        , SettingsHandlers_OptionalFeaturesdll(0)
        , SettingsHandlers_PCDisplaydll(0)
        , SettingsHandlers_Pendll(0)
        , SettingsHandlers_Regiondll(0)
        , SettingsHandlers_SharedExperiences_Romedll(0)
        , SettingsHandlers_SIUFdll(0)
        , SettingsHandlers_SpeechPrivacydll(0)
        , SettingsHandlers_Startupdll(0)
        , SettingsHandlers_Storagedll(0)
        , SettingsHandlers_StorageSensedll(0)
        , SettingsHandlers_Touchdll(0)
        , SettingsHandlers_Troubleshootdll(0)
        , SettingsHandlers_Userdll(0)
        , SettingsHandlers_UserAccountdll(0)
        , SettingsHandlers_UserExperiencedll(0)
        , SettingsHandlers_UserIntentdll(0)
        , SettingsHandlers_WorkAccessdll(0)
        , SettingSyncDownloadHelperdll(0)
        , setupapidll(0)
        , setupcldll(0)
        , setupclndll(0)
        , setupetwdll(0)
        , SFAPEdll(0)
        , SFAPMdll(0)
        , sfcdll(0)
        , sfc_osdll(0)
        , shacctdll(0)
        , shacctprofiledll(0)
        , SharedPCCSPdll(0)
        , SharedRealitySvcdll(0)
        , ShareHostdll(0)
        , sharemediacpldll(0)
        , SHCoredll(0)
        , shdocvwdll(0)
        , shell32dll(0)
        , ShellCommonCommonProxyStubdll(0)
        , shellstyledll(0)
        , shfolderdll(0)
        , shginadll(0)
        , shimengdll(0)
        , shimgvwdll(0)
        , shlwapidll(0)
        , shpafactdll(0)
        , shsetupdll(0)
        , shsvcsdll(0)
        , shunimpldll(0)
        , shutdownextdll(0)
        , shutdownuxdll(0)
        , shwebsvcdll(0)
        , signdrvdll(0)
        , SimAuthdll(0)
        , SimCfgdll(0)
        , skcidll(0)
        , slcdll(0)
        , slcextdll(0)
        , slwgadll(0)
        , SmartActionPlatformdll(0)
        , SmartCardBackgroundPolicydll(0)
        , SmartcardCredentialProviderdll(0)
        , SmartCardSimulatordll(0)
        , smartscreendll(0)
        , smartscreenpsdll(0)
        , SmartWorkflowsdll(0)
        , SMBHelperClassdll(0)
        , smbwmiv2dll(0)
        , SmiEnginedll(0)
        , smphostdll(0)
        , SmsRouterSvcdll(0)
        , SndVolSSOdll(0)
        , snmpapidll(0)
        , socialapisdll(0)
        , softkbddll(0)
        , softpubdll(0)
        , SortServer2003Compatdll(0)
        , SortWindows61dll(0)
        , SortWindows62dll(0)
        , SortWindows63dll(0)
        , SortWindows6Compatdll(0)
        , SpaceControldll(0)
        , spatialinteractiondll(0)
        , SpatializerApodll(0)
        , SpatialStoredll(0)
        , spbcddll(0)
        , SpectrumSyncClientdll(0)
        , spfileqdll(0)
        , spinfdll(0)
        , spmpmdll(0)
        , spnetdll(0)
        , spoolssdll(0)
        , spopkdll(0)
        , sppdll(0)
        , sppcdll(0)
        , sppcextdll(0)
        , sppcomapidll(0)
        , sppcommdlgdll(0)
        , sppnpdll(0)
        , sppobjsdll(0)
        , sppwinobdll(0)
        , sppwmidll(0)
        , spwinsatdll(0)
        , spwizengdll(0)
        , spwizimgdll(0)
        , spwizresdll(0)
        , SqlServerSpatial150dll(0)
        , sqlsrv32dll(0)
        , sqmapidll(0)
        , srchadmindll(0)
        , srclientdll(0)
        , srcoredll(0)
        , SrEventsdll(0)
        , SRHdll(0)
        , srhelperdll(0)
        , srmdll(0)
        , srmclientdll(0)
        , srmlibdll(0)
        , srmscandll(0)
        , srmshelldll(0)
        , srmstormoddll(0)
        , srmtracedll(0)
        , srm_psdll(0)
        , srpapidll(0)
        , SrpUxNativeSnapIndll(0)
        , srrstrdll(0)
        , srumapidll(0)
        , srumsvcdll(0)
        , srvclidll(0)
        , srvsvcdll(0)
        , srwmidll(0)
        , sscoredll(0)
        , sscoreextdll(0)
        , ssdmdll(0)
        , ssdpapidll(0)
        , ssdpsrvdll(0)
        , SshdBrokerdll(0)
        , SshdPinAuthLsadll(0)
        , sspiclidll(0)
        , sspisrvdll(0)
        , SSShimdll(0)
        , sstpcfgdll(0)
        , sstpsvcdll(0)
        , StartTileDatadll(0)
        , Startupscandll(0)
        , StateRepositoryCoredll(0)
        , stclientdll(0)
        , stidll(0)
        , sti_cidll(0)
        , stobjectdll(0)
        , StorageContextHandlerdll(0)
        , StorageUsagedll(0)
        , storagewmidll(0)
        , storagewmi_passthrudll(0)
        , storewuauthdll(0)
        , Storpropdll(0)
        , StorSvcdll(0)
        , streamcidll(0)
        , StringFeedbackEnginedll(0)
        , StructuredQuerydll(0)
        , suddll(0)
        , SustainabilityServicedll(0)
        , svfdll(0)
        , svsvcdll(0)
        , SwitcherDataModeldll(0)
        , swprvdll(0)
        , sxproxydll(0)
        , sxsdll(0)
        , sxshareddll(0)
        , sxssrvdll(0)
        , sxsstoredll(0)
        , SyncCenterdll(0)
        , SyncControllerdll(0)
        , SyncHostpsdll(0)
        , SyncInfrastructuredll(0)
        , SyncInfrastructurepsdll(0)
        , SyncProxydll(0)
        , Syncregdll(0)
        , SyncResdll(0)
        , SyncSettingsdll(0)
        , syncutildll(0)
        , sysclassdll(0)
        , SysFxUIdll(0)
        , sysmaindll(0)
        , sysntfydll(0)
        , syssetupdll(0)
        , systemcpldll(0)
        , SystemEventsBrokerClientdll(0)
        , SystemEventsBrokerServerdll(0)
        , SystemSettingsDataModeldll(0)
        , SystemSettingsDeviceEncryptionHandlersdll(0)
        , SystemSettingsHandlersdll(0)
        , SystemSettingsSettingsExtensibilitydll(0)
        , SystemSettingsUserAccountsHandlersdll(0)
        , SystemSettingsThresholdAdminFlowUIdll(0)
        , SystemSupportInfodll(0)
        , t2embeddll(0)
        , t6indispdll(0)
        , Tabbtndll(0)
        , TabbtnExdll(0)
        , TabSvcdll(0)
        , tapi3dll(0)
        , tapi32dll(0)
        , tapiluadll(0)
        , TapiMigPlugindll(0)
        , tapiperfdll(0)
        , tapisrvdll(0)
        , TapiSysprepdll(0)
        , tapiuidll(0)
        , TaskApisdll(0)
        , Taskbardll(0)
        , taskbarcpldll(0)
        , taskcompdll(0)
        , TaskFlowDataEnginedll(0)
        , TaskManagerDataLayerdll(0)
        , taskschddll(0)
        , TaskSchdPSdll(0)
        , tbauthdll(0)
        , tbsdll(0)
        , tcbloaderdll(0)
        , tcpipcfgdll(0)
        , tcpmibdll(0)
        , tcpmondll(0)
        , tcpmonuidll(0)
        , tdhdll(0)
        , tdhresdll(0)
        , TDLMigrationdll(0)
        , TEEManagement64dll(0)
        , TelephonyInteractiveUserdll(0)
        , TelephonyInteractiveUserResdll(0)
        , tellibdll(0)
        , TempSignedLicenseExchangeTaskdll(0)
        , TenantRestrictionsPlugindll(0)
        , termmgrdll(0)
        , termsrvdll(0)
        , tetheringclientdll(0)
        , tetheringconfigspdll(0)
        , TetheringIeProviderdll(0)
        , TetheringMgrdll(0)
        , tetheringservicedll(0)
        , TetheringStationdll(0)
        , TextInputFrameworkdll(0)
        , TextInputMethodFormatterdll(0)
        , TextShapingdll(0)
        , themecpldll(0)
        , ThemesSsfDownloadScheduledTaskdll(0)
        , themeservicedll(0)
        , themeuidll(0)
        , threadpoolwinrtdll(0)
        , ThreatAssessmentdll(0)
        , ThreatExperienceManagerdll(0)
        , ThreatIntelligencedll(0)
        , ThreatResponseEnginedll(0)
        , thumbcachedll(0)
        , tier2punctuationsdll(0)
        , TieringEngineProxydll(0)
        , TileDataRepositorydll(0)
        , TimeBrokerClientdll(0)
        , TimeBrokerServerdll(0)
        , TimeDateMUICallbackdll(0)
        , timesyncdll(0)
        , TimeSyncTaskdll(0)
        , tlscspdll(0)
        , tokenbindingdll(0)
        , TokenBrokerdll(0)
        , TokenBrokerUIdll(0)
        , TpmCertResourcesdll(0)
        , tpmcompcdll(0)
        , TpmCoreProvisioningdll(0)
        , TpmEngUMdll(0)
        , TpmEngUM138dll(0)
        , TpmTasksdll(0)
        , tpmvscdll(0)
        , tprtdlldll(0)
        , tquerydll(0)
        , trafficdll(0)
        , TransliterationRankerdll(0)
        , TransportDSAdll(0)
        , triedll(0)
        , trkwksdll(0)
        , TrustedSignalCredProvdll(0)
        , tsbyuvdll(0)
        , tscfgwmidll(0)
        , TSErrRedirdll(0)
        , tsf3gipdll(0)
        , tsgqecdll(0)
        , tsmfdll(0)
        , TSpkgdll(0)
        , tspubwmidll(0)
        , TSSessionUXdll(0)
        , tssrvlicdll(0)
        , TsUsbGDCoInstallerdll(0)
        , TsUsbRedirectionGroupPolicyExtensiondll(0)
        , TSWorkspacedll(0)
        , ttdloaderdll(0)
        , ttdplmdll(0)
        , ttdrecorddll(0)
        , ttdrecordcpudll(0)
        , TtlsAuthdll(0)
        , TtlsCfgdll(0)
        , TtlsExtdll(0)
        , tvratingsdll(0)
        , twextdll(0)
        , twinapiappcoredll(0)
        , twinapidll(0)
        , twinuiappcoredll(0)
        , twinuidll(0)
        , twinuipcshelldll(0)
        , txflogdll(0)
        , txfw32dll(0)
        , tzautoupdatedll(0)
        , tzresdll(0)
        , tzsyncresdll(0)
        , ubpmdll(0)
        , ucmhcdll(0)
        , ucrtbasedll(0)
        , ucrtbaseddll(0)
        , ucrtbase_clr0400dll(0)
        , ucrtbase_enclavedll(0)
        , udhisapidll(0)
        , uDWMdll(0)
        , UefiCspdll(0)
        , uexfatdll(0)
        , ufatdll(0)
        , UiaManagerdll(0)
        , UIAnimationdll(0)
        , UIAutomationCoredll(0)
        , uicomdll(0)
        , UIManagerBrokerpsdll(0)
        , uirengdll(0)
        , UIRibbondll(0)
        , UIRibbonResdll(0)
        , ulibdll(0)
        , umbdll(0)
        , umdmxfrmdll(0)
        , umpdcdll(0)
        , umpnpmgrdll(0)
        , umpo_overridesdll(0)
        , umpodll(0)
        , umpodevdll(0)
        , umpoextdll(0)
        , umpowmidll(0)
        , umrdpdll(0)
        , unattenddll(0)
        , unenrollhookdll(0)
        , UnifiedConsentdll(0)
        , unimdmatdll(0)
        , uniplatdll(0)
        , Unistoredll(0)
        , untfsdll(0)
        , UpdateAgentdll(0)
        , updatecspdll(0)
        , UpdateHeartbeatScandll(0)
        , updatepolicydll(0)
        , UpdatePolicyScenarioReliabilityAggregatordll(0)
        , UpdateRebootdll(0)
        , upnpdll(0)
        , upnphostdll(0)
        , UPPrinterInstallsCSPdll(0)
        , upshareddll(0)
        , uReFSdll(0)
        , uReFSv1dll(0)
        , uregdll(0)
        , urldll(0)
        , urlmondll(0)
        , UsbCApidll(0)
        , usbceipdll(0)
        , usbmondll(0)
        , usbperfdll(0)
        , UsbPmApidll(0)
        , UsbSettingsHandlersdll(0)
        , UsbTaskdll(0)
        , usbuidll(0)
        , user32dll(0)
        , UserAccountControlSettingsdll(0)
        , useractivitybrokerdll(0)
        , usercpldll(0)
        , UserDataAccessResdll(0)
        , UserDataAccountApisdll(0)
        , UserDataLanguageUtildll(0)
        , UserDataPlatformHelperUtildll(0)
        , UserDataServicedll(0)
        , UserDataTimeUtildll(0)
        , UserDataTypeHelperUtildll(0)
        , UserDeviceRegistrationdll(0)
        , UserDeviceRegistrationNgcdll(0)
        , userenvdll(0)
        , userinitextdll(0)
        , UserLanguageProfileCallbackdll(0)
        , usermgrdll(0)
        , usermgrclidll(0)
        , UserMgrProxydll(0)
        , usoapidll(0)
        , usocorepsdll(0)
        , usodockeddll(0)
        , usosvcdll(0)
        , usosvcimpldll(0)
        , usp10dll(0)
        , ustprovdll(0)
        , utcapidll(0)
        , utcutildll(0)
        , utildlldll(0)
        , uudfdll(0)
        , UvcModeldll(0)
        , uwfcfgmgmtdll(0)
        , uwfcspdll(0)
        , uwfservicingapidll(0)
        , UXInitdll(0)
        , uxlibdll(0)
        , uxlibresdll(0)
        , uxthemedll(0)
        , vacdll(0)
        , VANdll(0)
        , Vaultdll(0)
        , VaultCDSdll(0)
        , vaultclidll(0)
        , VaultRoamingdll(0)
        , vaultsvcdll(0)
        , vbsapidll(0)
        , vbscriptdll(0)
        , vbssysprepdll(0)
        , vcamp110dll(0)
        , vcamp120dll(0)
        , vcamp140dll(0)
        , vcamp140ddll(0)
        , VCardParserdll(0)
        , vccorlib110dll(0)
        , vccorlib120dll(0)
        , vccorlib140dll(0)
        , vccorlib140ddll(0)
        , vcomp100dll(0)
        , vcomp110dll(0)
        , vcomp120dll(0)
        , vcomp140dll(0)
        , vcomp140ddll(0)
        , vcruntime140dll(0)
        , vcruntime140ddll(0)
        , vcruntime140_1dll(0)
        , vcruntime140_1ddll(0)
        , vcruntime140_1_clr0400dll(0)
        , vcruntime140_clr0400dll(0)
        , vcruntime140_threadsdll(0)
        , vcruntime140_threadsddll(0)
        , vdsbasdll(0)
        , vdsdyndll(0)
        , vdsutildll(0)
        , vdsvddll(0)
        , vds_psdll(0)
        , verifierdll(0)
        , versiondll(0)
        , vertdlldll(0)
        , vfbasicsdll(0)
        , vfcompatdll(0)
        , vfcuzzdll(0)
        , vfluaprivdll(0)
        , vfnetdll(0)
        , vfntlmlessdll(0)
        , vfnwsdll(0)
        , vfpapidll(0)
        , vfprintdll(0)
        , vfprintpthelperdll(0)
        , vfrdvcompatdll(0)
        , vfuprovdll(0)
        , vfwwdm32dll(0)
        , VhfUmdll(0)
        , viddll(0)
        , VideoHandlersdll(0)
        , virtdiskdll(0)
        , VirtualMonitorManagerdll(0)
        , VirtualSurroundApodll(0)
        , VmApplicationHealthMonitorProxydll(0)
        , vmbuspipedll(0)
        , vmbuspiperdll(0)
        , vmbusvdevdll(0)
        , vmchipsetdll(0)
        , vmcomputedll(0)
        , vmcomputeeventlogdll(0)
        , VmCrashDumpdll(0)
        , VmDataStoredll(0)
        , vmdebugdll(0)
        , vmdevicehostdll(0)
        , vmdynmemdll(0)
        , vmemulateddevicesdll(0)
        , VmEmulatedNicdll(0)
        , VmEmulatedStoragedll(0)
        , vmfirmwaredll(0)
        , vmfirmwarehcldll(0)
        , vmfirmwarepcatdll(0)
        , vmflexiodll(0)
        , vmhbmgmtdll(0)
        , vmhgsdll(0)
        , vmiccoredll(0)
        , vmicrdvdll(0)
        , vmictimeproviderdll(0)
        , vmicvdevdll(0)
        , vmmsproxdll(0)
        , vmpmemdll(0)
        , vmproxdll(0)
        , vmrdvcoredll(0)
        , vmserialdll(0)
        , vmsifdll(0)
        , vmsifcoredll(0)
        , vmsifproxystubdll(0)
        , vmsmbdll(0)
        , vmstagingdll(0)
        , vmsynthfcvdevdll(0)
        , VmSynthNicdll(0)
        , vmsynthstordll(0)
        , vmtpmdll(0)
        , vmuidevicesdll(0)
        , vmusrvdll(0)
        , vmvirtiodll(0)
        , vmvpcidll(0)
        , vmwpctrldll(0)
        , vmwpeventsdll(0)
        , VocabRoamingHandlerdll(0)
        , VoiceActivationManagerdll(0)
        , VoipRTdll(0)
        , vp9fsdll(0)
        , vpcievdevdll(0)
        , vpnikedll(0)
        , vpnikeapidll(0)
        , VpnSohDesktopdll(0)
        , VPNv2CSPdll(0)
        , VrdUmeddll(0)
        , vrfcoredll(0)
        , VscMgrPSdll(0)
        , vsconfigdll(0)
        , vscover170dll(0)
        , VSD3DWARPDebugdll(0)
        , VsGraphicsCapturedll(0)
        , VsGraphicsExperimentdll(0)
        , VsGraphicsHelperdll(0)
        , VsGraphicsProxyStubdll(0)
        , VSPerf170dll(0)
        , vssapidll(0)
        , vsstracedll(0)
        , vss_psdll(0)
        , vulkan_1_999_0_0_0dll(0)
        , vulkan_1dll(0)
        , w32timedll(0)
        , w32topldll(0)
        , WaaSAssessmentdll(0)
        , WaaSMedicPSdll(0)
        , WaaSMedicSvcdll(0)
        , WABSyncProviderdll(0)
        , WalletBackgroundServiceProxydll(0)
        , WalletProxydll(0)
        , WalletServicedll(0)
        , wamregpsdll(0)
        , wavemspdll(0)
        , wbemcomndll(0)
        , wbiosrvcdll(0)
        , wcidll(0)
        , wcimagedll(0)
        , wcmapidll(0)
        , wcmcspdll(0)
        , wcmsvcdll(0)
        , WcnApidll(0)
        , wcncsvcdll(0)
        , WcnEapAuthProxydll(0)
        , WcnEapPeerProxydll(0)
        , WcnNetshdll(0)
        , wcnwizdll(0)
        , wc_storagedll(0)
        , wdcdll(0)
        , wdidll(0)
        , wdigestdll(0)
        , wdpdll(0)
        , wdscoredll(0)
        , webauthndll(0)
        , WebcamUidll(0)
        , webcheckdll(0)
        , WebClntdll(0)
        , webiodll(0)
        , WebManagementUserdll(0)
        , webplatstorageserverdll(0)
        , WebRuntimeManagerdll(0)
        , webservicesdll(0)
        , Websocketdll(0)
        , webthreatdefsvcdll(0)
        , webthreatdefusersvcdll(0)
        , wecapidll(0)
        , wecsvcdll(0)
        , wephostsvcdll(0)
        , werdll(0)
        , werconcpldll(0)
        , wercplsupportdll(0)
        , werdiagcontrollerdll(0)
        , WerEncdll(0)
        , weretwdll(0)
        , wersvcdll(0)
        , weruidll(0)
        , wevtapidll(0)
        , wevtfwddll(0)
        , wevtsvcdll(0)
        , wfapigpdll(0)
        , wfdprovdll(0)
        , WFDSConMgrdll(0)
        , WFDSConMgrSvcdll(0)
        , WfHCdll(0)
        , whealogrdll(0)
        , whhelperdll(0)
        , wiaautdll(0)
        , wiadefuidll(0)
        , wiadssdll(0)
        , WiaExtensionHost64dll(0)
        , wiarpcdll(0)
        , wiascanprofilesdll(0)
        , wiaservcdll(0)
        , wiashextdll(0)
        , wiatracedll(0)
        , WiFiCloudStoredll(0)
        , WiFiConfigSPdll(0)
        , wifidatacapabilityhandlerdll(0)
        , WiFiDisplaydll(0)
        , wifinetworkmanagerdll(0)
        , wimgapidll(0)
        , win32appinventorycspdll(0)
        , Win32CompatibilityAppraiserCSPdll(0)
        , win32spldll(0)
        , win32udll(0)
        , Win32_DeviceGuarddll(0)
        , winbiodll(0)
        , WinBioDataModeldll(0)
        , winbioextdll(0)
        , winbranddll(0)
        , wincorlibdll(0)
        , wincredproviderdll(0)
        , wincreduidll(0)
        , windlpdll(0)
        , WindowManagementdll(0)
        , WindowManagementAPIdll(0)
        , WindowsAccountsControldll(0)
        , WindowsAIMachineLearningdll(0)
        , WindowsAIMachineLearningPreviewdll(0)
        , WindowsApplicationModelBackgroundSystemEventsBrokerdll(0)
        , WindowsApplicationModelBackgroundTimeBrokerdll(0)
        , WindowsApplicationModelConversationalAgentdll(0)
        , windowsapplicationmodelconversationalagentinternalproxystubdll(0)
        , windowsapplicationmodelconversationalagentproxystubdll(0)
        , WindowsApplicationModelCoredll(0)
        , windowsapplicationmodeldatatransferdll(0)
        , WindowsApplicationModeldll(0)
        , WindowsApplicationModelLockScreendll(0)
        , WindowsApplicationModelStoredll(0)
        , WindowsApplicationModelStorePreviewDOSettingsdll(0)
        , WindowsApplicationModelStoreTestingFrameworkdll(0)
        , WindowsApplicationModelWalletdll(0)
        , WindowsCloudStoredll(0)
        , WindowsCloudStoreEarlyDownloaderdll(0)
        , WindowsCloudStoreSchemaDesktopShelldll(0)
        , WindowsCloudStoreSchemaShelldll(0)
        , WindowsCortanaDesktopdll(0)
        , WindowsCortanaOneCoredll(0)
        , WindowsCortanaProxyStubdll(0)
        , WindowsDataActivitiesdll(0)
        , WindowsDataPdfdll(0)
        , WindowsDevicesAllJoyndll(0)
        , WindowsDevicesBackgrounddll(0)
        , WindowsDevicesBackgroundpsdll(0)
        , WindowsDevicesBluetoothdll(0)
        , WindowsDevicesCustomdll(0)
        , WindowsDevicesCustompsdll(0)
        , WindowsDevicesEnumerationdll(0)
        , WindowsDevicesHapticsdll(0)
        , WindowsDevicesHumanInterfaceDevicedll(0)
        , WindowsDevicesLightsdll(0)
        , WindowsDevicesLowLeveldll(0)
        , WindowsDevicesMididll(0)
        , WindowsDevicesPerceptiondll(0)
        , WindowsDevicesPickerdll(0)
        , WindowsDevicesPointOfServicedll(0)
        , WindowsDevicesPortabledll(0)
        , WindowsDevicesPrintersdll(0)
        , WindowsDevicesPrintersExtensionsdll(0)
        , WindowsDevicesRadiosdll(0)
        , WindowsDevicesScannersdll(0)
        , WindowsDevicesSensorsdll(0)
        , WindowsDevicesSerialCommunicationdll(0)
        , WindowsDevicesSmartCardsdll(0)
        , WindowsDevicesSmartCardsPhonedll(0)
        , WindowsDevicesUsbdll(0)
        , WindowsDevicesWiFidll(0)
        , WindowsDevicesWiFiDirectdll(0)
        , WindowsEnergydll(0)
        , WindowsFileExplorerCommondll(0)
        , WindowsGamingInputdll(0)
        , WindowsGamingPreviewdll(0)
        , WindowsGamingUIGameBardll(0)
        , WindowsGamingXboxLiveStoragedll(0)
        , WindowsGlobalizationdll(0)
        , WindowsGlobalizationFontgroupsdll(0)
        , WindowsGlobalizationPhoneNumberFormattingdll(0)
        , WindowsGraphicsDisplayBrightnessOverridedll(0)
        , WindowsGraphicsDisplayDisplayEnhancementOverridedll(0)
        , WindowsGraphicsdll(0)
        , WindowsGraphicsPrinting3Ddll(0)
        , WindowsGraphicsPrintingdll(0)
        , WindowsGraphicsPrintingWorkflowdll(0)
        , WindowsGraphicsPrintingWorkflowNativedll(0)
        , WindowsHelpRuntimedll(0)
        , windowsimmersiveshellserviceproviderdll(0)
        , WindowsInternalAdaptiveCardsXamlCardRendererdll(0)
        , WindowsInternalCapturePickerDesktopdll(0)
        , WindowsInternalCapturePickerdll(0)
        , WindowsInternalDevicesBluetoothdll(0)
        , WindowsInternalDevicesSensorsdll(0)
        , WindowsInternalFeedbackAnalogdll(0)
        , WindowsInternalFeedbackAnalogProxyStubdll(0)
        , WindowsInternalGraphicsDisplayDisplayColorManagementdll(0)
        , WindowsInternalGraphicsDisplayDisplayEnhancementManagementdll(0)
        , WindowsInternalHardwareConfirmatordll(0)
        , WindowsInternalManagementdll(0)
        , WindowsInternalManagementSecureAssessmentdll(0)
        , WindowsInternalOpenWithHostdll(0)
        , WindowsInternalPlatformExtensionDevicePickerExperiencedll(0)
        , WindowsInternalPlatformExtensionMiracastBannerExperiencedll(0)
        , WindowsInternalPredictionUnitdll(0)
        , WindowsInternalSecurityAttestationDeviceAttestationdll(0)
        , WindowsInternalSecurityMitigationsBrokerdll(0)
        , WindowsInternalShellBrokerdll(0)
        , WindowsInternalShellCloudDesktopTransitionScreendll(0)
        , WindowsInternalShellXamlInputViewHostdll(0)
        , windowsinternalshellcommonAccountsControlExperiencedll(0)
        , windowsinternalshellcommonAppResolverModaldll(0)
        , WindowsInternalShellCommonBrokerdll(0)
        , WindowsInternalShellCommondll(0)
        , windowsinternalshellcommonFilePickerExperienceMEMdll(0)
        , WindowsInternalShellCommonPrintExperiencedll(0)
        , windowsinternalshellcommonshareexperiencedll(0)
        , windowsinternalshellcommonTokenBrokerModaldll(0)
        , WindowsInternalSignalsdll(0)
        , WindowsInternalSystemUserProfiledll(0)
        , WindowsInternalTaskbardll(0)
        , WindowsInternalUIBioEnrollmentProxyStubdll(0)
        , WindowsInternalUIDialogsdll(0)
        , WindowsInternalUILogonProxyStubdll(0)
        , WindowsInternalUIShellWindowTabManagerdll(0)
        , WindowsInternalWaaSMedicDockeddll(0)
        , WindowsManagementEnrollmentStatusTrackingConfigProviderdll(0)
        , WindowsManagementInprocObjectsdll(0)
        , WindowsManagementModernDeploymentConfigProvidersdll(0)
        , WindowsManagementProvisioningProxyStubdll(0)
        , WindowsManagementSecureAssessmentCfgProviderdll(0)
        , WindowsManagementSecureAssessmentDiagnosticsdll(0)
        , WindowsManagementServicedll(0)
        , WindowsManagementUpdatedll(0)
        , WindowsManagementWorkplacedll(0)
        , WindowsManagementWorkplaceWorkplaceSettingsdll(0)
        , WindowsMediaAudiodll(0)
        , WindowsMediaBackgroundMediaPlaybackdll(0)
        , WindowsMediaDevicesdll(0)
        , WindowsMediadll(0)
        , WindowsMediaEditingdll(0)
        , WindowsMediaFaceAnalysisdll(0)
        , WindowsMediaImportdll(0)
        , WindowsMediaMediaControldll(0)
        , WindowsMediaMixedRealityCapturedll(0)
        , WindowsMediaOcrdll(0)
        , WindowsMediaPlaybackBackgroundMediaPlayerdll(0)
        , WindowsMediaPlaybackMediaPlayerdll(0)
        , WindowsMediaPlaybackProxyStubdll(0)
        , WindowsMediaProtectionPlayReadydll(0)
        , WindowsMediaRenewaldll(0)
        , WindowsMediaSpeechdll(0)
        , WindowsMediaSpeechUXResdll(0)
        , WindowsMediaStreamingdll(0)
        , WindowsMediaStreamingpsdll(0)
        , WindowsMiragedll(0)
        , WindowsMirageInternaldll(0)
        , WindowsNetworkingBackgroundTransferBackgroundManagerPolicydll(0)
        , WindowsNetworkingBackgroundTransferContentPrefetchTaskdll(0)
        , WindowsNetworkingBackgroundTransferdll(0)
        , WindowsNetworkingConnectivitydll(0)
        , WindowsNetworkingdll(0)
        , WindowsNetworkingHostNamedll(0)
        , WindowsNetworkingNetworkOperatorsESimdll(0)
        , WindowsNetworkingNetworkOperatorsHotspotAuthenticationdll(0)
        , WindowsNetworkingProximitydll(0)
        , WindowsNetworkingServiceDiscoveryDnssddll(0)
        , WindowsNetworkingSocketsPushEnabledApplicationdll(0)
        , WindowsNetworkingUXEapRequestHandlerdll(0)
        , WindowsNetworkingVpndll(0)
        , WindowsNetworkingXboxLiveProxyStubdll(0)
        , WindowsPaymentsdll(0)
        , WindowsPerceptionStubdll(0)
        , WindowsSecurityAuthenticationIdentityProviderdll(0)
        , WindowsSecurityAuthenticationOnlineIddll(0)
        , WindowsSecurityAuthenticationWebCoredll(0)
        , WindowsSecurityCredentialsUICredentialPickerdll(0)
        , WindowsSecurityCredentialsUIUserConsentVerifierdll(0)
        , WindowsSecurityIntegritydll(0)
        , WindowsServicesTargetedContentdll(0)
        , WindowsSharedPCAccountManagerdll(0)
        , WindowsSharedPCCredentialProviderdll(0)
        , WindowsShellBlueLightReductiondll(0)
        , WindowsShellServiceHostBuilderdll(0)
        , WindowsShellStartLayoutPopulationEventsdll(0)
        , WindowsStateRepositorydll(0)
        , WindowsStateRepositoryBrokerdll(0)
        , WindowsStateRepositoryClientdll(0)
        , WindowsStateRepositoryCoredll(0)
        , WindowsStateRepositoryPSdll(0)
        , WindowsStateRepositoryUpgradedll(0)
        , WindowsStorageApplicationDatadll(0)
        , WindowsStorageCompressiondll(0)
        , windowsstoragedll(0)
        , WindowsStorageOneCoredll(0)
        , WindowsStorageSearchdll(0)
        , WindowsSystemDiagnosticsdll(0)
        , WindowsSystemDiagnosticsTelemetryPlatformTelemetryClientdll(0)
        , WindowsSystemDiagnosticsTraceReportingPlatformDiagnosticActionsdll(0)
        , WindowsSystemLauncherdll(0)
        , WindowsSystemProfileHardwareIddll(0)
        , WindowsSystemProfilePlatformDiagnosticsAndUsageDataSettingsdll(0)
        , WindowsSystemProfileRetailInfodll(0)
        , WindowsSystemProfileSystemIddll(0)
        , WindowsSystemProfileSystemManufacturersdll(0)
        , WindowsSystemRemoteDesktopdll(0)
        , WindowsSystemSystemManagementdll(0)
        , WindowsSystemUserDeviceAssociationdll(0)
        , WindowsSystemUserProfileDiagnosticsSettingsdll(0)
        , WindowsUIAccessibilitydll(0)
        , WindowsUIAppDefaultsdll(0)
        , WindowsUIBioFeedbackdll(0)
        , WindowsUIBlockedShutdowndll(0)
        , WindowsUICoreTextInputdll(0)
        , WindowsUICreddll(0)
        , WindowsUICredDialogControllerdll(0)
        , WindowsUIdll(0)
        , WindowsUIFileExplorerdll(0)
        , WindowsUIImmersivedll(0)
        , WindowsUIInputInkingAnalysisdll(0)
        , WindowsUIInputInkingdll(0)
        , WindowsUILogondll(0)
        , WindowsUINetworkUXControllerdll(0)
        , WindowsUIPicturePassworddll(0)
        , WindowsUISearchdll(0)
        , WindowsUIShelldll(0)
        , WindowsUIShellInternalAdaptiveCardsdll(0)
        , WindowsUIStoragedll(0)
        , WindowsUIXamlControlsdll(0)
        , WindowsUIXamldll(0)
        , WindowsUIXamlInkControlsdll(0)
        , WindowsUIXamlMapsdll(0)
        , WindowsUIXamlPhonedll(0)
        , WindowsUIXamlResources19h1dll(0)
        , WindowsUIXamlResources21h1dll(0)
        , WindowsUIXamlResourcesCommondll(0)
        , WindowsUIXamlResourcesrs1dll(0)
        , WindowsUIXamlResourcesrs2dll(0)
        , WindowsUIXamlResourcesrs3dll(0)
        , WindowsUIXamlResourcesrs4dll(0)
        , WindowsUIXamlResourcesrs5dll(0)
        , WindowsUIXamlResourcesthdll(0)
        , WindowsUIXamlResourceswin81dll(0)
        , WindowsUIXamlResourceswin8rtmdll(0)
        , WindowsUIXamlHostdll(0)
        , WindowsWARPJITServicedll(0)
        , WindowsWebDiagnosticsdll(0)
        , WindowsWebdll(0)
        , WindowsWebHttpdll(0)
        , WindowsCodecsdll(0)
        , WindowsCodecsExtdll(0)
        , WindowsDefaultHeatProcessordll(0)
        , windowsdefenderapplicationguardcspdll(0)
        , WindowsInternalComposableShellDisplaydll(0)
        , WindowsInternalShellCompUiActivationdll(0)
        , WindowsIoTCspdll(0)
        , windowslivelogindll(0)
        , WindowsManagementServiceWinRtProxyStubdll(0)
        , windowsperformancerecordercontroldll(0)
        , windowsudkshellcommondll(0)
        , windowsudkservicesshellcommondll(0)
        , winethcdll(0)
        , winhttpdll(0)
        , winhttpcomdll(0)
        , WinHvEmulationdll(0)
        , WinHvPlatformdll(0)
        , wininetdll(0)
        , wininetluidll(0)
        , wininitextdll(0)
        , winipcfiledll(0)
        , winipcsecprocdll(0)
        , winipsecdll(0)
        , Winlangdbdll(0)
        , winlogonextdll(0)
        , winmdedll(0)
        , winmldll(0)
        , winmmdll(0)
        , winmmbasedll(0)
        , winmsipcdll(0)
        , WinMsoIrmProtectordll(0)
        , winnlsresdll(0)
        , winnsidll(0)
        , WinOpcIrmProtectordll(0)
        , WinREAgentdll(0)
        , winrnrdll(0)
        , winrscmddll(0)
        , winrsmgrdll(0)
        , winrssrvdll(0)
        , WinRtTracingdll(0)
        , WinSATAPIdll(0)
        , WinSCarddll(0)
        , winshfhcdll(0)
        , winskudll(0)
        , winsockhcdll(0)
        , winsqlite3dll(0)
        , winsrvdll(0)
        , winsrvextdll(0)
        , winstadll(0)
        , WinSyncdll(0)
        , WinSyncMetastoredll(0)
        , WinSyncProvidersdll(0)
        , wintrustdll(0)
        , WinTypesdll(0)
        , WinUICohabitationdll(0)
        , winusbdll(0)
        , WiredNetworkCSPdll(0)
        , wispdll(0)
        , witnesswmiv2providerdll(0)
        , wksclidll(0)
        , wkspbrokerAxdll(0)
        , wksprtPSdll(0)
        , wkssvcdll(0)
        , wlanapidll(0)
        , wlancfgdll(0)
        , WLanConndll(0)
        , wlandlgdll(0)
        , wlangpuidll(0)
        , WLanHCdll(0)
        , wlanhlpdll(0)
        , WlanMediaManagerdll(0)
        , WlanMMdll(0)
        , wlanmsmdll(0)
        , wlanprefdll(0)
        , WlanRadioManagerdll(0)
        , wlansecdll(0)
        , wlansvcdll(0)
        , wlansvcpaldll(0)
        , wlanuidll(0)
        , wlanutildll(0)
        , Wldap32dll(0)
        , wldpdll(0)
        , wlgpclntdll(0)
        , wlidclidll(0)
        , wlidcredprovdll(0)
        , wlidfdpdll(0)
        , wlidnspdll(0)
        , wlidprovdll(0)
        , wlidresdll(0)
        , wlidsvcdll(0)
        , WMALFXGFXDSPdll(0)
        , wmcodecdsppsdll(0)
        , wmdmlogdll(0)
        , wmdmpsdll(0)
        , wmdrmsdkdll(0)
        , wmidll(0)
        , wmiclntdll(0)
        , wmidcomdll(0)
        , wmidxdll(0)
        , wmipropdll(0)
        , wmitomidll(0)
        , WMNetMgrdll(0)
        , WmpDuidll(0)
        , WMPhotodll(0)
        , wmsgapidll(0)
        , wmvdspadll(0)
        , WofTasksdll(0)
        , WofUtildll(0)
        , WordBreakersdll(0)
        , WorkfoldersControldll(0)
        , WorkFoldersGPExtdll(0)
        , WorkFoldersResdll(0)
        , WorkFoldersShelldll(0)
        , workfolderssvcdll(0)
        , woscdll(0)
        , wow64dll(0)
        , wow64basedll(0)
        , wow64condll(0)
        , wow64cpudll(0)
        , wow64windll(0)
        , wpbcredsdll(0)
        , Wpcdll(0)
        , WpcApidll(0)
        , WpcDesktopMonSvcdll(0)
        , WpcProxyStubsdll(0)
        , WpcRefreshTaskdll(0)
        , WpcWebFilterdll(0)
        , wpdbusenumdll(0)
        , WpdMtpdll(0)
        , WpdMtpUSdll(0)
        , wpdshextdll(0)
        , WPDShServiceObjdll(0)
        , WPDSpdll(0)
        , wpd_cidll(0)
        , wpnappsdll(0)
        , wpnclientdll(0)
        , wpncoredll(0)
        , wpninprcdll(0)
        , wpnprvdll(0)
        , wpnservicedll(0)
        , wpnsruprovdll(0)
        , WpnUserServicedll(0)
        , WpPortingLibrarydll(0)
        , WppRecorderUMdll(0)
        , WPTaskSchedulerdll(0)
        , wpxdll(0)
        , ws2helpdll(0)
        , ws2_32dll(0)
        , wscapidll(0)
        , wscinteropdll(0)
        , wscisvifdll(0)
        , WSClientdll(0)
        , wscproxystubdll(0)
        , wscsvcdll(0)
        , WSDApidll(0)
        , wsdchngrdll(0)
        , WsdProviderUtildll(0)
        , WSDScanProxydll(0)
        , wseceditdll(0)
        , wsepnodll(0)
        , wshbthdll(0)
        , wshcondll(0)
        , wshelperdll(0)
        , wshextdll(0)
        , wshhypervdll(0)
        , wship6dll(0)
        , wshqosdll(0)
        , wshrmdll(0)
        , wshunixdll(0)
        , wslapidll(0)
        , WsmAgentdll(0)
        , WSManMigrationPlugindll(0)
        , WsmAutodll(0)
        , wsmplpxydll(0)
        , WsmResdll(0)
        , WsmSvcdll(0)
        , WsmWmiPldll(0)
        , wsnmp32dll(0)
        , wsock32dll(0)
        , wsplibdll(0)
        , wsp_fsdll(0)
        , wsp_healthdll(0)
        , wsp_srdll(0)
        , wtdccmdll(0)
        , wtdhostdll(0)
        , wtdsensordll(0)
        , wtsapi32dll(0)
        , wuapidll(0)
        , wuauengdll(0)
        , wuceffectsdll(0)
        , WUDFCoinstallerdll(0)
        , WUDFPlatformdll(0)
        , WudfSMCClassExtdll(0)
        , WUDFxdll(0)
        , WUDFx02000dll(0)
        , wudriverdll(0)
        , wupsdll(0)
        , wups2dll(0)
        , wusysdll(0)
        , wvcdll(0)
        , WwaApidll(0)
        , WwaExtdll(0)
        , WWanAPIdll(0)
        , wwancfgdll(0)
        , WWanHCdll(0)
        , WwanPrfldll(0)
        , wwanprotdimdll(0)
        , WwanRadioManagerdll(0)
        , wwansvcdll(0)
        , wwapidll(0)
        , x3daudio1_0dll(0)
        , x3daudio1_1dll(0)
        , X3DAudio1_2dll(0)
        , X3DAudio1_3dll(0)
        , X3DAudio1_4dll(0)
        , X3DAudio1_5dll(0)
        , X3DAudio1_6dll(0)
        , X3DAudio1_7dll(0)
        , xactengine2_0dll(0)
        , xactengine2_1dll(0)
        , xactengine2_10dll(0)
        , xactengine2_2dll(0)
        , xactengine2_3dll(0)
        , xactengine2_4dll(0)
        , xactengine2_5dll(0)
        , xactengine2_6dll(0)
        , xactengine2_7dll(0)
        , xactengine2_8dll(0)
        , xactengine2_9dll(0)
        , xactengine3_0dll(0)
        , xactengine3_1dll(0)
        , xactengine3_2dll(0)
        , xactengine3_3dll(0)
        , xactengine3_4dll(0)
        , xactengine3_5dll(0)
        , xactengine3_6dll(0)
        , xactengine3_7dll(0)
        , XamlTileRenderdll(0)
        , XAPOFX1_0dll(0)
        , XAPOFX1_1dll(0)
        , XAPOFX1_2dll(0)
        , XAPOFX1_3dll(0)
        , XAPOFX1_4dll(0)
        , XAPOFX1_5dll(0)
        , XAudio2_0dll(0)
        , XAudio2_1dll(0)
        , XAudio2_2dll(0)
        , XAudio2_3dll(0)
        , XAudio2_4dll(0)
        , XAudio2_5dll(0)
        , XAudio2_6dll(0)
        , XAudio2_7dll(0)
        , XAudio2_8dll(0)
        , XAudio2_9dll(0)
        , XblAuthManagerdll(0)
        , XblAuthManagerProxydll(0)
        , XblAuthTokenBrokerExtdll(0)
        , XblGameSavedll(0)
        , XblGameSaveExtdll(0)
        , XblGameSaveProxydll(0)
        , XboxGipRadioManagerdll(0)
        , xboxgipsvcdll(0)
        , xboxgipsyntheticdll(0)
        , XboxNetApiSvcdll(0)
        , xinput1_1dll(0)
        , xinput1_2dll(0)
        , xinput1_3dll(0)
        , XInput1_4dll(0)
        , XInput9_1_0dll(0)
        , XInputUapdll(0)
        , xmlfilterdll(0)
        , xmllitedll(0)
        , xmlprovidll(0)
        , xolehlpdll(0)
        , XpsDocumentTargetPrintdll(0)
        , XpsGdiConverterdll(0)
        , XpsPrintdll(0)
        , xpspushlayerdll(0)
        , XpsRasterServicedll(0)
        , xpsservicesdll(0)
        , XpsToPclmConverterdll(0)
        , XpsToPwgrConverterdll(0)
        , xwizardsdll(0)
        , xwregdll(0)
        , xwtpduidll(0)
        , xwtpw32dll(0)
        , ze_loaderdll(0)
        , ze_validation_layerdll(0)
        , zipcontainerdll(0)
        , zipfldrdll(0)
        , ztrace_mapsdll(0)
    {
    }

    ////////////////////////////////////////////////////////////////////////////
    //                Load functions from specific libraries
    ////////////////////////////////////////////////////////////////////////////

    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kernel32_func(LPCSTR param) noexcept {
        return reinterpret_cast<FuncPtr>(get_symbol_address(kernel32dll, param));
    }

    ////////////////////////////////////////////////////////////////////////////
    //               Generated using generator python script
    ////////////////////////////////////////////////////////////////////////////
    //
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_aadauthhelper_func(LPCSTR param) noexcept {
        if (!aadauthhelperdll) {
            load_aadauthhelper();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(aadauthhelperdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_aadcloudap_func(LPCSTR param) noexcept {
        if (!aadcloudapdll) {
            load_aadcloudap();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(aadcloudapdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_aadjcsp_func(LPCSTR param) noexcept {
        if (!aadjcspdll) {
            load_aadjcsp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(aadjcspdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_aadtb_func(LPCSTR param) noexcept {
        if (!aadtbdll) {
            load_aadtb();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(aadtbdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_aadWamExtension_func(LPCSTR param) noexcept {
        if (!aadWamExtensiondll) {
            load_aadWamExtension();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(aadWamExtensiondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AarSvc_func(LPCSTR param) noexcept {
        if (!AarSvcdll) {
            load_AarSvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AarSvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AboutSettingsHandlers_func(LPCSTR param) noexcept {
        if (!AboutSettingsHandlersdll) {
            load_AboutSettingsHandlers();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AboutSettingsHandlersdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AboveLockAppHost_func(LPCSTR param) noexcept {
        if (!AboveLockAppHostdll) {
            load_AboveLockAppHost();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AboveLockAppHostdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_accessibilitycpl_func(LPCSTR param) noexcept {
        if (!accessibilitycpldll) {
            load_accessibilitycpl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(accessibilitycpldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_accountaccessor_func(LPCSTR param) noexcept {
        if (!accountaccessordll) {
            load_accountaccessor();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(accountaccessordll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AccountsRt_func(LPCSTR param) noexcept {
        if (!AccountsRtdll) {
            load_AccountsRt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AccountsRtdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AcGenral_func(LPCSTR param) noexcept {
        if (!AcGenraldll) {
            load_AcGenral();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AcGenraldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AcLayers_func(LPCSTR param) noexcept {
        if (!AcLayersdll) {
            load_AcLayers();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AcLayersdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_acledit_func(LPCSTR param) noexcept {
        if (!acleditdll) {
            load_acledit();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(acleditdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_aclui_func(LPCSTR param) noexcept {
        if (!acluidll) {
            load_aclui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(acluidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_acmigration_func(LPCSTR param) noexcept {
        if (!acmigrationdll) {
            load_acmigration();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(acmigrationdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ACPBackgroundManagerPolicy_func(LPCSTR param) noexcept {
        if (!ACPBackgroundManagerPolicydll) {
            load_ACPBackgroundManagerPolicy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ACPBackgroundManagerPolicydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_acppage_func(LPCSTR param) noexcept {
        if (!acppagedll) {
            load_acppage();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(acppagedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_acproxy_func(LPCSTR param) noexcept {
        if (!acproxydll) {
            load_acproxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(acproxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AcSpecfc_func(LPCSTR param) noexcept {
        if (!AcSpecfcdll) {
            load_AcSpecfc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AcSpecfcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ActionCenter_func(LPCSTR param) noexcept {
        if (!ActionCenterdll) {
            load_ActionCenter();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ActionCenterdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ActionCenterCPL_func(LPCSTR param) noexcept {
        if (!ActionCenterCPLdll) {
            load_ActionCenterCPL();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ActionCenterCPLdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ActionQueue_func(LPCSTR param) noexcept {
        if (!ActionQueuedll) {
            load_ActionQueue();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ActionQueuedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ActivationClient_func(LPCSTR param) noexcept {
        if (!ActivationClientdll) {
            load_ActivationClient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ActivationClientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ActivationManager_func(LPCSTR param) noexcept {
        if (!ActivationManagerdll) {
            load_ActivationManager();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ActivationManagerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ActivationVdev_func(LPCSTR param) noexcept {
        if (!ActivationVdevdll) {
            load_ActivationVdev();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ActivationVdevdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_activeds_func(LPCSTR param) noexcept {
        if (!activedsdll) {
            load_activeds();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(activedsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ActiveSyncCsp_func(LPCSTR param) noexcept {
        if (!ActiveSyncCspdll) {
            load_ActiveSyncCsp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ActiveSyncCspdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ActiveSyncProvider_func(LPCSTR param) noexcept {
        if (!ActiveSyncProviderdll) {
            load_ActiveSyncProvider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ActiveSyncProviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_actxprxy_func(LPCSTR param) noexcept {
        if (!actxprxydll) {
            load_actxprxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(actxprxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AcWinRT_func(LPCSTR param) noexcept {
        if (!AcWinRTdll) {
            load_AcWinRT();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AcWinRTdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AcXtrnal_func(LPCSTR param) noexcept {
        if (!AcXtrnaldll) {
            load_AcXtrnal();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AcXtrnaldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AdaptiveCards_func(LPCSTR param) noexcept {
        if (!AdaptiveCardsdll) {
            load_AdaptiveCards();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AdaptiveCardsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AddressParser_func(LPCSTR param) noexcept {
        if (!AddressParserdll) {
            load_AddressParser();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AddressParserdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_adhapi_func(LPCSTR param) noexcept {
        if (!adhapidll) {
            load_adhapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(adhapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_adhsvc_func(LPCSTR param) noexcept {
        if (!adhsvcdll) {
            load_adhsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(adhsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AdmTmpl_func(LPCSTR param) noexcept {
        if (!AdmTmpldll) {
            load_AdmTmpl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AdmTmpldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_admwprox_func(LPCSTR param) noexcept {
        if (!admwproxdll) {
            load_admwprox();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(admwproxdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_adprovider_func(LPCSTR param) noexcept {
        if (!adproviderdll) {
            load_adprovider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(adproviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_adrclient_func(LPCSTR param) noexcept {
        if (!adrclientdll) {
            load_adrclient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(adrclientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_adsldp_func(LPCSTR param) noexcept {
        if (!adsldpdll) {
            load_adsldp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(adsldpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_adsldpc_func(LPCSTR param) noexcept {
        if (!adsldpcdll) {
            load_adsldpc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(adsldpcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_adsmsext_func(LPCSTR param) noexcept {
        if (!adsmsextdll) {
            load_adsmsext();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(adsmsextdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_adsnt_func(LPCSTR param) noexcept {
        if (!adsntdll) {
            load_adsnt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(adsntdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_adtschema_func(LPCSTR param) noexcept {
        if (!adtschemadll) {
            load_adtschema();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(adtschemadll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AdvancedEmojiDS_func(LPCSTR param) noexcept {
        if (!AdvancedEmojiDSdll) {
            load_AdvancedEmojiDS();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AdvancedEmojiDSdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_advapi32_func(LPCSTR param) noexcept {
        if (!advapi32dll) {
            load_advapi32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(advapi32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_advapi32res_func(LPCSTR param) noexcept {
        if (!advapi32resdll) {
            load_advapi32res();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(advapi32resdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_advpack_func(LPCSTR param) noexcept {
        if (!advpackdll) {
            load_advpack();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(advpackdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_aeevts_func(LPCSTR param) noexcept {
        if (!aeevtsdll) {
            load_aeevts();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(aeevtsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_aeinv_func(LPCSTR param) noexcept {
        if (!aeinvdll) {
            load_aeinv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(aeinvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_aemarebackup_func(LPCSTR param) noexcept {
        if (!aemarebackupdll) {
            load_aemarebackup();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(aemarebackupdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_aepic_func(LPCSTR param) noexcept {
        if (!aepicdll) {
            load_aepic();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(aepicdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_agentactivationruntime_func(LPCSTR param) noexcept {
        if (!agentactivationruntimedll) {
            load_agentactivationruntime();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(agentactivationruntimedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_agentactivationruntimewindows_func(LPCSTR param) noexcept {
        if (!agentactivationruntimewindowsdll) {
            load_agentactivationruntimewindows();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(agentactivationruntimewindowsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ahadmin_func(LPCSTR param) noexcept {
        if (!ahadmindll) {
            load_ahadmin();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ahadmindll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AJRouter_func(LPCSTR param) noexcept {
        if (!AJRouterdll) {
            load_AJRouter();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AJRouterdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_amsi_func(LPCSTR param) noexcept {
        if (!amsidll) {
            load_amsi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(amsidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_amsiproxy_func(LPCSTR param) noexcept {
        if (!amsiproxydll) {
            load_amsiproxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(amsiproxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_amstream_func(LPCSTR param) noexcept {
        if (!amstreamdll) {
            load_amstream();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(amstreamdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AnalogShellBroker_func(LPCSTR param) noexcept {
        if (!AnalogShellBrokerdll) {
            load_AnalogShellBroker();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AnalogShellBrokerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AnalogCommonProxyStub_func(LPCSTR param) noexcept {
        if (!AnalogCommonProxyStubdll) {
            load_AnalogCommonProxyStub();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AnalogCommonProxyStubdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_apds_func(LPCSTR param) noexcept {
        if (!apdsdll) {
            load_apds();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(apdsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_APHostClient_func(LPCSTR param) noexcept {
        if (!APHostClientdll) {
            load_APHostClient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(APHostClientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_APHostRes_func(LPCSTR param) noexcept {
        if (!APHostResdll) {
            load_APHostRes();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(APHostResdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_APHostService_func(LPCSTR param) noexcept {
        if (!APHostServicedll) {
            load_APHostService();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(APHostServicedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_apisampling_func(LPCSTR param) noexcept {
        if (!apisamplingdll) {
            load_apisampling();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(apisamplingdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ApiSetHostAppExecutionAlias_func(LPCSTR param) noexcept {
        if (!ApiSetHostAppExecutionAliasdll) {
            load_ApiSetHostAppExecutionAlias();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ApiSetHostAppExecutionAliasdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_apisetschema_func(LPCSTR param) noexcept {
        if (!apisetschemadll) {
            load_apisetschema();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(apisetschemadll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_APMon_func(LPCSTR param) noexcept {
        if (!APMondll) {
            load_APMon();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(APMondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_APMonUI_func(LPCSTR param) noexcept {
        if (!APMonUIdll) {
            load_APMonUI();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(APMonUIdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AppContracts_func(LPCSTR param) noexcept {
        if (!AppContractsdll) {
            load_AppContracts();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AppContractsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AppExtension_func(LPCSTR param) noexcept {
        if (!AppExtensiondll) {
            load_AppExtension();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AppExtensiondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_apphelp_func(LPCSTR param) noexcept {
        if (!apphelpdll) {
            load_apphelp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(apphelpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_Apphlpdm_func(LPCSTR param) noexcept {
        if (!Apphlpdmdll) {
            load_Apphlpdm();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(Apphlpdmdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_appidapi_func(LPCSTR param) noexcept {
        if (!appidapidll) {
            load_appidapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(appidapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AppIdPolicyEngineApi_func(LPCSTR param) noexcept {
        if (!AppIdPolicyEngineApidll) {
            load_AppIdPolicyEngineApi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AppIdPolicyEngineApidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_appidsvc_func(LPCSTR param) noexcept {
        if (!appidsvcdll) {
            load_appidsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(appidsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_appinfo_func(LPCSTR param) noexcept {
        if (!appinfodll) {
            load_appinfo();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(appinfodll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_appinfoext_func(LPCSTR param) noexcept {
        if (!appinfoextdll) {
            load_appinfoext();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(appinfoextdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AppInstallerPromptDesktop_func(LPCSTR param) noexcept {
        if (!AppInstallerPromptDesktopdll) {
            load_AppInstallerPromptDesktop();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AppInstallerPromptDesktopdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ApplicationControlCSP_func(LPCSTR param) noexcept {
        if (!ApplicationControlCSPdll) {
            load_ApplicationControlCSP();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ApplicationControlCSPdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ApplicationFrame_func(LPCSTR param) noexcept {
        if (!ApplicationFramedll) {
            load_ApplicationFrame();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ApplicationFramedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ApplicationTargetedFeatureDatabase_func(LPCSTR param) noexcept {
        if (!ApplicationTargetedFeatureDatabasedll) {
            load_ApplicationTargetedFeatureDatabase();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ApplicationTargetedFeatureDatabasedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AppListBackupLauncher_func(LPCSTR param) noexcept {
        if (!AppListBackupLauncherdll) {
            load_AppListBackupLauncher();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AppListBackupLauncherdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AppLockerCSP_func(LPCSTR param) noexcept {
        if (!AppLockerCSPdll) {
            load_AppLockerCSP();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AppLockerCSPdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AppManagementConfiguration_func(LPCSTR param) noexcept {
        if (!AppManagementConfigurationdll) {
            load_AppManagementConfiguration();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AppManagementConfigurationdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_appmgmts_func(LPCSTR param) noexcept {
        if (!appmgmtsdll) {
            load_appmgmts();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(appmgmtsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_appmgr_func(LPCSTR param) noexcept {
        if (!appmgrdll) {
            load_appmgr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(appmgrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AppMon_func(LPCSTR param) noexcept {
        if (!AppMondll) {
            load_AppMon();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AppMondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AppointmentActivation_func(LPCSTR param) noexcept {
        if (!AppointmentActivationdll) {
            load_AppointmentActivation();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AppointmentActivationdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AppointmentApis_func(LPCSTR param) noexcept {
        if (!AppointmentApisdll) {
            load_AppointmentApis();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AppointmentApisdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_appraiser_func(LPCSTR param) noexcept {
        if (!appraiserdll) {
            load_appraiser();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(appraiserdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AppReadiness_func(LPCSTR param) noexcept {
        if (!AppReadinessdll) {
            load_AppReadiness();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AppReadinessdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_apprepapi_func(LPCSTR param) noexcept {
        if (!apprepapidll) {
            load_apprepapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(apprepapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AppResolver_func(LPCSTR param) noexcept {
        if (!AppResolverdll) {
            load_AppResolver();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AppResolverdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_appsruprov_func(LPCSTR param) noexcept {
        if (!appsruprovdll) {
            load_appsruprov();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(appsruprovdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AppVCatalog_func(LPCSTR param) noexcept {
        if (!AppVCatalogdll) {
            load_AppVCatalog();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AppVCatalogdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AppvClientEventLog_func(LPCSTR param) noexcept {
        if (!AppvClientEventLogdll) {
            load_AppvClientEventLog();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AppvClientEventLogdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AppVClientPS_func(LPCSTR param) noexcept {
        if (!AppVClientPSdll) {
            load_AppVClientPS();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AppVClientPSdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AppVEntStreamingManager_func(LPCSTR param) noexcept {
        if (!AppVEntStreamingManagerdll) {
            load_AppVEntStreamingManager();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AppVEntStreamingManagerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AppVEntSubsystemController_func(LPCSTR param) noexcept {
        if (!AppVEntSubsystemControllerdll) {
            load_AppVEntSubsystemController();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AppVEntSubsystemControllerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AppVEntSubsystems64_func(LPCSTR param) noexcept {
        if (!AppVEntSubsystems64dll) {
            load_AppVEntSubsystems64();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AppVEntSubsystems64dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AppVEntVirtualization_func(LPCSTR param) noexcept {
        if (!AppVEntVirtualizationdll) {
            load_AppVEntVirtualization();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AppVEntVirtualizationdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_appverifUI_func(LPCSTR param) noexcept {
        if (!appverifUIdll) {
            load_appverifUI();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(appverifUIdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_appvetwclientres_func(LPCSTR param) noexcept {
        if (!appvetwclientresdll) {
            load_appvetwclientres();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(appvetwclientresdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_appvetwsharedperformance_func(LPCSTR param) noexcept {
        if (!appvetwsharedperformancedll) {
            load_appvetwsharedperformance();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(appvetwsharedperformancedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_appvetwstreamingux_func(LPCSTR param) noexcept {
        if (!appvetwstreaminguxdll) {
            load_appvetwstreamingux();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(appvetwstreaminguxdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AppVFileSystemMetadata_func(LPCSTR param) noexcept {
        if (!AppVFileSystemMetadatadll) {
            load_AppVFileSystemMetadata();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AppVFileSystemMetadatadll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AppVIntegration_func(LPCSTR param) noexcept {
        if (!AppVIntegrationdll) {
            load_AppVIntegration();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AppVIntegrationdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AppVManifest_func(LPCSTR param) noexcept {
        if (!AppVManifestdll) {
            load_AppVManifest();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AppVManifestdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AppVOrchestration_func(LPCSTR param) noexcept {
        if (!AppVOrchestrationdll) {
            load_AppVOrchestration();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AppVOrchestrationdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AppVPolicy_func(LPCSTR param) noexcept {
        if (!AppVPolicydll) {
            load_AppVPolicy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AppVPolicydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AppVPublishing_func(LPCSTR param) noexcept {
        if (!AppVPublishingdll) {
            load_AppVPublishing();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AppVPublishingdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AppVReporting_func(LPCSTR param) noexcept {
        if (!AppVReportingdll) {
            load_AppVReporting();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AppVReportingdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AppVScripting_func(LPCSTR param) noexcept {
        if (!AppVScriptingdll) {
            load_AppVScripting();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AppVScriptingdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AppVSentinel_func(LPCSTR param) noexcept {
        if (!AppVSentineldll) {
            load_AppVSentinel();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AppVSentineldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AppVStreamingUX_func(LPCSTR param) noexcept {
        if (!AppVStreamingUXdll) {
            load_AppVStreamingUX();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AppVStreamingUXdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AppVStreamMap_func(LPCSTR param) noexcept {
        if (!AppVStreamMapdll) {
            load_AppVStreamMap();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AppVStreamMapdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AppVTerminator_func(LPCSTR param) noexcept {
        if (!AppVTerminatordll) {
            load_AppVTerminator();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AppVTerminatordll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AppxAllUserStore_func(LPCSTR param) noexcept {
        if (!AppxAllUserStoredll) {
            load_AppxAllUserStore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AppxAllUserStoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AppXApplicabilityBlob_func(LPCSTR param) noexcept {
        if (!AppXApplicabilityBlobdll) {
            load_AppXApplicabilityBlob();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AppXApplicabilityBlobdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AppxApplicabilityEngine_func(LPCSTR param) noexcept {
        if (!AppxApplicabilityEnginedll) {
            load_AppxApplicabilityEngine();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AppxApplicabilityEnginedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AppXDeploymentClient_func(LPCSTR param) noexcept {
        if (!AppXDeploymentClientdll) {
            load_AppXDeploymentClient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AppXDeploymentClientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AppXDeploymentExtensionsdesktop_func(LPCSTR param) noexcept {
        if (!AppXDeploymentExtensionsdesktopdll) {
            load_AppXDeploymentExtensionsdesktop();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AppXDeploymentExtensionsdesktopdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AppXDeploymentExtensionsonecore_func(LPCSTR param) noexcept {
        if (!AppXDeploymentExtensionsonecoredll) {
            load_AppXDeploymentExtensionsonecore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AppXDeploymentExtensionsonecoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AppXDeploymentServer_func(LPCSTR param) noexcept {
        if (!AppXDeploymentServerdll) {
            load_AppXDeploymentServer();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AppXDeploymentServerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AppxPackaging_func(LPCSTR param) noexcept {
        if (!AppxPackagingdll) {
            load_AppxPackaging();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AppxPackagingdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AppxSip_func(LPCSTR param) noexcept {
        if (!AppxSipdll) {
            load_AppxSip();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AppxSipdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AppxStreamingDataSourcePS_func(LPCSTR param) noexcept {
        if (!AppxStreamingDataSourcePSdll) {
            load_AppxStreamingDataSourcePS();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AppxStreamingDataSourcePSdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AppxSysprep_func(LPCSTR param) noexcept {
        if (!AppxSysprepdll) {
            load_AppxSysprep();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AppxSysprepdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_Apx01000_func(LPCSTR param) noexcept {
        if (!Apx01000dll) {
            load_Apx01000();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(Apx01000dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_archiveint_func(LPCSTR param) noexcept {
        if (!archiveintdll) {
            load_archiveint();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(archiveintdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_asferror_func(LPCSTR param) noexcept {
        if (!asferrordll) {
            load_asferror();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(asferrordll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_aspnet_counters_func(LPCSTR param) noexcept {
        if (!aspnet_countersdll) {
            load_aspnet_counters();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(aspnet_countersdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AssignedAccessCsp_func(LPCSTR param) noexcept {
        if (!AssignedAccessCspdll) {
            load_AssignedAccessCsp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AssignedAccessCspdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AssignedAccessManager_func(LPCSTR param) noexcept {
        if (!AssignedAccessManagerdll) {
            load_AssignedAccessManager();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AssignedAccessManagerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_assignedaccessmanagersvc_func(LPCSTR param) noexcept {
        if (!assignedaccessmanagersvcdll) {
            load_assignedaccessmanagersvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(assignedaccessmanagersvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_assignedaccessproviderevents_func(LPCSTR param) noexcept {
        if (!assignedaccessprovidereventsdll) {
            load_assignedaccessproviderevents();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(assignedaccessprovidereventsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AssignedAccessRuntime_func(LPCSTR param) noexcept {
        if (!AssignedAccessRuntimedll) {
            load_AssignedAccessRuntime();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AssignedAccessRuntimedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AssignedAccessShellProxy_func(LPCSTR param) noexcept {
        if (!AssignedAccessShellProxydll) {
            load_AssignedAccessShellProxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AssignedAccessShellProxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_asycfilt_func(LPCSTR param) noexcept {
        if (!asycfiltdll) {
            load_asycfilt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(asycfiltdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_atl_func(LPCSTR param) noexcept {
        if (!atldll) {
            load_atl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(atldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_atl100_func(LPCSTR param) noexcept {
        if (!atl100dll) {
            load_atl100();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(atl100dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_atl110_func(LPCSTR param) noexcept {
        if (!atl110dll) {
            load_atl110();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(atl110dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_atlthunk_func(LPCSTR param) noexcept {
        if (!atlthunkdll) {
            load_atlthunk();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(atlthunkdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_atmlib_func(LPCSTR param) noexcept {
        if (!atmlibdll) {
            load_atmlib();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(atmlibdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AttestationWmiProvider_func(LPCSTR param) noexcept {
        if (!AttestationWmiProviderdll) {
            load_AttestationWmiProvider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AttestationWmiProviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AudioEndpointBuilder_func(LPCSTR param) noexcept {
        if (!AudioEndpointBuilderdll) {
            load_AudioEndpointBuilder();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AudioEndpointBuilderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AudioEng_func(LPCSTR param) noexcept {
        if (!AudioEngdll) {
            load_AudioEng();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AudioEngdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AudioHandlers_func(LPCSTR param) noexcept {
        if (!AudioHandlersdll) {
            load_AudioHandlers();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AudioHandlersdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AUDIOKSE_func(LPCSTR param) noexcept {
        if (!AUDIOKSEdll) {
            load_AUDIOKSE();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AUDIOKSEdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_audioresourceregistrar_func(LPCSTR param) noexcept {
        if (!audioresourceregistrardll) {
            load_audioresourceregistrar();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(audioresourceregistrardll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AudioSes_func(LPCSTR param) noexcept {
        if (!AudioSesdll) {
            load_AudioSes();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AudioSesdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_audiosrv_func(LPCSTR param) noexcept {
        if (!audiosrvdll) {
            load_audiosrv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(audiosrvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AudioSrvPolicyManager_func(LPCSTR param) noexcept {
        if (!AudioSrvPolicyManagerdll) {
            load_AudioSrvPolicyManager();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AudioSrvPolicyManagerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_auditcse_func(LPCSTR param) noexcept {
        if (!auditcsedll) {
            load_auditcse();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(auditcsedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AuditNativeSnapIn_func(LPCSTR param) noexcept {
        if (!AuditNativeSnapIndll) {
            load_AuditNativeSnapIn();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AuditNativeSnapIndll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_auditpolcore_func(LPCSTR param) noexcept {
        if (!auditpolcoredll) {
            load_auditpolcore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(auditpolcoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AuditPolicyGPInterop_func(LPCSTR param) noexcept {
        if (!AuditPolicyGPInteropdll) {
            load_AuditPolicyGPInterop();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AuditPolicyGPInteropdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_auditpolmsg_func(LPCSTR param) noexcept {
        if (!auditpolmsgdll) {
            load_auditpolmsg();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(auditpolmsgdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AuthBroker_func(LPCSTR param) noexcept {
        if (!AuthBrokerdll) {
            load_AuthBroker();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AuthBrokerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AuthBrokerUI_func(LPCSTR param) noexcept {
        if (!AuthBrokerUIdll) {
            load_AuthBrokerUI();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AuthBrokerUIdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_authentication_func(LPCSTR param) noexcept {
        if (!authenticationdll) {
            load_authentication();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(authenticationdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AuthExt_func(LPCSTR param) noexcept {
        if (!AuthExtdll) {
            load_AuthExt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AuthExtdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_authfwcfg_func(LPCSTR param) noexcept {
        if (!authfwcfgdll) {
            load_authfwcfg();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(authfwcfgdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AuthFWGP_func(LPCSTR param) noexcept {
        if (!AuthFWGPdll) {
            load_AuthFWGP();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AuthFWGPdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AuthFWSnapin_func(LPCSTR param) noexcept {
        if (!AuthFWSnapindll) {
            load_AuthFWSnapin();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AuthFWSnapindll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AuthFWWizFwk_func(LPCSTR param) noexcept {
        if (!AuthFWWizFwkdll) {
            load_AuthFWWizFwk();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AuthFWWizFwkdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AuthHostProxy_func(LPCSTR param) noexcept {
        if (!AuthHostProxydll) {
            load_AuthHostProxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AuthHostProxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_authui_func(LPCSTR param) noexcept {
        if (!authuidll) {
            load_authui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(authuidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_authz_func(LPCSTR param) noexcept {
        if (!authzdll) {
            load_authz();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(authzdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AutomaticAppSignInPolicy_func(LPCSTR param) noexcept {
        if (!AutomaticAppSignInPolicydll) {
            load_AutomaticAppSignInPolicy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AutomaticAppSignInPolicydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_autopilot_func(LPCSTR param) noexcept {
        if (!autopilotdll) {
            load_autopilot();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(autopilotdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_autopilotdiag_func(LPCSTR param) noexcept {
        if (!autopilotdiagdll) {
            load_autopilotdiag();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(autopilotdiagdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_autoplay_func(LPCSTR param) noexcept {
        if (!autoplaydll) {
            load_autoplay();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(autoplaydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_autotimesvc_func(LPCSTR param) noexcept {
        if (!autotimesvcdll) {
            load_autotimesvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(autotimesvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_avicap32_func(LPCSTR param) noexcept {
        if (!avicap32dll) {
            load_avicap32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(avicap32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_avifil32_func(LPCSTR param) noexcept {
        if (!avifil32dll) {
            load_avifil32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(avifil32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_avrt_func(LPCSTR param) noexcept {
        if (!avrtdll) {
            load_avrt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(avrtdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AxInstSv_func(LPCSTR param) noexcept {
        if (!AxInstSvdll) {
            load_AxInstSv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AxInstSvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_azroles_func(LPCSTR param) noexcept {
        if (!azrolesdll) {
            load_azroles();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(azrolesdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_azroleui_func(LPCSTR param) noexcept {
        if (!azroleuidll) {
            load_azroleui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(azroleuidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_AzSqlExt_func(LPCSTR param) noexcept {
        if (!AzSqlExtdll) {
            load_AzSqlExt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(AzSqlExtdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_BackgroundMediaPolicy_func(LPCSTR param) noexcept {
        if (!BackgroundMediaPolicydll) {
            load_BackgroundMediaPolicy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(BackgroundMediaPolicydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_BamSettingsClient_func(LPCSTR param) noexcept {
        if (!BamSettingsClientdll) {
            load_BamSettingsClient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(BamSettingsClientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_BarcodeProvisioningPlugin_func(LPCSTR param) noexcept {
        if (!BarcodeProvisioningPlugindll) {
            load_BarcodeProvisioningPlugin();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(BarcodeProvisioningPlugindll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_basecsp_func(LPCSTR param) noexcept {
        if (!basecspdll) {
            load_basecsp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(basecspdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_basesrv_func(LPCSTR param) noexcept {
        if (!basesrvdll) {
            load_basesrv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(basesrvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_batmeter_func(LPCSTR param) noexcept {
        if (!batmeterdll) {
            load_batmeter();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(batmeterdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_bcastdvrproxy_func(LPCSTR param) noexcept {
        if (!bcastdvrproxydll) {
            load_bcastdvrproxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(bcastdvrproxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_BcastDVRBroker_func(LPCSTR param) noexcept {
        if (!BcastDVRBrokerdll) {
            load_BcastDVRBroker();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(BcastDVRBrokerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_BcastDVRClient_func(LPCSTR param) noexcept {
        if (!BcastDVRClientdll) {
            load_BcastDVRClient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(BcastDVRClientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_BcastDVRCommon_func(LPCSTR param) noexcept {
        if (!BcastDVRCommondll) {
            load_BcastDVRCommon();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(BcastDVRCommondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_bcastdvruserservice_func(LPCSTR param) noexcept {
        if (!bcastdvruserservicedll) {
            load_bcastdvruserservice();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(bcastdvruserservicedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_bcd_func(LPCSTR param) noexcept {
        if (!bcddll) {
            load_bcd();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(bcddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_bcdprov_func(LPCSTR param) noexcept {
        if (!bcdprovdll) {
            load_bcdprov();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(bcdprovdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_bcdsrv_func(LPCSTR param) noexcept {
        if (!bcdsrvdll) {
            load_bcdsrv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(bcdsrvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_BCP47Langs_func(LPCSTR param) noexcept {
        if (!BCP47Langsdll) {
            load_BCP47Langs();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(BCP47Langsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_BCP47mrm_func(LPCSTR param) noexcept {
        if (!BCP47mrmdll) {
            load_BCP47mrm();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(BCP47mrmdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_bcrypt_func(LPCSTR param) noexcept {
        if (!bcryptdll) {
            load_bcrypt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(bcryptdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_bcryptprimitives_func(LPCSTR param) noexcept {
        if (!bcryptprimitivesdll) {
            load_bcryptprimitives();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(bcryptprimitivesdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_BdeHdCfgLib_func(LPCSTR param) noexcept {
        if (!BdeHdCfgLibdll) {
            load_BdeHdCfgLib();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(BdeHdCfgLibdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_bderepair_func(LPCSTR param) noexcept {
        if (!bderepairdll) {
            load_bderepair();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(bderepairdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_bdesvc_func(LPCSTR param) noexcept {
        if (!bdesvcdll) {
            load_bdesvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(bdesvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_BdeSysprep_func(LPCSTR param) noexcept {
        if (!BdeSysprepdll) {
            load_BdeSysprep();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(BdeSysprepdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_bdeui_func(LPCSTR param) noexcept {
        if (!bdeuidll) {
            load_bdeui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(bdeuidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_bi_func(LPCSTR param) noexcept {
        if (!bidll) {
            load_bi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(bidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_bidispl_func(LPCSTR param) noexcept {
        if (!bidispldll) {
            load_bidispl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(bidispldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_bindfltapi_func(LPCSTR param) noexcept {
        if (!bindfltapidll) {
            load_bindfltapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(bindfltapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_BingASDS_func(LPCSTR param) noexcept {
        if (!BingASDSdll) {
            load_BingASDS();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(BingASDSdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_BingFilterDS_func(LPCSTR param) noexcept {
        if (!BingFilterDSdll) {
            load_BingFilterDS();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(BingFilterDSdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_BingMaps_func(LPCSTR param) noexcept {
        if (!BingMapsdll) {
            load_BingMaps();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(BingMapsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_BingOnlineServices_func(LPCSTR param) noexcept {
        if (!BingOnlineServicesdll) {
            load_BingOnlineServices();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(BingOnlineServicesdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_BioCredProv_func(LPCSTR param) noexcept {
        if (!BioCredProvdll) {
            load_BioCredProv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(BioCredProvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_bisrv_func(LPCSTR param) noexcept {
        if (!bisrvdll) {
            load_bisrv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(bisrvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_BitLockerCsp_func(LPCSTR param) noexcept {
        if (!BitLockerCspdll) {
            load_BitLockerCsp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(BitLockerCspdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_bitsigd_func(LPCSTR param) noexcept {
        if (!bitsigddll) {
            load_bitsigd();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(bitsigddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_bitsperf_func(LPCSTR param) noexcept {
        if (!bitsperfdll) {
            load_bitsperf();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(bitsperfdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_BitsProxy_func(LPCSTR param) noexcept {
        if (!BitsProxydll) {
            load_BitsProxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(BitsProxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_biwinrt_func(LPCSTR param) noexcept {
        if (!biwinrtdll) {
            load_biwinrt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(biwinrtdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_BlbEvents_func(LPCSTR param) noexcept {
        if (!BlbEventsdll) {
            load_BlbEvents();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(BlbEventsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_blbres_func(LPCSTR param) noexcept {
        if (!blbresdll) {
            load_blbres();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(blbresdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_blb_ps_func(LPCSTR param) noexcept {
        if (!blb_psdll) {
            load_blb_ps();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(blb_psdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_BluetoothApis_func(LPCSTR param) noexcept {
        if (!BluetoothApisdll) {
            load_BluetoothApis();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(BluetoothApisdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_BluetoothDesktopHandlers_func(LPCSTR param) noexcept {
        if (!BluetoothDesktopHandlersdll) {
            load_BluetoothDesktopHandlers();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(BluetoothDesktopHandlersdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_BluetoothOppPushClient_func(LPCSTR param) noexcept {
        if (!BluetoothOppPushClientdll) {
            load_BluetoothOppPushClient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(BluetoothOppPushClientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_bnmanager_func(LPCSTR param) noexcept {
        if (!bnmanagerdll) {
            load_bnmanager();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(bnmanagerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_BootMenuUX_func(LPCSTR param) noexcept {
        if (!BootMenuUXdll) {
            load_BootMenuUX();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(BootMenuUXdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_bootstr_func(LPCSTR param) noexcept {
        if (!bootstrdll) {
            load_bootstr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(bootstrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_bootsvc_func(LPCSTR param) noexcept {
        if (!bootsvcdll) {
            load_bootsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(bootsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_bootux_func(LPCSTR param) noexcept {
        if (!bootuxdll) {
            load_bootux();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(bootuxdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_bridgeres_func(LPCSTR param) noexcept {
        if (!bridgeresdll) {
            load_bridgeres();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(bridgeresdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_BrokerFileDialog_func(LPCSTR param) noexcept {
        if (!BrokerFileDialogdll) {
            load_BrokerFileDialog();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(BrokerFileDialogdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_BrokerLib_func(LPCSTR param) noexcept {
        if (!BrokerLibdll) {
            load_BrokerLib();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(BrokerLibdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_browcli_func(LPCSTR param) noexcept {
        if (!browclidll) {
            load_browcli();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(browclidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_browserbroker_func(LPCSTR param) noexcept {
        if (!browserbrokerdll) {
            load_browserbroker();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(browserbrokerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_browseui_func(LPCSTR param) noexcept {
        if (!browseuidll) {
            load_browseui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(browseuidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_BTAGService_func(LPCSTR param) noexcept {
        if (!BTAGServicedll) {
            load_BTAGService();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(BTAGServicedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_BthAvctpSvc_func(LPCSTR param) noexcept {
        if (!BthAvctpSvcdll) {
            load_BthAvctpSvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(BthAvctpSvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_BthAvrcp_func(LPCSTR param) noexcept {
        if (!BthAvrcpdll) {
            load_BthAvrcp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(BthAvrcpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_BthAvrcpAppSvc_func(LPCSTR param) noexcept {
        if (!BthAvrcpAppSvcdll) {
            load_BthAvrcpAppSvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(BthAvrcpAppSvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_bthci_func(LPCSTR param) noexcept {
        if (!bthcidll) {
            load_bthci();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(bthcidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_BthMtpContextHandler_func(LPCSTR param) noexcept {
        if (!BthMtpContextHandlerdll) {
            load_BthMtpContextHandler();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(BthMtpContextHandlerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_bthpanapi_func(LPCSTR param) noexcept {
        if (!bthpanapidll) {
            load_bthpanapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(bthpanapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_BthpanContextHandler_func(LPCSTR param) noexcept {
        if (!BthpanContextHandlerdll) {
            load_BthpanContextHandler();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(BthpanContextHandlerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_BthRadioMedia_func(LPCSTR param) noexcept {
        if (!BthRadioMediadll) {
            load_BthRadioMedia();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(BthRadioMediadll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_bthserv_func(LPCSTR param) noexcept {
        if (!bthservdll) {
            load_bthserv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(bthservdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_BthTelemetry_func(LPCSTR param) noexcept {
        if (!BthTelemetrydll) {
            load_BthTelemetry();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(BthTelemetrydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_btpanui_func(LPCSTR param) noexcept {
        if (!btpanuidll) {
            load_btpanui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(btpanuidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_BWContextHandler_func(LPCSTR param) noexcept {
        if (!BWContextHandlerdll) {
            load_BWContextHandler();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(BWContextHandlerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_c28c7a4e_a619_4463_82b7_0fc9cc7187f5_HyperV_ComputeStorage_func(LPCSTR param) noexcept {
        if (!c28c7a4e_a619_4463_82b7_0fc9cc7187f5_HyperV_ComputeStoragedll) {
            load_c28c7a4e_a619_4463_82b7_0fc9cc7187f5_HyperV_ComputeStorage();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(c28c7a4e_a619_4463_82b7_0fc9cc7187f5_HyperV_ComputeStoragedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_c4d66f00_b6f0_4439_ac9b_c5ea13fe54d7_HyperV_ComputeCore_func(LPCSTR param) noexcept {
        if (!c4d66f00_b6f0_4439_ac9b_c5ea13fe54d7_HyperV_ComputeCoredll) {
            load_c4d66f00_b6f0_4439_ac9b_c5ea13fe54d7_HyperV_ComputeCore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(c4d66f00_b6f0_4439_ac9b_c5ea13fe54d7_HyperV_ComputeCoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cabapi_func(LPCSTR param) noexcept {
        if (!cabapidll) {
            load_cabapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cabapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cabinet_func(LPCSTR param) noexcept {
        if (!cabinetdll) {
            load_cabinet();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cabinetdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cabview_func(LPCSTR param) noexcept {
        if (!cabviewdll) {
            load_cabview();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cabviewdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CallButtons_func(LPCSTR param) noexcept {
        if (!CallButtonsdll) {
            load_CallButtons();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CallButtonsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CallButtonsProxyStub_func(LPCSTR param) noexcept {
        if (!CallButtonsProxyStubdll) {
            load_CallButtonsProxyStub();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CallButtonsProxyStubdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CallHistoryClient_func(LPCSTR param) noexcept {
        if (!CallHistoryClientdll) {
            load_CallHistoryClient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CallHistoryClientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CameraCaptureUI_func(LPCSTR param) noexcept {
        if (!CameraCaptureUIdll) {
            load_CameraCaptureUI();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CameraCaptureUIdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_camext_func(LPCSTR param) noexcept {
        if (!camextdll) {
            load_camext();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(camextdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CapabilityAccessHandlers_func(LPCSTR param) noexcept {
        if (!CapabilityAccessHandlersdll) {
            load_CapabilityAccessHandlers();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CapabilityAccessHandlersdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CapabilityAccessManager_func(LPCSTR param) noexcept {
        if (!CapabilityAccessManagerdll) {
            load_CapabilityAccessManager();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CapabilityAccessManagerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CapabilityAccessManagerClient_func(LPCSTR param) noexcept {
        if (!CapabilityAccessManagerClientdll) {
            load_CapabilityAccessManagerClient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CapabilityAccessManagerClientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_capauthz_func(LPCSTR param) noexcept {
        if (!capauthzdll) {
            load_capauthz();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(capauthzdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_capiprovider_func(LPCSTR param) noexcept {
        if (!capiproviderdll) {
            load_capiprovider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(capiproviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_capisp_func(LPCSTR param) noexcept {
        if (!capispdll) {
            load_capisp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(capispdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CaptureService_func(LPCSTR param) noexcept {
        if (!CaptureServicedll) {
            load_CaptureService();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CaptureServicedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CastingShellExt_func(LPCSTR param) noexcept {
        if (!CastingShellExtdll) {
            load_CastingShellExt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CastingShellExtdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CastLaunch_func(LPCSTR param) noexcept {
        if (!CastLaunchdll) {
            load_CastLaunch();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CastLaunchdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_catsrv_func(LPCSTR param) noexcept {
        if (!catsrvdll) {
            load_catsrv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(catsrvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_catsrvps_func(LPCSTR param) noexcept {
        if (!catsrvpsdll) {
            load_catsrvps();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(catsrvpsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_catsrvut_func(LPCSTR param) noexcept {
        if (!catsrvutdll) {
            load_catsrvut();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(catsrvutdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CBDHSvc_func(LPCSTR param) noexcept {
        if (!CBDHSvcdll) {
            load_CBDHSvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CBDHSvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cca_func(LPCSTR param) noexcept {
        if (!ccadll) {
            load_cca();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ccadll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CCGLaunchPad_func(LPCSTR param) noexcept {
        if (!CCGLaunchPaddll) {
            load_CCGLaunchPad();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CCGLaunchPaddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cdd_func(LPCSTR param) noexcept {
        if (!cdddll) {
            load_cdd();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cdddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cdosys_func(LPCSTR param) noexcept {
        if (!cdosysdll) {
            load_cdosys();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cdosysdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cdp_func(LPCSTR param) noexcept {
        if (!cdpdll) {
            load_cdp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cdpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cdprt_func(LPCSTR param) noexcept {
        if (!cdprtdll) {
            load_cdprt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cdprtdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cdpsvc_func(LPCSTR param) noexcept {
        if (!cdpsvcdll) {
            load_cdpsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cdpsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cdpusersvc_func(LPCSTR param) noexcept {
        if (!cdpusersvcdll) {
            load_cdpusersvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cdpusersvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cellulardatacapabilityhandler_func(LPCSTR param) noexcept {
        if (!cellulardatacapabilityhandlerdll) {
            load_cellulardatacapabilityhandler();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cellulardatacapabilityhandlerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cemapi_func(LPCSTR param) noexcept {
        if (!cemapidll) {
            load_cemapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cemapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_certca_func(LPCSTR param) noexcept {
        if (!certcadll) {
            load_certca();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(certcadll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_certcli_func(LPCSTR param) noexcept {
        if (!certclidll) {
            load_certcli();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(certclidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_certCredProvider_func(LPCSTR param) noexcept {
        if (!certCredProviderdll) {
            load_certCredProvider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(certCredProviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_certenc_func(LPCSTR param) noexcept {
        if (!certencdll) {
            load_certenc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(certencdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CertEnroll_func(LPCSTR param) noexcept {
        if (!CertEnrolldll) {
            load_CertEnroll();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CertEnrolldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CertEnrollUI_func(LPCSTR param) noexcept {
        if (!CertEnrollUIdll) {
            load_CertEnrollUI();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CertEnrollUIdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_certmgr_func(LPCSTR param) noexcept {
        if (!certmgrdll) {
            load_certmgr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(certmgrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CertPKICmdlet_func(LPCSTR param) noexcept {
        if (!CertPKICmdletdll) {
            load_CertPKICmdlet();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CertPKICmdletdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CertPolEng_func(LPCSTR param) noexcept {
        if (!CertPolEngdll) {
            load_CertPolEng();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CertPolEngdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_certprop_func(LPCSTR param) noexcept {
        if (!certpropdll) {
            load_certprop();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(certpropdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cewmdm_func(LPCSTR param) noexcept {
        if (!cewmdmdll) {
            load_cewmdm();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cewmdmdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cfgbkend_func(LPCSTR param) noexcept {
        if (!cfgbkenddll) {
            load_cfgbkend();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cfgbkenddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cfgmgr32_func(LPCSTR param) noexcept {
        if (!cfgmgr32dll) {
            load_cfgmgr32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cfgmgr32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CfgSPCellular_func(LPCSTR param) noexcept {
        if (!CfgSPCellulardll) {
            load_CfgSPCellular();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CfgSPCellulardll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CfgSPPolicy_func(LPCSTR param) noexcept {
        if (!CfgSPPolicydll) {
            load_CfgSPPolicy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CfgSPPolicydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cflapi_func(LPCSTR param) noexcept {
        if (!cflapidll) {
            load_cflapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cflapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cfmifs_func(LPCSTR param) noexcept {
        if (!cfmifsdll) {
            load_cfmifs();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cfmifsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cfmifsproxy_func(LPCSTR param) noexcept {
        if (!cfmifsproxydll) {
            load_cfmifsproxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cfmifsproxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_Chakra_func(LPCSTR param) noexcept {
        if (!Chakradll) {
            load_Chakra();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(Chakradll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_Chakradiag_func(LPCSTR param) noexcept {
        if (!Chakradiagdll) {
            load_Chakradiag();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(Chakradiagdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_Chakrathunk_func(LPCSTR param) noexcept {
        if (!Chakrathunkdll) {
            load_Chakrathunk();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(Chakrathunkdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_chartv_func(LPCSTR param) noexcept {
        if (!chartvdll) {
            load_chartv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(chartvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ChatApis_func(LPCSTR param) noexcept {
        if (!ChatApisdll) {
            load_ChatApis();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ChatApisdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ChsStrokeDS_func(LPCSTR param) noexcept {
        if (!ChsStrokeDSdll) {
            load_ChsStrokeDS();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ChsStrokeDSdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ChtBopomofoDS_func(LPCSTR param) noexcept {
        if (!ChtBopomofoDSdll) {
            load_ChtBopomofoDS();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ChtBopomofoDSdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ChtCangjieDS_func(LPCSTR param) noexcept {
        if (!ChtCangjieDSdll) {
            load_ChtCangjieDS();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ChtCangjieDSdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ChtHkStrokeDS_func(LPCSTR param) noexcept {
        if (!ChtHkStrokeDSdll) {
            load_ChtHkStrokeDS();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ChtHkStrokeDSdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ChtQuickDS_func(LPCSTR param) noexcept {
        if (!ChtQuickDSdll) {
            load_ChtQuickDS();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ChtQuickDSdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ChxAPDS_func(LPCSTR param) noexcept {
        if (!ChxAPDSdll) {
            load_ChxAPDS();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ChxAPDSdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ChxDecoder_func(LPCSTR param) noexcept {
        if (!ChxDecoderdll) {
            load_ChxDecoder();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ChxDecoderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ChxHAPDS_func(LPCSTR param) noexcept {
        if (!ChxHAPDSdll) {
            load_ChxHAPDS();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ChxHAPDSdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_chxinputrouter_func(LPCSTR param) noexcept {
        if (!chxinputrouterdll) {
            load_chxinputrouter();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(chxinputrouterdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_chxranker_func(LPCSTR param) noexcept {
        if (!chxrankerdll) {
            load_chxranker();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(chxrankerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CHxReadingStringIME_func(LPCSTR param) noexcept {
        if (!CHxReadingStringIMEdll) {
            load_CHxReadingStringIME();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CHxReadingStringIMEdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ci_func(LPCSTR param) noexcept {
        if (!cidll) {
            load_ci();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cic_func(LPCSTR param) noexcept {
        if (!cicdll) {
            load_cic();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cicdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cimfs_func(LPCSTR param) noexcept {
        if (!cimfsdll) {
            load_cimfs();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cimfsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CIRCoInst_func(LPCSTR param) noexcept {
        if (!CIRCoInstdll) {
            load_CIRCoInst();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CIRCoInstdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CIWmi_func(LPCSTR param) noexcept {
        if (!CIWmidll) {
            load_CIWmi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CIWmidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_clbcatq_func(LPCSTR param) noexcept {
        if (!clbcatqdll) {
            load_clbcatq();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(clbcatqdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cldapi_func(LPCSTR param) noexcept {
        if (!cldapidll) {
            load_cldapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cldapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CleanPCCSP_func(LPCSTR param) noexcept {
        if (!CleanPCCSPdll) {
            load_CleanPCCSP();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CleanPCCSPdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_clfsw32_func(LPCSTR param) noexcept {
        if (!clfsw32dll) {
            load_clfsw32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(clfsw32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cliconfg_func(LPCSTR param) noexcept {
        if (!cliconfgdll) {
            load_cliconfg();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cliconfgdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ClipboardServer_func(LPCSTR param) noexcept {
        if (!ClipboardServerdll) {
            load_ClipboardServer();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ClipboardServerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_Clipc_func(LPCSTR param) noexcept {
        if (!Clipcdll) {
            load_Clipc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(Clipcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ClipSVC_func(LPCSTR param) noexcept {
        if (!ClipSVCdll) {
            load_ClipSVC();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ClipSVCdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_clipwinrt_func(LPCSTR param) noexcept {
        if (!clipwinrtdll) {
            load_clipwinrt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(clipwinrtdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cloudAP_func(LPCSTR param) noexcept {
        if (!cloudAPdll) {
            load_cloudAP();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cloudAPdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CloudDesktopCSP_func(LPCSTR param) noexcept {
        if (!CloudDesktopCSPdll) {
            load_CloudDesktopCSP();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CloudDesktopCSPdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CloudDomainJoinAUG_func(LPCSTR param) noexcept {
        if (!CloudDomainJoinAUGdll) {
            load_CloudDomainJoinAUG();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CloudDomainJoinAUGdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CloudDomainJoinDataModelServer_func(LPCSTR param) noexcept {
        if (!CloudDomainJoinDataModelServerdll) {
            load_CloudDomainJoinDataModelServer();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CloudDomainJoinDataModelServerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CloudExperienceHost_func(LPCSTR param) noexcept {
        if (!CloudExperienceHostdll) {
            load_CloudExperienceHost();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CloudExperienceHostdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CloudExperienceHostBroker_func(LPCSTR param) noexcept {
        if (!CloudExperienceHostBrokerdll) {
            load_CloudExperienceHostBroker();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CloudExperienceHostBrokerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CloudExperienceHostCommon_func(LPCSTR param) noexcept {
        if (!CloudExperienceHostCommondll) {
            load_CloudExperienceHostCommon();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CloudExperienceHostCommondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CloudExperienceHostRedirection_func(LPCSTR param) noexcept {
        if (!CloudExperienceHostRedirectiondll) {
            load_CloudExperienceHostRedirection();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CloudExperienceHostRedirectiondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CloudExperienceHostUser_func(LPCSTR param) noexcept {
        if (!CloudExperienceHostUserdll) {
            load_CloudExperienceHostUser();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CloudExperienceHostUserdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cloudidsvc_func(LPCSTR param) noexcept {
        if (!cloudidsvcdll) {
            load_cloudidsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cloudidsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CloudIdWxhExtension_func(LPCSTR param) noexcept {
        if (!CloudIdWxhExtensiondll) {
            load_CloudIdWxhExtension();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CloudIdWxhExtensiondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CloudRecoveryDownloadTool_func(LPCSTR param) noexcept {
        if (!CloudRecoveryDownloadTooldll) {
            load_CloudRecoveryDownloadTool();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CloudRecoveryDownloadTooldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CloudRestoreLauncher_func(LPCSTR param) noexcept {
        if (!CloudRestoreLauncherdll) {
            load_CloudRestoreLauncher();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CloudRestoreLauncherdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_clrhost_func(LPCSTR param) noexcept {
        if (!clrhostdll) {
            load_clrhost();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(clrhostdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_clusapi_func(LPCSTR param) noexcept {
        if (!clusapidll) {
            load_clusapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(clusapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cmcfg32_func(LPCSTR param) noexcept {
        if (!cmcfg32dll) {
            load_cmcfg32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cmcfg32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cmdext_func(LPCSTR param) noexcept {
        if (!cmdextdll) {
            load_cmdext();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cmdextdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cmdial32_func(LPCSTR param) noexcept {
        if (!cmdial32dll) {
            load_cmdial32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cmdial32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cmgrcspps_func(LPCSTR param) noexcept {
        if (!cmgrcsppsdll) {
            load_cmgrcspps();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cmgrcsppsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cmifw_func(LPCSTR param) noexcept {
        if (!cmifwdll) {
            load_cmifw();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cmifwdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cmintegrator_func(LPCSTR param) noexcept {
        if (!cmintegratordll) {
            load_cmintegrator();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cmintegratordll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cmlua_func(LPCSTR param) noexcept {
        if (!cmluadll) {
            load_cmlua();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cmluadll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cmpbk32_func(LPCSTR param) noexcept {
        if (!cmpbk32dll) {
            load_cmpbk32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cmpbk32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cmstplua_func(LPCSTR param) noexcept {
        if (!cmstpluadll) {
            load_cmstplua();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cmstpluadll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cmutil_func(LPCSTR param) noexcept {
        if (!cmutildll) {
            load_cmutil();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cmutildll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cngcredui_func(LPCSTR param) noexcept {
        if (!cngcreduidll) {
            load_cngcredui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cngcreduidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cngkeyhelper_func(LPCSTR param) noexcept {
        if (!cngkeyhelperdll) {
            load_cngkeyhelper();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cngkeyhelperdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cngprovider_func(LPCSTR param) noexcept {
        if (!cngproviderdll) {
            load_cngprovider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cngproviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cnvfat_func(LPCSTR param) noexcept {
        if (!cnvfatdll) {
            load_cnvfat();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cnvfatdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CodeIntegrityAggregator_func(LPCSTR param) noexcept {
        if (!CodeIntegrityAggregatordll) {
            load_CodeIntegrityAggregator();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CodeIntegrityAggregatordll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cofiredm_func(LPCSTR param) noexcept {
        if (!cofiredmdll) {
            load_cofiredm();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cofiredmdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_colbact_func(LPCSTR param) noexcept {
        if (!colbactdll) {
            load_colbact();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(colbactdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_colorui_func(LPCSTR param) noexcept {
        if (!coloruidll) {
            load_colorui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(coloruidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_combase_func(LPCSTR param) noexcept {
        if (!combasedll) {
            load_combase();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(combasedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_comcat_func(LPCSTR param) noexcept {
        if (!comcatdll) {
            load_comcat();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(comcatdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_comctl32_func(LPCSTR param) noexcept {
        if (!comctl32dll) {
            load_comctl32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(comctl32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_comdlg32_func(LPCSTR param) noexcept {
        if (!comdlg32dll) {
            load_comdlg32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(comdlg32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_coml2_func(LPCSTR param) noexcept {
        if (!coml2dll) {
            load_coml2();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(coml2dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CompatAggregator_func(LPCSTR param) noexcept {
        if (!CompatAggregatordll) {
            load_CompatAggregator();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CompatAggregatordll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ComposableShellProxyStub_func(LPCSTR param) noexcept {
        if (!ComposableShellProxyStubdll) {
            load_ComposableShellProxyStub();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ComposableShellProxyStubdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ComposerFramework_func(LPCSTR param) noexcept {
        if (!ComposerFrameworkdll) {
            load_ComposerFramework();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ComposerFrameworkdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CompPkgSup_func(LPCSTR param) noexcept {
        if (!CompPkgSupdll) {
            load_CompPkgSup();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CompPkgSupdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_compstui_func(LPCSTR param) noexcept {
        if (!compstuidll) {
            load_compstui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(compstuidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_computecore_func(LPCSTR param) noexcept {
        if (!computecoredll) {
            load_computecore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(computecoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_computelibeventlog_func(LPCSTR param) noexcept {
        if (!computelibeventlogdll) {
            load_computelibeventlog();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(computelibeventlogdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_computenetwork_func(LPCSTR param) noexcept {
        if (!computenetworkdll) {
            load_computenetwork();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(computenetworkdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_computestorage_func(LPCSTR param) noexcept {
        if (!computestoragedll) {
            load_computestorage();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(computestoragedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_comrepl_func(LPCSTR param) noexcept {
        if (!comrepldll) {
            load_comrepl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(comrepldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_comres_func(LPCSTR param) noexcept {
        if (!comresdll) {
            load_comres();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(comresdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_comsnap_func(LPCSTR param) noexcept {
        if (!comsnapdll) {
            load_comsnap();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(comsnapdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_comsvcs_func(LPCSTR param) noexcept {
        if (!comsvcsdll) {
            load_comsvcs();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(comsvcsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_comuid_func(LPCSTR param) noexcept {
        if (!comuiddll) {
            load_comuid();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(comuiddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_concrt140_func(LPCSTR param) noexcept {
        if (!concrt140dll) {
            load_concrt140();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(concrt140dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_concrt140d_func(LPCSTR param) noexcept {
        if (!concrt140ddll) {
            load_concrt140d();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(concrt140ddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_configmanager2_func(LPCSTR param) noexcept {
        if (!configmanager2dll) {
            load_configmanager2();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(configmanager2dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ConfigureExpandedStorage_func(LPCSTR param) noexcept {
        if (!ConfigureExpandedStoragedll) {
            load_ConfigureExpandedStorage();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ConfigureExpandedStoragedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ConhostV1_func(LPCSTR param) noexcept {
        if (!ConhostV1dll) {
            load_ConhostV1();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ConhostV1dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_connect_func(LPCSTR param) noexcept {
        if (!connectdll) {
            load_connect();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(connectdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ConnectedAccountState_func(LPCSTR param) noexcept {
        if (!ConnectedAccountStatedll) {
            load_ConnectedAccountState();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ConnectedAccountStatedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ConsentExperienceCommon_func(LPCSTR param) noexcept {
        if (!ConsentExperienceCommondll) {
            load_ConsentExperienceCommon();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ConsentExperienceCommondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ConsentUX_func(LPCSTR param) noexcept {
        if (!ConsentUXdll) {
            load_ConsentUX();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ConsentUXdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ConsentUxClient_func(LPCSTR param) noexcept {
        if (!ConsentUxClientdll) {
            load_ConsentUxClient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ConsentUxClientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_console_func(LPCSTR param) noexcept {
        if (!consoledll) {
            load_console();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(consoledll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ConsoleLogon_func(LPCSTR param) noexcept {
        if (!ConsoleLogondll) {
            load_ConsoleLogon();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ConsoleLogondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ConstraintIndexSearch_func(LPCSTR param) noexcept {
        if (!ConstraintIndexSearchdll) {
            load_ConstraintIndexSearch();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ConstraintIndexSearchdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ContactActivation_func(LPCSTR param) noexcept {
        if (!ContactActivationdll) {
            load_ContactActivation();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ContactActivationdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ContactApis_func(LPCSTR param) noexcept {
        if (!ContactApisdll) {
            load_ContactApis();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ContactApisdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ContactHarvesterDS_func(LPCSTR param) noexcept {
        if (!ContactHarvesterDSdll) {
            load_ContactHarvesterDS();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ContactHarvesterDSdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_container_func(LPCSTR param) noexcept {
        if (!containerdll) {
            load_container();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(containerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_containerdevicemanagement_func(LPCSTR param) noexcept {
        if (!containerdevicemanagementdll) {
            load_containerdevicemanagement();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(containerdevicemanagementdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ContentDeliveryManagerUtilities_func(LPCSTR param) noexcept {
        if (!ContentDeliveryManagerUtilitiesdll) {
            load_ContentDeliveryManagerUtilities();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ContentDeliveryManagerUtilitiesdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_coreaudiopolicymanagerext_func(LPCSTR param) noexcept {
        if (!coreaudiopolicymanagerextdll) {
            load_coreaudiopolicymanagerext();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(coreaudiopolicymanagerextdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_coredpus_func(LPCSTR param) noexcept {
        if (!coredpusdll) {
            load_coredpus();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(coredpusdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_coreglobconfig_func(LPCSTR param) noexcept {
        if (!coreglobconfigdll) {
            load_coreglobconfig();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(coreglobconfigdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CoreMas_func(LPCSTR param) noexcept {
        if (!CoreMasdll) {
            load_CoreMas();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CoreMasdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CoreMessaging_func(LPCSTR param) noexcept {
        if (!CoreMessagingdll) {
            load_CoreMessaging();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CoreMessagingdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CoreMmRes_func(LPCSTR param) noexcept {
        if (!CoreMmResdll) {
            load_CoreMmRes();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CoreMmResdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CorePrivacySettingsStore_func(LPCSTR param) noexcept {
        if (!CorePrivacySettingsStoredll) {
            load_CorePrivacySettingsStore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CorePrivacySettingsStoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CoreShell_func(LPCSTR param) noexcept {
        if (!CoreShelldll) {
            load_CoreShell();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CoreShelldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CoreShellAPI_func(LPCSTR param) noexcept {
        if (!CoreShellAPIdll) {
            load_CoreShellAPI();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CoreShellAPIdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CoreShellExtFramework_func(LPCSTR param) noexcept {
        if (!CoreShellExtFrameworkdll) {
            load_CoreShellExtFramework();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CoreShellExtFrameworkdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CoreUIComponents_func(LPCSTR param) noexcept {
        if (!CoreUIComponentsdll) {
            load_CoreUIComponents();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CoreUIComponentsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_correngine_func(LPCSTR param) noexcept {
        if (!correnginedll) {
            load_correngine();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(correnginedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CourtesyEngine_func(LPCSTR param) noexcept {
        if (!CourtesyEnginedll) {
            load_CourtesyEngine();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CourtesyEnginedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CPFilters_func(LPCSTR param) noexcept {
        if (!CPFiltersdll) {
            load_CPFilters();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CPFiltersdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CredDialogBroker_func(LPCSTR param) noexcept {
        if (!CredDialogBrokerdll) {
            load_CredDialogBroker();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CredDialogBrokerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CredentialEnrollmentManagerForUser_func(LPCSTR param) noexcept {
        if (!CredentialEnrollmentManagerForUserdll) {
            load_CredentialEnrollmentManagerForUser();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CredentialEnrollmentManagerForUserdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CredProv2faHelper_func(LPCSTR param) noexcept {
        if (!CredProv2faHelperdll) {
            load_CredProv2faHelper();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CredProv2faHelperdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CredProvCommonCore_func(LPCSTR param) noexcept {
        if (!CredProvCommonCoredll) {
            load_CredProvCommonCore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CredProvCommonCoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CredProvDataModel_func(LPCSTR param) noexcept {
        if (!CredProvDataModeldll) {
            load_CredProvDataModel();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CredProvDataModeldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CredProvHelper_func(LPCSTR param) noexcept {
        if (!CredProvHelperdll) {
            load_CredProvHelper();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CredProvHelperdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_credprovhost_func(LPCSTR param) noexcept {
        if (!credprovhostdll) {
            load_credprovhost();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(credprovhostdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_credprovs_func(LPCSTR param) noexcept {
        if (!credprovsdll) {
            load_credprovs();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(credprovsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_credprovslegacy_func(LPCSTR param) noexcept {
        if (!credprovslegacydll) {
            load_credprovslegacy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(credprovslegacydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_credssp_func(LPCSTR param) noexcept {
        if (!credsspdll) {
            load_credssp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(credsspdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_credui_func(LPCSTR param) noexcept {
        if (!creduidll) {
            load_credui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(creduidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_crypt32_func(LPCSTR param) noexcept {
        if (!crypt32dll) {
            load_crypt32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(crypt32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cryptbase_func(LPCSTR param) noexcept {
        if (!cryptbasedll) {
            load_cryptbase();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cryptbasedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cryptcatsvc_func(LPCSTR param) noexcept {
        if (!cryptcatsvcdll) {
            load_cryptcatsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cryptcatsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cryptdlg_func(LPCSTR param) noexcept {
        if (!cryptdlgdll) {
            load_cryptdlg();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cryptdlgdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cryptdll_func(LPCSTR param) noexcept {
        if (!cryptdlldll) {
            load_cryptdll();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cryptdlldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cryptext_func(LPCSTR param) noexcept {
        if (!cryptextdll) {
            load_cryptext();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cryptextdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cryptnet_func(LPCSTR param) noexcept {
        if (!cryptnetdll) {
            load_cryptnet();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cryptnetdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cryptngc_func(LPCSTR param) noexcept {
        if (!cryptngcdll) {
            load_cryptngc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cryptngcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CryptoWinRT_func(LPCSTR param) noexcept {
        if (!CryptoWinRTdll) {
            load_CryptoWinRT();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CryptoWinRTdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cryptsp_func(LPCSTR param) noexcept {
        if (!cryptspdll) {
            load_cryptsp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cryptspdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cryptsvc_func(LPCSTR param) noexcept {
        if (!cryptsvcdll) {
            load_cryptsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cryptsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_crypttpmeksvc_func(LPCSTR param) noexcept {
        if (!crypttpmeksvcdll) {
            load_crypttpmeksvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(crypttpmeksvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cryptui_func(LPCSTR param) noexcept {
        if (!cryptuidll) {
            load_cryptui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cryptuidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cryptuiwizard_func(LPCSTR param) noexcept {
        if (!cryptuiwizarddll) {
            load_cryptuiwizard();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cryptuiwizarddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cryptxml_func(LPCSTR param) noexcept {
        if (!cryptxmldll) {
            load_cryptxml();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cryptxmldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cscapi_func(LPCSTR param) noexcept {
        if (!cscapidll) {
            load_cscapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cscapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cscdll_func(LPCSTR param) noexcept {
        if (!cscdlldll) {
            load_cscdll();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cscdlldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CscMig_func(LPCSTR param) noexcept {
        if (!CscMigdll) {
            load_CscMig();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CscMigdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cscobj_func(LPCSTR param) noexcept {
        if (!cscobjdll) {
            load_cscobj();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cscobjdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cscsvc_func(LPCSTR param) noexcept {
        if (!cscsvcdll) {
            load_cscsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cscsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cscui_func(LPCSTR param) noexcept {
        if (!cscuidll) {
            load_cscui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cscuidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CspCellularSettings_func(LPCSTR param) noexcept {
        if (!CspCellularSettingsdll) {
            load_CspCellularSettings();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CspCellularSettingsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_csplte_func(LPCSTR param) noexcept {
        if (!cspltedll) {
            load_csplte();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cspltedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CspProxy_func(LPCSTR param) noexcept {
        if (!CspProxydll) {
            load_CspProxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CspProxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_csrsrv_func(LPCSTR param) noexcept {
        if (!csrsrvdll) {
            load_csrsrv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(csrsrvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CSystemEventsBrokerClient_func(LPCSTR param) noexcept {
        if (!CSystemEventsBrokerClientdll) {
            load_CSystemEventsBrokerClient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CSystemEventsBrokerClientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cuzzapi_func(LPCSTR param) noexcept {
        if (!cuzzapidll) {
            load_cuzzapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cuzzapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_cxcredprov_func(LPCSTR param) noexcept {
        if (!cxcredprovdll) {
            load_cxcredprov();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(cxcredprovdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_CXHProvisioningServer_func(LPCSTR param) noexcept {
        if (!CXHProvisioningServerdll) {
            load_CXHProvisioningServer();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(CXHProvisioningServerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d2d1_func(LPCSTR param) noexcept {
        if (!d2d1dll) {
            load_d2d1();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d2d1dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d2d1debug3_func(LPCSTR param) noexcept {
        if (!d2d1debug3dll) {
            load_d2d1debug3();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d2d1debug3dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3d10_func(LPCSTR param) noexcept {
        if (!d3d10dll) {
            load_d3d10();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3d10dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3d10core_func(LPCSTR param) noexcept {
        if (!d3d10coredll) {
            load_d3d10core();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3d10coredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3d10level9_func(LPCSTR param) noexcept {
        if (!d3d10level9dll) {
            load_d3d10level9();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3d10level9dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3d10ref_func(LPCSTR param) noexcept {
        if (!d3d10refdll) {
            load_d3d10ref();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3d10refdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3d10sdklayers_func(LPCSTR param) noexcept {
        if (!d3d10sdklayersdll) {
            load_d3d10sdklayers();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3d10sdklayersdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3d10warp_func(LPCSTR param) noexcept {
        if (!d3d10warpdll) {
            load_d3d10warp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3d10warpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3d10_1_func(LPCSTR param) noexcept {
        if (!d3d10_1dll) {
            load_d3d10_1();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3d10_1dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3d10_1core_func(LPCSTR param) noexcept {
        if (!d3d10_1coredll) {
            load_d3d10_1core();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3d10_1coredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3d11_func(LPCSTR param) noexcept {
        if (!d3d11dll) {
            load_d3d11();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3d11dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3d11on12_func(LPCSTR param) noexcept {
        if (!d3d11on12dll) {
            load_d3d11on12();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3d11on12dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3d11_3SDKLayers_func(LPCSTR param) noexcept {
        if (!d3d11_3SDKLayersdll) {
            load_d3d11_3SDKLayers();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3d11_3SDKLayersdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_D3D12_func(LPCSTR param) noexcept {
        if (!D3D12dll) {
            load_D3D12();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(D3D12dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_D3D12Core_func(LPCSTR param) noexcept {
        if (!D3D12Coredll) {
            load_D3D12Core();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(D3D12Coredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3d12SDKLayers_func(LPCSTR param) noexcept {
        if (!d3d12SDKLayersdll) {
            load_d3d12SDKLayers();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3d12SDKLayersdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3d8thk_func(LPCSTR param) noexcept {
        if (!d3d8thkdll) {
            load_d3d8thk();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3d8thkdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3d9_func(LPCSTR param) noexcept {
        if (!d3d9dll) {
            load_d3d9();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3d9dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3d9on12_func(LPCSTR param) noexcept {
        if (!d3d9on12dll) {
            load_d3d9on12();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3d9on12dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_D3DCompiler_33_func(LPCSTR param) noexcept {
        if (!D3DCompiler_33dll) {
            load_D3DCompiler_33();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(D3DCompiler_33dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_D3DCompiler_34_func(LPCSTR param) noexcept {
        if (!D3DCompiler_34dll) {
            load_D3DCompiler_34();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(D3DCompiler_34dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_D3DCompiler_35_func(LPCSTR param) noexcept {
        if (!D3DCompiler_35dll) {
            load_D3DCompiler_35();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(D3DCompiler_35dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_D3DCompiler_36_func(LPCSTR param) noexcept {
        if (!D3DCompiler_36dll) {
            load_D3DCompiler_36();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(D3DCompiler_36dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_D3DCompiler_37_func(LPCSTR param) noexcept {
        if (!D3DCompiler_37dll) {
            load_D3DCompiler_37();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(D3DCompiler_37dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_D3DCompiler_38_func(LPCSTR param) noexcept {
        if (!D3DCompiler_38dll) {
            load_D3DCompiler_38();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(D3DCompiler_38dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_D3DCompiler_39_func(LPCSTR param) noexcept {
        if (!D3DCompiler_39dll) {
            load_D3DCompiler_39();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(D3DCompiler_39dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_D3DCompiler_40_func(LPCSTR param) noexcept {
        if (!D3DCompiler_40dll) {
            load_D3DCompiler_40();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(D3DCompiler_40dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_D3DCompiler_41_func(LPCSTR param) noexcept {
        if (!D3DCompiler_41dll) {
            load_D3DCompiler_41();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(D3DCompiler_41dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_D3DCompiler_42_func(LPCSTR param) noexcept {
        if (!D3DCompiler_42dll) {
            load_D3DCompiler_42();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(D3DCompiler_42dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_D3DCompiler_43_func(LPCSTR param) noexcept {
        if (!D3DCompiler_43dll) {
            load_D3DCompiler_43();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(D3DCompiler_43dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_D3DCompiler_47_func(LPCSTR param) noexcept {
        if (!D3DCompiler_47dll) {
            load_D3DCompiler_47();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(D3DCompiler_47dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3dcsx_42_func(LPCSTR param) noexcept {
        if (!d3dcsx_42dll) {
            load_d3dcsx_42();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3dcsx_42dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3dcsx_43_func(LPCSTR param) noexcept {
        if (!d3dcsx_43dll) {
            load_d3dcsx_43();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3dcsx_43dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3dref9_func(LPCSTR param) noexcept {
        if (!d3dref9dll) {
            load_d3dref9();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3dref9dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_D3DSCache_func(LPCSTR param) noexcept {
        if (!D3DSCachedll) {
            load_D3DSCache();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(D3DSCachedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3dx10_func(LPCSTR param) noexcept {
        if (!d3dx10dll) {
            load_d3dx10();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3dx10dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3dx10_33_func(LPCSTR param) noexcept {
        if (!d3dx10_33dll) {
            load_d3dx10_33();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3dx10_33dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3dx10_34_func(LPCSTR param) noexcept {
        if (!d3dx10_34dll) {
            load_d3dx10_34();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3dx10_34dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3dx10_35_func(LPCSTR param) noexcept {
        if (!d3dx10_35dll) {
            load_d3dx10_35();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3dx10_35dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3dx10_36_func(LPCSTR param) noexcept {
        if (!d3dx10_36dll) {
            load_d3dx10_36();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3dx10_36dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3dx10_37_func(LPCSTR param) noexcept {
        if (!d3dx10_37dll) {
            load_d3dx10_37();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3dx10_37dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3dx10_38_func(LPCSTR param) noexcept {
        if (!d3dx10_38dll) {
            load_d3dx10_38();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3dx10_38dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3dx10_39_func(LPCSTR param) noexcept {
        if (!d3dx10_39dll) {
            load_d3dx10_39();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3dx10_39dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3dx10_40_func(LPCSTR param) noexcept {
        if (!d3dx10_40dll) {
            load_d3dx10_40();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3dx10_40dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3dx10_41_func(LPCSTR param) noexcept {
        if (!d3dx10_41dll) {
            load_d3dx10_41();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3dx10_41dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3dx10_42_func(LPCSTR param) noexcept {
        if (!d3dx10_42dll) {
            load_d3dx10_42();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3dx10_42dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3dx10_43_func(LPCSTR param) noexcept {
        if (!d3dx10_43dll) {
            load_d3dx10_43();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3dx10_43dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3dx11_42_func(LPCSTR param) noexcept {
        if (!d3dx11_42dll) {
            load_d3dx11_42();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3dx11_42dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3dx11_43_func(LPCSTR param) noexcept {
        if (!d3dx11_43dll) {
            load_d3dx11_43();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3dx11_43dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3dx9_24_func(LPCSTR param) noexcept {
        if (!d3dx9_24dll) {
            load_d3dx9_24();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3dx9_24dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3dx9_25_func(LPCSTR param) noexcept {
        if (!d3dx9_25dll) {
            load_d3dx9_25();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3dx9_25dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3dx9_26_func(LPCSTR param) noexcept {
        if (!d3dx9_26dll) {
            load_d3dx9_26();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3dx9_26dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3dx9_27_func(LPCSTR param) noexcept {
        if (!d3dx9_27dll) {
            load_d3dx9_27();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3dx9_27dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3dx9_28_func(LPCSTR param) noexcept {
        if (!d3dx9_28dll) {
            load_d3dx9_28();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3dx9_28dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3dx9_29_func(LPCSTR param) noexcept {
        if (!d3dx9_29dll) {
            load_d3dx9_29();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3dx9_29dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3dx9_30_func(LPCSTR param) noexcept {
        if (!d3dx9_30dll) {
            load_d3dx9_30();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3dx9_30dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3dx9_31_func(LPCSTR param) noexcept {
        if (!d3dx9_31dll) {
            load_d3dx9_31();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3dx9_31dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3dx9_32_func(LPCSTR param) noexcept {
        if (!d3dx9_32dll) {
            load_d3dx9_32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3dx9_32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3dx9_33_func(LPCSTR param) noexcept {
        if (!d3dx9_33dll) {
            load_d3dx9_33();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3dx9_33dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3dx9_34_func(LPCSTR param) noexcept {
        if (!d3dx9_34dll) {
            load_d3dx9_34();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3dx9_34dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3dx9_35_func(LPCSTR param) noexcept {
        if (!d3dx9_35dll) {
            load_d3dx9_35();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3dx9_35dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d3dx9_36_func(LPCSTR param) noexcept {
        if (!d3dx9_36dll) {
            load_d3dx9_36();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d3dx9_36dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_D3DX9_37_func(LPCSTR param) noexcept {
        if (!D3DX9_37dll) {
            load_D3DX9_37();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(D3DX9_37dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_D3DX9_38_func(LPCSTR param) noexcept {
        if (!D3DX9_38dll) {
            load_D3DX9_38();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(D3DX9_38dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_D3DX9_39_func(LPCSTR param) noexcept {
        if (!D3DX9_39dll) {
            load_D3DX9_39();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(D3DX9_39dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_D3DX9_40_func(LPCSTR param) noexcept {
        if (!D3DX9_40dll) {
            load_D3DX9_40();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(D3DX9_40dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_D3DX9_41_func(LPCSTR param) noexcept {
        if (!D3DX9_41dll) {
            load_D3DX9_41();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(D3DX9_41dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_D3DX9_42_func(LPCSTR param) noexcept {
        if (!D3DX9_42dll) {
            load_D3DX9_42();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(D3DX9_42dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_D3DX9_43_func(LPCSTR param) noexcept {
        if (!D3DX9_43dll) {
            load_D3DX9_43();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(D3DX9_43dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_d4d78066_e6db_44b7_b5cd_2eb82dce620c_HyperV_ComputeLegacy_func(LPCSTR param) noexcept {
        if (!d4d78066_e6db_44b7_b5cd_2eb82dce620c_HyperV_ComputeLegacydll) {
            load_d4d78066_e6db_44b7_b5cd_2eb82dce620c_HyperV_ComputeLegacy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(d4d78066_e6db_44b7_b5cd_2eb82dce620c_HyperV_ComputeLegacydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dab_func(LPCSTR param) noexcept {
        if (!dabdll) {
            load_dab();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dabdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dabapi_func(LPCSTR param) noexcept {
        if (!dabapidll) {
            load_dabapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dabapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DAConn_func(LPCSTR param) noexcept {
        if (!DAConndll) {
            load_DAConn();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DAConndll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dafAspInfraProvider_func(LPCSTR param) noexcept {
        if (!dafAspInfraProviderdll) {
            load_dafAspInfraProvider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dafAspInfraProviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dafBth_func(LPCSTR param) noexcept {
        if (!dafBthdll) {
            load_dafBth();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dafBthdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DafDnsSd_func(LPCSTR param) noexcept {
        if (!DafDnsSddll) {
            load_DafDnsSd();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DafDnsSddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dafDockingProvider_func(LPCSTR param) noexcept {
        if (!dafDockingProviderdll) {
            load_dafDockingProvider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dafDockingProviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DAFESCL_func(LPCSTR param) noexcept {
        if (!DAFESCLdll) {
            load_DAFESCL();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DAFESCLdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DafGip_func(LPCSTR param) noexcept {
        if (!DafGipdll) {
            load_DafGip();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DafGipdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DAFIoT_func(LPCSTR param) noexcept {
        if (!DAFIoTdll) {
            load_DAFIoT();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DAFIoTdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DAFIPP_func(LPCSTR param) noexcept {
        if (!DAFIPPdll) {
            load_DAFIPP();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DAFIPPdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DAFMCP_func(LPCSTR param) noexcept {
        if (!DAFMCPdll) {
            load_DAFMCP();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DAFMCPdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dafpos_func(LPCSTR param) noexcept {
        if (!dafposdll) {
            load_dafpos();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dafposdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DafPrintProvider_func(LPCSTR param) noexcept {
        if (!DafPrintProviderdll) {
            load_DafPrintProvider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DafPrintProviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dafupnp_func(LPCSTR param) noexcept {
        if (!dafupnpdll) {
            load_dafupnp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dafupnpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dafWCN_func(LPCSTR param) noexcept {
        if (!dafWCNdll) {
            load_dafWCN();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dafWCNdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dafWfdProvider_func(LPCSTR param) noexcept {
        if (!dafWfdProviderdll) {
            load_dafWfdProvider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dafWfdProviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DAFWiProv_func(LPCSTR param) noexcept {
        if (!DAFWiProvdll) {
            load_DAFWiProv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DAFWiProvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DAFWSD_func(LPCSTR param) noexcept {
        if (!DAFWSDdll) {
            load_DAFWSD();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DAFWSDdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DAMediaManager_func(LPCSTR param) noexcept {
        if (!DAMediaManagerdll) {
            load_DAMediaManager();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DAMediaManagerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DAMM_func(LPCSTR param) noexcept {
        if (!DAMMdll) {
            load_DAMM();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DAMMdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DaOtpCredentialProvider_func(LPCSTR param) noexcept {
        if (!DaOtpCredentialProviderdll) {
            load_DaOtpCredentialProvider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DaOtpCredentialProviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_das_func(LPCSTR param) noexcept {
        if (!dasdll) {
            load_das();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dasdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dataclen_func(LPCSTR param) noexcept {
        if (!dataclendll) {
            load_dataclen();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dataclendll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DataExchange_func(LPCSTR param) noexcept {
        if (!DataExchangedll) {
            load_DataExchange();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DataExchangedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_datusage_func(LPCSTR param) noexcept {
        if (!datusagedll) {
            load_datusage();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(datusagedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_davclnt_func(LPCSTR param) noexcept {
        if (!davclntdll) {
            load_davclnt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(davclntdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_davhlpr_func(LPCSTR param) noexcept {
        if (!davhlprdll) {
            load_davhlpr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(davhlprdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DavSyncProvider_func(LPCSTR param) noexcept {
        if (!DavSyncProviderdll) {
            load_DavSyncProvider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DavSyncProviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_daxexec_func(LPCSTR param) noexcept {
        if (!daxexecdll) {
            load_daxexec();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(daxexecdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dbgcore_func(LPCSTR param) noexcept {
        if (!dbgcoredll) {
            load_dbgcore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dbgcoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dbgeng_func(LPCSTR param) noexcept {
        if (!dbgengdll) {
            load_dbgeng();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dbgengdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dbghelp_func(LPCSTR param) noexcept {
        if (!dbghelpdll) {
            load_dbghelp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dbghelpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DbgModel_func(LPCSTR param) noexcept {
        if (!DbgModeldll) {
            load_DbgModel();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DbgModeldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dbnetlib_func(LPCSTR param) noexcept {
        if (!dbnetlibdll) {
            load_dbnetlib();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dbnetlibdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dbnmpntw_func(LPCSTR param) noexcept {
        if (!dbnmpntwdll) {
            load_dbnmpntw();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dbnmpntwdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dciman32_func(LPCSTR param) noexcept {
        if (!dciman32dll) {
            load_dciman32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dciman32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dcntel_func(LPCSTR param) noexcept {
        if (!dcnteldll) {
            load_dcntel();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dcnteldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dcomp_func(LPCSTR param) noexcept {
        if (!dcompdll) {
            load_dcomp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dcompdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dcsvc_func(LPCSTR param) noexcept {
        if (!dcsvcdll) {
            load_dcsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dcsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DDACLSys_func(LPCSTR param) noexcept {
        if (!DDACLSysdll) {
            load_DDACLSys();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DDACLSysdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DdcClaimsApi_func(LPCSTR param) noexcept {
        if (!DdcClaimsApidll) {
            load_DdcClaimsApi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DdcClaimsApidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DdcComImplementationsDesktop_func(LPCSTR param) noexcept {
        if (!DdcComImplementationsDesktopdll) {
            load_DdcComImplementationsDesktop();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DdcComImplementationsDesktopdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DDDS_func(LPCSTR param) noexcept {
        if (!DDDSdll) {
            load_DDDS();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DDDSdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ddisplay_func(LPCSTR param) noexcept {
        if (!ddisplaydll) {
            load_ddisplay();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ddisplaydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DDOIProxy_func(LPCSTR param) noexcept {
        if (!DDOIProxydll) {
            load_DDOIProxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DDOIProxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DDORes_func(LPCSTR param) noexcept {
        if (!DDOResdll) {
            load_DDORes();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DDOResdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ddpchunk_func(LPCSTR param) noexcept {
        if (!ddpchunkdll) {
            load_ddpchunk();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ddpchunkdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ddptrace_func(LPCSTR param) noexcept {
        if (!ddptracedll) {
            load_ddptrace();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ddptracedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ddputils_func(LPCSTR param) noexcept {
        if (!ddputilsdll) {
            load_ddputils();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ddputilsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ddp_ps_func(LPCSTR param) noexcept {
        if (!ddp_psdll) {
            load_ddp_ps();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ddp_psdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ddraw_func(LPCSTR param) noexcept {
        if (!ddrawdll) {
            load_ddraw();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ddrawdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ddrawex_func(LPCSTR param) noexcept {
        if (!ddrawexdll) {
            load_ddrawex();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ddrawexdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_debugregsvc_func(LPCSTR param) noexcept {
        if (!debugregsvcdll) {
            load_debugregsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(debugregsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_debugregsvcapi_func(LPCSTR param) noexcept {
        if (!debugregsvcapidll) {
            load_debugregsvcapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(debugregsvcapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_declaredconfiguration_func(LPCSTR param) noexcept {
        if (!declaredconfigurationdll) {
            load_declaredconfiguration();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(declaredconfigurationdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DefaultDeviceManager_func(LPCSTR param) noexcept {
        if (!DefaultDeviceManagerdll) {
            load_DefaultDeviceManager();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DefaultDeviceManagerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DefaultPrinterProvider_func(LPCSTR param) noexcept {
        if (!DefaultPrinterProviderdll) {
            load_DefaultPrinterProvider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DefaultPrinterProviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_defragproxy_func(LPCSTR param) noexcept {
        if (!defragproxydll) {
            load_defragproxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(defragproxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_defragres_func(LPCSTR param) noexcept {
        if (!defragresdll) {
            load_defragres();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(defragresdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_defragsvc_func(LPCSTR param) noexcept {
        if (!defragsvcdll) {
            load_defragsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(defragsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_delegatorprovider_func(LPCSTR param) noexcept {
        if (!delegatorproviderdll) {
            load_delegatorprovider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(delegatorproviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_deploymentcsps_func(LPCSTR param) noexcept {
        if (!deploymentcspsdll) {
            load_deploymentcsps();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(deploymentcspsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_deskadp_func(LPCSTR param) noexcept {
        if (!deskadpdll) {
            load_deskadp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(deskadpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_deskmon_func(LPCSTR param) noexcept {
        if (!deskmondll) {
            load_deskmon();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(deskmondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DesktopShellAppStateContract_func(LPCSTR param) noexcept {
        if (!DesktopShellAppStateContractdll) {
            load_DesktopShellAppStateContract();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DesktopShellAppStateContractdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DesktopShellExt_func(LPCSTR param) noexcept {
        if (!DesktopShellExtdll) {
            load_DesktopShellExt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DesktopShellExtdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DesktopSwitcherDataModel_func(LPCSTR param) noexcept {
        if (!DesktopSwitcherDataModeldll) {
            load_DesktopSwitcherDataModel();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DesktopSwitcherDataModeldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DesktopViewInternalBroker_func(LPCSTR param) noexcept {
        if (!DesktopViewInternalBrokerdll) {
            load_DesktopViewInternalBroker();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DesktopViewInternalBrokerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DesktopViewInternalBrokerProxyStub_func(LPCSTR param) noexcept {
        if (!DesktopViewInternalBrokerProxyStubdll) {
            load_DesktopViewInternalBrokerProxyStub();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DesktopViewInternalBrokerProxyStubdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DevDispItemProvider_func(LPCSTR param) noexcept {
        if (!DevDispItemProviderdll) {
            load_DevDispItemProvider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DevDispItemProviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DeveloperOptionsSettingsHandlers_func(LPCSTR param) noexcept {
        if (!DeveloperOptionsSettingsHandlersdll) {
            load_DeveloperOptionsSettingsHandlers();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DeveloperOptionsSettingsHandlersdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DeveloperSetupCSP_func(LPCSTR param) noexcept {
        if (!DeveloperSetupCSPdll) {
            load_DeveloperSetupCSP();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DeveloperSetupCSPdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DeveloperToolsProxyStub_func(LPCSTR param) noexcept {
        if (!DeveloperToolsProxyStubdll) {
            load_DeveloperToolsProxyStub();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DeveloperToolsProxyStubdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DeveloperToolsMgr_func(LPCSTR param) noexcept {
        if (!DeveloperToolsMgrdll) {
            load_DeveloperToolsMgr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DeveloperToolsMgrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_devenum_func(LPCSTR param) noexcept {
        if (!devenumdll) {
            load_devenum();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(devenumdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_deviceaccess_func(LPCSTR param) noexcept {
        if (!deviceaccessdll) {
            load_deviceaccess();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(deviceaccessdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_deviceassociation_func(LPCSTR param) noexcept {
        if (!deviceassociationdll) {
            load_deviceassociation();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(deviceassociationdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DeviceCenter_func(LPCSTR param) noexcept {
        if (!DeviceCenterdll) {
            load_DeviceCenter();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DeviceCenterdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DeviceCompanionAppInstall_func(LPCSTR param) noexcept {
        if (!DeviceCompanionAppInstalldll) {
            load_DeviceCompanionAppInstall();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DeviceCompanionAppInstalldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DeviceCredential_func(LPCSTR param) noexcept {
        if (!DeviceCredentialdll) {
            load_DeviceCredential();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DeviceCredentialdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DeviceDirectoryClient_func(LPCSTR param) noexcept {
        if (!DeviceDirectoryClientdll) {
            load_DeviceDirectoryClient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DeviceDirectoryClientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DeviceDisplayStatusManager_func(LPCSTR param) noexcept {
        if (!DeviceDisplayStatusManagerdll) {
            load_DeviceDisplayStatusManager();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DeviceDisplayStatusManagerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DeviceDriverRetrievalClient_func(LPCSTR param) noexcept {
        if (!DeviceDriverRetrievalClientdll) {
            load_DeviceDriverRetrievalClient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DeviceDriverRetrievalClientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DeviceElementSource_func(LPCSTR param) noexcept {
        if (!DeviceElementSourcedll) {
            load_DeviceElementSource();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DeviceElementSourcedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DeviceFlowsDataModel_func(LPCSTR param) noexcept {
        if (!DeviceFlowsDataModeldll) {
            load_DeviceFlowsDataModel();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DeviceFlowsDataModeldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DeviceMetadataRetrievalClient_func(LPCSTR param) noexcept {
        if (!DeviceMetadataRetrievalClientdll) {
            load_DeviceMetadataRetrievalClient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DeviceMetadataRetrievalClientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_devicengccredprov_func(LPCSTR param) noexcept {
        if (!devicengccredprovdll) {
            load_devicengccredprov();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(devicengccredprovdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DevicePairing_func(LPCSTR param) noexcept {
        if (!DevicePairingdll) {
            load_DevicePairing();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DevicePairingdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DevicePairingExperienceMEM_func(LPCSTR param) noexcept {
        if (!DevicePairingExperienceMEMdll) {
            load_DevicePairingExperienceMEM();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DevicePairingExperienceMEMdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DevicePairingFolder_func(LPCSTR param) noexcept {
        if (!DevicePairingFolderdll) {
            load_DevicePairingFolder();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DevicePairingFolderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DevicePairingProxy_func(LPCSTR param) noexcept {
        if (!DevicePairingProxydll) {
            load_DevicePairingProxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DevicePairingProxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DeviceReactivation_func(LPCSTR param) noexcept {
        if (!DeviceReactivationdll) {
            load_DeviceReactivation();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DeviceReactivationdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_deviceregistration_func(LPCSTR param) noexcept {
        if (!deviceregistrationdll) {
            load_deviceregistration();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(deviceregistrationdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DeviceSetupManager_func(LPCSTR param) noexcept {
        if (!DeviceSetupManagerdll) {
            load_DeviceSetupManager();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DeviceSetupManagerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DeviceSetupManagerAPI_func(LPCSTR param) noexcept {
        if (!DeviceSetupManagerAPIdll) {
            load_DeviceSetupManagerAPI();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DeviceSetupManagerAPIdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DeviceSetupStatusProvider_func(LPCSTR param) noexcept {
        if (!DeviceSetupStatusProviderdll) {
            load_DeviceSetupStatusProvider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DeviceSetupStatusProviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DevicesFlowBroker_func(LPCSTR param) noexcept {
        if (!DevicesFlowBrokerdll) {
            load_DevicesFlowBroker();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DevicesFlowBrokerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DeviceSoftwareInstallationClient_func(LPCSTR param) noexcept {
        if (!DeviceSoftwareInstallationClientdll) {
            load_DeviceSoftwareInstallationClient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DeviceSoftwareInstallationClientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DeviceUpdateAgent_func(LPCSTR param) noexcept {
        if (!DeviceUpdateAgentdll) {
            load_DeviceUpdateAgent();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DeviceUpdateAgentdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DeviceUpdateCenterCsp_func(LPCSTR param) noexcept {
        if (!DeviceUpdateCenterCspdll) {
            load_DeviceUpdateCenterCsp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DeviceUpdateCenterCspdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DeviceUxRes_func(LPCSTR param) noexcept {
        if (!DeviceUxResdll) {
            load_DeviceUxRes();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DeviceUxResdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_devinv_func(LPCSTR param) noexcept {
        if (!devinvdll) {
            load_devinv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(devinvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_devmgr_func(LPCSTR param) noexcept {
        if (!devmgrdll) {
            load_devmgr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(devmgrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_devobj_func(LPCSTR param) noexcept {
        if (!devobjdll) {
            load_devobj();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(devobjdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DevPropMgr_func(LPCSTR param) noexcept {
        if (!DevPropMgrdll) {
            load_DevPropMgr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DevPropMgrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DevQueryBroker_func(LPCSTR param) noexcept {
        if (!DevQueryBrokerdll) {
            load_DevQueryBroker();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DevQueryBrokerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_devrtl_func(LPCSTR param) noexcept {
        if (!devrtldll) {
            load_devrtl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(devrtldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dfdts_func(LPCSTR param) noexcept {
        if (!dfdtsdll) {
            load_dfdts();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dfdtsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dfscli_func(LPCSTR param) noexcept {
        if (!dfsclidll) {
            load_dfscli();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dfsclidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dfshim_func(LPCSTR param) noexcept {
        if (!dfshimdll) {
            load_dfshim();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dfshimdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DfsShlEx_func(LPCSTR param) noexcept {
        if (!DfsShlExdll) {
            load_DfsShlEx();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DfsShlExdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dggpext_func(LPCSTR param) noexcept {
        if (!dggpextdll) {
            load_dggpext();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dggpextdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dhcpcmonitor_func(LPCSTR param) noexcept {
        if (!dhcpcmonitordll) {
            load_dhcpcmonitor();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dhcpcmonitordll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dhcpcore_func(LPCSTR param) noexcept {
        if (!dhcpcoredll) {
            load_dhcpcore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dhcpcoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dhcpcore6_func(LPCSTR param) noexcept {
        if (!dhcpcore6dll) {
            load_dhcpcore6();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dhcpcore6dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dhcpcsvc_func(LPCSTR param) noexcept {
        if (!dhcpcsvcdll) {
            load_dhcpcsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dhcpcsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dhcpcsvc6_func(LPCSTR param) noexcept {
        if (!dhcpcsvc6dll) {
            load_dhcpcsvc6();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dhcpcsvc6dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dhcpsapi_func(LPCSTR param) noexcept {
        if (!dhcpsapidll) {
            load_dhcpsapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dhcpsapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DHolographicDisplay_func(LPCSTR param) noexcept {
        if (!DHolographicDisplaydll) {
            load_DHolographicDisplay();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DHolographicDisplaydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DiagCpl_func(LPCSTR param) noexcept {
        if (!DiagCpldll) {
            load_DiagCpl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DiagCpldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_diagnosticdataquery_func(LPCSTR param) noexcept {
        if (!diagnosticdataquerydll) {
            load_diagnosticdataquery();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(diagnosticdataquerydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DiagnosticDataSettings_func(LPCSTR param) noexcept {
        if (!DiagnosticDataSettingsdll) {
            load_DiagnosticDataSettings();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DiagnosticDataSettingsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DiagnosticInvoker_func(LPCSTR param) noexcept {
        if (!DiagnosticInvokerdll) {
            load_DiagnosticInvoker();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DiagnosticInvokerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DiagnosticLogCSP_func(LPCSTR param) noexcept {
        if (!DiagnosticLogCSPdll) {
            load_DiagnosticLogCSP();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DiagnosticLogCSPdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_diagperf_func(LPCSTR param) noexcept {
        if (!diagperfdll) {
            load_diagperf();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(diagperfdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DiagSvc_func(LPCSTR param) noexcept {
        if (!DiagSvcdll) {
            load_DiagSvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DiagSvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_diagtrack_func(LPCSTR param) noexcept {
        if (!diagtrackdll) {
            load_diagtrack();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(diagtrackdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dialclient_func(LPCSTR param) noexcept {
        if (!dialclientdll) {
            load_dialclient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dialclientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DialogBlockerProc_func(LPCSTR param) noexcept {
        if (!DialogBlockerProcdll) {
            load_DialogBlockerProc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DialogBlockerProcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DialogBlockingManager_func(LPCSTR param) noexcept {
        if (!DialogBlockingManagerdll) {
            load_DialogBlockingManager();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DialogBlockingManagerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DialogBlockingService_func(LPCSTR param) noexcept {
        if (!DialogBlockingServicedll) {
            load_DialogBlockingService();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DialogBlockingServicedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dialserver_func(LPCSTR param) noexcept {
        if (!dialserverdll) {
            load_dialserver();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dialserverdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DictationManager_func(LPCSTR param) noexcept {
        if (!DictationManagerdll) {
            load_DictationManager();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DictationManagerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_difxapi_func(LPCSTR param) noexcept {
        if (!difxapidll) {
            load_difxapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(difxapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dimsjob_func(LPCSTR param) noexcept {
        if (!dimsjobdll) {
            load_dimsjob();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dimsjobdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dimsroam_func(LPCSTR param) noexcept {
        if (!dimsroamdll) {
            load_dimsroam();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dimsroamdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dinput_func(LPCSTR param) noexcept {
        if (!dinputdll) {
            load_dinput();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dinputdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dinput8_func(LPCSTR param) noexcept {
        if (!dinput8dll) {
            load_dinput8();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dinput8dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_Direct2DDesktop_func(LPCSTR param) noexcept {
        if (!Direct2DDesktopdll) {
            load_Direct2DDesktop();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(Direct2DDesktopdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_directmanipulation_func(LPCSTR param) noexcept {
        if (!directmanipulationdll) {
            load_directmanipulation();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(directmanipulationdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DirectMLDebug_func(LPCSTR param) noexcept {
        if (!DirectMLDebugdll) {
            load_DirectMLDebug();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DirectMLDebugdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_directml_func(LPCSTR param) noexcept {
        if (!directmldll) {
            load_directml();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(directmldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_directxdatabasehelper_func(LPCSTR param) noexcept {
        if (!directxdatabasehelperdll) {
            load_directxdatabasehelper();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(directxdatabasehelperdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_discan_func(LPCSTR param) noexcept {
        if (!discandll) {
            load_discan();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(discandll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DismApi_func(LPCSTR param) noexcept {
        if (!DismApidll) {
            load_DismApi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DismApidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DispBrokerDesktop_func(LPCSTR param) noexcept {
        if (!DispBrokerDesktopdll) {
            load_DispBrokerDesktop();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DispBrokerDesktopdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DispBroker_func(LPCSTR param) noexcept {
        if (!DispBrokerdll) {
            load_DispBroker();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DispBrokerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dispex_func(LPCSTR param) noexcept {
        if (!dispexdll) {
            load_dispex();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dispexdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_Display_func(LPCSTR param) noexcept {
        if (!Displaydll) {
            load_Display();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(Displaydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DisplayManager_func(LPCSTR param) noexcept {
        if (!DisplayManagerdll) {
            load_DisplayManager();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DisplayManagerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dlnashext_func(LPCSTR param) noexcept {
        if (!dlnashextdll) {
            load_dlnashext();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dlnashextdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DMAlertListenerProxyStub_func(LPCSTR param) noexcept {
        if (!DMAlertListenerProxyStubdll) {
            load_DMAlertListenerProxyStub();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DMAlertListenerProxyStubdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DmApiSetExtImplDesktop_func(LPCSTR param) noexcept {
        if (!DmApiSetExtImplDesktopdll) {
            load_DmApiSetExtImplDesktop();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DmApiSetExtImplDesktopdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DMAppsRes_func(LPCSTR param) noexcept {
        if (!DMAppsResdll) {
            load_DMAppsRes();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DMAppsResdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dmcfgutils_func(LPCSTR param) noexcept {
        if (!dmcfgutilsdll) {
            load_dmcfgutils();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dmcfgutilsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dmcmnutils_func(LPCSTR param) noexcept {
        if (!dmcmnutilsdll) {
            load_dmcmnutils();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dmcmnutilsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dmcommandlineutils_func(LPCSTR param) noexcept {
        if (!dmcommandlineutilsdll) {
            load_dmcommandlineutils();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dmcommandlineutilsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dmcsps_func(LPCSTR param) noexcept {
        if (!dmcspsdll) {
            load_dmcsps();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dmcspsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dmdlgs_func(LPCSTR param) noexcept {
        if (!dmdlgsdll) {
            load_dmdlgs();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dmdlgsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dmdskmgr_func(LPCSTR param) noexcept {
        if (!dmdskmgrdll) {
            load_dmdskmgr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dmdskmgrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dmdskres_func(LPCSTR param) noexcept {
        if (!dmdskresdll) {
            load_dmdskres();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dmdskresdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dmdskres2_func(LPCSTR param) noexcept {
        if (!dmdskres2dll) {
            load_dmdskres2();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dmdskres2dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dmenrollengine_func(LPCSTR param) noexcept {
        if (!dmenrollenginedll) {
            load_dmenrollengine();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dmenrollenginedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dmenterprisediagnostics_func(LPCSTR param) noexcept {
        if (!dmenterprisediagnosticsdll) {
            load_dmenterprisediagnostics();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dmenterprisediagnosticsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dmintf_func(LPCSTR param) noexcept {
        if (!dmintfdll) {
            load_dmintf();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dmintfdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dmiso8601utils_func(LPCSTR param) noexcept {
        if (!dmiso8601utilsdll) {
            load_dmiso8601utils();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dmiso8601utilsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dmloader_func(LPCSTR param) noexcept {
        if (!dmloaderdll) {
            load_dmloader();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dmloaderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dmocx_func(LPCSTR param) noexcept {
        if (!dmocxdll) {
            load_dmocx();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dmocxdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dmoleaututils_func(LPCSTR param) noexcept {
        if (!dmoleaututilsdll) {
            load_dmoleaututils();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dmoleaututilsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dmprocessxmlfiltered_func(LPCSTR param) noexcept {
        if (!dmprocessxmlfiltereddll) {
            load_dmprocessxmlfiltered();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dmprocessxmlfiltereddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dmpushproxy_func(LPCSTR param) noexcept {
        if (!dmpushproxydll) {
            load_dmpushproxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dmpushproxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DMPushRouterCore_func(LPCSTR param) noexcept {
        if (!DMPushRouterCoredll) {
            load_DMPushRouterCore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DMPushRouterCoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DMRCDecoder_func(LPCSTR param) noexcept {
        if (!DMRCDecoderdll) {
            load_DMRCDecoder();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DMRCDecoderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DMRServer_func(LPCSTR param) noexcept {
        if (!DMRServerdll) {
            load_DMRServer();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DMRServerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dmsynth_func(LPCSTR param) noexcept {
        if (!dmsynthdll) {
            load_dmsynth();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dmsynthdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dmusic_func(LPCSTR param) noexcept {
        if (!dmusicdll) {
            load_dmusic();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dmusicdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dmutil_func(LPCSTR param) noexcept {
        if (!dmutildll) {
            load_dmutil();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dmutildll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dmvdsitf_func(LPCSTR param) noexcept {
        if (!dmvdsitfdll) {
            load_dmvdsitf();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dmvdsitfdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dmwappushsvc_func(LPCSTR param) noexcept {
        if (!dmwappushsvcdll) {
            load_dmwappushsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dmwappushsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dmwmicsp_func(LPCSTR param) noexcept {
        if (!dmwmicspdll) {
            load_dmwmicsp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dmwmicspdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dmxmlhelputils_func(LPCSTR param) noexcept {
        if (!dmxmlhelputilsdll) {
            load_dmxmlhelputils();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dmxmlhelputilsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dnsapi_func(LPCSTR param) noexcept {
        if (!dnsapidll) {
            load_dnsapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dnsapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dnscmmc_func(LPCSTR param) noexcept {
        if (!dnscmmcdll) {
            load_dnscmmc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dnscmmcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dnsext_func(LPCSTR param) noexcept {
        if (!dnsextdll) {
            load_dnsext();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dnsextdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dnshc_func(LPCSTR param) noexcept {
        if (!dnshcdll) {
            load_dnshc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dnshcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dnsrslvr_func(LPCSTR param) noexcept {
        if (!dnsrslvrdll) {
            load_dnsrslvr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dnsrslvrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DockingVirtualInput_func(LPCSTR param) noexcept {
        if (!DockingVirtualInputdll) {
            load_DockingVirtualInput();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DockingVirtualInputdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DockInterfaceProxyStub_func(LPCSTR param) noexcept {
        if (!DockInterfaceProxyStubdll) {
            load_DockInterfaceProxyStub();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DockInterfaceProxyStubdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_doclient_func(LPCSTR param) noexcept {
        if (!doclientdll) {
            load_doclient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(doclientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_docprop_func(LPCSTR param) noexcept {
        if (!docpropdll) {
            load_docprop();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(docpropdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DocumentPerformanceEvents_func(LPCSTR param) noexcept {
        if (!DocumentPerformanceEventsdll) {
            load_DocumentPerformanceEvents();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DocumentPerformanceEventsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DolbyDecMFT_func(LPCSTR param) noexcept {
        if (!DolbyDecMFTdll) {
            load_DolbyDecMFT();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DolbyDecMFTdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_domgmt_func(LPCSTR param) noexcept {
        if (!domgmtdll) {
            load_domgmt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(domgmtdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_domiprov_func(LPCSTR param) noexcept {
        if (!domiprovdll) {
            load_domiprov();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(domiprovdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dosettings_func(LPCSTR param) noexcept {
        if (!dosettingsdll) {
            load_dosettings();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dosettingsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dosvc_func(LPCSTR param) noexcept {
        if (!dosvcdll) {
            load_dosvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dosvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dot3api_func(LPCSTR param) noexcept {
        if (!dot3apidll) {
            load_dot3api();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dot3apidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dot3cfg_func(LPCSTR param) noexcept {
        if (!dot3cfgdll) {
            load_dot3cfg();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dot3cfgdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_Dot3Conn_func(LPCSTR param) noexcept {
        if (!Dot3Conndll) {
            load_Dot3Conn();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(Dot3Conndll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dot3dlg_func(LPCSTR param) noexcept {
        if (!dot3dlgdll) {
            load_dot3dlg();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dot3dlgdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dot3gpclnt_func(LPCSTR param) noexcept {
        if (!dot3gpclntdll) {
            load_dot3gpclnt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dot3gpclntdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dot3gpui_func(LPCSTR param) noexcept {
        if (!dot3gpuidll) {
            load_dot3gpui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dot3gpuidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dot3hc_func(LPCSTR param) noexcept {
        if (!dot3hcdll) {
            load_dot3hc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dot3hcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dot3mm_func(LPCSTR param) noexcept {
        if (!dot3mmdll) {
            load_dot3mm();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dot3mmdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dot3msm_func(LPCSTR param) noexcept {
        if (!dot3msmdll) {
            load_dot3msm();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dot3msmdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dot3svc_func(LPCSTR param) noexcept {
        if (!dot3svcdll) {
            load_dot3svc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dot3svcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dot3ui_func(LPCSTR param) noexcept {
        if (!dot3uidll) {
            load_dot3ui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dot3uidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dpapi_func(LPCSTR param) noexcept {
        if (!dpapidll) {
            load_dpapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dpapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dpapiprovider_func(LPCSTR param) noexcept {
        if (!dpapiproviderdll) {
            load_dpapiprovider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dpapiproviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dpapisrv_func(LPCSTR param) noexcept {
        if (!dpapisrvdll) {
            load_dpapisrv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dpapisrvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dplcsp_func(LPCSTR param) noexcept {
        if (!dplcspdll) {
            load_dplcsp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dplcspdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dpnaddr_func(LPCSTR param) noexcept {
        if (!dpnaddrdll) {
            load_dpnaddr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dpnaddrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dpnathlp_func(LPCSTR param) noexcept {
        if (!dpnathlpdll) {
            load_dpnathlp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dpnathlpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dpnet_func(LPCSTR param) noexcept {
        if (!dpnetdll) {
            load_dpnet();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dpnetdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dpnhpast_func(LPCSTR param) noexcept {
        if (!dpnhpastdll) {
            load_dpnhpast();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dpnhpastdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dpnhupnp_func(LPCSTR param) noexcept {
        if (!dpnhupnpdll) {
            load_dpnhupnp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dpnhupnpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dpnlobby_func(LPCSTR param) noexcept {
        if (!dpnlobbydll) {
            load_dpnlobby();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dpnlobbydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dps_func(LPCSTR param) noexcept {
        if (!dpsdll) {
            load_dps();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dpsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dpx_func(LPCSTR param) noexcept {
        if (!dpxdll) {
            load_dpx();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dpxdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DragDropExperienceCommon_func(LPCSTR param) noexcept {
        if (!DragDropExperienceCommondll) {
            load_DragDropExperienceCommon();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DragDropExperienceCommondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DragDropExperienceDataExchangeDelegated_func(LPCSTR param) noexcept {
        if (!DragDropExperienceDataExchangeDelegateddll) {
            load_DragDropExperienceDataExchangeDelegated();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DragDropExperienceDataExchangeDelegateddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_drprov_func(LPCSTR param) noexcept {
        if (!drprovdll) {
            load_drprov();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(drprovdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_drt_func(LPCSTR param) noexcept {
        if (!drtdll) {
            load_drt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(drtdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_drtprov_func(LPCSTR param) noexcept {
        if (!drtprovdll) {
            load_drtprov();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(drtprovdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_drttransport_func(LPCSTR param) noexcept {
        if (!drttransportdll) {
            load_drttransport();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(drttransportdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_drvsetup_func(LPCSTR param) noexcept {
        if (!drvsetupdll) {
            load_drvsetup();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(drvsetupdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_drvstore_func(LPCSTR param) noexcept {
        if (!drvstoredll) {
            load_drvstore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(drvstoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dsauth_func(LPCSTR param) noexcept {
        if (!dsauthdll) {
            load_dsauth();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dsauthdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DscCore_func(LPCSTR param) noexcept {
        if (!DscCoredll) {
            load_DscCore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DscCoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DscCoreConfProv_func(LPCSTR param) noexcept {
        if (!DscCoreConfProvdll) {
            load_DscCoreConfProv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DscCoreConfProvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dsclient_func(LPCSTR param) noexcept {
        if (!dsclientdll) {
            load_dsclient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dsclientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dscproxy_func(LPCSTR param) noexcept {
        if (!dscproxydll) {
            load_dscproxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dscproxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DscTimer_func(LPCSTR param) noexcept {
        if (!DscTimerdll) {
            load_DscTimer();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DscTimerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dsdmo_func(LPCSTR param) noexcept {
        if (!dsdmodll) {
            load_dsdmo();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dsdmodll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dskquota_func(LPCSTR param) noexcept {
        if (!dskquotadll) {
            load_dskquota();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dskquotadll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dskquoui_func(LPCSTR param) noexcept {
        if (!dskquouidll) {
            load_dskquoui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dskquouidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dsound_func(LPCSTR param) noexcept {
        if (!dsounddll) {
            load_dsound();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dsounddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dsparse_func(LPCSTR param) noexcept {
        if (!dsparsedll) {
            load_dsparse();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dsparsedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dsprop_func(LPCSTR param) noexcept {
        if (!dspropdll) {
            load_dsprop();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dspropdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dsquery_func(LPCSTR param) noexcept {
        if (!dsquerydll) {
            load_dsquery();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dsquerydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dsreg_func(LPCSTR param) noexcept {
        if (!dsregdll) {
            load_dsreg();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dsregdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dsregtask_func(LPCSTR param) noexcept {
        if (!dsregtaskdll) {
            load_dsregtask();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dsregtaskdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dsrole_func(LPCSTR param) noexcept {
        if (!dsroledll) {
            load_dsrole();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dsroledll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dssec_func(LPCSTR param) noexcept {
        if (!dssecdll) {
            load_dssec();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dssecdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dssenh_func(LPCSTR param) noexcept {
        if (!dssenhdll) {
            load_dssenh();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dssenhdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dssvc_func(LPCSTR param) noexcept {
        if (!dssvcdll) {
            load_dssvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dssvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_Dsui_func(LPCSTR param) noexcept {
        if (!Dsuidll) {
            load_Dsui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(Dsuidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dsuiext_func(LPCSTR param) noexcept {
        if (!dsuiextdll) {
            load_dsuiext();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dsuiextdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dswave_func(LPCSTR param) noexcept {
        if (!dswavedll) {
            load_dswave();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dswavedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dtsh_func(LPCSTR param) noexcept {
        if (!dtshdll) {
            load_dtsh();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dtshdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DuCsps_func(LPCSTR param) noexcept {
        if (!DuCspsdll) {
            load_DuCsps();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DuCspsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dui70_func(LPCSTR param) noexcept {
        if (!dui70dll) {
            load_dui70();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dui70dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_duser_func(LPCSTR param) noexcept {
        if (!duserdll) {
            load_duser();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(duserdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dusmapi_func(LPCSTR param) noexcept {
        if (!dusmapidll) {
            load_dusmapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dusmapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dusmsvc_func(LPCSTR param) noexcept {
        if (!dusmsvcdll) {
            load_dusmsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dusmsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dwmapi_func(LPCSTR param) noexcept {
        if (!dwmapidll) {
            load_dwmapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dwmapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dwmcore_func(LPCSTR param) noexcept {
        if (!dwmcoredll) {
            load_dwmcore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dwmcoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dwmghost_func(LPCSTR param) noexcept {
        if (!dwmghostdll) {
            load_dwmghost();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dwmghostdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dwminit_func(LPCSTR param) noexcept {
        if (!dwminitdll) {
            load_dwminit();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dwminitdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dwmredir_func(LPCSTR param) noexcept {
        if (!dwmredirdll) {
            load_dwmredir();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dwmredirdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dwmscene_func(LPCSTR param) noexcept {
        if (!dwmscenedll) {
            load_dwmscene();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dwmscenedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DWrite_func(LPCSTR param) noexcept {
        if (!DWritedll) {
            load_DWrite();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DWritedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DXCaptureReplay_func(LPCSTR param) noexcept {
        if (!DXCaptureReplaydll) {
            load_DXCaptureReplay();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DXCaptureReplaydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DXCore_func(LPCSTR param) noexcept {
        if (!DXCoredll) {
            load_DXCore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DXCoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dxdiagn_func(LPCSTR param) noexcept {
        if (!dxdiagndll) {
            load_dxdiagn();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dxdiagndll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dxgi_func(LPCSTR param) noexcept {
        if (!dxgidll) {
            load_dxgi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dxgidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DXGIDebug_func(LPCSTR param) noexcept {
        if (!DXGIDebugdll) {
            load_DXGIDebug();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DXGIDebugdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dxgwdi_func(LPCSTR param) noexcept {
        if (!dxgwdidll) {
            load_dxgwdi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dxgwdidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dxilconv_func(LPCSTR param) noexcept {
        if (!dxilconvdll) {
            load_dxilconv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dxilconvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DXP_func(LPCSTR param) noexcept {
        if (!DXPdll) {
            load_DXP();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DXPdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dxpps_func(LPCSTR param) noexcept {
        if (!dxppsdll) {
            load_dxpps();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dxppsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DxpTaskSync_func(LPCSTR param) noexcept {
        if (!DxpTaskSyncdll) {
            load_DxpTaskSync();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DxpTaskSyncdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dxtmsft_func(LPCSTR param) noexcept {
        if (!dxtmsftdll) {
            load_dxtmsft();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dxtmsftdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DXToolsMonitor_func(LPCSTR param) noexcept {
        if (!DXToolsMonitordll) {
            load_DXToolsMonitor();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DXToolsMonitordll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DXToolsOfflineAnalysis_func(LPCSTR param) noexcept {
        if (!DXToolsOfflineAnalysisdll) {
            load_DXToolsOfflineAnalysis();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DXToolsOfflineAnalysisdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DxToolsReportGenerator_func(LPCSTR param) noexcept {
        if (!DxToolsReportGeneratordll) {
            load_DxToolsReportGenerator();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DxToolsReportGeneratordll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_DXToolsReporting_func(LPCSTR param) noexcept {
        if (!DXToolsReportingdll) {
            load_DXToolsReporting();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(DXToolsReportingdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dxtrans_func(LPCSTR param) noexcept {
        if (!dxtransdll) {
            load_dxtrans();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dxtransdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dxva2_func(LPCSTR param) noexcept {
        if (!dxva2dll) {
            load_dxva2();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dxva2dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_dynamoapi_func(LPCSTR param) noexcept {
        if (!dynamoapidll) {
            load_dynamoapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(dynamoapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_EAMProgressHandler_func(LPCSTR param) noexcept {
        if (!EAMProgressHandlerdll) {
            load_EAMProgressHandler();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(EAMProgressHandlerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_eapp3hst_func(LPCSTR param) noexcept {
        if (!eapp3hstdll) {
            load_eapp3hst();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(eapp3hstdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_eappcfg_func(LPCSTR param) noexcept {
        if (!eappcfgdll) {
            load_eappcfg();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(eappcfgdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_eappcfgui_func(LPCSTR param) noexcept {
        if (!eappcfguidll) {
            load_eappcfgui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(eappcfguidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_eappgnui_func(LPCSTR param) noexcept {
        if (!eappgnuidll) {
            load_eappgnui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(eappgnuidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_eapphost_func(LPCSTR param) noexcept {
        if (!eapphostdll) {
            load_eapphost();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(eapphostdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_eappprxy_func(LPCSTR param) noexcept {
        if (!eappprxydll) {
            load_eappprxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(eappprxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_eapprovp_func(LPCSTR param) noexcept {
        if (!eapprovpdll) {
            load_eapprovp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(eapprovpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_eapputil_func(LPCSTR param) noexcept {
        if (!eapputildll) {
            load_eapputil();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(eapputildll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_eapsimextdesktop_func(LPCSTR param) noexcept {
        if (!eapsimextdesktopdll) {
            load_eapsimextdesktop();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(eapsimextdesktopdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_eapsvc_func(LPCSTR param) noexcept {
        if (!eapsvcdll) {
            load_eapsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(eapsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_EapTeapAuth_func(LPCSTR param) noexcept {
        if (!EapTeapAuthdll) {
            load_EapTeapAuth();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(EapTeapAuthdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_EapTeapConfig_func(LPCSTR param) noexcept {
        if (!EapTeapConfigdll) {
            load_EapTeapConfig();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(EapTeapConfigdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_EapTeapExt_func(LPCSTR param) noexcept {
        if (!EapTeapExtdll) {
            load_EapTeapExt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(EapTeapExtdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_easconsent_func(LPCSTR param) noexcept {
        if (!easconsentdll) {
            load_easconsent();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(easconsentdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_easinvokerproxystub_func(LPCSTR param) noexcept {
        if (!easinvokerproxystubdll) {
            load_easinvokerproxystub();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(easinvokerproxystubdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_EasPolicyManagerBrokerPS_func(LPCSTR param) noexcept {
        if (!EasPolicyManagerBrokerPSdll) {
            load_EasPolicyManagerBrokerPS();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(EasPolicyManagerBrokerPSdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_easwrt_func(LPCSTR param) noexcept {
        if (!easwrtdll) {
            load_easwrt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(easwrtdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_edgeangle_func(LPCSTR param) noexcept {
        if (!edgeangledll) {
            load_edgeangle();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(edgeangledll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_EdgeContent_func(LPCSTR param) noexcept {
        if (!EdgeContentdll) {
            load_EdgeContent();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(EdgeContentdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_edgehtml_func(LPCSTR param) noexcept {
        if (!edgehtmldll) {
            load_edgehtml();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(edgehtmldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_edgeIso_func(LPCSTR param) noexcept {
        if (!edgeIsodll) {
            load_edgeIso();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(edgeIsodll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_EdgeManager_func(LPCSTR param) noexcept {
        if (!EdgeManagerdll) {
            load_EdgeManager();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(EdgeManagerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_EdgeResetPlugin_func(LPCSTR param) noexcept {
        if (!EdgeResetPlugindll) {
            load_EdgeResetPlugin();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(EdgeResetPlugindll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_EditBufferTestHook_func(LPCSTR param) noexcept {
        if (!EditBufferTestHookdll) {
            load_EditBufferTestHook();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(EditBufferTestHookdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_EditionUpgradeHelper_func(LPCSTR param) noexcept {
        if (!EditionUpgradeHelperdll) {
            load_EditionUpgradeHelper();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(EditionUpgradeHelperdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_EditionUpgradeManagerObj_func(LPCSTR param) noexcept {
        if (!EditionUpgradeManagerObjdll) {
            load_EditionUpgradeManagerObj();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(EditionUpgradeManagerObjdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_edpauditapi_func(LPCSTR param) noexcept {
        if (!edpauditapidll) {
            load_edpauditapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(edpauditapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_edpcsp_func(LPCSTR param) noexcept {
        if (!edpcspdll) {
            load_edpcsp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(edpcspdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_edptask_func(LPCSTR param) noexcept {
        if (!edptaskdll) {
            load_edptask();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(edptaskdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_edputil_func(LPCSTR param) noexcept {
        if (!edputildll) {
            load_edputil();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(edputildll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_eeprov_func(LPCSTR param) noexcept {
        if (!eeprovdll) {
            load_eeprov();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(eeprovdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_eeutil_func(LPCSTR param) noexcept {
        if (!eeutildll) {
            load_eeutil();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(eeutildll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_efsadu_func(LPCSTR param) noexcept {
        if (!efsadudll) {
            load_efsadu();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(efsadudll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_efscore_func(LPCSTR param) noexcept {
        if (!efscoredll) {
            load_efscore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(efscoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_efsext_func(LPCSTR param) noexcept {
        if (!efsextdll) {
            load_efsext();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(efsextdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_efslsaext_func(LPCSTR param) noexcept {
        if (!efslsaextdll) {
            load_efslsaext();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(efslsaextdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_efssvc_func(LPCSTR param) noexcept {
        if (!efssvcdll) {
            load_efssvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(efssvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_efsutil_func(LPCSTR param) noexcept {
        if (!efsutildll) {
            load_efsutil();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(efsutildll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_efswrt_func(LPCSTR param) noexcept {
        if (!efswrtdll) {
            load_efswrt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(efswrtdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_EhStorAPI_func(LPCSTR param) noexcept {
        if (!EhStorAPIdll) {
            load_EhStorAPI();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(EhStorAPIdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_EhStorPwdMgr_func(LPCSTR param) noexcept {
        if (!EhStorPwdMgrdll) {
            load_EhStorPwdMgr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(EhStorPwdMgrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_EhStorShell_func(LPCSTR param) noexcept {
        if (!EhStorShelldll) {
            load_EhStorShell();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(EhStorShelldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_els_func(LPCSTR param) noexcept {
        if (!elsdll) {
            load_els();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(elsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ELSCore_func(LPCSTR param) noexcept {
        if (!ELSCoredll) {
            load_ELSCore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ELSCoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_elshyph_func(LPCSTR param) noexcept {
        if (!elshyphdll) {
            load_elshyph();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(elshyphdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_elslad_func(LPCSTR param) noexcept {
        if (!elsladdll) {
            load_elslad();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(elsladdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_elsTrans_func(LPCSTR param) noexcept {
        if (!elsTransdll) {
            load_elsTrans();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(elsTransdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_EmailApis_func(LPCSTR param) noexcept {
        if (!EmailApisdll) {
            load_EmailApis();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(EmailApisdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_embeddedmodesvc_func(LPCSTR param) noexcept {
        if (!embeddedmodesvcdll) {
            load_embeddedmodesvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(embeddedmodesvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_embeddedmodesvcapi_func(LPCSTR param) noexcept {
        if (!embeddedmodesvcapidll) {
            load_embeddedmodesvcapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(embeddedmodesvcapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_EmojiDS_func(LPCSTR param) noexcept {
        if (!EmojiDSdll) {
            load_EmojiDS();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(EmojiDSdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_encapi_func(LPCSTR param) noexcept {
        if (!encapidll) {
            load_encapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(encapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_energy_func(LPCSTR param) noexcept {
        if (!energydll) {
            load_energy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(energydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_energyprov_func(LPCSTR param) noexcept {
        if (!energyprovdll) {
            load_energyprov();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(energyprovdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_energytask_func(LPCSTR param) noexcept {
        if (!energytaskdll) {
            load_energytask();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(energytaskdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_enrollmentapi_func(LPCSTR param) noexcept {
        if (!enrollmentapidll) {
            load_enrollmentapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(enrollmentapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_EnterpriseAPNCsp_func(LPCSTR param) noexcept {
        if (!EnterpriseAPNCspdll) {
            load_EnterpriseAPNCsp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(EnterpriseAPNCspdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_EnterpriseAppMgmtClient_func(LPCSTR param) noexcept {
        if (!EnterpriseAppMgmtClientdll) {
            load_EnterpriseAppMgmtClient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(EnterpriseAppMgmtClientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_EnterpriseAppMgmtSvc_func(LPCSTR param) noexcept {
        if (!EnterpriseAppMgmtSvcdll) {
            load_EnterpriseAppMgmtSvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(EnterpriseAppMgmtSvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_EnterpriseAppVMgmtCSP_func(LPCSTR param) noexcept {
        if (!EnterpriseAppVMgmtCSPdll) {
            load_EnterpriseAppVMgmtCSP();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(EnterpriseAppVMgmtCSPdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_enterprisecsps_func(LPCSTR param) noexcept {
        if (!enterprisecspsdll) {
            load_enterprisecsps();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(enterprisecspsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_EnterpriseDesktopAppMgmtCSP_func(LPCSTR param) noexcept {
        if (!EnterpriseDesktopAppMgmtCSPdll) {
            load_EnterpriseDesktopAppMgmtCSP();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(EnterpriseDesktopAppMgmtCSPdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_enterpriseetw_func(LPCSTR param) noexcept {
        if (!enterpriseetwdll) {
            load_enterpriseetw();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(enterpriseetwdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_EnterpriseModernAppMgmtCSP_func(LPCSTR param) noexcept {
        if (!EnterpriseModernAppMgmtCSPdll) {
            load_EnterpriseModernAppMgmtCSP();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(EnterpriseModernAppMgmtCSPdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_enterpriseresourcemanager_func(LPCSTR param) noexcept {
        if (!enterpriseresourcemanagerdll) {
            load_enterpriseresourcemanager();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(enterpriseresourcemanagerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_eqossnap_func(LPCSTR param) noexcept {
        if (!eqossnapdll) {
            load_eqossnap();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(eqossnapdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ErrorDetails_func(LPCSTR param) noexcept {
        if (!ErrorDetailsdll) {
            load_ErrorDetails();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ErrorDetailsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ErrorDetailsCore_func(LPCSTR param) noexcept {
        if (!ErrorDetailsCoredll) {
            load_ErrorDetailsCore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ErrorDetailsCoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_es_func(LPCSTR param) noexcept {
        if (!esdll) {
            load_es();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(esdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_EsclProtocol_func(LPCSTR param) noexcept {
        if (!EsclProtocoldll) {
            load_EsclProtocol();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(EsclProtocoldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_EsclScan_func(LPCSTR param) noexcept {
        if (!EsclScandll) {
            load_EsclScan();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(EsclScandll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_EsclWiaDriver_func(LPCSTR param) noexcept {
        if (!EsclWiaDriverdll) {
            load_EsclWiaDriver();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(EsclWiaDriverdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_EsdSip_func(LPCSTR param) noexcept {
        if (!EsdSipdll) {
            load_EsdSip();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(EsdSipdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_esent_func(LPCSTR param) noexcept {
        if (!esentdll) {
            load_esent();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(esentdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_esentprf_func(LPCSTR param) noexcept {
        if (!esentprfdll) {
            load_esentprf();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(esentprfdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_esevss_func(LPCSTR param) noexcept {
        if (!esevssdll) {
            load_esevss();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(esevssdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_eShims_func(LPCSTR param) noexcept {
        if (!eShimsdll) {
            load_eShims();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(eShimsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_EthernetMediaManager_func(LPCSTR param) noexcept {
        if (!EthernetMediaManagerdll) {
            load_EthernetMediaManager();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(EthernetMediaManagerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ETWCoreUIComponentsResources_func(LPCSTR param) noexcept {
        if (!ETWCoreUIComponentsResourcesdll) {
            load_ETWCoreUIComponentsResources();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ETWCoreUIComponentsResourcesdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ETWESEProviderResources_func(LPCSTR param) noexcept {
        if (!ETWESEProviderResourcesdll) {
            load_ETWESEProviderResources();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ETWESEProviderResourcesdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_EtwRundown_func(LPCSTR param) noexcept {
        if (!EtwRundowndll) {
            load_EtwRundown();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(EtwRundowndll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_eUICCsCSP_func(LPCSTR param) noexcept {
        if (!eUICCsCSPdll) {
            load_eUICCsCSP();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(eUICCsCSPdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_EventAggregation_func(LPCSTR param) noexcept {
        if (!EventAggregationdll) {
            load_EventAggregation();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(EventAggregationdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_eventcls_func(LPCSTR param) noexcept {
        if (!eventclsdll) {
            load_eventcls();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(eventclsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_evr_func(LPCSTR param) noexcept {
        if (!evrdll) {
            load_evr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(evrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ExecModelClient_func(LPCSTR param) noexcept {
        if (!ExecModelClientdll) {
            load_ExecModelClient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ExecModelClientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_execmodelproxy_func(LPCSTR param) noexcept {
        if (!execmodelproxydll) {
            load_execmodelproxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(execmodelproxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ExplorerFrame_func(LPCSTR param) noexcept {
        if (!ExplorerFramedll) {
            load_ExplorerFrame();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ExplorerFramedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ExSMime_func(LPCSTR param) noexcept {
        if (!ExSMimedll) {
            load_ExSMime();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ExSMimedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ExtrasXmlParser_func(LPCSTR param) noexcept {
        if (!ExtrasXmlParserdll) {
            load_ExtrasXmlParser();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ExtrasXmlParserdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_f1db7d81_95be_4911_935a_8ab71629112a_HyperV_IsolatedVM_func(LPCSTR param) noexcept {
        if (!f1db7d81_95be_4911_935a_8ab71629112a_HyperV_IsolatedVMdll) {
            load_f1db7d81_95be_4911_935a_8ab71629112a_HyperV_IsolatedVM();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(f1db7d81_95be_4911_935a_8ab71629112a_HyperV_IsolatedVMdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_f3ahvoas_func(LPCSTR param) noexcept {
        if (!f3ahvoasdll) {
            load_f3ahvoas();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(f3ahvoasdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_f989b52d_f928_44a3_9bf1_bf0c1da6a0d6_HyperV_DeviceVirtualization_func(LPCSTR param) noexcept {
        if (!f989b52d_f928_44a3_9bf1_bf0c1da6a0d6_HyperV_DeviceVirtualizationdll) {
            load_f989b52d_f928_44a3_9bf1_bf0c1da6a0d6_HyperV_DeviceVirtualization();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(f989b52d_f928_44a3_9bf1_bf0c1da6a0d6_HyperV_DeviceVirtualizationdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_facecredentialprovider_func(LPCSTR param) noexcept {
        if (!facecredentialproviderdll) {
            load_facecredentialprovider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(facecredentialproviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_Facilitator_func(LPCSTR param) noexcept {
        if (!Facilitatordll) {
            load_Facilitator();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(Facilitatordll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_FamilyAuthentication_func(LPCSTR param) noexcept {
        if (!FamilyAuthenticationdll) {
            load_FamilyAuthentication();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(FamilyAuthenticationdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_FamilyCache_func(LPCSTR param) noexcept {
        if (!FamilyCachedll) {
            load_FamilyCache();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(FamilyCachedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_FamilyClient_func(LPCSTR param) noexcept {
        if (!FamilyClientdll) {
            load_FamilyClient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(FamilyClientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_FamilySyncEngine_func(LPCSTR param) noexcept {
        if (!FamilySyncEnginedll) {
            load_FamilySyncEngine();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(FamilySyncEnginedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_FamilySafetyExt_func(LPCSTR param) noexcept {
        if (!FamilySafetyExtdll) {
            load_FamilySafetyExt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(FamilySafetyExtdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_Faultrep_func(LPCSTR param) noexcept {
        if (!Faultrepdll) {
            load_Faultrep();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(Faultrepdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_FaxPrinterInstaller_func(LPCSTR param) noexcept {
        if (!FaxPrinterInstallerdll) {
            load_FaxPrinterInstaller();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(FaxPrinterInstallerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fcon_func(LPCSTR param) noexcept {
        if (!fcondll) {
            load_fcon();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fcondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fdBth_func(LPCSTR param) noexcept {
        if (!fdBthdll) {
            load_fdBth();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fdBthdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fdBthProxy_func(LPCSTR param) noexcept {
        if (!fdBthProxydll) {
            load_fdBthProxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fdBthProxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_FdDevQuery_func(LPCSTR param) noexcept {
        if (!FdDevQuerydll) {
            load_FdDevQuery();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(FdDevQuerydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fde_func(LPCSTR param) noexcept {
        if (!fdedll) {
            load_fde();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fdedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fdeploy_func(LPCSTR param) noexcept {
        if (!fdeploydll) {
            load_fdeploy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fdeploydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fdPHost_func(LPCSTR param) noexcept {
        if (!fdPHostdll) {
            load_fdPHost();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fdPHostdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fdPnp_func(LPCSTR param) noexcept {
        if (!fdPnpdll) {
            load_fdPnp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fdPnpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fdprint_func(LPCSTR param) noexcept {
        if (!fdprintdll) {
            load_fdprint();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fdprintdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fdProxy_func(LPCSTR param) noexcept {
        if (!fdProxydll) {
            load_fdProxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fdProxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_FDResPub_func(LPCSTR param) noexcept {
        if (!FDResPubdll) {
            load_FDResPub();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(FDResPubdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fdSSDP_func(LPCSTR param) noexcept {
        if (!fdSSDPdll) {
            load_fdSSDP();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fdSSDPdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fdWCN_func(LPCSTR param) noexcept {
        if (!fdWCNdll) {
            load_fdWCN();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fdWCNdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fdWNet_func(LPCSTR param) noexcept {
        if (!fdWNetdll) {
            load_fdWNet();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fdWNetdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fdWSD_func(LPCSTR param) noexcept {
        if (!fdWSDdll) {
            load_fdWSD();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fdWSDdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_feclient_func(LPCSTR param) noexcept {
        if (!feclientdll) {
            load_feclient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(feclientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ffbroker_func(LPCSTR param) noexcept {
        if (!ffbrokerdll) {
            load_ffbroker();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ffbrokerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fhcat_func(LPCSTR param) noexcept {
        if (!fhcatdll) {
            load_fhcat();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fhcatdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fhcfg_func(LPCSTR param) noexcept {
        if (!fhcfgdll) {
            load_fhcfg();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fhcfgdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fhcleanup_func(LPCSTR param) noexcept {
        if (!fhcleanupdll) {
            load_fhcleanup();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fhcleanupdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fhcpl_func(LPCSTR param) noexcept {
        if (!fhcpldll) {
            load_fhcpl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fhcpldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fhengine_func(LPCSTR param) noexcept {
        if (!fhenginedll) {
            load_fhengine();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fhenginedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fhevents_func(LPCSTR param) noexcept {
        if (!fheventsdll) {
            load_fhevents();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fheventsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fhsettingsprovider_func(LPCSTR param) noexcept {
        if (!fhsettingsproviderdll) {
            load_fhsettingsprovider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fhsettingsproviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fhshl_func(LPCSTR param) noexcept {
        if (!fhshldll) {
            load_fhshl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fhshldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fhsrchapi_func(LPCSTR param) noexcept {
        if (!fhsrchapidll) {
            load_fhsrchapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fhsrchapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fhsrchph_func(LPCSTR param) noexcept {
        if (!fhsrchphdll) {
            load_fhsrchph();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fhsrchphdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fhsvc_func(LPCSTR param) noexcept {
        if (!fhsvcdll) {
            load_fhsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fhsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fhsvcctl_func(LPCSTR param) noexcept {
        if (!fhsvcctldll) {
            load_fhsvcctl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fhsvcctldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fhtask_func(LPCSTR param) noexcept {
        if (!fhtaskdll) {
            load_fhtask();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fhtaskdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fhuxadapter_func(LPCSTR param) noexcept {
        if (!fhuxadapterdll) {
            load_fhuxadapter();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fhuxadapterdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fhuxapi_func(LPCSTR param) noexcept {
        if (!fhuxapidll) {
            load_fhuxapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fhuxapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fhuxcommon_func(LPCSTR param) noexcept {
        if (!fhuxcommondll) {
            load_fhuxcommon();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fhuxcommondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fhuxgraphics_func(LPCSTR param) noexcept {
        if (!fhuxgraphicsdll) {
            load_fhuxgraphics();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fhuxgraphicsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fhuxpresentation_func(LPCSTR param) noexcept {
        if (!fhuxpresentationdll) {
            load_fhuxpresentation();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fhuxpresentationdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fidocredprov_func(LPCSTR param) noexcept {
        if (!fidocredprovdll) {
            load_fidocredprov();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fidocredprovdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_FileAppxStreamingDataSource_func(LPCSTR param) noexcept {
        if (!FileAppxStreamingDataSourcedll) {
            load_FileAppxStreamingDataSource();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(FileAppxStreamingDataSourcedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_filemgmt_func(LPCSTR param) noexcept {
        if (!filemgmtdll) {
            load_filemgmt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(filemgmtdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_FilterDS_func(LPCSTR param) noexcept {
        if (!FilterDSdll) {
            load_FilterDS();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(FilterDSdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_findnetprinters_func(LPCSTR param) noexcept {
        if (!findnetprintersdll) {
            load_findnetprinters();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(findnetprintersdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fingerprintcredential_func(LPCSTR param) noexcept {
        if (!fingerprintcredentialdll) {
            load_fingerprintcredential();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fingerprintcredentialdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_FirewallAPI_func(LPCSTR param) noexcept {
        if (!FirewallAPIdll) {
            load_FirewallAPI();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(FirewallAPIdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_FirewallControlPanel_func(LPCSTR param) noexcept {
        if (!FirewallControlPaneldll) {
            load_FirewallControlPanel();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(FirewallControlPaneldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_FirewallUX_func(LPCSTR param) noexcept {
        if (!FirewallUXdll) {
            load_FirewallUX();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(FirewallUXdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_FirmwareAttestationServerProxyStub_func(LPCSTR param) noexcept {
        if (!FirmwareAttestationServerProxyStubdll) {
            load_FirmwareAttestationServerProxyStub();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(FirmwareAttestationServerProxyStubdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_FlightSettings_func(LPCSTR param) noexcept {
        if (!FlightSettingsdll) {
            load_FlightSettings();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(FlightSettingsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fltLib_func(LPCSTR param) noexcept {
        if (!fltLibdll) {
            load_fltLib();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fltLibdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_FluencyDS_func(LPCSTR param) noexcept {
        if (!FluencyDSdll) {
            load_FluencyDS();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(FluencyDSdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fmapi_func(LPCSTR param) noexcept {
        if (!fmapidll) {
            load_fmapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fmapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fmifs_func(LPCSTR param) noexcept {
        if (!fmifsdll) {
            load_fmifs();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fmifsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fms_func(LPCSTR param) noexcept {
        if (!fmsdll) {
            load_fms();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fmsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_FntCache_func(LPCSTR param) noexcept {
        if (!FntCachedll) {
            load_FntCache();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(FntCachedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fontext_func(LPCSTR param) noexcept {
        if (!fontextdll) {
            load_fontext();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fontextdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_FontGlyphAnimator_func(LPCSTR param) noexcept {
        if (!FontGlyphAnimatordll) {
            load_FontGlyphAnimator();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(FontGlyphAnimatordll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fontgroupsoverride_func(LPCSTR param) noexcept {
        if (!fontgroupsoverridedll) {
            load_fontgroupsoverride();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fontgroupsoverridedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_FontProvider_func(LPCSTR param) noexcept {
        if (!FontProviderdll) {
            load_FontProvider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(FontProviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fontsub_func(LPCSTR param) noexcept {
        if (!fontsubdll) {
            load_fontsub();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fontsubdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fphc_func(LPCSTR param) noexcept {
        if (!fphcdll) {
            load_fphc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fphcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_framedyn_func(LPCSTR param) noexcept {
        if (!framedyndll) {
            load_framedyn();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(framedyndll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_framedynos_func(LPCSTR param) noexcept {
        if (!framedynosdll) {
            load_framedynos();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(framedynosdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_FrameServer_func(LPCSTR param) noexcept {
        if (!FrameServerdll) {
            load_FrameServer();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(FrameServerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_FrameServerClient_func(LPCSTR param) noexcept {
        if (!FrameServerClientdll) {
            load_FrameServerClient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(FrameServerClientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_FrameServerMonitor_func(LPCSTR param) noexcept {
        if (!FrameServerMonitordll) {
            load_FrameServerMonitor();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(FrameServerMonitordll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_FrameServerMonitorClient_func(LPCSTR param) noexcept {
        if (!FrameServerMonitorClientdll) {
            load_FrameServerMonitorClient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(FrameServerMonitorClientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_frprov_func(LPCSTR param) noexcept {
        if (!frprovdll) {
            load_frprov();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(frprovdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_FsNVSDeviceSource_func(LPCSTR param) noexcept {
        if (!FsNVSDeviceSourcedll) {
            load_FsNVSDeviceSource();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(FsNVSDeviceSourcedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fsutilext_func(LPCSTR param) noexcept {
        if (!fsutilextdll) {
            load_fsutilext();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fsutilextdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fthsvc_func(LPCSTR param) noexcept {
        if (!fthsvcdll) {
            load_fthsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fthsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fundisc_func(LPCSTR param) noexcept {
        if (!fundiscdll) {
            load_fundisc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fundiscdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fveapi_func(LPCSTR param) noexcept {
        if (!fveapidll) {
            load_fveapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fveapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fveapibase_func(LPCSTR param) noexcept {
        if (!fveapibasedll) {
            load_fveapibase();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fveapibasedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fvecerts_func(LPCSTR param) noexcept {
        if (!fvecertsdll) {
            load_fvecerts();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fvecertsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fvecpl_func(LPCSTR param) noexcept {
        if (!fvecpldll) {
            load_fvecpl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fvecpldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fveskybackup_func(LPCSTR param) noexcept {
        if (!fveskybackupdll) {
            load_fveskybackup();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fveskybackupdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fveui_func(LPCSTR param) noexcept {
        if (!fveuidll) {
            load_fveui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fveuidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fvewiz_func(LPCSTR param) noexcept {
        if (!fvewizdll) {
            load_fvewiz();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fvewizdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_FvSDK_x64_func(LPCSTR param) noexcept {
        if (!FvSDK_x64dll) {
            load_FvSDK_x64();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(FvSDK_x64dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fwbase_func(LPCSTR param) noexcept {
        if (!fwbasedll) {
            load_fwbase();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fwbasedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fwcfg_func(LPCSTR param) noexcept {
        if (!fwcfgdll) {
            load_fwcfg();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fwcfgdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fwmdmcsp_func(LPCSTR param) noexcept {
        if (!fwmdmcspdll) {
            load_fwmdmcsp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fwmdmcspdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_fwpolicyiomgr_func(LPCSTR param) noexcept {
        if (!fwpolicyiomgrdll) {
            load_fwpolicyiomgr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(fwpolicyiomgrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_FwRemoteSvr_func(LPCSTR param) noexcept {
        if (!FwRemoteSvrdll) {
            load_FwRemoteSvr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(FwRemoteSvrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_GameBarPresenceWriterproxy_func(LPCSTR param) noexcept {
        if (!GameBarPresenceWriterproxydll) {
            load_GameBarPresenceWriterproxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(GameBarPresenceWriterproxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_GameChatOverlayExt_func(LPCSTR param) noexcept {
        if (!GameChatOverlayExtdll) {
            load_GameChatOverlayExt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(GameChatOverlayExtdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_GameChatTranscription_func(LPCSTR param) noexcept {
        if (!GameChatTranscriptiondll) {
            load_GameChatTranscription();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(GameChatTranscriptiondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_GameInput_func(LPCSTR param) noexcept {
        if (!GameInputdll) {
            load_GameInput();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(GameInputdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_GameInputInbox_func(LPCSTR param) noexcept {
        if (!GameInputInboxdll) {
            load_GameInputInbox();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(GameInputInboxdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_gamemode_func(LPCSTR param) noexcept {
        if (!gamemodedll) {
            load_gamemode();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(gamemodedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_GamePanelExternalHook_func(LPCSTR param) noexcept {
        if (!GamePanelExternalHookdll) {
            load_GamePanelExternalHook();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(GamePanelExternalHookdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_gamestreamingext_func(LPCSTR param) noexcept {
        if (!gamestreamingextdll) {
            load_gamestreamingext();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(gamestreamingextdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_gameux_func(LPCSTR param) noexcept {
        if (!gameuxdll) {
            load_gameux();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(gameuxdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_gamingtcui_func(LPCSTR param) noexcept {
        if (!gamingtcuidll) {
            load_gamingtcui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(gamingtcuidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_gcdef_func(LPCSTR param) noexcept {
        if (!gcdefdll) {
            load_gcdef();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(gcdefdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_gdi32_func(LPCSTR param) noexcept {
        if (!gdi32dll) {
            load_gdi32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(gdi32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_gdi32full_func(LPCSTR param) noexcept {
        if (!gdi32fulldll) {
            load_gdi32full();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(gdi32fulldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_GdiPlus_func(LPCSTR param) noexcept {
        if (!GdiPlusdll) {
            load_GdiPlus();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(GdiPlusdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_generaltel_func(LPCSTR param) noexcept {
        if (!generalteldll) {
            load_generaltel();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(generalteldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_Geocommon_func(LPCSTR param) noexcept {
        if (!Geocommondll) {
            load_Geocommon();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(Geocommondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_Geolocation_func(LPCSTR param) noexcept {
        if (!Geolocationdll) {
            load_Geolocation();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(Geolocationdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_getuname_func(LPCSTR param) noexcept {
        if (!getunamedll) {
            load_getuname();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(getunamedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_glmf32_func(LPCSTR param) noexcept {
        if (!glmf32dll) {
            load_glmf32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(glmf32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_globinputhost_func(LPCSTR param) noexcept {
        if (!globinputhostdll) {
            load_globinputhost();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(globinputhostdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_glu32_func(LPCSTR param) noexcept {
        if (!glu32dll) {
            load_glu32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(glu32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_gmsaclient_func(LPCSTR param) noexcept {
        if (!gmsaclientdll) {
            load_gmsaclient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(gmsaclientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_gpapi_func(LPCSTR param) noexcept {
        if (!gpapidll) {
            load_gpapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(gpapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_GPCSEWrapperCsp_func(LPCSTR param) noexcept {
        if (!GPCSEWrapperCspdll) {
            load_GPCSEWrapperCsp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(GPCSEWrapperCspdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_gpedit_func(LPCSTR param) noexcept {
        if (!gpeditdll) {
            load_gpedit();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(gpeditdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_gpprefcl_func(LPCSTR param) noexcept {
        if (!gpprefcldll) {
            load_gpprefcl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(gpprefcldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_gpprnext_func(LPCSTR param) noexcept {
        if (!gpprnextdll) {
            load_gpprnext();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(gpprnextdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_gpscript_func(LPCSTR param) noexcept {
        if (!gpscriptdll) {
            load_gpscript();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(gpscriptdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_gpsvc_func(LPCSTR param) noexcept {
        if (!gpsvcdll) {
            load_gpsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(gpsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_gptext_func(LPCSTR param) noexcept {
        if (!gptextdll) {
            load_gptext();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(gptextdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_gpupvdev_func(LPCSTR param) noexcept {
        if (!gpupvdevdll) {
            load_gpupvdev();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(gpupvdevdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_GraphicsCapture_func(LPCSTR param) noexcept {
        if (!GraphicsCapturedll) {
            load_GraphicsCapture();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(GraphicsCapturedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_GraphicsPerfSvc_func(LPCSTR param) noexcept {
        if (!GraphicsPerfSvcdll) {
            load_GraphicsPerfSvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(GraphicsPerfSvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_Groupinghc_func(LPCSTR param) noexcept {
        if (!Groupinghcdll) {
            load_Groupinghc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(Groupinghcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_hal_func(LPCSTR param) noexcept {
        if (!haldll) {
            load_hal();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(haldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_HalExtIntcLpioDMA_func(LPCSTR param) noexcept {
        if (!HalExtIntcLpioDMAdll) {
            load_HalExtIntcLpioDMA();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(HalExtIntcLpioDMAdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_HalExtIntcPseDMA_func(LPCSTR param) noexcept {
        if (!HalExtIntcPseDMAdll) {
            load_HalExtIntcPseDMA();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(HalExtIntcPseDMAdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_HalExtPL080_func(LPCSTR param) noexcept {
        if (!HalExtPL080dll) {
            load_HalExtPL080();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(HalExtPL080dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_HanjaDS_func(LPCSTR param) noexcept {
        if (!HanjaDSdll) {
            load_HanjaDS();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(HanjaDSdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_hascsp_func(LPCSTR param) noexcept {
        if (!hascspdll) {
            load_hascsp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(hascspdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_HashtagDS_func(LPCSTR param) noexcept {
        if (!HashtagDSdll) {
            load_HashtagDS();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(HashtagDSdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_hbaapi_func(LPCSTR param) noexcept {
        if (!hbaapidll) {
            load_hbaapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(hbaapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_hcproviders_func(LPCSTR param) noexcept {
        if (!hcprovidersdll) {
            load_hcproviders();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(hcprovidersdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_HdcpHandler_func(LPCSTR param) noexcept {
        if (!HdcpHandlerdll) {
            load_HdcpHandler();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(HdcpHandlerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_HeatCore_func(LPCSTR param) noexcept {
        if (!HeatCoredll) {
            load_HeatCore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(HeatCoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_HelpPaneProxy_func(LPCSTR param) noexcept {
        if (!HelpPaneProxydll) {
            load_HelpPaneProxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(HelpPaneProxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_hgattest_func(LPCSTR param) noexcept {
        if (!hgattestdll) {
            load_hgattest();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(hgattestdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_hgclientservice_func(LPCSTR param) noexcept {
        if (!hgclientservicedll) {
            load_hgclientservice();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(hgclientservicedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_hgclientserviceps_func(LPCSTR param) noexcept {
        if (!hgclientservicepsdll) {
            load_hgclientserviceps();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(hgclientservicepsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_hgcpl_func(LPCSTR param) noexcept {
        if (!hgcpldll) {
            load_hgcpl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(hgcpldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_hgsclientplugin_func(LPCSTR param) noexcept {
        if (!hgsclientplugindll) {
            load_hgsclientplugin();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(hgsclientplugindll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_HgsClientWmi_func(LPCSTR param) noexcept {
        if (!HgsClientWmidll) {
            load_HgsClientWmi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(HgsClientWmidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_hhsetup_func(LPCSTR param) noexcept {
        if (!hhsetupdll) {
            load_hhsetup();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(hhsetupdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_hid_func(LPCSTR param) noexcept {
        if (!hiddll) {
            load_hid();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(hiddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_HidCfu_func(LPCSTR param) noexcept {
        if (!HidCfudll) {
            load_HidCfu();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(HidCfudll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_hidserv_func(LPCSTR param) noexcept {
        if (!hidservdll) {
            load_hidserv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(hidservdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_hlink_func(LPCSTR param) noexcept {
        if (!hlinkdll) {
            load_hlink();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(hlinkdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_hmkd_func(LPCSTR param) noexcept {
        if (!hmkddll) {
            load_hmkd();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(hmkddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_hnetcfg_func(LPCSTR param) noexcept {
        if (!hnetcfgdll) {
            load_hnetcfg();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(hnetcfgdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_HNetCfgClient_func(LPCSTR param) noexcept {
        if (!HNetCfgClientdll) {
            load_HNetCfgClient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(HNetCfgClientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_hnetmon_func(LPCSTR param) noexcept {
        if (!hnetmondll) {
            load_hnetmon();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(hnetmondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_hnsproxy_func(LPCSTR param) noexcept {
        if (!hnsproxydll) {
            load_hnsproxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(hnsproxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_HologramCompositor_func(LPCSTR param) noexcept {
        if (!HologramCompositordll) {
            load_HologramCompositor();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(HologramCompositordll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_HologramWorld_func(LPCSTR param) noexcept {
        if (!HologramWorlddll) {
            load_HologramWorld();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(HologramWorlddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_HolographicExtensions_func(LPCSTR param) noexcept {
        if (!HolographicExtensionsdll) {
            load_HolographicExtensions();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(HolographicExtensionsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_HolographicRuntimes_func(LPCSTR param) noexcept {
        if (!HolographicRuntimesdll) {
            load_HolographicRuntimes();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(HolographicRuntimesdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_HoloShellRuntime_func(LPCSTR param) noexcept {
        if (!HoloShellRuntimedll) {
            load_HoloShellRuntime();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(HoloShellRuntimedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_HoloSHExtensions_func(LPCSTR param) noexcept {
        if (!HoloSHExtensionsdll) {
            load_HoloSHExtensions();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(HoloSHExtensionsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_HoloSIPCShell_func(LPCSTR param) noexcept {
        if (!HoloSIPCShelldll) {
            load_HoloSIPCShell();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(HoloSIPCShelldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_HostGuardianServiceClientResources_func(LPCSTR param) noexcept {
        if (!HostGuardianServiceClientResourcesdll) {
            load_HostGuardianServiceClientResources();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(HostGuardianServiceClientResourcesdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_HostNetSvc_func(LPCSTR param) noexcept {
        if (!HostNetSvcdll) {
            load_HostNetSvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(HostNetSvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_hotplug_func(LPCSTR param) noexcept {
        if (!hotplugdll) {
            load_hotplug();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(hotplugdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_HrtfApo_func(LPCSTR param) noexcept {
        if (!HrtfApodll) {
            load_HrtfApo();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(HrtfApodll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_HrtfDspCpu_func(LPCSTR param) noexcept {
        if (!HrtfDspCpudll) {
            load_HrtfDspCpu();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(HrtfDspCpudll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_hspapi_func(LPCSTR param) noexcept {
        if (!hspapidll) {
            load_hspapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(hspapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_hspfw_func(LPCSTR param) noexcept {
        if (!hspfwdll) {
            load_hspfw();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(hspfwdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_httpapi_func(LPCSTR param) noexcept {
        if (!httpapidll) {
            load_httpapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(httpapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_httpprxc_func(LPCSTR param) noexcept {
        if (!httpprxcdll) {
            load_httpprxc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(httpprxcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_httpprxm_func(LPCSTR param) noexcept {
        if (!httpprxmdll) {
            load_httpprxm();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(httpprxmdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_httpprxp_func(LPCSTR param) noexcept {
        if (!httpprxpdll) {
            load_httpprxp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(httpprxpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_HttpsDataSource_func(LPCSTR param) noexcept {
        if (!HttpsDataSourcedll) {
            load_HttpsDataSource();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(HttpsDataSourcedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_htui_func(LPCSTR param) noexcept {
        if (!htuidll) {
            load_htui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(htuidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_hvhostsvc_func(LPCSTR param) noexcept {
        if (!hvhostsvcdll) {
            load_hvhostsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(hvhostsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_hvloader_func(LPCSTR param) noexcept {
        if (!hvloaderdll) {
            load_hvloader();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(hvloaderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_hvsigpext_func(LPCSTR param) noexcept {
        if (!hvsigpextdll) {
            load_hvsigpext();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(hvsigpextdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_HvsiManagementApi_func(LPCSTR param) noexcept {
        if (!HvsiManagementApidll) {
            load_HvsiManagementApi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(HvsiManagementApidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_HvSocket_func(LPCSTR param) noexcept {
        if (!HvSocketdll) {
            load_HvSocket();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(HvSocketdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_hwreqchk_func(LPCSTR param) noexcept {
        if (!hwreqchkdll) {
            load_hwreqchk();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(hwreqchkdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_Hydrogen_func(LPCSTR param) noexcept {
        if (!Hydrogendll) {
            load_Hydrogen();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(Hydrogendll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_HyperVSysprepProvider_func(LPCSTR param) noexcept {
        if (!HyperVSysprepProviderdll) {
            load_HyperVSysprepProvider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(HyperVSysprepProviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_IA2ComProxy_func(LPCSTR param) noexcept {
        if (!IA2ComProxydll) {
            load_IA2ComProxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(IA2ComProxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ias_func(LPCSTR param) noexcept {
        if (!iasdll) {
            load_ias();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(iasdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_iasacct_func(LPCSTR param) noexcept {
        if (!iasacctdll) {
            load_iasacct();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(iasacctdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_iasads_func(LPCSTR param) noexcept {
        if (!iasadsdll) {
            load_iasads();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(iasadsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_iasdatastore_func(LPCSTR param) noexcept {
        if (!iasdatastoredll) {
            load_iasdatastore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(iasdatastoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_iashlpr_func(LPCSTR param) noexcept {
        if (!iashlprdll) {
            load_iashlpr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(iashlprdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_IasMigPlugin_func(LPCSTR param) noexcept {
        if (!IasMigPlugindll) {
            load_IasMigPlugin();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(IasMigPlugindll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_iasnap_func(LPCSTR param) noexcept {
        if (!iasnapdll) {
            load_iasnap();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(iasnapdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_iaspolcy_func(LPCSTR param) noexcept {
        if (!iaspolcydll) {
            load_iaspolcy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(iaspolcydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_iasrad_func(LPCSTR param) noexcept {
        if (!iasraddll) {
            load_iasrad();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(iasraddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_iasrecst_func(LPCSTR param) noexcept {
        if (!iasrecstdll) {
            load_iasrecst();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(iasrecstdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_iassam_func(LPCSTR param) noexcept {
        if (!iassamdll) {
            load_iassam();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(iassamdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_iassdo_func(LPCSTR param) noexcept {
        if (!iassdodll) {
            load_iassdo();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(iassdodll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_iassvcs_func(LPCSTR param) noexcept {
        if (!iassvcsdll) {
            load_iassvcs();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(iassvcsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_icfupgd_func(LPCSTR param) noexcept {
        if (!icfupgddll) {
            load_icfupgd();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(icfupgddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_icm32_func(LPCSTR param) noexcept {
        if (!icm32dll) {
            load_icm32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(icm32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_icmp_func(LPCSTR param) noexcept {
        if (!icmpdll) {
            load_icmp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(icmpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_icmui_func(LPCSTR param) noexcept {
        if (!icmuidll) {
            load_icmui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(icmuidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_IconCodecService_func(LPCSTR param) noexcept {
        if (!IconCodecServicedll) {
            load_IconCodecService();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(IconCodecServicedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_icsigd_func(LPCSTR param) noexcept {
        if (!icsigddll) {
            load_icsigd();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(icsigddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_icsvc_func(LPCSTR param) noexcept {
        if (!icsvcdll) {
            load_icsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(icsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_icsvcext_func(LPCSTR param) noexcept {
        if (!icsvcextdll) {
            load_icsvcext();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(icsvcextdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_icsvcvss_func(LPCSTR param) noexcept {
        if (!icsvcvssdll) {
            load_icsvcvss();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(icsvcvssdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_icu_func(LPCSTR param) noexcept {
        if (!icudll) {
            load_icu();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(icudll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_icuin_func(LPCSTR param) noexcept {
        if (!icuindll) {
            load_icuin();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(icuindll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_icuuc_func(LPCSTR param) noexcept {
        if (!icuucdll) {
            load_icuuc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(icuucdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_IdCtrls_func(LPCSTR param) noexcept {
        if (!IdCtrlsdll) {
            load_IdCtrls();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(IdCtrlsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_IDStore_func(LPCSTR param) noexcept {
        if (!IDStoredll) {
            load_IDStore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(IDStoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_IEAdvpack_func(LPCSTR param) noexcept {
        if (!IEAdvpackdll) {
            load_IEAdvpack();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(IEAdvpackdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ieapfltr_func(LPCSTR param) noexcept {
        if (!ieapfltrdll) {
            load_ieapfltr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ieapfltrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_iedkcs32_func(LPCSTR param) noexcept {
        if (!iedkcs32dll) {
            load_iedkcs32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(iedkcs32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ieframe_func(LPCSTR param) noexcept {
        if (!ieframedll) {
            load_ieframe();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ieframedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_iemigplugin_func(LPCSTR param) noexcept {
        if (!iemigplugindll) {
            load_iemigplugin();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(iemigplugindll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_iepeers_func(LPCSTR param) noexcept {
        if (!iepeersdll) {
            load_iepeers();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(iepeersdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ieproxy_func(LPCSTR param) noexcept {
        if (!ieproxydll) {
            load_ieproxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ieproxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_IEProxyDesktop_func(LPCSTR param) noexcept {
        if (!IEProxyDesktopdll) {
            load_IEProxyDesktop();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(IEProxyDesktopdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_iernonce_func(LPCSTR param) noexcept {
        if (!iernoncedll) {
            load_iernonce();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(iernoncedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_iertutil_func(LPCSTR param) noexcept {
        if (!iertutildll) {
            load_iertutil();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(iertutildll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_iesetup_func(LPCSTR param) noexcept {
        if (!iesetupdll) {
            load_iesetup();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(iesetupdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_iesysprep_func(LPCSTR param) noexcept {
        if (!iesysprepdll) {
            load_iesysprep();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(iesysprepdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ieui_func(LPCSTR param) noexcept {
        if (!ieuidll) {
            load_ieui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ieuidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ifmon_func(LPCSTR param) noexcept {
        if (!ifmondll) {
            load_ifmon();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ifmondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ifsutil_func(LPCSTR param) noexcept {
        if (!ifsutildll) {
            load_ifsutil();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ifsutildll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ifsutilx_func(LPCSTR param) noexcept {
        if (!ifsutilxdll) {
            load_ifsutilx();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ifsutilxdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_igdDiag_func(LPCSTR param) noexcept {
        if (!igdDiagdll) {
            load_igdDiag();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(igdDiagdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_IHDS_func(LPCSTR param) noexcept {
        if (!IHDSdll) {
            load_IHDS();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(IHDSdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_iisrstap_func(LPCSTR param) noexcept {
        if (!iisrstapdll) {
            load_iisrstap();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(iisrstapdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_iisRtl_func(LPCSTR param) noexcept {
        if (!iisRtldll) {
            load_iisRtl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(iisRtldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_imagehlp_func(LPCSTR param) noexcept {
        if (!imagehlpdll) {
            load_imagehlp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(imagehlpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_imageres_func(LPCSTR param) noexcept {
        if (!imageresdll) {
            load_imageres();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(imageresdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_imagesp1_func(LPCSTR param) noexcept {
        if (!imagesp1dll) {
            load_imagesp1();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(imagesp1dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_imapi_func(LPCSTR param) noexcept {
        if (!imapidll) {
            load_imapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(imapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_imapi2_func(LPCSTR param) noexcept {
        if (!imapi2dll) {
            load_imapi2();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(imapi2dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_imapi2fs_func(LPCSTR param) noexcept {
        if (!imapi2fsdll) {
            load_imapi2fs();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(imapi2fsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ime_textinputhelpers_func(LPCSTR param) noexcept {
        if (!ime_textinputhelpersdll) {
            load_ime_textinputhelpers();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ime_textinputhelpersdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_imgutil_func(LPCSTR param) noexcept {
        if (!imgutildll) {
            load_imgutil();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(imgutildll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_imm32_func(LPCSTR param) noexcept {
        if (!imm32dll) {
            load_imm32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(imm32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ImplatSetup_func(LPCSTR param) noexcept {
        if (!ImplatSetupdll) {
            load_ImplatSetup();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ImplatSetupdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_IndexedDbLegacy_func(LPCSTR param) noexcept {
        if (!IndexedDbLegacydll) {
            load_IndexedDbLegacy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(IndexedDbLegacydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_inetcomm_func(LPCSTR param) noexcept {
        if (!inetcommdll) {
            load_inetcomm();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(inetcommdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_inetmib1_func(LPCSTR param) noexcept {
        if (!inetmib1dll) {
            load_inetmib1();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(inetmib1dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_INETRES_func(LPCSTR param) noexcept {
        if (!INETRESdll) {
            load_INETRES();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(INETRESdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_InkEd_func(LPCSTR param) noexcept {
        if (!InkEddll) {
            load_InkEd();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(InkEddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_InkObjCore_func(LPCSTR param) noexcept {
        if (!InkObjCoredll) {
            load_InkObjCore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(InkObjCoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_InprocLogger_func(LPCSTR param) noexcept {
        if (!InprocLoggerdll) {
            load_InprocLogger();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(InprocLoggerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_input_func(LPCSTR param) noexcept {
        if (!inputdll) {
            load_input();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(inputdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_InputCloudStore_func(LPCSTR param) noexcept {
        if (!InputCloudStoredll) {
            load_InputCloudStore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(InputCloudStoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_InputController_func(LPCSTR param) noexcept {
        if (!InputControllerdll) {
            load_InputController();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(InputControllerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_InputHost_func(LPCSTR param) noexcept {
        if (!InputHostdll) {
            load_InputHost();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(InputHostdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_InputInjectionBroker_func(LPCSTR param) noexcept {
        if (!InputInjectionBrokerdll) {
            load_InputInjectionBroker();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(InputInjectionBrokerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_InputLocaleManager_func(LPCSTR param) noexcept {
        if (!InputLocaleManagerdll) {
            load_InputLocaleManager();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(InputLocaleManagerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_InputService_func(LPCSTR param) noexcept {
        if (!InputServicedll) {
            load_InputService();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(InputServicedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_InputSwitch_func(LPCSTR param) noexcept {
        if (!InputSwitchdll) {
            load_InputSwitch();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(InputSwitchdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_InputViewExperience_func(LPCSTR param) noexcept {
        if (!InputViewExperiencedll) {
            load_InputViewExperience();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(InputViewExperiencedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_inseng_func(LPCSTR param) noexcept {
        if (!insengdll) {
            load_inseng();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(insengdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_InstallService_func(LPCSTR param) noexcept {
        if (!InstallServicedll) {
            load_InstallService();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(InstallServicedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_InstallServiceTasks_func(LPCSTR param) noexcept {
        if (!InstallServiceTasksdll) {
            load_InstallServiceTasks();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(InstallServiceTasksdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_IntelIHVRouter08_func(LPCSTR param) noexcept {
        if (!IntelIHVRouter08dll) {
            load_IntelIHVRouter08();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(IntelIHVRouter08dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_IntelligentPwdlessTask_func(LPCSTR param) noexcept {
        if (!IntelligentPwdlessTaskdll) {
            load_IntelligentPwdlessTask();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(IntelligentPwdlessTaskdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_intel_gfx_api_x64_func(LPCSTR param) noexcept {
        if (!intel_gfx_api_x64dll) {
            load_intel_gfx_api_x64();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(intel_gfx_api_x64dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_internetmail_func(LPCSTR param) noexcept {
        if (!internetmaildll) {
            load_internetmail();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(internetmaildll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_InternetMailCsp_func(LPCSTR param) noexcept {
        if (!InternetMailCspdll) {
            load_InternetMailCsp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(InternetMailCspdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_invagent_func(LPCSTR param) noexcept {
        if (!invagentdll) {
            load_invagent();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(invagentdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_InventorySvc_func(LPCSTR param) noexcept {
        if (!InventorySvcdll) {
            load_InventorySvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(InventorySvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_iologmsg_func(LPCSTR param) noexcept {
        if (!iologmsgdll) {
            load_iologmsg();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(iologmsgdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_IoTAssignedAccessLockFramework_func(LPCSTR param) noexcept {
        if (!IoTAssignedAccessLockFrameworkdll) {
            load_IoTAssignedAccessLockFramework();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(IoTAssignedAccessLockFrameworkdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_IPELoggingDictationHelper_func(LPCSTR param) noexcept {
        if (!IPELoggingDictationHelperdll) {
            load_IPELoggingDictationHelper();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(IPELoggingDictationHelperdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_iphlpsvc_func(LPCSTR param) noexcept {
        if (!iphlpsvcdll) {
            load_iphlpsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(iphlpsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ipnathlp_func(LPCSTR param) noexcept {
        if (!ipnathlpdll) {
            load_ipnathlp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ipnathlpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_IpNatHlpClient_func(LPCSTR param) noexcept {
        if (!IpNatHlpClientdll) {
            load_IpNatHlpClient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(IpNatHlpClientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_IppCommon_func(LPCSTR param) noexcept {
        if (!IppCommondll) {
            load_IppCommon();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(IppCommondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_IppCommonProxy_func(LPCSTR param) noexcept {
        if (!IppCommonProxydll) {
            load_IppCommonProxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(IppCommonProxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_iprtprio_func(LPCSTR param) noexcept {
        if (!iprtpriodll) {
            load_iprtprio();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(iprtpriodll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_iprtrmgr_func(LPCSTR param) noexcept {
        if (!iprtrmgrdll) {
            load_iprtrmgr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(iprtrmgrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ipsecsnp_func(LPCSTR param) noexcept {
        if (!ipsecsnpdll) {
            load_ipsecsnp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ipsecsnpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ipsmsnap_func(LPCSTR param) noexcept {
        if (!ipsmsnapdll) {
            load_ipsmsnap();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ipsmsnapdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ipxlatcfg_func(LPCSTR param) noexcept {
        if (!ipxlatcfgdll) {
            load_ipxlatcfg();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ipxlatcfgdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_iri_func(LPCSTR param) noexcept {
        if (!iridll) {
            load_iri();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(iridll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_iscsicpl_func(LPCSTR param) noexcept {
        if (!iscsicpldll) {
            load_iscsicpl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(iscsicpldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_iscsidsc_func(LPCSTR param) noexcept {
        if (!iscsidscdll) {
            load_iscsidsc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(iscsidscdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_iscsied_func(LPCSTR param) noexcept {
        if (!iscsieddll) {
            load_iscsied();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(iscsieddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_iscsiexe_func(LPCSTR param) noexcept {
        if (!iscsiexedll) {
            load_iscsiexe();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(iscsiexedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_iscsilog_func(LPCSTR param) noexcept {
        if (!iscsilogdll) {
            load_iscsilog();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(iscsilogdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_iscsium_func(LPCSTR param) noexcept {
        if (!iscsiumdll) {
            load_iscsium();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(iscsiumdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_iscsiwmi_func(LPCSTR param) noexcept {
        if (!iscsiwmidll) {
            load_iscsiwmi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(iscsiwmidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_iscsiwmiv2_func(LPCSTR param) noexcept {
        if (!iscsiwmiv2dll) {
            load_iscsiwmiv2();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(iscsiwmiv2dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ISM_func(LPCSTR param) noexcept {
        if (!ISMdll) {
            load_ISM();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ISMdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_itircl_func(LPCSTR param) noexcept {
        if (!itircldll) {
            load_itircl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(itircldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_itss_func(LPCSTR param) noexcept {
        if (!itssdll) {
            load_itss();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(itssdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_iuilp_func(LPCSTR param) noexcept {
        if (!iuilpdll) {
            load_iuilp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(iuilpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_iumbase_func(LPCSTR param) noexcept {
        if (!iumbasedll) {
            load_iumbase();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(iumbasedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_iumcrypt_func(LPCSTR param) noexcept {
        if (!iumcryptdll) {
            load_iumcrypt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(iumcryptdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_iumdll_func(LPCSTR param) noexcept {
        if (!iumdlldll) {
            load_iumdll();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(iumdlldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_IumSdk_func(LPCSTR param) noexcept {
        if (!IumSdkdll) {
            load_IumSdk();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(IumSdkdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_iyuv_32_func(LPCSTR param) noexcept {
        if (!iyuv_32dll) {
            load_iyuv_32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(iyuv_32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_JavaScriptCollectionAgent_func(LPCSTR param) noexcept {
        if (!JavaScriptCollectionAgentdll) {
            load_JavaScriptCollectionAgent();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(JavaScriptCollectionAgentdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_JHI64_func(LPCSTR param) noexcept {
        if (!JHI64dll) {
            load_JHI64();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(JHI64dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_joinproviderol_func(LPCSTR param) noexcept {
        if (!joinprovideroldll) {
            load_joinproviderol();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(joinprovideroldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_joinutil_func(LPCSTR param) noexcept {
        if (!joinutildll) {
            load_joinutil();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(joinutildll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_JpMapControl_func(LPCSTR param) noexcept {
        if (!JpMapControldll) {
            load_JpMapControl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(JpMapControldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_jpndecoder_func(LPCSTR param) noexcept {
        if (!jpndecoderdll) {
            load_jpndecoder();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(jpndecoderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_jpninputrouter_func(LPCSTR param) noexcept {
        if (!jpninputrouterdll) {
            load_jpninputrouter();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(jpninputrouterdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_jpnranker_func(LPCSTR param) noexcept {
        if (!jpnrankerdll) {
            load_jpnranker();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(jpnrankerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_JpnServiceDS_func(LPCSTR param) noexcept {
        if (!JpnServiceDSdll) {
            load_JpnServiceDS();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(JpnServiceDSdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_jscript_func(LPCSTR param) noexcept {
        if (!jscriptdll) {
            load_jscript();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(jscriptdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_jscript9_func(LPCSTR param) noexcept {
        if (!jscript9dll) {
            load_jscript9();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(jscript9dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_jscript9diag_func(LPCSTR param) noexcept {
        if (!jscript9diagdll) {
            load_jscript9diag();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(jscript9diagdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_jscript9Legacy_func(LPCSTR param) noexcept {
        if (!jscript9Legacydll) {
            load_jscript9Legacy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(jscript9Legacydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_jsproxy_func(LPCSTR param) noexcept {
        if (!jsproxydll) {
            load_jsproxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(jsproxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kbd101_func(LPCSTR param) noexcept {
        if (!kbd101dll) {
            load_kbd101();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kbd101dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kbd101a_func(LPCSTR param) noexcept {
        if (!kbd101adll) {
            load_kbd101a();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kbd101adll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kbd101b_func(LPCSTR param) noexcept {
        if (!kbd101bdll) {
            load_kbd101b();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kbd101bdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kbd101c_func(LPCSTR param) noexcept {
        if (!kbd101cdll) {
            load_kbd101c();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kbd101cdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kbd103_func(LPCSTR param) noexcept {
        if (!kbd103dll) {
            load_kbd103();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kbd103dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kbd106_func(LPCSTR param) noexcept {
        if (!kbd106dll) {
            load_kbd106();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kbd106dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kbd106n_func(LPCSTR param) noexcept {
        if (!kbd106ndll) {
            load_kbd106n();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kbd106ndll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kbdarmph_func(LPCSTR param) noexcept {
        if (!kbdarmphdll) {
            load_kbdarmph();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kbdarmphdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kbdarmty_func(LPCSTR param) noexcept {
        if (!kbdarmtydll) {
            load_kbdarmty();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kbdarmtydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kbdax2_func(LPCSTR param) noexcept {
        if (!kbdax2dll) {
            load_kbdax2();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kbdax2dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kbdfar_func(LPCSTR param) noexcept {
        if (!kbdfardll) {
            load_kbdfar();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kbdfardll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kbdgeoer_func(LPCSTR param) noexcept {
        if (!kbdgeoerdll) {
            load_kbdgeoer();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kbdgeoerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kbdgeome_func(LPCSTR param) noexcept {
        if (!kbdgeomedll) {
            load_kbdgeome();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kbdgeomedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kbdgeooa_func(LPCSTR param) noexcept {
        if (!kbdgeooadll) {
            load_kbdgeooa();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kbdgeooadll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kbdgeoqw_func(LPCSTR param) noexcept {
        if (!kbdgeoqwdll) {
            load_kbdgeoqw();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kbdgeoqwdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kbdhebl3_func(LPCSTR param) noexcept {
        if (!kbdhebl3dll) {
            load_kbdhebl3();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kbdhebl3dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kbdibm02_func(LPCSTR param) noexcept {
        if (!kbdibm02dll) {
            load_kbdibm02();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kbdibm02dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kbdlisub_func(LPCSTR param) noexcept {
        if (!kbdlisubdll) {
            load_kbdlisub();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kbdlisubdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kbdlisus_func(LPCSTR param) noexcept {
        if (!kbdlisusdll) {
            load_kbdlisus();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kbdlisusdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kbdlk41a_func(LPCSTR param) noexcept {
        if (!kbdlk41adll) {
            load_kbdlk41a();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kbdlk41adll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kbdnec_func(LPCSTR param) noexcept {
        if (!kbdnecdll) {
            load_kbdnec();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kbdnecdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kbdnec95_func(LPCSTR param) noexcept {
        if (!kbdnec95dll) {
            load_kbdnec95();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kbdnec95dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kbdnecat_func(LPCSTR param) noexcept {
        if (!kbdnecatdll) {
            load_kbdnecat();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kbdnecatdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kbdnecnt_func(LPCSTR param) noexcept {
        if (!kbdnecntdll) {
            load_kbdnecnt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kbdnecntdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kbdnko_func(LPCSTR param) noexcept {
        if (!kbdnkodll) {
            load_kbdnko();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kbdnkodll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kbdphags_func(LPCSTR param) noexcept {
        if (!kbdphagsdll) {
            load_kbdphags();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kbdphagsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kd_func(LPCSTR param) noexcept {
        if (!kddll) {
            load_kd();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kdcom_func(LPCSTR param) noexcept {
        if (!kdcomdll) {
            load_kdcom();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kdcomdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kdcpw_func(LPCSTR param) noexcept {
        if (!kdcpwdll) {
            load_kdcpw();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kdcpwdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kdhvcom_func(LPCSTR param) noexcept {
        if (!kdhvcomdll) {
            load_kdhvcom();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kdhvcomdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kdnet_func(LPCSTR param) noexcept {
        if (!kdnetdll) {
            load_kdnet();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kdnetdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kdnet_uart16550_func(LPCSTR param) noexcept {
        if (!kdnet_uart16550dll) {
            load_kdnet_uart16550();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kdnet_uart16550dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_KdsCli_func(LPCSTR param) noexcept {
        if (!KdsClidll) {
            load_KdsCli();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(KdsClidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kdstub_func(LPCSTR param) noexcept {
        if (!kdstubdll) {
            load_kdstub();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kdstubdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kdusb_func(LPCSTR param) noexcept {
        if (!kdusbdll) {
            load_kdusb();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kdusbdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kd_02_10df_func(LPCSTR param) noexcept {
        if (!kd_02_10dfdll) {
            load_kd_02_10df();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kd_02_10dfdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kd_02_10ec_func(LPCSTR param) noexcept {
        if (!kd_02_10ecdll) {
            load_kd_02_10ec();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kd_02_10ecdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kd_02_1137_func(LPCSTR param) noexcept {
        if (!kd_02_1137dll) {
            load_kd_02_1137();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kd_02_1137dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kd_02_14e4_func(LPCSTR param) noexcept {
        if (!kd_02_14e4dll) {
            load_kd_02_14e4();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kd_02_14e4dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kd_02_15b3_func(LPCSTR param) noexcept {
        if (!kd_02_15b3dll) {
            load_kd_02_15b3();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kd_02_15b3dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kd_02_1969_func(LPCSTR param) noexcept {
        if (!kd_02_1969dll) {
            load_kd_02_1969();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kd_02_1969dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kd_02_19a2_func(LPCSTR param) noexcept {
        if (!kd_02_19a2dll) {
            load_kd_02_19a2();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kd_02_19a2dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kd_02_1af4_func(LPCSTR param) noexcept {
        if (!kd_02_1af4dll) {
            load_kd_02_1af4();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kd_02_1af4dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kd_02_8086_func(LPCSTR param) noexcept {
        if (!kd_02_8086dll) {
            load_kd_02_8086();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kd_02_8086dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kd_07_1415_func(LPCSTR param) noexcept {
        if (!kd_07_1415dll) {
            load_kd_07_1415();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kd_07_1415dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kd_0C_8086_func(LPCSTR param) noexcept {
        if (!kd_0C_8086dll) {
            load_kd_0C_8086();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kd_0C_8086dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_keepaliveprovider_func(LPCSTR param) noexcept {
        if (!keepaliveproviderdll) {
            load_keepaliveprovider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(keepaliveproviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_KerbClientShared_func(LPCSTR param) noexcept {
        if (!KerbClientShareddll) {
            load_KerbClientShared();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(KerbClientShareddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kerberos_func(LPCSTR param) noexcept {
        if (!kerberosdll) {
            load_kerberos();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kerberosdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_kernelappcore_func(LPCSTR param) noexcept {
        if (!kernelappcoredll) {
            load_kernelappcore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(kernelappcoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_KernelBase_func(LPCSTR param) noexcept {
        if (!KernelBasedll) {
            load_KernelBase();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(KernelBasedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_KeyboardFilterCore_func(LPCSTR param) noexcept {
        if (!KeyboardFilterCoredll) {
            load_KeyboardFilterCore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(KeyboardFilterCoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_KeyboardFilterManager_func(LPCSTR param) noexcept {
        if (!KeyboardFilterManagerdll) {
            load_KeyboardFilterManager();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(KeyboardFilterManagerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_KeyboardFilterShim_func(LPCSTR param) noexcept {
        if (!KeyboardFilterShimdll) {
            load_KeyboardFilterShim();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(KeyboardFilterShimdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_KeyboardFilterSvc_func(LPCSTR param) noexcept {
        if (!KeyboardFilterSvcdll) {
            load_KeyboardFilterSvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(KeyboardFilterSvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_KeyCredMgr_func(LPCSTR param) noexcept {
        if (!KeyCredMgrdll) {
            load_KeyCredMgr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(KeyCredMgrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_keyiso_func(LPCSTR param) noexcept {
        if (!keyisodll) {
            load_keyiso();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(keyisodll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_keymgr_func(LPCSTR param) noexcept {
        if (!keymgrdll) {
            load_keymgr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(keymgrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_KeywordDetectorMsftSidAdapter_func(LPCSTR param) noexcept {
        if (!KeywordDetectorMsftSidAdapterdll) {
            load_KeywordDetectorMsftSidAdapter();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(KeywordDetectorMsftSidAdapterdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_KnobsCore_func(LPCSTR param) noexcept {
        if (!KnobsCoredll) {
            load_KnobsCore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(KnobsCoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_KnobsCsp_func(LPCSTR param) noexcept {
        if (!KnobsCspdll) {
            load_KnobsCsp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(KnobsCspdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ksuser_func(LPCSTR param) noexcept {
        if (!ksuserdll) {
            load_ksuser();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ksuserdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ktmw32_func(LPCSTR param) noexcept {
        if (!ktmw32dll) {
            load_ktmw32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ktmw32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_l2gpstore_func(LPCSTR param) noexcept {
        if (!l2gpstoredll) {
            load_l2gpstore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(l2gpstoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_l2nacp_func(LPCSTR param) noexcept {
        if (!l2nacpdll) {
            load_l2nacp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(l2nacpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_L2SecHC_func(LPCSTR param) noexcept {
        if (!L2SecHCdll) {
            load_L2SecHC();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(L2SecHCdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_LangCleanupSysprepAction_func(LPCSTR param) noexcept {
        if (!LangCleanupSysprepActiondll) {
            load_LangCleanupSysprepAction();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(LangCleanupSysprepActiondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_LanguageComponentsInstaller_func(LPCSTR param) noexcept {
        if (!LanguageComponentsInstallerdll) {
            load_LanguageComponentsInstaller();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(LanguageComponentsInstallerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_LanguageOverlayServer_func(LPCSTR param) noexcept {
        if (!LanguageOverlayServerdll) {
            load_LanguageOverlayServer();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(LanguageOverlayServerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_LanguageOverlayUtil_func(LPCSTR param) noexcept {
        if (!LanguageOverlayUtildll) {
            load_LanguageOverlayUtil();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(LanguageOverlayUtildll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_LanguagePackDiskCleanup_func(LPCSTR param) noexcept {
        if (!LanguagePackDiskCleanupdll) {
            load_LanguagePackDiskCleanup();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(LanguagePackDiskCleanupdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_LanguagePackManagementCSP_func(LPCSTR param) noexcept {
        if (!LanguagePackManagementCSPdll) {
            load_LanguagePackManagementCSP();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(LanguagePackManagementCSPdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_laps_func(LPCSTR param) noexcept {
        if (!lapsdll) {
            load_laps();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(lapsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_lapscsp_func(LPCSTR param) noexcept {
        if (!lapscspdll) {
            load_lapscsp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(lapscspdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_LegacyNetUX_func(LPCSTR param) noexcept {
        if (!LegacyNetUXdll) {
            load_LegacyNetUX();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(LegacyNetUXdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_LegacySystemSettings_func(LPCSTR param) noexcept {
        if (!LegacySystemSettingsdll) {
            load_LegacySystemSettings();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(LegacySystemSettingsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_lfsvc_func(LPCSTR param) noexcept {
        if (!lfsvcdll) {
            load_lfsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(lfsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_libcrypto_func(LPCSTR param) noexcept {
        if (!libcryptodll) {
            load_libcrypto();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(libcryptodll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_libmfxhw64_func(LPCSTR param) noexcept {
        if (!libmfxhw64dll) {
            load_libmfxhw64();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(libmfxhw64dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_libomp140x86_64_func(LPCSTR param) noexcept {
        if (!libomp140x86_64dll) {
            load_libomp140x86_64();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(libomp140x86_64dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_libomp140dx86_64_func(LPCSTR param) noexcept {
        if (!libomp140dx86_64dll) {
            load_libomp140dx86_64();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(libomp140dx86_64dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_LicenseManager_func(LPCSTR param) noexcept {
        if (!LicenseManagerdll) {
            load_LicenseManager();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(LicenseManagerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_LicenseManagerApi_func(LPCSTR param) noexcept {
        if (!LicenseManagerApidll) {
            load_LicenseManagerApi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(LicenseManagerApidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_LicenseManagerSvc_func(LPCSTR param) noexcept {
        if (!LicenseManagerSvcdll) {
            load_LicenseManagerSvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(LicenseManagerSvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_licenseprotection_func(LPCSTR param) noexcept {
        if (!licenseprotectiondll) {
            load_licenseprotection();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(licenseprotectiondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_LicensingCSP_func(LPCSTR param) noexcept {
        if (!LicensingCSPdll) {
            load_LicensingCSP();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(LicensingCSPdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_LicensingDiagSpp_func(LPCSTR param) noexcept {
        if (!LicensingDiagSppdll) {
            load_LicensingDiagSpp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(LicensingDiagSppdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_LicensingWinRT_func(LPCSTR param) noexcept {
        if (!LicensingWinRTdll) {
            load_LicensingWinRT();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(LicensingWinRTdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_licmgr10_func(LPCSTR param) noexcept {
        if (!licmgr10dll) {
            load_licmgr10();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(licmgr10dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_linkinfo_func(LPCSTR param) noexcept {
        if (!linkinfodll) {
            load_linkinfo();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(linkinfodll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_lltdapi_func(LPCSTR param) noexcept {
        if (!lltdapidll) {
            load_lltdapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(lltdapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_lltdres_func(LPCSTR param) noexcept {
        if (!lltdresdll) {
            load_lltdres();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(lltdresdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_lltdsvc_func(LPCSTR param) noexcept {
        if (!lltdsvcdll) {
            load_lltdsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(lltdsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_lmhsvc_func(LPCSTR param) noexcept {
        if (!lmhsvcdll) {
            load_lmhsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(lmhsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_loadperf_func(LPCSTR param) noexcept {
        if (!loadperfdll) {
            load_loadperf();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(loadperfdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_localsec_func(LPCSTR param) noexcept {
        if (!localsecdll) {
            load_localsec();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(localsecdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_localspl_func(LPCSTR param) noexcept {
        if (!localspldll) {
            load_localspl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(localspldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_localui_func(LPCSTR param) noexcept {
        if (!localuidll) {
            load_localui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(localuidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_LocationApi_func(LPCSTR param) noexcept {
        if (!LocationApidll) {
            load_LocationApi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(LocationApidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_LocationFramework_func(LPCSTR param) noexcept {
        if (!LocationFrameworkdll) {
            load_LocationFramework();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(LocationFrameworkdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_LocationFrameworkInternalPS_func(LPCSTR param) noexcept {
        if (!LocationFrameworkInternalPSdll) {
            load_LocationFrameworkInternalPS();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(LocationFrameworkInternalPSdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_LocationFrameworkPS_func(LPCSTR param) noexcept {
        if (!LocationFrameworkPSdll) {
            load_LocationFrameworkPS();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(LocationFrameworkPSdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_LocationWinPalMisc_func(LPCSTR param) noexcept {
        if (!LocationWinPalMiscdll) {
            load_LocationWinPalMisc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(LocationWinPalMiscdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_LockAppBroker_func(LPCSTR param) noexcept {
        if (!LockAppBrokerdll) {
            load_LockAppBroker();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(LockAppBrokerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_LockController_func(LPCSTR param) noexcept {
        if (!LockControllerdll) {
            load_LockController();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(LockControllerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_LockHostingFramework_func(LPCSTR param) noexcept {
        if (!LockHostingFrameworkdll) {
            load_LockHostingFramework();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(LockHostingFrameworkdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_LockScreenContent_func(LPCSTR param) noexcept {
        if (!LockScreenContentdll) {
            load_LockScreenContent();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(LockScreenContentdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_LockScreenContentHost_func(LPCSTR param) noexcept {
        if (!LockScreenContentHostdll) {
            load_LockScreenContentHost();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(LockScreenContentHostdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_LockScreenData_func(LPCSTR param) noexcept {
        if (!LockScreenDatadll) {
            load_LockScreenData();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(LockScreenDatadll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_loghours_func(LPCSTR param) noexcept {
        if (!loghoursdll) {
            load_loghours();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(loghoursdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_logoncli_func(LPCSTR param) noexcept {
        if (!logonclidll) {
            load_logoncli();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(logonclidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_LogonController_func(LPCSTR param) noexcept {
        if (!LogonControllerdll) {
            load_LogonController();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(LogonControllerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_lpasvc_func(LPCSTR param) noexcept {
        if (!lpasvcdll) {
            load_lpasvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(lpasvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_lpk_func(LPCSTR param) noexcept {
        if (!lpkdll) {
            load_lpk();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(lpkdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_lpksetupproxyserv_func(LPCSTR param) noexcept {
        if (!lpksetupproxyservdll) {
            load_lpksetupproxyserv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(lpksetupproxyservdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_lsaadt_func(LPCSTR param) noexcept {
        if (!lsaadtdll) {
            load_lsaadt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(lsaadtdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_lsasrv_func(LPCSTR param) noexcept {
        if (!lsasrvdll) {
            load_lsasrv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(lsasrvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_LSCSHostPolicy_func(LPCSTR param) noexcept {
        if (!LSCSHostPolicydll) {
            load_LSCSHostPolicy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(LSCSHostPolicydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_lsm_func(LPCSTR param) noexcept {
        if (!lsmdll) {
            load_lsm();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(lsmdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_lsmproxy_func(LPCSTR param) noexcept {
        if (!lsmproxydll) {
            load_lsmproxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(lsmproxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_lstelemetry_func(LPCSTR param) noexcept {
        if (!lstelemetrydll) {
            load_lstelemetry();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(lstelemetrydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_luiapi_func(LPCSTR param) noexcept {
        if (!luiapidll) {
            load_luiapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(luiapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_lxutil_func(LPCSTR param) noexcept {
        if (!lxutildll) {
            load_lxutil();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(lxutildll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_lz32_func(LPCSTR param) noexcept {
        if (!lz32dll) {
            load_lz32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(lz32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_Magnification_func(LPCSTR param) noexcept {
        if (!Magnificationdll) {
            load_Magnification();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(Magnificationdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MaintenanceUI_func(LPCSTR param) noexcept {
        if (!MaintenanceUIdll) {
            load_MaintenanceUI();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MaintenanceUIdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ManageCI_func(LPCSTR param) noexcept {
        if (!ManageCIdll) {
            load_ManageCI();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ManageCIdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MapConfiguration_func(LPCSTR param) noexcept {
        if (!MapConfigurationdll) {
            load_MapConfiguration();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MapConfigurationdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MapControlCore_func(LPCSTR param) noexcept {
        if (!MapControlCoredll) {
            load_MapControlCore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MapControlCoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MapControlStringsRes_func(LPCSTR param) noexcept {
        if (!MapControlStringsResdll) {
            load_MapControlStringsRes();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MapControlStringsResdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MapGeocoder_func(LPCSTR param) noexcept {
        if (!MapGeocoderdll) {
            load_MapGeocoder();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MapGeocoderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mapi32_func(LPCSTR param) noexcept {
        if (!mapi32dll) {
            load_mapi32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mapi32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mapistub_func(LPCSTR param) noexcept {
        if (!mapistubdll) {
            load_mapistub();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mapistubdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MapRouter_func(LPCSTR param) noexcept {
        if (!MapRouterdll) {
            load_MapRouter();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MapRouterdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MapsBtSvc_func(LPCSTR param) noexcept {
        if (!MapsBtSvcdll) {
            load_MapsBtSvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MapsBtSvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MapsBtSvcProxy_func(LPCSTR param) noexcept {
        if (!MapsBtSvcProxydll) {
            load_MapsBtSvcProxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MapsBtSvcProxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MapsCSP_func(LPCSTR param) noexcept {
        if (!MapsCSPdll) {
            load_MapsCSP();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MapsCSPdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MapsStore_func(LPCSTR param) noexcept {
        if (!MapsStoredll) {
            load_MapsStore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MapsStoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mapstoasttask_func(LPCSTR param) noexcept {
        if (!mapstoasttaskdll) {
            load_mapstoasttask();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mapstoasttaskdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mapsupdatetask_func(LPCSTR param) noexcept {
        if (!mapsupdatetaskdll) {
            load_mapsupdatetask();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mapsupdatetaskdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MbaeApi_func(LPCSTR param) noexcept {
        if (!MbaeApidll) {
            load_MbaeApi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MbaeApidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MbaeApiPublic_func(LPCSTR param) noexcept {
        if (!MbaeApiPublicdll) {
            load_MbaeApiPublic();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MbaeApiPublicdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MBMediaManager_func(LPCSTR param) noexcept {
        if (!MBMediaManagerdll) {
            load_MBMediaManager();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MBMediaManagerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mbsmsapi_func(LPCSTR param) noexcept {
        if (!mbsmsapidll) {
            load_mbsmsapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mbsmsapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mbussdapi_func(LPCSTR param) noexcept {
        if (!mbussdapidll) {
            load_mbussdapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mbussdapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MCCSEngineShared_func(LPCSTR param) noexcept {
        if (!MCCSEngineShareddll) {
            load_MCCSEngineShared();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MCCSEngineShareddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MCCSPal_func(LPCSTR param) noexcept {
        if (!MCCSPaldll) {
            load_MCCSPal();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MCCSPaldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mciavi32_func(LPCSTR param) noexcept {
        if (!mciavi32dll) {
            load_mciavi32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mciavi32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mcicda_func(LPCSTR param) noexcept {
        if (!mcicdadll) {
            load_mcicda();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mcicdadll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mciqtz32_func(LPCSTR param) noexcept {
        if (!mciqtz32dll) {
            load_mciqtz32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mciqtz32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mciseq_func(LPCSTR param) noexcept {
        if (!mciseqdll) {
            load_mciseq();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mciseqdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mciwave_func(LPCSTR param) noexcept {
        if (!mciwavedll) {
            load_mciwave();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mciwavedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_McpManagementProxy_func(LPCSTR param) noexcept {
        if (!McpManagementProxydll) {
            load_McpManagementProxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(McpManagementProxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_McpManagementService_func(LPCSTR param) noexcept {
        if (!McpManagementServicedll) {
            load_McpManagementService();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(McpManagementServicedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MCRecvSrc_func(LPCSTR param) noexcept {
        if (!MCRecvSrcdll) {
            load_MCRecvSrc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MCRecvSrcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mcupdate_AuthenticAMD_func(LPCSTR param) noexcept {
        if (!mcupdate_AuthenticAMDdll) {
            load_mcupdate_AuthenticAMD();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mcupdate_AuthenticAMDdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mcupdate_GenuineIntel_func(LPCSTR param) noexcept {
        if (!mcupdate_GenuineInteldll) {
            load_mcupdate_GenuineIntel();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mcupdate_GenuineInteldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MdmCommon_func(LPCSTR param) noexcept {
        if (!MdmCommondll) {
            load_MdmCommon();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MdmCommondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MdmDiagnostics_func(LPCSTR param) noexcept {
        if (!MdmDiagnosticsdll) {
            load_MdmDiagnostics();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MdmDiagnosticsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mdminst_func(LPCSTR param) noexcept {
        if (!mdminstdll) {
            load_mdminst();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mdminstdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mdmlocalmanagement_func(LPCSTR param) noexcept {
        if (!mdmlocalmanagementdll) {
            load_mdmlocalmanagement();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mdmlocalmanagementdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mdmmigrator_func(LPCSTR param) noexcept {
        if (!mdmmigratordll) {
            load_mdmmigrator();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mdmmigratordll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mdmpostprocessevaluator_func(LPCSTR param) noexcept {
        if (!mdmpostprocessevaluatordll) {
            load_mdmpostprocessevaluator();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mdmpostprocessevaluatordll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mdmregistration_func(LPCSTR param) noexcept {
        if (!mdmregistrationdll) {
            load_mdmregistration();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mdmregistrationdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MediaFoundationDefaultPerceptionProvider_func(LPCSTR param) noexcept {
        if (!MediaFoundationDefaultPerceptionProviderdll) {
            load_MediaFoundationDefaultPerceptionProvider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MediaFoundationDefaultPerceptionProviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MediaFoundationAggregator_func(LPCSTR param) noexcept {
        if (!MediaFoundationAggregatordll) {
            load_MediaFoundationAggregator();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MediaFoundationAggregatordll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MemoryDiagnostic_func(LPCSTR param) noexcept {
        if (!MemoryDiagnosticdll) {
            load_MemoryDiagnostic();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MemoryDiagnosticdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MessagingDataModel2_func(LPCSTR param) noexcept {
        if (!MessagingDataModel2dll) {
            load_MessagingDataModel2();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MessagingDataModel2dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MessagingService_func(LPCSTR param) noexcept {
        if (!MessagingServicedll) {
            load_MessagingService();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MessagingServicedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mf_func(LPCSTR param) noexcept {
        if (!mfdll) {
            load_mf();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mf3216_func(LPCSTR param) noexcept {
        if (!mf3216dll) {
            load_mf3216();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mf3216dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfAACEnc_func(LPCSTR param) noexcept {
        if (!mfAACEncdll) {
            load_mfAACEnc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfAACEncdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfasfsrcsnk_func(LPCSTR param) noexcept {
        if (!mfasfsrcsnkdll) {
            load_mfasfsrcsnk();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfasfsrcsnkdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfaudiocnv_func(LPCSTR param) noexcept {
        if (!mfaudiocnvdll) {
            load_mfaudiocnv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfaudiocnvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc100_func(LPCSTR param) noexcept {
        if (!mfc100dll) {
            load_mfc100();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc100dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc100chs_func(LPCSTR param) noexcept {
        if (!mfc100chsdll) {
            load_mfc100chs();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc100chsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc100cht_func(LPCSTR param) noexcept {
        if (!mfc100chtdll) {
            load_mfc100cht();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc100chtdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc100deu_func(LPCSTR param) noexcept {
        if (!mfc100deudll) {
            load_mfc100deu();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc100deudll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc100enu_func(LPCSTR param) noexcept {
        if (!mfc100enudll) {
            load_mfc100enu();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc100enudll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc100esn_func(LPCSTR param) noexcept {
        if (!mfc100esndll) {
            load_mfc100esn();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc100esndll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc100fra_func(LPCSTR param) noexcept {
        if (!mfc100fradll) {
            load_mfc100fra();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc100fradll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc100ita_func(LPCSTR param) noexcept {
        if (!mfc100itadll) {
            load_mfc100ita();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc100itadll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc100jpn_func(LPCSTR param) noexcept {
        if (!mfc100jpndll) {
            load_mfc100jpn();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc100jpndll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc100kor_func(LPCSTR param) noexcept {
        if (!mfc100kordll) {
            load_mfc100kor();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc100kordll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc100rus_func(LPCSTR param) noexcept {
        if (!mfc100rusdll) {
            load_mfc100rus();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc100rusdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc100u_func(LPCSTR param) noexcept {
        if (!mfc100udll) {
            load_mfc100u();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc100udll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc110_func(LPCSTR param) noexcept {
        if (!mfc110dll) {
            load_mfc110();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc110dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc110chs_func(LPCSTR param) noexcept {
        if (!mfc110chsdll) {
            load_mfc110chs();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc110chsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc110cht_func(LPCSTR param) noexcept {
        if (!mfc110chtdll) {
            load_mfc110cht();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc110chtdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc110deu_func(LPCSTR param) noexcept {
        if (!mfc110deudll) {
            load_mfc110deu();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc110deudll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc110enu_func(LPCSTR param) noexcept {
        if (!mfc110enudll) {
            load_mfc110enu();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc110enudll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc110esn_func(LPCSTR param) noexcept {
        if (!mfc110esndll) {
            load_mfc110esn();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc110esndll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc110fra_func(LPCSTR param) noexcept {
        if (!mfc110fradll) {
            load_mfc110fra();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc110fradll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc110ita_func(LPCSTR param) noexcept {
        if (!mfc110itadll) {
            load_mfc110ita();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc110itadll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc110jpn_func(LPCSTR param) noexcept {
        if (!mfc110jpndll) {
            load_mfc110jpn();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc110jpndll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc110kor_func(LPCSTR param) noexcept {
        if (!mfc110kordll) {
            load_mfc110kor();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc110kordll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc110rus_func(LPCSTR param) noexcept {
        if (!mfc110rusdll) {
            load_mfc110rus();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc110rusdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc110u_func(LPCSTR param) noexcept {
        if (!mfc110udll) {
            load_mfc110u();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc110udll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc120_func(LPCSTR param) noexcept {
        if (!mfc120dll) {
            load_mfc120();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc120dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc120chs_func(LPCSTR param) noexcept {
        if (!mfc120chsdll) {
            load_mfc120chs();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc120chsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc120cht_func(LPCSTR param) noexcept {
        if (!mfc120chtdll) {
            load_mfc120cht();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc120chtdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc120deu_func(LPCSTR param) noexcept {
        if (!mfc120deudll) {
            load_mfc120deu();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc120deudll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc120enu_func(LPCSTR param) noexcept {
        if (!mfc120enudll) {
            load_mfc120enu();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc120enudll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc120esn_func(LPCSTR param) noexcept {
        if (!mfc120esndll) {
            load_mfc120esn();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc120esndll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc120fra_func(LPCSTR param) noexcept {
        if (!mfc120fradll) {
            load_mfc120fra();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc120fradll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc120ita_func(LPCSTR param) noexcept {
        if (!mfc120itadll) {
            load_mfc120ita();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc120itadll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc120jpn_func(LPCSTR param) noexcept {
        if (!mfc120jpndll) {
            load_mfc120jpn();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc120jpndll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc120kor_func(LPCSTR param) noexcept {
        if (!mfc120kordll) {
            load_mfc120kor();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc120kordll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc120rus_func(LPCSTR param) noexcept {
        if (!mfc120rusdll) {
            load_mfc120rus();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc120rusdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc120u_func(LPCSTR param) noexcept {
        if (!mfc120udll) {
            load_mfc120u();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc120udll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc140_func(LPCSTR param) noexcept {
        if (!mfc140dll) {
            load_mfc140();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc140dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc140chs_func(LPCSTR param) noexcept {
        if (!mfc140chsdll) {
            load_mfc140chs();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc140chsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc140cht_func(LPCSTR param) noexcept {
        if (!mfc140chtdll) {
            load_mfc140cht();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc140chtdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc140d_func(LPCSTR param) noexcept {
        if (!mfc140ddll) {
            load_mfc140d();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc140ddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc140deu_func(LPCSTR param) noexcept {
        if (!mfc140deudll) {
            load_mfc140deu();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc140deudll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc140enu_func(LPCSTR param) noexcept {
        if (!mfc140enudll) {
            load_mfc140enu();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc140enudll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc140esn_func(LPCSTR param) noexcept {
        if (!mfc140esndll) {
            load_mfc140esn();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc140esndll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc140fra_func(LPCSTR param) noexcept {
        if (!mfc140fradll) {
            load_mfc140fra();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc140fradll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc140ita_func(LPCSTR param) noexcept {
        if (!mfc140itadll) {
            load_mfc140ita();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc140itadll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc140jpn_func(LPCSTR param) noexcept {
        if (!mfc140jpndll) {
            load_mfc140jpn();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc140jpndll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc140kor_func(LPCSTR param) noexcept {
        if (!mfc140kordll) {
            load_mfc140kor();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc140kordll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc140rus_func(LPCSTR param) noexcept {
        if (!mfc140rusdll) {
            load_mfc140rus();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc140rusdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc140u_func(LPCSTR param) noexcept {
        if (!mfc140udll) {
            load_mfc140u();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc140udll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc140ud_func(LPCSTR param) noexcept {
        if (!mfc140uddll) {
            load_mfc140ud();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc140uddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc42_func(LPCSTR param) noexcept {
        if (!mfc42dll) {
            load_mfc42();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc42dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfc42u_func(LPCSTR param) noexcept {
        if (!mfc42udll) {
            load_mfc42u();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfc42udll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MFCaptureEngine_func(LPCSTR param) noexcept {
        if (!MFCaptureEnginedll) {
            load_MFCaptureEngine();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MFCaptureEnginedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfcm100_func(LPCSTR param) noexcept {
        if (!mfcm100dll) {
            load_mfcm100();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfcm100dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfcm100u_func(LPCSTR param) noexcept {
        if (!mfcm100udll) {
            load_mfcm100u();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfcm100udll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfcm110_func(LPCSTR param) noexcept {
        if (!mfcm110dll) {
            load_mfcm110();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfcm110dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfcm110u_func(LPCSTR param) noexcept {
        if (!mfcm110udll) {
            load_mfcm110u();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfcm110udll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfcm120_func(LPCSTR param) noexcept {
        if (!mfcm120dll) {
            load_mfcm120();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfcm120dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfcm120u_func(LPCSTR param) noexcept {
        if (!mfcm120udll) {
            load_mfcm120u();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfcm120udll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfcm140_func(LPCSTR param) noexcept {
        if (!mfcm140dll) {
            load_mfcm140();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfcm140dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfcm140d_func(LPCSTR param) noexcept {
        if (!mfcm140ddll) {
            load_mfcm140d();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfcm140ddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfcm140u_func(LPCSTR param) noexcept {
        if (!mfcm140udll) {
            load_mfcm140u();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfcm140udll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfcm140ud_func(LPCSTR param) noexcept {
        if (!mfcm140uddll) {
            load_mfcm140ud();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfcm140uddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfcore_func(LPCSTR param) noexcept {
        if (!mfcoredll) {
            load_mfcore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfcoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfcsubs_func(LPCSTR param) noexcept {
        if (!mfcsubsdll) {
            load_mfcsubs();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfcsubsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfds_func(LPCSTR param) noexcept {
        if (!mfdsdll) {
            load_mfds();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfdsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfdvdec_func(LPCSTR param) noexcept {
        if (!mfdvdecdll) {
            load_mfdvdec();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfdvdecdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mferror_func(LPCSTR param) noexcept {
        if (!mferrordll) {
            load_mferror();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mferrordll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfh263enc_func(LPCSTR param) noexcept {
        if (!mfh263encdll) {
            load_mfh263enc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfh263encdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfh264enc_func(LPCSTR param) noexcept {
        if (!mfh264encdll) {
            load_mfh264enc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfh264encdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfksproxy_func(LPCSTR param) noexcept {
        if (!mfksproxydll) {
            load_mfksproxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfksproxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MFMediaEngine_func(LPCSTR param) noexcept {
        if (!MFMediaEnginedll) {
            load_MFMediaEngine();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MFMediaEnginedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfmjpegdec_func(LPCSTR param) noexcept {
        if (!mfmjpegdecdll) {
            load_mfmjpegdec();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfmjpegdecdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfmkvsrcsnk_func(LPCSTR param) noexcept {
        if (!mfmkvsrcsnkdll) {
            load_mfmkvsrcsnk();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfmkvsrcsnkdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfmp4srcsnk_func(LPCSTR param) noexcept {
        if (!mfmp4srcsnkdll) {
            load_mfmp4srcsnk();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfmp4srcsnkdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfmpeg2srcsnk_func(LPCSTR param) noexcept {
        if (!mfmpeg2srcsnkdll) {
            load_mfmpeg2srcsnk();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfmpeg2srcsnkdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfnetcore_func(LPCSTR param) noexcept {
        if (!mfnetcoredll) {
            load_mfnetcore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfnetcoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfnetsrc_func(LPCSTR param) noexcept {
        if (!mfnetsrcdll) {
            load_mfnetsrc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfnetsrcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfperfhelper_func(LPCSTR param) noexcept {
        if (!mfperfhelperdll) {
            load_mfperfhelper();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfperfhelperdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfplat_func(LPCSTR param) noexcept {
        if (!mfplatdll) {
            load_mfplat();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfplatdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MFPlay_func(LPCSTR param) noexcept {
        if (!MFPlaydll) {
            load_MFPlay();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MFPlaydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfps_func(LPCSTR param) noexcept {
        if (!mfpsdll) {
            load_mfps();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfpsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfreadwrite_func(LPCSTR param) noexcept {
        if (!mfreadwritedll) {
            load_mfreadwrite();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfreadwritedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfsensorgroup_func(LPCSTR param) noexcept {
        if (!mfsensorgroupdll) {
            load_mfsensorgroup();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfsensorgroupdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfsrcsnk_func(LPCSTR param) noexcept {
        if (!mfsrcsnkdll) {
            load_mfsrcsnk();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfsrcsnkdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfsvr_func(LPCSTR param) noexcept {
        if (!mfsvrdll) {
            load_mfsvr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfsvrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mftranscode_func(LPCSTR param) noexcept {
        if (!mftranscodedll) {
            load_mftranscode();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mftranscodedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfvdsp_func(LPCSTR param) noexcept {
        if (!mfvdspdll) {
            load_mfvdsp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfvdspdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfvfw_func(LPCSTR param) noexcept {
        if (!mfvfwdll) {
            load_mfvfw();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfvfwdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfxplugin64_hw_func(LPCSTR param) noexcept {
        if (!mfxplugin64_hwdll) {
            load_mfxplugin64_hw();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfxplugin64_hwdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfx_mft_encrypt_64_func(LPCSTR param) noexcept {
        if (!mfx_mft_encrypt_64dll) {
            load_mfx_mft_encrypt_64();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfx_mft_encrypt_64dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfx_mft_h264ve_64_func(LPCSTR param) noexcept {
        if (!mfx_mft_h264ve_64dll) {
            load_mfx_mft_h264ve_64();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfx_mft_h264ve_64dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfx_mft_h265ve_64_func(LPCSTR param) noexcept {
        if (!mfx_mft_h265ve_64dll) {
            load_mfx_mft_h265ve_64();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfx_mft_h265ve_64dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfx_mft_mjpgvd_64_func(LPCSTR param) noexcept {
        if (!mfx_mft_mjpgvd_64dll) {
            load_mfx_mft_mjpgvd_64();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfx_mft_mjpgvd_64dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mfx_mft_vp9ve_64_func(LPCSTR param) noexcept {
        if (!mfx_mft_vp9ve_64dll) {
            load_mfx_mft_vp9ve_64();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mfx_mft_vp9ve_64dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mgmtapi_func(LPCSTR param) noexcept {
        if (!mgmtapidll) {
            load_mgmtapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mgmtapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mgmtrefreshcredprov_func(LPCSTR param) noexcept {
        if (!mgmtrefreshcredprovdll) {
            load_mgmtrefreshcredprov();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mgmtrefreshcredprovdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mi_func(LPCSTR param) noexcept {
        if (!midll) {
            load_mi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(midll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mibincodec_func(LPCSTR param) noexcept {
        if (!mibincodecdll) {
            load_mibincodec();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mibincodecdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_Microsoft_Windows_AppModelExecEvents_func(LPCSTR param) noexcept {
        if (!Microsoft_Windows_AppModelExecEventsdll) {
            load_Microsoft_Windows_AppModelExecEvents();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(Microsoft_Windows_AppModelExecEventsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_microsoft_windows_battery_events_func(LPCSTR param) noexcept {
        if (!microsoft_windows_battery_eventsdll) {
            load_microsoft_windows_battery_events();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(microsoft_windows_battery_eventsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_microsoft_windows_hal_events_func(LPCSTR param) noexcept {
        if (!microsoft_windows_hal_eventsdll) {
            load_microsoft_windows_hal_events();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(microsoft_windows_hal_eventsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_Microsoft_Windows_Internal_Shell_NearShareExperience_func(LPCSTR param) noexcept {
        if (!Microsoft_Windows_Internal_Shell_NearShareExperiencedll) {
            load_Microsoft_Windows_Internal_Shell_NearShareExperience();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(Microsoft_Windows_Internal_Shell_NearShareExperiencedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_microsoft_windows_kernel_cc_events_func(LPCSTR param) noexcept {
        if (!microsoft_windows_kernel_cc_eventsdll) {
            load_microsoft_windows_kernel_cc_events();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(microsoft_windows_kernel_cc_eventsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_microsoft_windows_kernel_pnp_events_func(LPCSTR param) noexcept {
        if (!microsoft_windows_kernel_pnp_eventsdll) {
            load_microsoft_windows_kernel_pnp_events();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(microsoft_windows_kernel_pnp_eventsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_microsoft_windows_kernel_power_events_func(LPCSTR param) noexcept {
        if (!microsoft_windows_kernel_power_eventsdll) {
            load_microsoft_windows_kernel_power_events();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(microsoft_windows_kernel_power_eventsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_microsoft_windows_kernel_processor_power_events_func(LPCSTR param) noexcept {
        if (!microsoft_windows_kernel_processor_power_eventsdll) {
            load_microsoft_windows_kernel_processor_power_events();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(microsoft_windows_kernel_processor_power_eventsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_Microsoft_Windows_MapControls_func(LPCSTR param) noexcept {
        if (!Microsoft_Windows_MapControlsdll) {
            load_Microsoft_Windows_MapControls();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(Microsoft_Windows_MapControlsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_Microsoft_Windows_MosHost_func(LPCSTR param) noexcept {
        if (!Microsoft_Windows_MosHostdll) {
            load_Microsoft_Windows_MosHost();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(Microsoft_Windows_MosHostdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_microsoft_windows_pdc_func(LPCSTR param) noexcept {
        if (!microsoft_windows_pdcdll) {
            load_microsoft_windows_pdc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(microsoft_windows_pdcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_microsoft_windows_power_cad_events_func(LPCSTR param) noexcept {
        if (!microsoft_windows_power_cad_eventsdll) {
            load_microsoft_windows_power_cad_events();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(microsoft_windows_power_cad_eventsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_microsoft_windows_processor_aggregator_events_func(LPCSTR param) noexcept {
        if (!microsoft_windows_processor_aggregator_eventsdll) {
            load_microsoft_windows_processor_aggregator_events();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(microsoft_windows_processor_aggregator_eventsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_microsoft_windows_sleepstudy_events_func(LPCSTR param) noexcept {
        if (!microsoft_windows_sleepstudy_eventsdll) {
            load_microsoft_windows_sleepstudy_events();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(microsoft_windows_sleepstudy_eventsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_microsoft_windows_storage_tiering_events_func(LPCSTR param) noexcept {
        if (!microsoft_windows_storage_tiering_eventsdll) {
            load_microsoft_windows_storage_tiering_events();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(microsoft_windows_storage_tiering_eventsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_microsoft_windows_system_events_func(LPCSTR param) noexcept {
        if (!microsoft_windows_system_eventsdll) {
            load_microsoft_windows_system_events();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(microsoft_windows_system_eventsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_Microsoft_WindowsPhone_SEManagementProvider_func(LPCSTR param) noexcept {
        if (!Microsoft_WindowsPhone_SEManagementProviderdll) {
            load_Microsoft_WindowsPhone_SEManagementProvider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(Microsoft_WindowsPhone_SEManagementProviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MicrosoftBluetoothAudio_func(LPCSTR param) noexcept {
        if (!MicrosoftBluetoothAudiodll) {
            load_MicrosoftBluetoothAudio();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MicrosoftBluetoothAudiodll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MicrosoftBluetoothProxy_func(LPCSTR param) noexcept {
        if (!MicrosoftBluetoothProxydll) {
            load_MicrosoftBluetoothProxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MicrosoftBluetoothProxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MicrosoftBluetoothService_func(LPCSTR param) noexcept {
        if (!MicrosoftBluetoothServicedll) {
            load_MicrosoftBluetoothService();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MicrosoftBluetoothServicedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MicrosoftBluetoothUserService_func(LPCSTR param) noexcept {
        if (!MicrosoftBluetoothUserServicedll) {
            load_MicrosoftBluetoothUserService();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MicrosoftBluetoothUserServicedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MicrosoftGraphicsDisplayDisplayEnhancementService_func(LPCSTR param) noexcept {
        if (!MicrosoftGraphicsDisplayDisplayEnhancementServicedll) {
            load_MicrosoftGraphicsDisplayDisplayEnhancementService();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MicrosoftGraphicsDisplayDisplayEnhancementServicedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MicrosoftInternalFrameworkUdkSystem_func(LPCSTR param) noexcept {
        if (!MicrosoftInternalFrameworkUdkSystemdll) {
            load_MicrosoftInternalFrameworkUdkSystem();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MicrosoftInternalFrameworkUdkSystemdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MicrosoftLocalUserImageProvider_func(LPCSTR param) noexcept {
        if (!MicrosoftLocalUserImageProviderdll) {
            load_MicrosoftLocalUserImageProvider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MicrosoftLocalUserImageProviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MicrosoftManagementInfrastructureNativeUnmanaged_func(LPCSTR param) noexcept {
        if (!MicrosoftManagementInfrastructureNativeUnmanageddll) {
            load_MicrosoftManagementInfrastructureNativeUnmanaged();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MicrosoftManagementInfrastructureNativeUnmanageddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MicrosoftUevAgentDriverEvents_func(LPCSTR param) noexcept {
        if (!MicrosoftUevAgentDriverEventsdll) {
            load_MicrosoftUevAgentDriverEvents();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MicrosoftUevAgentDriverEventsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MicrosoftUevAppAgent_func(LPCSTR param) noexcept {
        if (!MicrosoftUevAppAgentdll) {
            load_MicrosoftUevAppAgent();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MicrosoftUevAppAgentdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MicrosoftUevCabUtil_func(LPCSTR param) noexcept {
        if (!MicrosoftUevCabUtildll) {
            load_MicrosoftUevCabUtil();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MicrosoftUevCabUtildll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MicrosoftUevCmUtil_func(LPCSTR param) noexcept {
        if (!MicrosoftUevCmUtildll) {
            load_MicrosoftUevCmUtil();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MicrosoftUevCmUtildll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MicrosoftUevCommon_func(LPCSTR param) noexcept {
        if (!MicrosoftUevCommondll) {
            load_MicrosoftUevCommon();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MicrosoftUevCommondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MicrosoftUevCommonWinRT_func(LPCSTR param) noexcept {
        if (!MicrosoftUevCommonWinRTdll) {
            load_MicrosoftUevCommonWinRT();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MicrosoftUevCommonWinRTdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MicrosoftUevCommonBridge_func(LPCSTR param) noexcept {
        if (!MicrosoftUevCommonBridgedll) {
            load_MicrosoftUevCommonBridge();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MicrosoftUevCommonBridgedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MicrosoftUevConfigWrapper_func(LPCSTR param) noexcept {
        if (!MicrosoftUevConfigWrapperdll) {
            load_MicrosoftUevConfigWrapper();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MicrosoftUevConfigWrapperdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MicrosoftUevEventLogMessages_func(LPCSTR param) noexcept {
        if (!MicrosoftUevEventLogMessagesdll) {
            load_MicrosoftUevEventLogMessages();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MicrosoftUevEventLogMessagesdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MicrosoftUevLocalSyncProvider_func(LPCSTR param) noexcept {
        if (!MicrosoftUevLocalSyncProviderdll) {
            load_MicrosoftUevLocalSyncProvider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MicrosoftUevLocalSyncProviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MicrosoftUevManagedEventLogging_func(LPCSTR param) noexcept {
        if (!MicrosoftUevManagedEventLoggingdll) {
            load_MicrosoftUevManagedEventLogging();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MicrosoftUevManagedEventLoggingdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MicrosoftUevManagement_func(LPCSTR param) noexcept {
        if (!MicrosoftUevManagementdll) {
            load_MicrosoftUevManagement();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MicrosoftUevManagementdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MicrosoftUevManagementWmiAccess_func(LPCSTR param) noexcept {
        if (!MicrosoftUevManagementWmiAccessdll) {
            load_MicrosoftUevManagementWmiAccess();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MicrosoftUevManagementWmiAccessdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MicrosoftUevModernAppAgent_func(LPCSTR param) noexcept {
        if (!MicrosoftUevModernAppAgentdll) {
            load_MicrosoftUevModernAppAgent();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MicrosoftUevModernAppAgentdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MicrosoftUevModernAppCore_func(LPCSTR param) noexcept {
        if (!MicrosoftUevModernAppCoredll) {
            load_MicrosoftUevModernAppCore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MicrosoftUevModernAppCoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MicrosoftUevModernAppDataWinRT_func(LPCSTR param) noexcept {
        if (!MicrosoftUevModernAppDataWinRTdll) {
            load_MicrosoftUevModernAppDataWinRT();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MicrosoftUevModernAppDataWinRTdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MicrosoftUevModernSync_func(LPCSTR param) noexcept {
        if (!MicrosoftUevModernSyncdll) {
            load_MicrosoftUevModernSync();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MicrosoftUevModernSyncdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MicrosoftUevMonitorSyncProvider_func(LPCSTR param) noexcept {
        if (!MicrosoftUevMonitorSyncProviderdll) {
            load_MicrosoftUevMonitorSyncProvider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MicrosoftUevMonitorSyncProviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MicrosoftUevOffice2010CustomActions_func(LPCSTR param) noexcept {
        if (!MicrosoftUevOffice2010CustomActionsdll) {
            load_MicrosoftUevOffice2010CustomActions();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MicrosoftUevOffice2010CustomActionsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MicrosoftUevOffice2013CustomActions_func(LPCSTR param) noexcept {
        if (!MicrosoftUevOffice2013CustomActionsdll) {
            load_MicrosoftUevOffice2013CustomActions();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MicrosoftUevOffice2013CustomActionsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MicrosoftUevPrinterCustomActions_func(LPCSTR param) noexcept {
        if (!MicrosoftUevPrinterCustomActionsdll) {
            load_MicrosoftUevPrinterCustomActions();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MicrosoftUevPrinterCustomActionsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MicrosoftUevSmbSyncProvider_func(LPCSTR param) noexcept {
        if (!MicrosoftUevSmbSyncProviderdll) {
            load_MicrosoftUevSmbSyncProvider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MicrosoftUevSmbSyncProviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MicrosoftUevSyncCommon_func(LPCSTR param) noexcept {
        if (!MicrosoftUevSyncCommondll) {
            load_MicrosoftUevSyncCommon();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MicrosoftUevSyncCommondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MicrosoftUevSyncConditions_func(LPCSTR param) noexcept {
        if (!MicrosoftUevSyncConditionsdll) {
            load_MicrosoftUevSyncConditions();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MicrosoftUevSyncConditionsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MicrosoftWindowsStorageCore_func(LPCSTR param) noexcept {
        if (!MicrosoftWindowsStorageCoredll) {
            load_MicrosoftWindowsStorageCore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MicrosoftWindowsStorageCoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MicrosoftWindowsStorageStorageBusCache_func(LPCSTR param) noexcept {
        if (!MicrosoftWindowsStorageStorageBusCachedll) {
            load_MicrosoftWindowsStorageStorageBusCache();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MicrosoftWindowsStorageStorageBusCachedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MicrosoftAccountTokenProviderCore_func(LPCSTR param) noexcept {
        if (!MicrosoftAccountTokenProviderCoredll) {
            load_MicrosoftAccountTokenProviderCore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MicrosoftAccountTokenProviderCoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MicrosoftAccountCloudAP_func(LPCSTR param) noexcept {
        if (!MicrosoftAccountCloudAPdll) {
            load_MicrosoftAccountCloudAP();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MicrosoftAccountCloudAPdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MicrosoftAccountExtension_func(LPCSTR param) noexcept {
        if (!MicrosoftAccountExtensiondll) {
            load_MicrosoftAccountExtension();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MicrosoftAccountExtensiondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MicrosoftAccountTokenProvider_func(LPCSTR param) noexcept {
        if (!MicrosoftAccountTokenProviderdll) {
            load_MicrosoftAccountTokenProvider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MicrosoftAccountTokenProviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MicrosoftAccountWAMExtension_func(LPCSTR param) noexcept {
        if (!MicrosoftAccountWAMExtensiondll) {
            load_MicrosoftAccountWAMExtension();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MicrosoftAccountWAMExtensiondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_midimap_func(LPCSTR param) noexcept {
        if (!midimapdll) {
            load_midimap();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(midimapdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_migisol_func(LPCSTR param) noexcept {
        if (!migisoldll) {
            load_migisol();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(migisoldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_miguiresource_func(LPCSTR param) noexcept {
        if (!miguiresourcedll) {
            load_miguiresource();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(miguiresourcedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mimefilt_func(LPCSTR param) noexcept {
        if (!mimefiltdll) {
            load_mimefilt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mimefiltdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mimofcodec_func(LPCSTR param) noexcept {
        if (!mimofcodecdll) {
            load_mimofcodec();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mimofcodecdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MinstoreEvents_func(LPCSTR param) noexcept {
        if (!MinstoreEventsdll) {
            load_MinstoreEvents();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MinstoreEventsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MiracastInputMgr_func(LPCSTR param) noexcept {
        if (!MiracastInputMgrdll) {
            load_MiracastInputMgr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MiracastInputMgrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MiracastReceiver_func(LPCSTR param) noexcept {
        if (!MiracastReceiverdll) {
            load_MiracastReceiver();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MiracastReceiverdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MiracastReceiverExt_func(LPCSTR param) noexcept {
        if (!MiracastReceiverExtdll) {
            load_MiracastReceiverExt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MiracastReceiverExtdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MirrorDrvCompat_func(LPCSTR param) noexcept {
        if (!MirrorDrvCompatdll) {
            load_MirrorDrvCompat();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MirrorDrvCompatdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mispace_func(LPCSTR param) noexcept {
        if (!mispacedll) {
            load_mispace();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mispacedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MitigationClient_func(LPCSTR param) noexcept {
        if (!MitigationClientdll) {
            load_MitigationClient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MitigationClientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MitigationConfiguration_func(LPCSTR param) noexcept {
        if (!MitigationConfigurationdll) {
            load_MitigationConfiguration();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MitigationConfigurationdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_miutils_func(LPCSTR param) noexcept {
        if (!miutilsdll) {
            load_miutils();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(miutilsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MixedRealityBroker_func(LPCSTR param) noexcept {
        if (!MixedRealityBrokerdll) {
            load_MixedRealityBroker();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MixedRealityBrokerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MixedRealityCapturePipeline_func(LPCSTR param) noexcept {
        if (!MixedRealityCapturePipelinedll) {
            load_MixedRealityCapturePipeline();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MixedRealityCapturePipelinedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MixedRealityCaptureProxyStub_func(LPCSTR param) noexcept {
        if (!MixedRealityCaptureProxyStubdll) {
            load_MixedRealityCaptureProxyStub();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MixedRealityCaptureProxyStubdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MixedRealityRuntime_func(LPCSTR param) noexcept {
        if (!MixedRealityRuntimedll) {
            load_MixedRealityRuntime();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MixedRealityRuntimedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mlang_func(LPCSTR param) noexcept {
        if (!mlangdll) {
            load_mlang();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mlangdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mmcbase_func(LPCSTR param) noexcept {
        if (!mmcbasedll) {
            load_mmcbase();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mmcbasedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mmcndmgr_func(LPCSTR param) noexcept {
        if (!mmcndmgrdll) {
            load_mmcndmgr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mmcndmgrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mmcshext_func(LPCSTR param) noexcept {
        if (!mmcshextdll) {
            load_mmcshext();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mmcshextdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MMDevAPI_func(LPCSTR param) noexcept {
        if (!MMDevAPIdll) {
            load_MMDevAPI();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MMDevAPIdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mmgaclient_func(LPCSTR param) noexcept {
        if (!mmgaclientdll) {
            load_mmgaclient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mmgaclientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mmgaproxystub_func(LPCSTR param) noexcept {
        if (!mmgaproxystubdll) {
            load_mmgaproxystub();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mmgaproxystubdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mmres_func(LPCSTR param) noexcept {
        if (!mmresdll) {
            load_mmres();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mmresdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mobilenetworking_func(LPCSTR param) noexcept {
        if (!mobilenetworkingdll) {
            load_mobilenetworking();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mobilenetworkingdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_modemui_func(LPCSTR param) noexcept {
        if (!modemuidll) {
            load_modemui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(modemuidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_modernexecserver_func(LPCSTR param) noexcept {
        if (!modernexecserverdll) {
            load_modernexecserver();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(modernexecserverdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_moricons_func(LPCSTR param) noexcept {
        if (!moriconsdll) {
            load_moricons();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(moriconsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_moshost_func(LPCSTR param) noexcept {
        if (!moshostdll) {
            load_moshost();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(moshostdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MosHostClient_func(LPCSTR param) noexcept {
        if (!MosHostClientdll) {
            load_MosHostClient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MosHostClientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_moshostcore_func(LPCSTR param) noexcept {
        if (!moshostcoredll) {
            load_moshostcore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(moshostcoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MosStorage_func(LPCSTR param) noexcept {
        if (!MosStoragedll) {
            load_MosStorage();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MosStoragedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mpeval_func(LPCSTR param) noexcept {
        if (!mpevaldll) {
            load_mpeval();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mpevaldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mpr_func(LPCSTR param) noexcept {
        if (!mprdll) {
            load_mpr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mprdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mprapi_func(LPCSTR param) noexcept {
        if (!mprapidll) {
            load_mprapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mprapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mprddm_func(LPCSTR param) noexcept {
        if (!mprddmdll) {
            load_mprddm();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mprddmdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mprdim_func(LPCSTR param) noexcept {
        if (!mprdimdll) {
            load_mprdim();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mprdimdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mprext_func(LPCSTR param) noexcept {
        if (!mprextdll) {
            load_mprext();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mprextdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mprmsg_func(LPCSTR param) noexcept {
        if (!mprmsgdll) {
            load_mprmsg();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mprmsgdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MPSSVC_func(LPCSTR param) noexcept {
        if (!MPSSVCdll) {
            load_MPSSVC();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MPSSVCdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mpunits_func(LPCSTR param) noexcept {
        if (!mpunitsdll) {
            load_mpunits();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mpunitsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MrmCoreR_func(LPCSTR param) noexcept {
        if (!MrmCoreRdll) {
            load_MrmCoreR();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MrmCoreRdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MrmDeploy_func(LPCSTR param) noexcept {
        if (!MrmDeploydll) {
            load_MrmDeploy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MrmDeploydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MrmIndexer_func(LPCSTR param) noexcept {
        if (!MrmIndexerdll) {
            load_MrmIndexer();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MrmIndexerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mrt100_func(LPCSTR param) noexcept {
        if (!mrt100dll) {
            load_mrt100();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mrt100dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mrt_map_func(LPCSTR param) noexcept {
        if (!mrt_mapdll) {
            load_mrt_map();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mrt_mapdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ms3dthumbnailprovider_func(LPCSTR param) noexcept {
        if (!ms3dthumbnailproviderdll) {
            load_ms3dthumbnailprovider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ms3dthumbnailproviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msaatext_func(LPCSTR param) noexcept {
        if (!msaatextdll) {
            load_msaatext();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msaatextdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msacm32_func(LPCSTR param) noexcept {
        if (!msacm32dll) {
            load_msacm32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msacm32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msafd_func(LPCSTR param) noexcept {
        if (!msafddll) {
            load_msafd();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msafddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MSAJApi_func(LPCSTR param) noexcept {
        if (!MSAJApidll) {
            load_MSAJApi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MSAJApidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MSAlacDecoder_func(LPCSTR param) noexcept {
        if (!MSAlacDecoderdll) {
            load_MSAlacDecoder();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MSAlacDecoderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MSAlacEncoder_func(LPCSTR param) noexcept {
        if (!MSAlacEncoderdll) {
            load_MSAlacEncoder();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MSAlacEncoderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MSAMRNBDecoder_func(LPCSTR param) noexcept {
        if (!MSAMRNBDecoderdll) {
            load_MSAMRNBDecoder();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MSAMRNBDecoderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MSAMRNBEncoder_func(LPCSTR param) noexcept {
        if (!MSAMRNBEncoderdll) {
            load_MSAMRNBEncoder();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MSAMRNBEncoderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MSAMRNBSink_func(LPCSTR param) noexcept {
        if (!MSAMRNBSinkdll) {
            load_MSAMRNBSink();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MSAMRNBSinkdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MSAMRNBSource_func(LPCSTR param) noexcept {
        if (!MSAMRNBSourcedll) {
            load_MSAMRNBSource();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MSAMRNBSourcedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MsApoFxProxy_func(LPCSTR param) noexcept {
        if (!MsApoFxProxydll) {
            load_MsApoFxProxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MsApoFxProxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MSAProfileNotificationHandler_func(LPCSTR param) noexcept {
        if (!MSAProfileNotificationHandlerdll) {
            load_MSAProfileNotificationHandler();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MSAProfileNotificationHandlerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msasn1_func(LPCSTR param) noexcept {
        if (!msasn1dll) {
            load_msasn1();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msasn1dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MSAudDecMFT_func(LPCSTR param) noexcept {
        if (!MSAudDecMFTdll) {
            load_MSAudDecMFT();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MSAudDecMFTdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msaudite_func(LPCSTR param) noexcept {
        if (!msauditedll) {
            load_msaudite();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msauditedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msauserext_func(LPCSTR param) noexcept {
        if (!msauserextdll) {
            load_msauserext();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msauserextdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mscandui_func(LPCSTR param) noexcept {
        if (!mscanduidll) {
            load_mscandui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mscanduidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mscat32_func(LPCSTR param) noexcept {
        if (!mscat32dll) {
            load_mscat32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mscat32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msclmd_func(LPCSTR param) noexcept {
        if (!msclmddll) {
            load_msclmd();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msclmddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mscms_func(LPCSTR param) noexcept {
        if (!mscmsdll) {
            load_mscms();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mscmsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mscoree_func(LPCSTR param) noexcept {
        if (!mscoreedll) {
            load_mscoree();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mscoreedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mscorier_func(LPCSTR param) noexcept {
        if (!mscorierdll) {
            load_mscorier();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mscorierdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mscories_func(LPCSTR param) noexcept {
        if (!mscoriesdll) {
            load_mscories();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mscoriesdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msctf_func(LPCSTR param) noexcept {
        if (!msctfdll) {
            load_msctf();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msctfdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MsCtfMonitor_func(LPCSTR param) noexcept {
        if (!MsCtfMonitordll) {
            load_MsCtfMonitor();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MsCtfMonitordll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msctfp_func(LPCSTR param) noexcept {
        if (!msctfpdll) {
            load_msctfp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msctfpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msctfui_func(LPCSTR param) noexcept {
        if (!msctfuidll) {
            load_msctfui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msctfuidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msctfuimanager_func(LPCSTR param) noexcept {
        if (!msctfuimanagerdll) {
            load_msctfuimanager();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msctfuimanagerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msdadiag_func(LPCSTR param) noexcept {
        if (!msdadiagdll) {
            load_msdadiag();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msdadiagdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msdart_func(LPCSTR param) noexcept {
        if (!msdartdll) {
            load_msdart();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msdartdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msdelta_func(LPCSTR param) noexcept {
        if (!msdeltadll) {
            load_msdelta();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msdeltadll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msdmo_func(LPCSTR param) noexcept {
        if (!msdmodll) {
            load_msdmo();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msdmodll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msdrm_func(LPCSTR param) noexcept {
        if (!msdrmdll) {
            load_msdrm();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msdrmdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msdtckrm_func(LPCSTR param) noexcept {
        if (!msdtckrmdll) {
            load_msdtckrm();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msdtckrmdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msdtclog_func(LPCSTR param) noexcept {
        if (!msdtclogdll) {
            load_msdtclog();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msdtclogdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msdtcprx_func(LPCSTR param) noexcept {
        if (!msdtcprxdll) {
            load_msdtcprx();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msdtcprxdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msdtcspoffln_func(LPCSTR param) noexcept {
        if (!msdtcspofflndll) {
            load_msdtcspoffln();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msdtcspofflndll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msdtctm_func(LPCSTR param) noexcept {
        if (!msdtctmdll) {
            load_msdtctm();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msdtctmdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msdtcuiu_func(LPCSTR param) noexcept {
        if (!msdtcuiudll) {
            load_msdtcuiu();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msdtcuiudll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msdtcVSp1res_func(LPCSTR param) noexcept {
        if (!msdtcVSp1resdll) {
            load_msdtcVSp1res();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msdtcVSp1resdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msfeeds_func(LPCSTR param) noexcept {
        if (!msfeedsdll) {
            load_msfeeds();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msfeedsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msfeedsbs_func(LPCSTR param) noexcept {
        if (!msfeedsbsdll) {
            load_msfeedsbs();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msfeedsbsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MSFlacDecoder_func(LPCSTR param) noexcept {
        if (!MSFlacDecoderdll) {
            load_MSFlacDecoder();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MSFlacDecoderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MSFlacEncoder_func(LPCSTR param) noexcept {
        if (!MSFlacEncoderdll) {
            load_MSFlacEncoder();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MSFlacEncoderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msftedit_func(LPCSTR param) noexcept {
        if (!msfteditdll) {
            load_msftedit();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msfteditdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MsftOemDllIgneous_func(LPCSTR param) noexcept {
        if (!MsftOemDllIgneousdll) {
            load_MsftOemDllIgneous();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MsftOemDllIgneousdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MSHEIF_func(LPCSTR param) noexcept {
        if (!MSHEIFdll) {
            load_MSHEIF();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MSHEIFdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mshtml_func(LPCSTR param) noexcept {
        if (!mshtmldll) {
            load_mshtml();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mshtmldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MshtmlDac_func(LPCSTR param) noexcept {
        if (!MshtmlDacdll) {
            load_MshtmlDac();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MshtmlDacdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mshtmled_func(LPCSTR param) noexcept {
        if (!mshtmleddll) {
            load_mshtmled();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mshtmleddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mshtmler_func(LPCSTR param) noexcept {
        if (!mshtmlerdll) {
            load_mshtmler();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mshtmlerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msi_func(LPCSTR param) noexcept {
        if (!msidll) {
            load_msi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MsiCofire_func(LPCSTR param) noexcept {
        if (!MsiCofiredll) {
            load_MsiCofire();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MsiCofiredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msidcrl40_func(LPCSTR param) noexcept {
        if (!msidcrl40dll) {
            load_msidcrl40();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msidcrl40dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msident_func(LPCSTR param) noexcept {
        if (!msidentdll) {
            load_msident();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msidentdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msidle_func(LPCSTR param) noexcept {
        if (!msidledll) {
            load_msidle();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msidledll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msidntld_func(LPCSTR param) noexcept {
        if (!msidntlddll) {
            load_msidntld();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msidntlddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msieftp_func(LPCSTR param) noexcept {
        if (!msieftpdll) {
            load_msieftp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msieftpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msihnd_func(LPCSTR param) noexcept {
        if (!msihnddll) {
            load_msihnd();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msihnddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msiltcfg_func(LPCSTR param) noexcept {
        if (!msiltcfgdll) {
            load_msiltcfg();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msiltcfgdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msimg32_func(LPCSTR param) noexcept {
        if (!msimg32dll) {
            load_msimg32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msimg32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msimsg_func(LPCSTR param) noexcept {
        if (!msimsgdll) {
            load_msimsg();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msimsgdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msimtf_func(LPCSTR param) noexcept {
        if (!msimtfdll) {
            load_msimtf();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msimtfdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msisip_func(LPCSTR param) noexcept {
        if (!msisipdll) {
            load_msisip();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msisipdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msIso_func(LPCSTR param) noexcept {
        if (!msIsodll) {
            load_msIso();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msIsodll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msiwer_func(LPCSTR param) noexcept {
        if (!msiwerdll) {
            load_msiwer();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msiwerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MsixDataSourceExtensionPS_func(LPCSTR param) noexcept {
        if (!MsixDataSourceExtensionPSdll) {
            load_MsixDataSourceExtensionPS();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MsixDataSourceExtensionPSdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mskeyprotcli_func(LPCSTR param) noexcept {
        if (!mskeyprotclidll) {
            load_mskeyprotcli();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mskeyprotclidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mskeyprotect_func(LPCSTR param) noexcept {
        if (!mskeyprotectdll) {
            load_mskeyprotect();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mskeyprotectdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msls31_func(LPCSTR param) noexcept {
        if (!msls31dll) {
            load_msls31();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msls31dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msmpeg2adec_func(LPCSTR param) noexcept {
        if (!msmpeg2adecdll) {
            load_msmpeg2adec();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msmpeg2adecdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msmpeg2vdec_func(LPCSTR param) noexcept {
        if (!msmpeg2vdecdll) {
            load_msmpeg2vdec();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msmpeg2vdecdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msobjs_func(LPCSTR param) noexcept {
        if (!msobjsdll) {
            load_msobjs();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msobjsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msoert2_func(LPCSTR param) noexcept {
        if (!msoert2dll) {
            load_msoert2();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msoert2dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MSOpusDecoder_func(LPCSTR param) noexcept {
        if (!MSOpusDecoderdll) {
            load_MSOpusDecoder();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MSOpusDecoderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mspatcha_func(LPCSTR param) noexcept {
        if (!mspatchadll) {
            load_mspatcha();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mspatchadll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mspatchc_func(LPCSTR param) noexcept {
        if (!mspatchcdll) {
            load_mspatchc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mspatchcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MSPhotography_func(LPCSTR param) noexcept {
        if (!MSPhotographydll) {
            load_MSPhotography();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MSPhotographydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msports_func(LPCSTR param) noexcept {
        if (!msportsdll) {
            load_msports();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msportsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msprivs_func(LPCSTR param) noexcept {
        if (!msprivsdll) {
            load_msprivs();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msprivsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msrahc_func(LPCSTR param) noexcept {
        if (!msrahcdll) {
            load_msrahc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msrahcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msrating_func(LPCSTR param) noexcept {
        if (!msratingdll) {
            load_msrating();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msratingdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MSRAWImage_func(LPCSTR param) noexcept {
        if (!MSRAWImagedll) {
            load_MSRAWImage();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MSRAWImagedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MsRdpWebAccess_func(LPCSTR param) noexcept {
        if (!MsRdpWebAccessdll) {
            load_MsRdpWebAccess();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MsRdpWebAccessdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msrle32_func(LPCSTR param) noexcept {
        if (!msrle32dll) {
            load_msrle32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msrle32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msscntrs_func(LPCSTR param) noexcept {
        if (!msscntrsdll) {
            load_msscntrs();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msscntrsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mssecuser_func(LPCSTR param) noexcept {
        if (!mssecuserdll) {
            load_mssecuser();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mssecuserdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mssecwfpu_func(LPCSTR param) noexcept {
        if (!mssecwfpudll) {
            load_mssecwfpu();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mssecwfpudll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mssign32_func(LPCSTR param) noexcept {
        if (!mssign32dll) {
            load_mssign32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mssign32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mssip32_func(LPCSTR param) noexcept {
        if (!mssip32dll) {
            load_mssip32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mssip32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mssitlb_func(LPCSTR param) noexcept {
        if (!mssitlbdll) {
            load_mssitlb();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mssitlbdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MsSpellCheckingFacility_func(LPCSTR param) noexcept {
        if (!MsSpellCheckingFacilitydll) {
            load_MsSpellCheckingFacility();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MsSpellCheckingFacilitydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mssph_func(LPCSTR param) noexcept {
        if (!mssphdll) {
            load_mssph();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mssphdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mssprxy_func(LPCSTR param) noexcept {
        if (!mssprxydll) {
            load_mssprxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mssprxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mssrch_func(LPCSTR param) noexcept {
        if (!mssrchdll) {
            load_mssrch();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mssrchdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mssvp_func(LPCSTR param) noexcept {
        if (!mssvpdll) {
            load_mssvp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mssvpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mstask_func(LPCSTR param) noexcept {
        if (!mstaskdll) {
            load_mstask();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mstaskdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msTextPrediction_func(LPCSTR param) noexcept {
        if (!msTextPredictiondll) {
            load_msTextPrediction();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msTextPredictiondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mstscax_func(LPCSTR param) noexcept {
        if (!mstscaxdll) {
            load_mstscax();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mstscaxdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msutb_func(LPCSTR param) noexcept {
        if (!msutbdll) {
            load_msutb();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msutbdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msv1_0_func(LPCSTR param) noexcept {
        if (!msv1_0dll) {
            load_msv1_0();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msv1_0dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msvcirt_func(LPCSTR param) noexcept {
        if (!msvcirtdll) {
            load_msvcirt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msvcirtdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msvcp100_func(LPCSTR param) noexcept {
        if (!msvcp100dll) {
            load_msvcp100();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msvcp100dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msvcp110_func(LPCSTR param) noexcept {
        if (!msvcp110dll) {
            load_msvcp110();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msvcp110dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msvcp110_win_func(LPCSTR param) noexcept {
        if (!msvcp110_windll) {
            load_msvcp110_win();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msvcp110_windll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msvcp120_func(LPCSTR param) noexcept {
        if (!msvcp120dll) {
            load_msvcp120();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msvcp120dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msvcp120_clr0400_func(LPCSTR param) noexcept {
        if (!msvcp120_clr0400dll) {
            load_msvcp120_clr0400();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msvcp120_clr0400dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msvcp140_func(LPCSTR param) noexcept {
        if (!msvcp140dll) {
            load_msvcp140();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msvcp140dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msvcp140d_func(LPCSTR param) noexcept {
        if (!msvcp140ddll) {
            load_msvcp140d();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msvcp140ddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msvcp140d_atomic_wait_func(LPCSTR param) noexcept {
        if (!msvcp140d_atomic_waitdll) {
            load_msvcp140d_atomic_wait();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msvcp140d_atomic_waitdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msvcp140d_codecvt_ids_func(LPCSTR param) noexcept {
        if (!msvcp140d_codecvt_idsdll) {
            load_msvcp140d_codecvt_ids();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msvcp140d_codecvt_idsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msvcp140_1_func(LPCSTR param) noexcept {
        if (!msvcp140_1dll) {
            load_msvcp140_1();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msvcp140_1dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msvcp140_1d_func(LPCSTR param) noexcept {
        if (!msvcp140_1ddll) {
            load_msvcp140_1d();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msvcp140_1ddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msvcp140_2_func(LPCSTR param) noexcept {
        if (!msvcp140_2dll) {
            load_msvcp140_2();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msvcp140_2dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msvcp140_2d_func(LPCSTR param) noexcept {
        if (!msvcp140_2ddll) {
            load_msvcp140_2d();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msvcp140_2ddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msvcp140_atomic_wait_func(LPCSTR param) noexcept {
        if (!msvcp140_atomic_waitdll) {
            load_msvcp140_atomic_wait();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msvcp140_atomic_waitdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msvcp140_clr0400_func(LPCSTR param) noexcept {
        if (!msvcp140_clr0400dll) {
            load_msvcp140_clr0400();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msvcp140_clr0400dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msvcp140_codecvt_ids_func(LPCSTR param) noexcept {
        if (!msvcp140_codecvt_idsdll) {
            load_msvcp140_codecvt_ids();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msvcp140_codecvt_idsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msvcp60_func(LPCSTR param) noexcept {
        if (!msvcp60dll) {
            load_msvcp60();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msvcp60dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msvcp_win_func(LPCSTR param) noexcept {
        if (!msvcp_windll) {
            load_msvcp_win();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msvcp_windll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msvcr100_func(LPCSTR param) noexcept {
        if (!msvcr100dll) {
            load_msvcr100();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msvcr100dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msvcr100_clr0400_func(LPCSTR param) noexcept {
        if (!msvcr100_clr0400dll) {
            load_msvcr100_clr0400();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msvcr100_clr0400dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msvcr110_func(LPCSTR param) noexcept {
        if (!msvcr110dll) {
            load_msvcr110();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msvcr110dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msvcr120_func(LPCSTR param) noexcept {
        if (!msvcr120dll) {
            load_msvcr120();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msvcr120dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msvcr120_clr0400_func(LPCSTR param) noexcept {
        if (!msvcr120_clr0400dll) {
            load_msvcr120_clr0400();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msvcr120_clr0400dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msvcrt_func(LPCSTR param) noexcept {
        if (!msvcrtdll) {
            load_msvcrt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msvcrtdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msvfw32_func(LPCSTR param) noexcept {
        if (!msvfw32dll) {
            load_msvfw32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msvfw32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msvidc32_func(LPCSTR param) noexcept {
        if (!msvidc32dll) {
            load_msvidc32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msvidc32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MSVidCtl_func(LPCSTR param) noexcept {
        if (!MSVidCtldll) {
            load_MSVidCtl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MSVidCtldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MSVideoDSP_func(LPCSTR param) noexcept {
        if (!MSVideoDSPdll) {
            load_MSVideoDSP();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MSVideoDSPdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MSVP9DEC_func(LPCSTR param) noexcept {
        if (!MSVP9DECdll) {
            load_MSVP9DEC();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MSVP9DECdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msvproc_func(LPCSTR param) noexcept {
        if (!msvprocdll) {
            load_msvproc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msvprocdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MSVPXENC_func(LPCSTR param) noexcept {
        if (!MSVPXENCdll) {
            load_MSVPXENC();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MSVPXENCdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MSWB7_func(LPCSTR param) noexcept {
        if (!MSWB7dll) {
            load_MSWB7();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MSWB7dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MSWebp_func(LPCSTR param) noexcept {
        if (!MSWebpdll) {
            load_MSWebp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MSWebpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mswmdm_func(LPCSTR param) noexcept {
        if (!mswmdmdll) {
            load_mswmdm();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mswmdmdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mswsock_func(LPCSTR param) noexcept {
        if (!mswsockdll) {
            load_mswsock();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mswsockdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msxml3_func(LPCSTR param) noexcept {
        if (!msxml3dll) {
            load_msxml3();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msxml3dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msxml3r_func(LPCSTR param) noexcept {
        if (!msxml3rdll) {
            load_msxml3r();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msxml3rdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msxml6_func(LPCSTR param) noexcept {
        if (!msxml6dll) {
            load_msxml6();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msxml6dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msxml6r_func(LPCSTR param) noexcept {
        if (!msxml6rdll) {
            load_msxml6r();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msxml6rdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_msyuv_func(LPCSTR param) noexcept {
        if (!msyuvdll) {
            load_msyuv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(msyuvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MtcModel_func(LPCSTR param) noexcept {
        if (!MtcModeldll) {
            load_MtcModel();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MtcModeldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MTF_func(LPCSTR param) noexcept {
        if (!MTFdll) {
            load_MTF();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MTFdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MTFAppServiceDS_func(LPCSTR param) noexcept {
        if (!MTFAppServiceDSdll) {
            load_MTFAppServiceDS();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MTFAppServiceDSdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MtfDecoder_func(LPCSTR param) noexcept {
        if (!MtfDecoderdll) {
            load_MtfDecoder();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MtfDecoderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MTFFuzzyDS_func(LPCSTR param) noexcept {
        if (!MTFFuzzyDSdll) {
            load_MTFFuzzyDS();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MTFFuzzyDSdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MTFServer_func(LPCSTR param) noexcept {
        if (!MTFServerdll) {
            load_MTFServer();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MTFServerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MTFSpellcheckDS_func(LPCSTR param) noexcept {
        if (!MTFSpellcheckDSdll) {
            load_MTFSpellcheckDS();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MTFSpellcheckDSdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mtxclu_func(LPCSTR param) noexcept {
        if (!mtxcludll) {
            load_mtxclu();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mtxcludll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mtxdm_func(LPCSTR param) noexcept {
        if (!mtxdmdll) {
            load_mtxdm();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mtxdmdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mtxex_func(LPCSTR param) noexcept {
        if (!mtxexdll) {
            load_mtxex();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mtxexdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mtxoci_func(LPCSTR param) noexcept {
        if (!mtxocidll) {
            load_mtxoci();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mtxocidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_muifontsetup_func(LPCSTR param) noexcept {
        if (!muifontsetupdll) {
            load_muifontsetup();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(muifontsetupdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MUILanguageCleanup_func(LPCSTR param) noexcept {
        if (!MUILanguageCleanupdll) {
            load_MUILanguageCleanup();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MUILanguageCleanupdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_museuxdocked_func(LPCSTR param) noexcept {
        if (!museuxdockeddll) {
            load_museuxdocked();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(museuxdockeddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_MusUpdateHandlers_func(LPCSTR param) noexcept {
        if (!MusUpdateHandlersdll) {
            load_MusUpdateHandlers();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(MusUpdateHandlersdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mycomput_func(LPCSTR param) noexcept {
        if (!mycomputdll) {
            load_mycomput();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mycomputdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_mydocs_func(LPCSTR param) noexcept {
        if (!mydocsdll) {
            load_mydocs();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(mydocsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NahimicAPO3ConfiguratorDaemonModule_func(LPCSTR param) noexcept {
        if (!NahimicAPO3ConfiguratorDaemonModuledll) {
            load_NahimicAPO3ConfiguratorDaemonModule();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NahimicAPO3ConfiguratorDaemonModuledll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NahimicAPO4_func(LPCSTR param) noexcept {
        if (!NahimicAPO4dll) {
            load_NahimicAPO4();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NahimicAPO4dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NahimicAPO4API_func(LPCSTR param) noexcept {
        if (!NahimicAPO4APIdll) {
            load_NahimicAPO4API();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NahimicAPO4APIdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NahimicAPO4ConfiguratorDaemonModule_func(LPCSTR param) noexcept {
        if (!NahimicAPO4ConfiguratorDaemonModuledll) {
            load_NahimicAPO4ConfiguratorDaemonModule();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NahimicAPO4ConfiguratorDaemonModuledll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NahimicAPO4ExpertAPI_func(LPCSTR param) noexcept {
        if (!NahimicAPO4ExpertAPIdll) {
            load_NahimicAPO4ExpertAPI();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NahimicAPO4ExpertAPIdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NahimicPnPAPO4ConfiguratorDaemonModule_func(LPCSTR param) noexcept {
        if (!NahimicPnPAPO4ConfiguratorDaemonModuledll) {
            load_NahimicPnPAPO4ConfiguratorDaemonModule();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NahimicPnPAPO4ConfiguratorDaemonModuledll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NahimicSharedMemory_func(LPCSTR param) noexcept {
        if (!NahimicSharedMemorydll) {
            load_NahimicSharedMemory();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NahimicSharedMemorydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NapiNSP_func(LPCSTR param) noexcept {
        if (!NapiNSPdll) {
            load_NapiNSP();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NapiNSPdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NaturalAuth_func(LPCSTR param) noexcept {
        if (!NaturalAuthdll) {
            load_NaturalAuth();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NaturalAuthdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NaturalAuthClient_func(LPCSTR param) noexcept {
        if (!NaturalAuthClientdll) {
            load_NaturalAuthClient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NaturalAuthClientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NaturalLanguage6_func(LPCSTR param) noexcept {
        if (!NaturalLanguage6dll) {
            load_NaturalLanguage6();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NaturalLanguage6dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_navshutdown_func(LPCSTR param) noexcept {
        if (!navshutdowndll) {
            load_navshutdown();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(navshutdowndll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NcaApi_func(LPCSTR param) noexcept {
        if (!NcaApidll) {
            load_NcaApi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NcaApidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NcaSvc_func(LPCSTR param) noexcept {
        if (!NcaSvcdll) {
            load_NcaSvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NcaSvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ncbservice_func(LPCSTR param) noexcept {
        if (!ncbservicedll) {
            load_ncbservice();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ncbservicedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NcdAutoSetup_func(LPCSTR param) noexcept {
        if (!NcdAutoSetupdll) {
            load_NcdAutoSetup();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NcdAutoSetupdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NcdProp_func(LPCSTR param) noexcept {
        if (!NcdPropdll) {
            load_NcdProp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NcdPropdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_nci_func(LPCSTR param) noexcept {
        if (!ncidll) {
            load_nci();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ncidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ncobjapi_func(LPCSTR param) noexcept {
        if (!ncobjapidll) {
            load_ncobjapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ncobjapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ncrypt_func(LPCSTR param) noexcept {
        if (!ncryptdll) {
            load_ncrypt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ncryptdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ncryptprov_func(LPCSTR param) noexcept {
        if (!ncryptprovdll) {
            load_ncryptprov();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ncryptprovdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ncryptsslp_func(LPCSTR param) noexcept {
        if (!ncryptsslpdll) {
            load_ncryptsslp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ncryptsslpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ncsi_func(LPCSTR param) noexcept {
        if (!ncsidll) {
            load_ncsi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ncsidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ncuprov_func(LPCSTR param) noexcept {
        if (!ncuprovdll) {
            load_ncuprov();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ncuprovdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_nddeapi_func(LPCSTR param) noexcept {
        if (!nddeapidll) {
            load_nddeapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(nddeapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ndfapi_func(LPCSTR param) noexcept {
        if (!ndfapidll) {
            load_ndfapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ndfapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ndfetw_func(LPCSTR param) noexcept {
        if (!ndfetwdll) {
            load_ndfetw();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ndfetwdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ndfhcdiscovery_func(LPCSTR param) noexcept {
        if (!ndfhcdiscoverydll) {
            load_ndfhcdiscovery();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ndfhcdiscoverydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ndishc_func(LPCSTR param) noexcept {
        if (!ndishcdll) {
            load_ndishc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ndishcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ndproxystub_func(LPCSTR param) noexcept {
        if (!ndproxystubdll) {
            load_ndproxystub();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ndproxystubdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_nduprov_func(LPCSTR param) noexcept {
        if (!nduprovdll) {
            load_nduprov();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(nduprovdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_negoexts_func(LPCSTR param) noexcept {
        if (!negoextsdll) {
            load_negoexts();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(negoextsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_netapi32_func(LPCSTR param) noexcept {
        if (!netapi32dll) {
            load_netapi32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(netapi32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_netbios_func(LPCSTR param) noexcept {
        if (!netbiosdll) {
            load_netbios();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(netbiosdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_netcenter_func(LPCSTR param) noexcept {
        if (!netcenterdll) {
            load_netcenter();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(netcenterdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_netcfgx_func(LPCSTR param) noexcept {
        if (!netcfgxdll) {
            load_netcfgx();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(netcfgxdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_netcorehc_func(LPCSTR param) noexcept {
        if (!netcorehcdll) {
            load_netcorehc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(netcorehcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_netdiagfx_func(LPCSTR param) noexcept {
        if (!netdiagfxdll) {
            load_netdiagfx();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(netdiagfxdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NetDriverInstall_func(LPCSTR param) noexcept {
        if (!NetDriverInstalldll) {
            load_NetDriverInstall();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NetDriverInstalldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_netevent_func(LPCSTR param) noexcept {
        if (!neteventdll) {
            load_netevent();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(neteventdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_netfxperf_func(LPCSTR param) noexcept {
        if (!netfxperfdll) {
            load_netfxperf();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(netfxperfdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_neth_func(LPCSTR param) noexcept {
        if (!nethdll) {
            load_neth();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(nethdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_netid_func(LPCSTR param) noexcept {
        if (!netiddll) {
            load_netid();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(netiddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_netiohlp_func(LPCSTR param) noexcept {
        if (!netiohlpdll) {
            load_netiohlp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(netiohlpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_netjoin_func(LPCSTR param) noexcept {
        if (!netjoindll) {
            load_netjoin();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(netjoindll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_netlogon_func(LPCSTR param) noexcept {
        if (!netlogondll) {
            load_netlogon();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(netlogondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_netman_func(LPCSTR param) noexcept {
        if (!netmandll) {
            load_netman();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(netmandll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NetMgmtIF_func(LPCSTR param) noexcept {
        if (!NetMgmtIFdll) {
            load_NetMgmtIF();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NetMgmtIFdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_netmsg_func(LPCSTR param) noexcept {
        if (!netmsgdll) {
            load_netmsg();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(netmsgdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_netplwiz_func(LPCSTR param) noexcept {
        if (!netplwizdll) {
            load_netplwiz();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(netplwizdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_netprofm_func(LPCSTR param) noexcept {
        if (!netprofmdll) {
            load_netprofm();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(netprofmdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_netprofmsvc_func(LPCSTR param) noexcept {
        if (!netprofmsvcdll) {
            load_netprofmsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(netprofmsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_netprovfw_func(LPCSTR param) noexcept {
        if (!netprovfwdll) {
            load_netprovfw();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(netprovfwdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_netprovisionsp_func(LPCSTR param) noexcept {
        if (!netprovisionspdll) {
            load_netprovisionsp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(netprovisionspdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NetSetupApi_func(LPCSTR param) noexcept {
        if (!NetSetupApidll) {
            load_NetSetupApi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NetSetupApidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NetSetupEngine_func(LPCSTR param) noexcept {
        if (!NetSetupEnginedll) {
            load_NetSetupEngine();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NetSetupEnginedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NetSetupShim_func(LPCSTR param) noexcept {
        if (!NetSetupShimdll) {
            load_NetSetupShim();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NetSetupShimdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NetSetupSvc_func(LPCSTR param) noexcept {
        if (!NetSetupSvcdll) {
            load_NetSetupSvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NetSetupSvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_netshell_func(LPCSTR param) noexcept {
        if (!netshelldll) {
            load_netshell();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(netshelldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_nettrace_func(LPCSTR param) noexcept {
        if (!nettracedll) {
            load_nettrace();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(nettracedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_netutils_func(LPCSTR param) noexcept {
        if (!netutilsdll) {
            load_netutils();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(netutilsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NetworkBindingEngineMigPlugin_func(LPCSTR param) noexcept {
        if (!NetworkBindingEngineMigPlugindll) {
            load_NetworkBindingEngineMigPlugin();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NetworkBindingEngineMigPlugindll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NetworkCollectionAgent_func(LPCSTR param) noexcept {
        if (!NetworkCollectionAgentdll) {
            load_NetworkCollectionAgent();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NetworkCollectionAgentdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NetworkDesktopSettings_func(LPCSTR param) noexcept {
        if (!NetworkDesktopSettingsdll) {
            load_NetworkDesktopSettings();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NetworkDesktopSettingsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_networkexplorer_func(LPCSTR param) noexcept {
        if (!networkexplorerdll) {
            load_networkexplorer();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(networkexplorerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_networkhelper_func(LPCSTR param) noexcept {
        if (!networkhelperdll) {
            load_networkhelper();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(networkhelperdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NetworkIcon_func(LPCSTR param) noexcept {
        if (!NetworkIcondll) {
            load_NetworkIcon();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NetworkIcondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_networkitemfactory_func(LPCSTR param) noexcept {
        if (!networkitemfactorydll) {
            load_networkitemfactory();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(networkitemfactorydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NetworkMobileSettings_func(LPCSTR param) noexcept {
        if (!NetworkMobileSettingsdll) {
            load_NetworkMobileSettings();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NetworkMobileSettingsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NetworkProxyCsp_func(LPCSTR param) noexcept {
        if (!NetworkProxyCspdll) {
            load_NetworkProxyCsp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NetworkProxyCspdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NetworkQoSPolicyCSP_func(LPCSTR param) noexcept {
        if (!NetworkQoSPolicyCSPdll) {
            load_NetworkQoSPolicyCSP();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NetworkQoSPolicyCSPdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NetworkUXBroker_func(LPCSTR param) noexcept {
        if (!NetworkUXBrokerdll) {
            load_NetworkUXBroker();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NetworkUXBrokerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_newdev_func(LPCSTR param) noexcept {
        if (!newdevdll) {
            load_newdev();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(newdevdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NFCProvisioningPlugin_func(LPCSTR param) noexcept {
        if (!NFCProvisioningPlugindll) {
            load_NFCProvisioningPlugin();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NFCProvisioningPlugindll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NfcRadioMedia_func(LPCSTR param) noexcept {
        if (!NfcRadioMediadll) {
            load_NfcRadioMedia();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NfcRadioMediadll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ngccredprov_func(LPCSTR param) noexcept {
        if (!ngccredprovdll) {
            load_ngccredprov();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ngccredprovdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NgcCtnr_func(LPCSTR param) noexcept {
        if (!NgcCtnrdll) {
            load_NgcCtnr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NgcCtnrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NgcCtnrGidsHandler_func(LPCSTR param) noexcept {
        if (!NgcCtnrGidsHandlerdll) {
            load_NgcCtnrGidsHandler();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NgcCtnrGidsHandlerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NgcCtnrSvc_func(LPCSTR param) noexcept {
        if (!NgcCtnrSvcdll) {
            load_NgcCtnrSvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NgcCtnrSvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NgcIsoCtnr_func(LPCSTR param) noexcept {
        if (!NgcIsoCtnrdll) {
            load_NgcIsoCtnr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NgcIsoCtnrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ngckeyenum_func(LPCSTR param) noexcept {
        if (!ngckeyenumdll) {
            load_ngckeyenum();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ngckeyenumdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ngcksp_func(LPCSTR param) noexcept {
        if (!ngckspdll) {
            load_ngcksp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ngckspdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ngclocal_func(LPCSTR param) noexcept {
        if (!ngclocaldll) {
            load_ngclocal();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ngclocaldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ngcpopkeysrv_func(LPCSTR param) noexcept {
        if (!ngcpopkeysrvdll) {
            load_ngcpopkeysrv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ngcpopkeysrvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NgcProCsp_func(LPCSTR param) noexcept {
        if (!NgcProCspdll) {
            load_NgcProCsp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NgcProCspdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ngcrecovery_func(LPCSTR param) noexcept {
        if (!ngcrecoverydll) {
            load_ngcrecovery();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ngcrecoverydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ngcsvc_func(LPCSTR param) noexcept {
        if (!ngcsvcdll) {
            load_ngcsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ngcsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ngctasks_func(LPCSTR param) noexcept {
        if (!ngctasksdll) {
            load_ngctasks();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ngctasksdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ngcutils_func(LPCSTR param) noexcept {
        if (!ngcutilsdll) {
            load_ngcutils();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ngcutilsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NhNotifSys_func(LPCSTR param) noexcept {
        if (!NhNotifSysdll) {
            load_NhNotifSys();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NhNotifSysdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ninput_func(LPCSTR param) noexcept {
        if (!ninputdll) {
            load_ninput();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ninputdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_nlaapi_func(LPCSTR param) noexcept {
        if (!nlaapidll) {
            load_nlaapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(nlaapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_nlahc_func(LPCSTR param) noexcept {
        if (!nlahcdll) {
            load_nlahc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(nlahcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_nlansp_c_func(LPCSTR param) noexcept {
        if (!nlansp_cdll) {
            load_nlansp_c();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(nlansp_cdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_nlhtml_func(LPCSTR param) noexcept {
        if (!nlhtmldll) {
            load_nlhtml();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(nlhtmldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_nlmgp_func(LPCSTR param) noexcept {
        if (!nlmgpdll) {
            load_nlmgp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(nlmgpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_nlmproxy_func(LPCSTR param) noexcept {
        if (!nlmproxydll) {
            load_nlmproxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(nlmproxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_nlmsprep_func(LPCSTR param) noexcept {
        if (!nlmsprepdll) {
            load_nlmsprep();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(nlmsprepdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_nlsbres_func(LPCSTR param) noexcept {
        if (!nlsbresdll) {
            load_nlsbres();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(nlsbresdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NlsData0000_func(LPCSTR param) noexcept {
        if (!NlsData0000dll) {
            load_NlsData0000();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NlsData0000dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NlsData0009_func(LPCSTR param) noexcept {
        if (!NlsData0009dll) {
            load_NlsData0009();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NlsData0009dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_Nlsdl_func(LPCSTR param) noexcept {
        if (!Nlsdldll) {
            load_Nlsdl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(Nlsdldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NlsLexicons0009_func(LPCSTR param) noexcept {
        if (!NlsLexicons0009dll) {
            load_NlsLexicons0009();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NlsLexicons0009dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NmaDirect_func(LPCSTR param) noexcept {
        if (!NmaDirectdll) {
            load_NmaDirect();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NmaDirectdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_noise_func(LPCSTR param) noexcept {
        if (!noisedll) {
            load_noise();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(noisedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_nonarpinv_func(LPCSTR param) noexcept {
        if (!nonarpinvdll) {
            load_nonarpinv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(nonarpinvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_normaliz_func(LPCSTR param) noexcept {
        if (!normalizdll) {
            load_normaliz();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(normalizdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NotificationController_func(LPCSTR param) noexcept {
        if (!NotificationControllerdll) {
            load_NotificationController();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NotificationControllerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NotificationControllerPS_func(LPCSTR param) noexcept {
        if (!NotificationControllerPSdll) {
            load_NotificationControllerPS();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NotificationControllerPSdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NotificationIntelligencePlatform_func(LPCSTR param) noexcept {
        if (!NotificationIntelligencePlatformdll) {
            load_NotificationIntelligencePlatform();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NotificationIntelligencePlatformdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_notificationplatformcomponent_func(LPCSTR param) noexcept {
        if (!notificationplatformcomponentdll) {
            load_notificationplatformcomponent();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(notificationplatformcomponentdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_npmproxy_func(LPCSTR param) noexcept {
        if (!npmproxydll) {
            load_npmproxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(npmproxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NPSM_func(LPCSTR param) noexcept {
        if (!NPSMdll) {
            load_NPSM();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NPSMdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NPSMDesktopProvider_func(LPCSTR param) noexcept {
        if (!NPSMDesktopProviderdll) {
            load_NPSMDesktopProvider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NPSMDesktopProviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_nrpsrv_func(LPCSTR param) noexcept {
        if (!nrpsrvdll) {
            load_nrpsrv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(nrpsrvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_nrtapi_func(LPCSTR param) noexcept {
        if (!nrtapidll) {
            load_nrtapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(nrtapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_nshhttp_func(LPCSTR param) noexcept {
        if (!nshhttpdll) {
            load_nshhttp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(nshhttpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_nshipsec_func(LPCSTR param) noexcept {
        if (!nshipsecdll) {
            load_nshipsec();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(nshipsecdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_nshwfp_func(LPCSTR param) noexcept {
        if (!nshwfpdll) {
            load_nshwfp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(nshwfpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_nsi_func(LPCSTR param) noexcept {
        if (!nsidll) {
            load_nsi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(nsidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_nsisvc_func(LPCSTR param) noexcept {
        if (!nsisvcdll) {
            load_nsisvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(nsisvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ntasn1_func(LPCSTR param) noexcept {
        if (!ntasn1dll) {
            load_ntasn1();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ntasn1dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ntdll_func(LPCSTR param) noexcept {
        if (!ntdlldll) {
            load_ntdll();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ntdlldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ntdsapi_func(LPCSTR param) noexcept {
        if (!ntdsapidll) {
            load_ntdsapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ntdsapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ntfsres_func(LPCSTR param) noexcept {
        if (!ntfsresdll) {
            load_ntfsres();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ntfsresdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ntlanman_func(LPCSTR param) noexcept {
        if (!ntlanmandll) {
            load_ntlanman();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ntlanmandll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ntlanui2_func(LPCSTR param) noexcept {
        if (!ntlanui2dll) {
            load_ntlanui2();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ntlanui2dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NtlmShared_func(LPCSTR param) noexcept {
        if (!NtlmShareddll) {
            load_NtlmShared();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NtlmShareddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ntmarta_func(LPCSTR param) noexcept {
        if (!ntmartadll) {
            load_ntmarta();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ntmartadll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ntprint_func(LPCSTR param) noexcept {
        if (!ntprintdll) {
            load_ntprint();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ntprintdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ntshrui_func(LPCSTR param) noexcept {
        if (!ntshruidll) {
            load_ntshrui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ntshruidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ntvdm64_func(LPCSTR param) noexcept {
        if (!ntvdm64dll) {
            load_ntvdm64();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ntvdm64dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NvAgent_func(LPCSTR param) noexcept {
        if (!NvAgentdll) {
            load_NvAgent();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NvAgentdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_nvapi64_func(LPCSTR param) noexcept {
        if (!nvapi64dll) {
            load_nvapi64();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(nvapi64dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_nvaudcap64v_func(LPCSTR param) noexcept {
        if (!nvaudcap64vdll) {
            load_nvaudcap64v();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(nvaudcap64vdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_nvcpl_func(LPCSTR param) noexcept {
        if (!nvcpldll) {
            load_nvcpl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(nvcpldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_nvcuda_func(LPCSTR param) noexcept {
        if (!nvcudadll) {
            load_nvcuda();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(nvcudadll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_nvcudadebugger_func(LPCSTR param) noexcept {
        if (!nvcudadebuggerdll) {
            load_nvcudadebugger();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(nvcudadebuggerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_nvcuvid_func(LPCSTR param) noexcept {
        if (!nvcuviddll) {
            load_nvcuvid();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(nvcuviddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_nvEncodeAPI64_func(LPCSTR param) noexcept {
        if (!nvEncodeAPI64dll) {
            load_nvEncodeAPI64();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(nvEncodeAPI64dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NvFBC64_func(LPCSTR param) noexcept {
        if (!NvFBC64dll) {
            load_NvFBC64();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NvFBC64dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NvIFR64_func(LPCSTR param) noexcept {
        if (!NvIFR64dll) {
            load_NvIFR64();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NvIFR64dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_nvml_func(LPCSTR param) noexcept {
        if (!nvmldll) {
            load_nvml();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(nvmldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_nvofapi64_func(LPCSTR param) noexcept {
        if (!nvofapi64dll) {
            load_nvofapi64();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(nvofapi64dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_NvRtmpStreamer64_func(LPCSTR param) noexcept {
        if (!NvRtmpStreamer64dll) {
            load_NvRtmpStreamer64();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(NvRtmpStreamer64dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_nvspcap64_func(LPCSTR param) noexcept {
        if (!nvspcap64dll) {
            load_nvspcap64();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(nvspcap64dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_objsel_func(LPCSTR param) noexcept {
        if (!objseldll) {
            load_objsel();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(objseldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_occache_func(LPCSTR param) noexcept {
        if (!occachedll) {
            load_occache();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(occachedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ocsetapi_func(LPCSTR param) noexcept {
        if (!ocsetapidll) {
            load_ocsetapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ocsetapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_odbc32_func(LPCSTR param) noexcept {
        if (!odbc32dll) {
            load_odbc32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(odbc32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_odbcbcp_func(LPCSTR param) noexcept {
        if (!odbcbcpdll) {
            load_odbcbcp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(odbcbcpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_odbcconf_func(LPCSTR param) noexcept {
        if (!odbcconfdll) {
            load_odbcconf();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(odbcconfdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_odbccp32_func(LPCSTR param) noexcept {
        if (!odbccp32dll) {
            load_odbccp32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(odbccp32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_odbccr32_func(LPCSTR param) noexcept {
        if (!odbccr32dll) {
            load_odbccr32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(odbccr32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_odbccu32_func(LPCSTR param) noexcept {
        if (!odbccu32dll) {
            load_odbccu32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(odbccu32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_odbcint_func(LPCSTR param) noexcept {
        if (!odbcintdll) {
            load_odbcint();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(odbcintdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_odbctrac_func(LPCSTR param) noexcept {
        if (!odbctracdll) {
            load_odbctrac();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(odbctracdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_OEMDefaultAssociations_func(LPCSTR param) noexcept {
        if (!OEMDefaultAssociationsdll) {
            load_OEMDefaultAssociations();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(OEMDefaultAssociationsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_oemlicense_func(LPCSTR param) noexcept {
        if (!oemlicensedll) {
            load_oemlicense();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(oemlicensedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_offfilt_func(LPCSTR param) noexcept {
        if (!offfiltdll) {
            load_offfilt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(offfiltdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_officecsp_func(LPCSTR param) noexcept {
        if (!officecspdll) {
            load_officecsp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(officecspdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_offlinelsa_func(LPCSTR param) noexcept {
        if (!offlinelsadll) {
            load_offlinelsa();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(offlinelsadll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_offlinesam_func(LPCSTR param) noexcept {
        if (!offlinesamdll) {
            load_offlinesam();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(offlinesamdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_offreg_func(LPCSTR param) noexcept {
        if (!offregdll) {
            load_offreg();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(offregdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ole32_func(LPCSTR param) noexcept {
        if (!ole32dll) {
            load_ole32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ole32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_oleacc_func(LPCSTR param) noexcept {
        if (!oleaccdll) {
            load_oleacc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(oleaccdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_oleacchooks_func(LPCSTR param) noexcept {
        if (!oleacchooksdll) {
            load_oleacchooks();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(oleacchooksdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_oleaccrc_func(LPCSTR param) noexcept {
        if (!oleaccrcdll) {
            load_oleaccrc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(oleaccrcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_oleaut32_func(LPCSTR param) noexcept {
        if (!oleaut32dll) {
            load_oleaut32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(oleaut32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_oledlg_func(LPCSTR param) noexcept {
        if (!oledlgdll) {
            load_oledlg();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(oledlgdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_oleprn_func(LPCSTR param) noexcept {
        if (!oleprndll) {
            load_oleprn();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(oleprndll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_OmaDmAgent_func(LPCSTR param) noexcept {
        if (!OmaDmAgentdll) {
            load_OmaDmAgent();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(OmaDmAgentdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_omadmapi_func(LPCSTR param) noexcept {
        if (!omadmapidll) {
            load_omadmapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(omadmapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_OnDemandBrokerClient_func(LPCSTR param) noexcept {
        if (!OnDemandBrokerClientdll) {
            load_OnDemandBrokerClient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(OnDemandBrokerClientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_OnDemandConnRouteHelper_func(LPCSTR param) noexcept {
        if (!OnDemandConnRouteHelperdll) {
            load_OnDemandConnRouteHelper();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(OnDemandConnRouteHelperdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_OneBackupHandler_func(LPCSTR param) noexcept {
        if (!OneBackupHandlerdll) {
            load_OneBackupHandler();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(OneBackupHandlerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_OneCoreCommonProxyStub_func(LPCSTR param) noexcept {
        if (!OneCoreCommonProxyStubdll) {
            load_OneCoreCommonProxyStub();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(OneCoreCommonProxyStubdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_OneCoreUAPCommonProxyStub_func(LPCSTR param) noexcept {
        if (!OneCoreUAPCommonProxyStubdll) {
            load_OneCoreUAPCommonProxyStub();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(OneCoreUAPCommonProxyStubdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_OneSettingsClient_func(LPCSTR param) noexcept {
        if (!OneSettingsClientdll) {
            load_OneSettingsClient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(OneSettingsClientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_onex_func(LPCSTR param) noexcept {
        if (!onexdll) {
            load_onex();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(onexdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_onexui_func(LPCSTR param) noexcept {
        if (!onexuidll) {
            load_onexui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(onexuidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_onnxruntime_func(LPCSTR param) noexcept {
        if (!onnxruntimedll) {
            load_onnxruntime();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(onnxruntimedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_OpcServices_func(LPCSTR param) noexcept {
        if (!OpcServicesdll) {
            load_OpcServices();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(OpcServicesdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_OpenCL_func(LPCSTR param) noexcept {
        if (!OpenCLdll) {
            load_OpenCL();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(OpenCLdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_opengl32_func(LPCSTR param) noexcept {
        if (!opengl32dll) {
            load_opengl32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(opengl32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_Optane_func(LPCSTR param) noexcept {
        if (!Optanedll) {
            load_Optane();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(Optanedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_OptaneEventLogMsg_func(LPCSTR param) noexcept {
        if (!OptaneEventLogMsgdll) {
            load_OptaneEventLogMsg();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(OptaneEventLogMsgdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ortcengine_func(LPCSTR param) noexcept {
        if (!ortcenginedll) {
            load_ortcengine();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ortcenginedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_osbaseln_func(LPCSTR param) noexcept {
        if (!osbaselndll) {
            load_osbaseln();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(osbaselndll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_OskSupport_func(LPCSTR param) noexcept {
        if (!OskSupportdll) {
            load_OskSupport();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(OskSupportdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_osuninst_func(LPCSTR param) noexcept {
        if (!osuninstdll) {
            load_osuninst();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(osuninstdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_P2P_func(LPCSTR param) noexcept {
        if (!P2Pdll) {
            load_P2P();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(P2Pdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_P2PGraph_func(LPCSTR param) noexcept {
        if (!P2PGraphdll) {
            load_P2PGraph();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(P2PGraphdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_p2pnetsh_func(LPCSTR param) noexcept {
        if (!p2pnetshdll) {
            load_p2pnetsh();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(p2pnetshdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_p2psvc_func(LPCSTR param) noexcept {
        if (!p2psvcdll) {
            load_p2psvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(p2psvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_p9np_func(LPCSTR param) noexcept {
        if (!p9npdll) {
            load_p9np();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(p9npdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_p9rdrservice_func(LPCSTR param) noexcept {
        if (!p9rdrservicedll) {
            load_p9rdrservice();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(p9rdrservicedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_packager_func(LPCSTR param) noexcept {
        if (!packagerdll) {
            load_packager();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(packagerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PackageStateChangeHandler_func(LPCSTR param) noexcept {
        if (!PackageStateChangeHandlerdll) {
            load_PackageStateChangeHandler();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PackageStateChangeHandlerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_panmap_func(LPCSTR param) noexcept {
        if (!panmapdll) {
            load_panmap();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(panmapdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PasswordEnrollmentManager_func(LPCSTR param) noexcept {
        if (!PasswordEnrollmentManagerdll) {
            load_PasswordEnrollmentManager();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PasswordEnrollmentManagerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_pautoenr_func(LPCSTR param) noexcept {
        if (!pautoenrdll) {
            load_pautoenr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(pautoenrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PayloadRestrictions_func(LPCSTR param) noexcept {
        if (!PayloadRestrictionsdll) {
            load_PayloadRestrictions();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PayloadRestrictionsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PaymentMediatorServiceProxy_func(LPCSTR param) noexcept {
        if (!PaymentMediatorServiceProxydll) {
            load_PaymentMediatorServiceProxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PaymentMediatorServiceProxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_pcacli_func(LPCSTR param) noexcept {
        if (!pcaclidll) {
            load_pcacli();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(pcaclidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_pcadm_func(LPCSTR param) noexcept {
        if (!pcadmdll) {
            load_pcadm();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(pcadmdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_pcaevts_func(LPCSTR param) noexcept {
        if (!pcaevtsdll) {
            load_pcaevts();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(pcaevtsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_pcasvc_func(LPCSTR param) noexcept {
        if (!pcasvcdll) {
            load_pcasvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(pcasvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_pcaui_func(LPCSTR param) noexcept {
        if (!pcauidll) {
            load_pcaui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(pcauidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PCPKsp_func(LPCSTR param) noexcept {
        if (!PCPKspdll) {
            load_PCPKsp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PCPKspdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PCShellCommonProxyStub_func(LPCSTR param) noexcept {
        if (!PCShellCommonProxyStubdll) {
            load_PCShellCommonProxyStub();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PCShellCommonProxyStubdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_pcsvDevice_func(LPCSTR param) noexcept {
        if (!pcsvDevicedll) {
            load_pcsvDevice();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(pcsvDevicedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_pcwum_func(LPCSTR param) noexcept {
        if (!pcwumdll) {
            load_pcwum();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(pcwumdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_pcwutl_func(LPCSTR param) noexcept {
        if (!pcwutldll) {
            load_pcwutl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(pcwutldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_pdh_func(LPCSTR param) noexcept {
        if (!pdhdll) {
            load_pdh();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(pdhdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_pdhui_func(LPCSTR param) noexcept {
        if (!pdhuidll) {
            load_pdhui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(pdhuidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PeerDist_func(LPCSTR param) noexcept {
        if (!PeerDistdll) {
            load_PeerDist();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PeerDistdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PeerDistAD_func(LPCSTR param) noexcept {
        if (!PeerDistADdll) {
            load_PeerDistAD();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PeerDistADdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PeerDistCacheProvider_func(LPCSTR param) noexcept {
        if (!PeerDistCacheProviderdll) {
            load_PeerDistCacheProvider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PeerDistCacheProviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PeerDistCleaner_func(LPCSTR param) noexcept {
        if (!PeerDistCleanerdll) {
            load_PeerDistCleaner();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PeerDistCleanerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PeerDistHttpTrans_func(LPCSTR param) noexcept {
        if (!PeerDistHttpTransdll) {
            load_PeerDistHttpTrans();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PeerDistHttpTransdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PeerDistSh_func(LPCSTR param) noexcept {
        if (!PeerDistShdll) {
            load_PeerDistSh();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PeerDistShdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PeerDistSvc_func(LPCSTR param) noexcept {
        if (!PeerDistSvcdll) {
            load_PeerDistSvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PeerDistSvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PeerDistWSDDiscoProv_func(LPCSTR param) noexcept {
        if (!PeerDistWSDDiscoProvdll) {
            load_PeerDistWSDDiscoProv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PeerDistWSDDiscoProvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PenService_func(LPCSTR param) noexcept {
        if (!PenServicedll) {
            load_PenService();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PenServicedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PeopleAPIs_func(LPCSTR param) noexcept {
        if (!PeopleAPIsdll) {
            load_PeopleAPIs();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PeopleAPIsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PeopleBand_func(LPCSTR param) noexcept {
        if (!PeopleBanddll) {
            load_PeopleBand();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PeopleBanddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PerceptionDevice_func(LPCSTR param) noexcept {
        if (!PerceptionDevicedll) {
            load_PerceptionDevice();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PerceptionDevicedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PerceptionSimulationProxyStubs_func(LPCSTR param) noexcept {
        if (!PerceptionSimulationProxyStubsdll) {
            load_PerceptionSimulationProxyStubs();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PerceptionSimulationProxyStubsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PerceptionSimulationManager_func(LPCSTR param) noexcept {
        if (!PerceptionSimulationManagerdll) {
            load_PerceptionSimulationManager();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PerceptionSimulationManagerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_perfdisk_func(LPCSTR param) noexcept {
        if (!perfdiskdll) {
            load_perfdisk();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(perfdiskdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_perfnet_func(LPCSTR param) noexcept {
        if (!perfnetdll) {
            load_perfnet();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(perfnetdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_perfos_func(LPCSTR param) noexcept {
        if (!perfosdll) {
            load_perfos();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(perfosdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_perfproc_func(LPCSTR param) noexcept {
        if (!perfprocdll) {
            load_perfproc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(perfprocdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_perfts_func(LPCSTR param) noexcept {
        if (!perftsdll) {
            load_perfts();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(perftsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_perf_gputiming_func(LPCSTR param) noexcept {
        if (!perf_gputimingdll) {
            load_perf_gputiming();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(perf_gputimingdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PersonalizationCSP_func(LPCSTR param) noexcept {
        if (!PersonalizationCSPdll) {
            load_PersonalizationCSP();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PersonalizationCSPdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_pfclient_func(LPCSTR param) noexcept {
        if (!pfclientdll) {
            load_pfclient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(pfclientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PhoneCallHistoryApis_func(LPCSTR param) noexcept {
        if (!PhoneCallHistoryApisdll) {
            load_PhoneCallHistoryApis();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PhoneCallHistoryApisdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PhoneOm_func(LPCSTR param) noexcept {
        if (!PhoneOmdll) {
            load_PhoneOm();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PhoneOmdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PhonePlatformAbstraction_func(LPCSTR param) noexcept {
        if (!PhonePlatformAbstractiondll) {
            load_PhonePlatformAbstraction();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PhonePlatformAbstractiondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PhoneProviders_func(LPCSTR param) noexcept {
        if (!PhoneProvidersdll) {
            load_PhoneProviders();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PhoneProvidersdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PhoneService_func(LPCSTR param) noexcept {
        if (!PhoneServicedll) {
            load_PhoneService();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PhoneServicedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PhoneServiceRes_func(LPCSTR param) noexcept {
        if (!PhoneServiceResdll) {
            load_PhoneServiceRes();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PhoneServiceResdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_Phoneutil_func(LPCSTR param) noexcept {
        if (!Phoneutildll) {
            load_Phoneutil();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(Phoneutildll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PhoneutilRes_func(LPCSTR param) noexcept {
        if (!PhoneutilResdll) {
            load_PhoneutilRes();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PhoneutilResdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PhotoMetadataHandler_func(LPCSTR param) noexcept {
        if (!PhotoMetadataHandlerdll) {
            load_PhotoMetadataHandler();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PhotoMetadataHandlerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_photowiz_func(LPCSTR param) noexcept {
        if (!photowizdll) {
            load_photowiz();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(photowizdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PickerPlatform_func(LPCSTR param) noexcept {
        if (!PickerPlatformdll) {
            load_PickerPlatform();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PickerPlatformdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_pid_func(LPCSTR param) noexcept {
        if (!piddll) {
            load_pid();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(piddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_pidgenx_func(LPCSTR param) noexcept {
        if (!pidgenxdll) {
            load_pidgenx();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(pidgenxdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_pifmgr_func(LPCSTR param) noexcept {
        if (!pifmgrdll) {
            load_pifmgr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(pifmgrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PimIndexMaintenance_func(LPCSTR param) noexcept {
        if (!PimIndexMaintenancedll) {
            load_PimIndexMaintenance();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PimIndexMaintenancedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PimIndexMaintenanceClient_func(LPCSTR param) noexcept {
        if (!PimIndexMaintenanceClientdll) {
            load_PimIndexMaintenanceClient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PimIndexMaintenanceClientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_Pimstore_func(LPCSTR param) noexcept {
        if (!Pimstoredll) {
            load_Pimstore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(Pimstoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PinEnrollmentHelper_func(LPCSTR param) noexcept {
        if (!PinEnrollmentHelperdll) {
            load_PinEnrollmentHelper();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PinEnrollmentHelperdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_pkeyhelper_func(LPCSTR param) noexcept {
        if (!pkeyhelperdll) {
            load_pkeyhelper();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(pkeyhelperdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PktMonApi_func(LPCSTR param) noexcept {
        if (!PktMonApidll) {
            load_PktMonApi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PktMonApidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_pku2u_func(LPCSTR param) noexcept {
        if (!pku2udll) {
            load_pku2u();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(pku2udll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_pla_func(LPCSTR param) noexcept {
        if (!pladll) {
            load_pla();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(pladll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_playlistfolder_func(LPCSTR param) noexcept {
        if (!playlistfolderdll) {
            load_playlistfolder();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(playlistfolderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PlaySndSrv_func(LPCSTR param) noexcept {
        if (!PlaySndSrvdll) {
            load_PlaySndSrv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PlaySndSrvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PlayToDevice_func(LPCSTR param) noexcept {
        if (!PlayToDevicedll) {
            load_PlayToDevice();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PlayToDevicedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PlayToManager_func(LPCSTR param) noexcept {
        if (!PlayToManagerdll) {
            load_PlayToManager();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PlayToManagerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_playtomenu_func(LPCSTR param) noexcept {
        if (!playtomenudll) {
            load_playtomenu();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(playtomenudll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PlayToReceiver_func(LPCSTR param) noexcept {
        if (!PlayToReceiverdll) {
            load_PlayToReceiver();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PlayToReceiverdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PlayToStatusProvider_func(LPCSTR param) noexcept {
        if (!PlayToStatusProviderdll) {
            load_PlayToStatusProvider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PlayToStatusProviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ploptin_func(LPCSTR param) noexcept {
        if (!ploptindll) {
            load_ploptin();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ploptindll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_pmcsnap_func(LPCSTR param) noexcept {
        if (!pmcsnapdll) {
            load_pmcsnap();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(pmcsnapdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_pngfilt_func(LPCSTR param) noexcept {
        if (!pngfiltdll) {
            load_pngfilt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(pngfiltdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_pnidui_func(LPCSTR param) noexcept {
        if (!pniduidll) {
            load_pnidui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(pniduidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_pnpclean_func(LPCSTR param) noexcept {
        if (!pnpcleandll) {
            load_pnpclean();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(pnpcleandll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_pnpdiag_func(LPCSTR param) noexcept {
        if (!pnpdiagdll) {
            load_pnpdiag();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(pnpdiagdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_pnppolicy_func(LPCSTR param) noexcept {
        if (!pnppolicydll) {
            load_pnppolicy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(pnppolicydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_pnpts_func(LPCSTR param) noexcept {
        if (!pnptsdll) {
            load_pnpts();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(pnptsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_pnpui_func(LPCSTR param) noexcept {
        if (!pnpuidll) {
            load_pnpui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(pnpuidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PNPXAssoc_func(LPCSTR param) noexcept {
        if (!PNPXAssocdll) {
            load_PNPXAssoc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PNPXAssocdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PNPXAssocPrx_func(LPCSTR param) noexcept {
        if (!PNPXAssocPrxdll) {
            load_PNPXAssocPrx();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PNPXAssocPrxdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_pnrpauto_func(LPCSTR param) noexcept {
        if (!pnrpautodll) {
            load_pnrpauto();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(pnrpautodll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_Pnrphc_func(LPCSTR param) noexcept {
        if (!Pnrphcdll) {
            load_Pnrphc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(Pnrphcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_pnrpnsp_func(LPCSTR param) noexcept {
        if (!pnrpnspdll) {
            load_pnrpnsp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(pnrpnspdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_pnrpsvc_func(LPCSTR param) noexcept {
        if (!pnrpsvcdll) {
            load_pnrpsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(pnrpsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_policymanager_func(LPCSTR param) noexcept {
        if (!policymanagerdll) {
            load_policymanager();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(policymanagerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_policymanagerprecheck_func(LPCSTR param) noexcept {
        if (!policymanagerprecheckdll) {
            load_policymanagerprecheck();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(policymanagerprecheckdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_polstore_func(LPCSTR param) noexcept {
        if (!polstoredll) {
            load_polstore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(polstoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PortableDeviceApi_func(LPCSTR param) noexcept {
        if (!PortableDeviceApidll) {
            load_PortableDeviceApi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PortableDeviceApidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PortableDeviceClassExtension_func(LPCSTR param) noexcept {
        if (!PortableDeviceClassExtensiondll) {
            load_PortableDeviceClassExtension();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PortableDeviceClassExtensiondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PortableDeviceConnectApi_func(LPCSTR param) noexcept {
        if (!PortableDeviceConnectApidll) {
            load_PortableDeviceConnectApi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PortableDeviceConnectApidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PortableDeviceStatus_func(LPCSTR param) noexcept {
        if (!PortableDeviceStatusdll) {
            load_PortableDeviceStatus();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PortableDeviceStatusdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PortableDeviceSyncProvider_func(LPCSTR param) noexcept {
        if (!PortableDeviceSyncProviderdll) {
            load_PortableDeviceSyncProvider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PortableDeviceSyncProviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PortableDeviceTypes_func(LPCSTR param) noexcept {
        if (!PortableDeviceTypesdll) {
            load_PortableDeviceTypes();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PortableDeviceTypesdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PortableDeviceWiaCompat_func(LPCSTR param) noexcept {
        if (!PortableDeviceWiaCompatdll) {
            load_PortableDeviceWiaCompat();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PortableDeviceWiaCompatdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_posetup_func(LPCSTR param) noexcept {
        if (!posetupdll) {
            load_posetup();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(posetupdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_POSyncServices_func(LPCSTR param) noexcept {
        if (!POSyncServicesdll) {
            load_POSyncServices();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(POSyncServicesdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_pots_func(LPCSTR param) noexcept {
        if (!potsdll) {
            load_pots();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(potsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_powercpl_func(LPCSTR param) noexcept {
        if (!powercpldll) {
            load_powercpl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(powercpldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_powrprof_func(LPCSTR param) noexcept {
        if (!powrprofdll) {
            load_powrprof();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(powrprofdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ppcsnap_func(LPCSTR param) noexcept {
        if (!ppcsnapdll) {
            load_ppcsnap();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ppcsnapdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_prauthproviders_func(LPCSTR param) noexcept {
        if (!prauthprovidersdll) {
            load_prauthproviders();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(prauthprovidersdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PresentationCFFRasterizerNative_v0300_func(LPCSTR param) noexcept {
        if (!PresentationCFFRasterizerNative_v0300dll) {
            load_PresentationCFFRasterizerNative_v0300();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PresentationCFFRasterizerNative_v0300dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PresentationHostProxy_func(LPCSTR param) noexcept {
        if (!PresentationHostProxydll) {
            load_PresentationHostProxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PresentationHostProxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PresentationNative_v0300_func(LPCSTR param) noexcept {
        if (!PresentationNative_v0300dll) {
            load_PresentationNative_v0300();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PresentationNative_v0300dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_prflbmsg_func(LPCSTR param) noexcept {
        if (!prflbmsgdll) {
            load_prflbmsg();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(prflbmsgdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PrintPrintSupportSource_func(LPCSTR param) noexcept {
        if (!PrintPrintSupportSourcedll) {
            load_PrintPrintSupportSource();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PrintPrintSupportSourcedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PrintWorkflowSource_func(LPCSTR param) noexcept {
        if (!PrintWorkflowSourcedll) {
            load_PrintWorkflowSource();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PrintWorkflowSourcedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PrinterCleanupTask_func(LPCSTR param) noexcept {
        if (!PrinterCleanupTaskdll) {
            load_PrinterCleanupTask();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PrinterCleanupTaskdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_printfilterpipelineprxy_func(LPCSTR param) noexcept {
        if (!printfilterpipelineprxydll) {
            load_printfilterpipelineprxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(printfilterpipelineprxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PrintIsolationProxy_func(LPCSTR param) noexcept {
        if (!PrintIsolationProxydll) {
            load_PrintIsolationProxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PrintIsolationProxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PrintNotification_func(LPCSTR param) noexcept {
        if (!PrintNotificationdll) {
            load_PrintNotification();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PrintNotificationdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PrintPlatformConfig_func(LPCSTR param) noexcept {
        if (!PrintPlatformConfigdll) {
            load_PrintPlatformConfig();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PrintPlatformConfigdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_printticketvalidation_func(LPCSTR param) noexcept {
        if (!printticketvalidationdll) {
            load_printticketvalidation();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(printticketvalidationdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_printui_func(LPCSTR param) noexcept {
        if (!printuidll) {
            load_printui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(printuidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PrintWorkflowService_func(LPCSTR param) noexcept {
        if (!PrintWorkflowServicedll) {
            load_PrintWorkflowService();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PrintWorkflowServicedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PrintWSDAHost_func(LPCSTR param) noexcept {
        if (!PrintWSDAHostdll) {
            load_PrintWSDAHost();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PrintWSDAHostdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_prm0009_func(LPCSTR param) noexcept {
        if (!prm0009dll) {
            load_prm0009();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(prm0009dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_prncache_func(LPCSTR param) noexcept {
        if (!prncachedll) {
            load_prncache();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(prncachedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_prnfldr_func(LPCSTR param) noexcept {
        if (!prnfldrdll) {
            load_prnfldr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(prnfldrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_prnntfy_func(LPCSTR param) noexcept {
        if (!prnntfydll) {
            load_prnntfy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(prnntfydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_prntvpt_func(LPCSTR param) noexcept {
        if (!prntvptdll) {
            load_prntvpt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(prntvptdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ProductEnumerator_func(LPCSTR param) noexcept {
        if (!ProductEnumeratordll) {
            load_ProductEnumerator();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ProductEnumeratordll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_profapi_func(LPCSTR param) noexcept {
        if (!profapidll) {
            load_profapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(profapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_profext_func(LPCSTR param) noexcept {
        if (!profextdll) {
            load_profext();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(profextdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_profprov_func(LPCSTR param) noexcept {
        if (!profprovdll) {
            load_profprov();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(profprovdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_profsvc_func(LPCSTR param) noexcept {
        if (!profsvcdll) {
            load_profsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(profsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_profsvcext_func(LPCSTR param) noexcept {
        if (!profsvcextdll) {
            load_profsvcext();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(profsvcextdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_propsys_func(LPCSTR param) noexcept {
        if (!propsysdll) {
            load_propsys();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(propsysdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_provcore_func(LPCSTR param) noexcept {
        if (!provcoredll) {
            load_provcore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(provcoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_provdatastore_func(LPCSTR param) noexcept {
        if (!provdatastoredll) {
            load_provdatastore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(provdatastoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_provdiagnostics_func(LPCSTR param) noexcept {
        if (!provdiagnosticsdll) {
            load_provdiagnostics();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(provdiagnosticsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_provengine_func(LPCSTR param) noexcept {
        if (!provenginedll) {
            load_provengine();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(provenginedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_provhandlers_func(LPCSTR param) noexcept {
        if (!provhandlersdll) {
            load_provhandlers();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(provhandlersdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_provisioningcommandscsp_func(LPCSTR param) noexcept {
        if (!provisioningcommandscspdll) {
            load_provisioningcommandscsp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(provisioningcommandscspdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_provisioningcsp_func(LPCSTR param) noexcept {
        if (!provisioningcspdll) {
            load_provisioningcsp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(provisioningcspdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ProvisioningHandlers_func(LPCSTR param) noexcept {
        if (!ProvisioningHandlersdll) {
            load_ProvisioningHandlers();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ProvisioningHandlersdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_provmigrate_func(LPCSTR param) noexcept {
        if (!provmigratedll) {
            load_provmigrate();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(provmigratedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_provops_func(LPCSTR param) noexcept {
        if (!provopsdll) {
            load_provops();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(provopsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_provpackageapidll_func(LPCSTR param) noexcept {
        if (!provpackageapidlldll) {
            load_provpackageapidll();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(provpackageapidlldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_provplatformdesktop_func(LPCSTR param) noexcept {
        if (!provplatformdesktopdll) {
            load_provplatformdesktop();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(provplatformdesktopdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ProvPluginEng_func(LPCSTR param) noexcept {
        if (!ProvPluginEngdll) {
            load_ProvPluginEng();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ProvPluginEngdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ProvSysprep_func(LPCSTR param) noexcept {
        if (!ProvSysprepdll) {
            load_ProvSysprep();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ProvSysprepdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_provthrd_func(LPCSTR param) noexcept {
        if (!provthrddll) {
            load_provthrd();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(provthrddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ProximityCommon_func(LPCSTR param) noexcept {
        if (!ProximityCommondll) {
            load_ProximityCommon();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ProximityCommondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ProximityCommonPal_func(LPCSTR param) noexcept {
        if (!ProximityCommonPaldll) {
            load_ProximityCommonPal();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ProximityCommonPaldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ProximityRtapiPal_func(LPCSTR param) noexcept {
        if (!ProximityRtapiPaldll) {
            load_ProximityRtapiPal();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ProximityRtapiPaldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ProximityService_func(LPCSTR param) noexcept {
        if (!ProximityServicedll) {
            load_ProximityService();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ProximityServicedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ProximityServicePal_func(LPCSTR param) noexcept {
        if (!ProximityServicePaldll) {
            load_ProximityServicePal();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ProximityServicePaldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_prvdmofcomp_func(LPCSTR param) noexcept {
        if (!prvdmofcompdll) {
            load_prvdmofcomp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(prvdmofcompdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_prxyqry_func(LPCSTR param) noexcept {
        if (!prxyqrydll) {
            load_prxyqry();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(prxyqrydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_psapi_func(LPCSTR param) noexcept {
        if (!psapidll) {
            load_psapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(psapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_psisdecd_func(LPCSTR param) noexcept {
        if (!psisdecddll) {
            load_psisdecd();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(psisdecddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PSModuleDiscoveryProvider_func(LPCSTR param) noexcept {
        if (!PSModuleDiscoveryProviderdll) {
            load_PSModuleDiscoveryProvider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PSModuleDiscoveryProviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PsmServiceExtHost_func(LPCSTR param) noexcept {
        if (!PsmServiceExtHostdll) {
            load_PsmServiceExtHost();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PsmServiceExtHostdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_psmsrv_func(LPCSTR param) noexcept {
        if (!psmsrvdll) {
            load_psmsrv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(psmsrvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_pstask_func(LPCSTR param) noexcept {
        if (!pstaskdll) {
            load_pstask();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(pstaskdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_pstorec_func(LPCSTR param) noexcept {
        if (!pstorecdll) {
            load_pstorec();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(pstorecdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ptpprov_func(LPCSTR param) noexcept {
        if (!ptpprovdll) {
            load_ptpprov();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ptpprovdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_puiapi_func(LPCSTR param) noexcept {
        if (!puiapidll) {
            load_puiapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(puiapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_puiobj_func(LPCSTR param) noexcept {
        if (!puiobjdll) {
            load_puiobj();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(puiobjdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PushToInstall_func(LPCSTR param) noexcept {
        if (!PushToInstalldll) {
            load_PushToInstall();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PushToInstalldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_PwdlessAggregator_func(LPCSTR param) noexcept {
        if (!PwdlessAggregatordll) {
            load_PwdlessAggregator();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(PwdlessAggregatordll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_pwlauncher_func(LPCSTR param) noexcept {
        if (!pwlauncherdll) {
            load_pwlauncher();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(pwlauncherdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_pwrshplugin_func(LPCSTR param) noexcept {
        if (!pwrshplugindll) {
            load_pwrshplugin();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(pwrshplugindll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_pwrshsip_func(LPCSTR param) noexcept {
        if (!pwrshsipdll) {
            load_pwrshsip();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(pwrshsipdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_pwsso_func(LPCSTR param) noexcept {
        if (!pwssodll) {
            load_pwsso();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(pwssodll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_qasf_func(LPCSTR param) noexcept {
        if (!qasfdll) {
            load_qasf();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(qasfdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_qcap_func(LPCSTR param) noexcept {
        if (!qcapdll) {
            load_qcap();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(qcapdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_qdv_func(LPCSTR param) noexcept {
        if (!qdvdll) {
            load_qdv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(qdvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_qdvd_func(LPCSTR param) noexcept {
        if (!qdvddll) {
            load_qdvd();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(qdvddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_qedit_func(LPCSTR param) noexcept {
        if (!qeditdll) {
            load_qedit();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(qeditdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_qedwipes_func(LPCSTR param) noexcept {
        if (!qedwipesdll) {
            load_qedwipes();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(qedwipesdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_qmgr_func(LPCSTR param) noexcept {
        if (!qmgrdll) {
            load_qmgr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(qmgrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_QualityUpdateAssistant_func(LPCSTR param) noexcept {
        if (!QualityUpdateAssistantdll) {
            load_QualityUpdateAssistant();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(QualityUpdateAssistantdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_quartz_func(LPCSTR param) noexcept {
        if (!quartzdll) {
            load_quartz();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(quartzdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_Query_func(LPCSTR param) noexcept {
        if (!Querydll) {
            load_Query();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(Querydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_QuickActionsDataModel_func(LPCSTR param) noexcept {
        if (!QuickActionsDataModeldll) {
            load_QuickActionsDataModel();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(QuickActionsDataModeldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_QuietHours_func(LPCSTR param) noexcept {
        if (!QuietHoursdll) {
            load_QuietHours();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(QuietHoursdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_qwave_func(LPCSTR param) noexcept {
        if (!qwavedll) {
            load_qwave();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(qwavedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_RacEngn_func(LPCSTR param) noexcept {
        if (!RacEngndll) {
            load_RacEngn();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(RacEngndll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_racpldlg_func(LPCSTR param) noexcept {
        if (!racpldlgdll) {
            load_racpldlg();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(racpldlgdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_radardt_func(LPCSTR param) noexcept {
        if (!radardtdll) {
            load_radardt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(radardtdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_radarrs_func(LPCSTR param) noexcept {
        if (!radarrsdll) {
            load_radarrs();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(radarrsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_RADCUI_func(LPCSTR param) noexcept {
        if (!RADCUIdll) {
            load_RADCUI();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(RADCUIdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_RandomAccessStreamDataSource_func(LPCSTR param) noexcept {
        if (!RandomAccessStreamDataSourcedll) {
            load_RandomAccessStreamDataSource();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(RandomAccessStreamDataSourcedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rasadhlp_func(LPCSTR param) noexcept {
        if (!rasadhlpdll) {
            load_rasadhlp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rasadhlpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rasapi32_func(LPCSTR param) noexcept {
        if (!rasapi32dll) {
            load_rasapi32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rasapi32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rasauto_func(LPCSTR param) noexcept {
        if (!rasautodll) {
            load_rasauto();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rasautodll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_raschap_func(LPCSTR param) noexcept {
        if (!raschapdll) {
            load_raschap();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(raschapdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_raschapext_func(LPCSTR param) noexcept {
        if (!raschapextdll) {
            load_raschapext();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(raschapextdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rasctrs_func(LPCSTR param) noexcept {
        if (!rasctrsdll) {
            load_rasctrs();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rasctrsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rascustom_func(LPCSTR param) noexcept {
        if (!rascustomdll) {
            load_rascustom();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rascustomdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rasdiag_func(LPCSTR param) noexcept {
        if (!rasdiagdll) {
            load_rasdiag();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rasdiagdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rasdlg_func(LPCSTR param) noexcept {
        if (!rasdlgdll) {
            load_rasdlg();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rasdlgdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rasgcw_func(LPCSTR param) noexcept {
        if (!rasgcwdll) {
            load_rasgcw();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rasgcwdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rasman_func(LPCSTR param) noexcept {
        if (!rasmandll) {
            load_rasman();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rasmandll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rasmans_func(LPCSTR param) noexcept {
        if (!rasmansdll) {
            load_rasmans();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rasmansdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rasmbmgr_func(LPCSTR param) noexcept {
        if (!rasmbmgrdll) {
            load_rasmbmgr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rasmbmgrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_RasMediaManager_func(LPCSTR param) noexcept {
        if (!RasMediaManagerdll) {
            load_RasMediaManager();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(RasMediaManagerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_RASMM_func(LPCSTR param) noexcept {
        if (!RASMMdll) {
            load_RASMM();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(RASMMdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rasmontr_func(LPCSTR param) noexcept {
        if (!rasmontrdll) {
            load_rasmontr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rasmontrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rasplap_func(LPCSTR param) noexcept {
        if (!rasplapdll) {
            load_rasplap();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rasplapdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rasppp_func(LPCSTR param) noexcept {
        if (!raspppdll) {
            load_rasppp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(raspppdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rastapi_func(LPCSTR param) noexcept {
        if (!rastapidll) {
            load_rastapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rastapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rastls_func(LPCSTR param) noexcept {
        if (!rastlsdll) {
            load_rastls();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rastlsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rastlsext_func(LPCSTR param) noexcept {
        if (!rastlsextdll) {
            load_rastlsext();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rastlsextdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rdbui_func(LPCSTR param) noexcept {
        if (!rdbuidll) {
            load_rdbui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rdbuidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rdp4vs_func(LPCSTR param) noexcept {
        if (!rdp4vsdll) {
            load_rdp4vs();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rdp4vsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_RdpAvenc_func(LPCSTR param) noexcept {
        if (!RdpAvencdll) {
            load_RdpAvenc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(RdpAvencdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rdpbase_func(LPCSTR param) noexcept {
        if (!rdpbasedll) {
            load_rdpbase();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rdpbasedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rdpcfgex_func(LPCSTR param) noexcept {
        if (!rdpcfgexdll) {
            load_rdpcfgex();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rdpcfgexdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rdpcorets_func(LPCSTR param) noexcept {
        if (!rdpcoretsdll) {
            load_rdpcorets();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rdpcoretsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rdpcredentialprovider_func(LPCSTR param) noexcept {
        if (!rdpcredentialproviderdll) {
            load_rdpcredentialprovider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rdpcredentialproviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rdpendp_func(LPCSTR param) noexcept {
        if (!rdpendpdll) {
            load_rdpendp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rdpendpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rdpnanoTransport_func(LPCSTR param) noexcept {
        if (!rdpnanoTransportdll) {
            load_rdpnanoTransport();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rdpnanoTransportdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_RdpRelayTransport_func(LPCSTR param) noexcept {
        if (!RdpRelayTransportdll) {
            load_RdpRelayTransport();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(RdpRelayTransportdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_RdpSaPs_func(LPCSTR param) noexcept {
        if (!RdpSaPsdll) {
            load_RdpSaPs();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(RdpSaPsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rdpserverbase_func(LPCSTR param) noexcept {
        if (!rdpserverbasedll) {
            load_rdpserverbase();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rdpserverbasedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rdpsharercom_func(LPCSTR param) noexcept {
        if (!rdpsharercomdll) {
            load_rdpsharercom();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rdpsharercomdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rdpudd_func(LPCSTR param) noexcept {
        if (!rdpudddll) {
            load_rdpudd();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rdpudddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rdpviewerax_func(LPCSTR param) noexcept {
        if (!rdpvieweraxdll) {
            load_rdpviewerax();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rdpvieweraxdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_RDSAppXHelper_func(LPCSTR param) noexcept {
        if (!RDSAppXHelperdll) {
            load_RDSAppXHelper();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(RDSAppXHelperdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rdsdwmdr_func(LPCSTR param) noexcept {
        if (!rdsdwmdrdll) {
            load_rdsdwmdr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rdsdwmdrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rdvvmtransport_func(LPCSTR param) noexcept {
        if (!rdvvmtransportdll) {
            load_rdvvmtransport();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rdvvmtransportdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_RDXService_func(LPCSTR param) noexcept {
        if (!RDXServicedll) {
            load_RDXService();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(RDXServicedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_RDXTaskFactory_func(LPCSTR param) noexcept {
        if (!RDXTaskFactorydll) {
            load_RDXTaskFactory();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(RDXTaskFactorydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ReAgent_func(LPCSTR param) noexcept {
        if (!ReAgentdll) {
            load_ReAgent();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ReAgentdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ReAgentTask_func(LPCSTR param) noexcept {
        if (!ReAgentTaskdll) {
            load_ReAgentTask();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ReAgentTaskdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_recovery_func(LPCSTR param) noexcept {
        if (!recoverydll) {
            load_recovery();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(recoverydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_regapi_func(LPCSTR param) noexcept {
        if (!regapidll) {
            load_regapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(regapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_RegCtrl_func(LPCSTR param) noexcept {
        if (!RegCtrldll) {
            load_RegCtrl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(RegCtrldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_regidle_func(LPCSTR param) noexcept {
        if (!regidledll) {
            load_regidle();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(regidledll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_regsvc_func(LPCSTR param) noexcept {
        if (!regsvcdll) {
            load_regsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(regsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_reguwpapi_func(LPCSTR param) noexcept {
        if (!reguwpapidll) {
            load_reguwpapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(reguwpapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ReInfo_func(LPCSTR param) noexcept {
        if (!ReInfodll) {
            load_ReInfo();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ReInfodll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_RemoteAppLifetimeManagerProxyStub_func(LPCSTR param) noexcept {
        if (!RemoteAppLifetimeManagerProxyStubdll) {
            load_RemoteAppLifetimeManagerProxyStub();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(RemoteAppLifetimeManagerProxyStubdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_remoteaudioendpoint_func(LPCSTR param) noexcept {
        if (!remoteaudioendpointdll) {
            load_remoteaudioendpoint();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(remoteaudioendpointdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_RemoteFileBrowse_func(LPCSTR param) noexcept {
        if (!RemoteFileBrowsedll) {
            load_RemoteFileBrowse();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(RemoteFileBrowsedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_remotepg_func(LPCSTR param) noexcept {
        if (!remotepgdll) {
            load_remotepg();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(remotepgdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_RemoteWipeCSP_func(LPCSTR param) noexcept {
        if (!RemoteWipeCSPdll) {
            load_RemoteWipeCSP();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(RemoteWipeCSPdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_RemovableMediaProvisioningPlugin_func(LPCSTR param) noexcept {
        if (!RemovableMediaProvisioningPlugindll) {
            load_RemovableMediaProvisioningPlugin();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(RemovableMediaProvisioningPlugindll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_RemoveDeviceContextHandler_func(LPCSTR param) noexcept {
        if (!RemoveDeviceContextHandlerdll) {
            load_RemoveDeviceContextHandler();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(RemoveDeviceContextHandlerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_RemoveDeviceElevated_func(LPCSTR param) noexcept {
        if (!RemoveDeviceElevateddll) {
            load_RemoveDeviceElevated();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(RemoveDeviceElevateddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ReportingCSP_func(LPCSTR param) noexcept {
        if (!ReportingCSPdll) {
            load_ReportingCSP();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ReportingCSPdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ResBParser_func(LPCSTR param) noexcept {
        if (!ResBParserdll) {
            load_ResBParser();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ResBParserdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_reseteng_func(LPCSTR param) noexcept {
        if (!resetengdll) {
            load_reseteng();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(resetengdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ResetEngine_func(LPCSTR param) noexcept {
        if (!ResetEnginedll) {
            load_ResetEngine();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ResetEnginedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ResetEngOnline_func(LPCSTR param) noexcept {
        if (!ResetEngOnlinedll) {
            load_ResetEngOnline();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ResetEngOnlinedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ResourceMapper_func(LPCSTR param) noexcept {
        if (!ResourceMapperdll) {
            load_ResourceMapper();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ResourceMapperdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ResourcePolicyClient_func(LPCSTR param) noexcept {
        if (!ResourcePolicyClientdll) {
            load_ResourcePolicyClient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ResourcePolicyClientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ResourcePolicyServer_func(LPCSTR param) noexcept {
        if (!ResourcePolicyServerdll) {
            load_ResourcePolicyServer();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ResourcePolicyServerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_resutils_func(LPCSTR param) noexcept {
        if (!resutilsdll) {
            load_resutils();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(resutilsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rgb9rast_func(LPCSTR param) noexcept {
        if (!rgb9rastdll) {
            load_rgb9rast();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rgb9rastdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_riched20_func(LPCSTR param) noexcept {
        if (!riched20dll) {
            load_riched20();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(riched20dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_riched32_func(LPCSTR param) noexcept {
        if (!riched32dll) {
            load_riched32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(riched32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_RjvMDMConfig_func(LPCSTR param) noexcept {
        if (!RjvMDMConfigdll) {
            load_RjvMDMConfig();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(RjvMDMConfigdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_RMapi_func(LPCSTR param) noexcept {
        if (!RMapidll) {
            load_RMapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(RMapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rmclient_func(LPCSTR param) noexcept {
        if (!rmclientdll) {
            load_rmclient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rmclientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_RMSRoamingSecurity_func(LPCSTR param) noexcept {
        if (!RMSRoamingSecuritydll) {
            load_RMSRoamingSecurity();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(RMSRoamingSecuritydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rnr20_func(LPCSTR param) noexcept {
        if (!rnr20dll) {
            load_rnr20();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rnr20dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_RoamingSecurity_func(LPCSTR param) noexcept {
        if (!RoamingSecuritydll) {
            load_RoamingSecurity();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(RoamingSecuritydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rometadata_func(LPCSTR param) noexcept {
        if (!rometadatadll) {
            load_rometadata();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rometadatadll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_RotMgr_func(LPCSTR param) noexcept {
        if (!RotMgrdll) {
            load_RotMgr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(RotMgrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_RpcEpMap_func(LPCSTR param) noexcept {
        if (!RpcEpMapdll) {
            load_RpcEpMap();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(RpcEpMapdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rpchttp_func(LPCSTR param) noexcept {
        if (!rpchttpdll) {
            load_rpchttp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rpchttpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_RpcNs4_func(LPCSTR param) noexcept {
        if (!RpcNs4dll) {
            load_RpcNs4();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(RpcNs4dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rpcnsh_func(LPCSTR param) noexcept {
        if (!rpcnshdll) {
            load_rpcnsh();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rpcnshdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rpcrt4_func(LPCSTR param) noexcept {
        if (!rpcrt4dll) {
            load_rpcrt4();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rpcrt4dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_RpcRtRemote_func(LPCSTR param) noexcept {
        if (!RpcRtRemotedll) {
            load_RpcRtRemote();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(RpcRtRemotedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rpcss_func(LPCSTR param) noexcept {
        if (!rpcssdll) {
            load_rpcss();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rpcssdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rsaenh_func(LPCSTR param) noexcept {
        if (!rsaenhdll) {
            load_rsaenh();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rsaenhdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rshx32_func(LPCSTR param) noexcept {
        if (!rshx32dll) {
            load_rshx32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rshx32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_RstMwEventLogMsg_func(LPCSTR param) noexcept {
        if (!RstMwEventLogMsgdll) {
            load_RstMwEventLogMsg();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(RstMwEventLogMsgdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_RstrtMgr_func(LPCSTR param) noexcept {
        if (!RstrtMgrdll) {
            load_RstrtMgr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(RstrtMgrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rtffilt_func(LPCSTR param) noexcept {
        if (!rtffiltdll) {
            load_rtffilt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rtffiltdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rtm_func(LPCSTR param) noexcept {
        if (!rtmdll) {
            load_rtm();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rtmdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rtmcodecs_func(LPCSTR param) noexcept {
        if (!rtmcodecsdll) {
            load_rtmcodecs();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rtmcodecsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_RTMediaFrame_func(LPCSTR param) noexcept {
        if (!RTMediaFramedll) {
            load_RTMediaFrame();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(RTMediaFramedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rtmmvrortc_func(LPCSTR param) noexcept {
        if (!rtmmvrortcdll) {
            load_rtmmvrortc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rtmmvrortcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rtmpal_func(LPCSTR param) noexcept {
        if (!rtmpaldll) {
            load_rtmpal();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rtmpaldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rtmpltfm_func(LPCSTR param) noexcept {
        if (!rtmpltfmdll) {
            load_rtmpltfm();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rtmpltfmdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rtpm_func(LPCSTR param) noexcept {
        if (!rtpmdll) {
            load_rtpm();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rtpmdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_rtutils_func(LPCSTR param) noexcept {
        if (!rtutilsdll) {
            load_rtutils();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(rtutilsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_RTWorkQ_func(LPCSTR param) noexcept {
        if (!RTWorkQdll) {
            load_RTWorkQ();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(RTWorkQdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_RuleBasedDS_func(LPCSTR param) noexcept {
        if (!RuleBasedDSdll) {
            load_RuleBasedDS();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(RuleBasedDSdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_samcli_func(LPCSTR param) noexcept {
        if (!samclidll) {
            load_samcli();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(samclidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_samlib_func(LPCSTR param) noexcept {
        if (!samlibdll) {
            load_samlib();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(samlibdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_samsrv_func(LPCSTR param) noexcept {
        if (!samsrvdll) {
            load_samsrv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(samsrvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sas_func(LPCSTR param) noexcept {
        if (!sasdll) {
            load_sas();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sasdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sbe_func(LPCSTR param) noexcept {
        if (!sbedll) {
            load_sbe();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sbedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sbeio_func(LPCSTR param) noexcept {
        if (!sbeiodll) {
            load_sbeio();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sbeiodll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sberes_func(LPCSTR param) noexcept {
        if (!sberesdll) {
            load_sberes();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sberesdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sbresources_func(LPCSTR param) noexcept {
        if (!sbresourcesdll) {
            load_sbresources();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sbresourcesdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sbservicetrigger_func(LPCSTR param) noexcept {
        if (!sbservicetriggerdll) {
            load_sbservicetrigger();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sbservicetriggerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_scansetting_func(LPCSTR param) noexcept {
        if (!scansettingdll) {
            load_scansetting();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(scansettingdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SCardBi_func(LPCSTR param) noexcept {
        if (!SCardBidll) {
            load_SCardBi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SCardBidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SCardDlg_func(LPCSTR param) noexcept {
        if (!SCardDlgdll) {
            load_SCardDlg();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SCardDlgdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SCardSvr_func(LPCSTR param) noexcept {
        if (!SCardSvrdll) {
            load_SCardSvr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SCardSvrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_scavengeui_func(LPCSTR param) noexcept {
        if (!scavengeuidll) {
            load_scavengeui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(scavengeuidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ScDeviceEnum_func(LPCSTR param) noexcept {
        if (!ScDeviceEnumdll) {
            load_ScDeviceEnum();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ScDeviceEnumdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_scecli_func(LPCSTR param) noexcept {
        if (!sceclidll) {
            load_scecli();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sceclidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_scesrv_func(LPCSTR param) noexcept {
        if (!scesrvdll) {
            load_scesrv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(scesrvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_schannel_func(LPCSTR param) noexcept {
        if (!schanneldll) {
            load_schannel();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(schanneldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_schedcli_func(LPCSTR param) noexcept {
        if (!schedclidll) {
            load_schedcli();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(schedclidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_schedsvc_func(LPCSTR param) noexcept {
        if (!schedsvcdll) {
            load_schedsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(schedsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_scksp_func(LPCSTR param) noexcept {
        if (!sckspdll) {
            load_scksp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sckspdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_scripto_func(LPCSTR param) noexcept {
        if (!scriptodll) {
            load_scripto();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(scriptodll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_scrobj_func(LPCSTR param) noexcept {
        if (!scrobjdll) {
            load_scrobj();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(scrobjdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_scrptadm_func(LPCSTR param) noexcept {
        if (!scrptadmdll) {
            load_scrptadm();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(scrptadmdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_scrrun_func(LPCSTR param) noexcept {
        if (!scrrundll) {
            load_scrrun();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(scrrundll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sdcpl_func(LPCSTR param) noexcept {
        if (!sdcpldll) {
            load_sdcpl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sdcpldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SDDS_func(LPCSTR param) noexcept {
        if (!SDDSdll) {
            load_SDDS();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SDDSdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sdengin2_func(LPCSTR param) noexcept {
        if (!sdengin2dll) {
            load_sdengin2();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sdengin2dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SDFHost_func(LPCSTR param) noexcept {
        if (!SDFHostdll) {
            load_SDFHost();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SDFHostdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sdhcinst_func(LPCSTR param) noexcept {
        if (!sdhcinstdll) {
            load_sdhcinst();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sdhcinstdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sdiageng_func(LPCSTR param) noexcept {
        if (!sdiagengdll) {
            load_sdiageng();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sdiagengdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sdiagprv_func(LPCSTR param) noexcept {
        if (!sdiagprvdll) {
            load_sdiagprv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sdiagprvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sdiagschd_func(LPCSTR param) noexcept {
        if (!sdiagschddll) {
            load_sdiagschd();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sdiagschddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sdohlp_func(LPCSTR param) noexcept {
        if (!sdohlpdll) {
            load_sdohlp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sdohlpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sdrsvc_func(LPCSTR param) noexcept {
        if (!sdrsvcdll) {
            load_sdrsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sdrsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sdshext_func(LPCSTR param) noexcept {
        if (!sdshextdll) {
            load_sdshext();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sdshextdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SearchProtocolHandlerMAPI2_func(LPCSTR param) noexcept {
        if (!SearchProtocolHandlerMAPI2dll) {
            load_SearchProtocolHandlerMAPI2();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SearchProtocolHandlerMAPI2dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SearchFolder_func(LPCSTR param) noexcept {
        if (!SearchFolderdll) {
            load_SearchFolder();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SearchFolderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SearchIndexerCore_func(LPCSTR param) noexcept {
        if (!SearchIndexerCoredll) {
            load_SearchIndexerCore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SearchIndexerCoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SebBackgroundManagerPolicy_func(LPCSTR param) noexcept {
        if (!SebBackgroundManagerPolicydll) {
            load_SebBackgroundManagerPolicy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SebBackgroundManagerPolicydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_secfw_AuthenticAMD_func(LPCSTR param) noexcept {
        if (!secfw_AuthenticAMDdll) {
            load_secfw_AuthenticAMD();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(secfw_AuthenticAMDdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sechost_func(LPCSTR param) noexcept {
        if (!sechostdll) {
            load_sechost();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sechostdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_seclogon_func(LPCSTR param) noexcept {
        if (!seclogondll) {
            load_seclogon();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(seclogondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_secproc_func(LPCSTR param) noexcept {
        if (!secprocdll) {
            load_secproc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(secprocdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_secproc_isv_func(LPCSTR param) noexcept {
        if (!secproc_isvdll) {
            load_secproc_isv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(secproc_isvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_secproc_ssp_func(LPCSTR param) noexcept {
        if (!secproc_sspdll) {
            load_secproc_ssp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(secproc_sspdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_secproc_ssp_isv_func(LPCSTR param) noexcept {
        if (!secproc_ssp_isvdll) {
            load_secproc_ssp_isv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(secproc_ssp_isvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_secur32_func(LPCSTR param) noexcept {
        if (!secur32dll) {
            load_secur32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(secur32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SecureAssessmentHandlers_func(LPCSTR param) noexcept {
        if (!SecureAssessmentHandlersdll) {
            load_SecureAssessmentHandlers();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SecureAssessmentHandlersdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SecureTimeAggregator_func(LPCSTR param) noexcept {
        if (!SecureTimeAggregatordll) {
            load_SecureTimeAggregator();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SecureTimeAggregatordll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_security_func(LPCSTR param) noexcept {
        if (!securitydll) {
            load_security();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(securitydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SecurityCenterBroker_func(LPCSTR param) noexcept {
        if (!SecurityCenterBrokerdll) {
            load_SecurityCenterBroker();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SecurityCenterBrokerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SecurityCenterBrokerPS_func(LPCSTR param) noexcept {
        if (!SecurityCenterBrokerPSdll) {
            load_SecurityCenterBrokerPS();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SecurityCenterBrokerPSdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SecurityHealthAgent_func(LPCSTR param) noexcept {
        if (!SecurityHealthAgentdll) {
            load_SecurityHealthAgent();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SecurityHealthAgentdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SecurityHealthCore_func(LPCSTR param) noexcept {
        if (!SecurityHealthCoredll) {
            load_SecurityHealthCore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SecurityHealthCoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SecurityHealthProxyStub_func(LPCSTR param) noexcept {
        if (!SecurityHealthProxyStubdll) {
            load_SecurityHealthProxyStub();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SecurityHealthProxyStubdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SecurityHealthSSO_func(LPCSTR param) noexcept {
        if (!SecurityHealthSSOdll) {
            load_SecurityHealthSSO();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SecurityHealthSSOdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SecurityHealthSsoUdk_func(LPCSTR param) noexcept {
        if (!SecurityHealthSsoUdkdll) {
            load_SecurityHealthSsoUdk();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SecurityHealthSsoUdkdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SecurityHealthUdk_func(LPCSTR param) noexcept {
        if (!SecurityHealthUdkdll) {
            load_SecurityHealthUdk();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SecurityHealthUdkdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sedplugins_func(LPCSTR param) noexcept {
        if (!sedpluginsdll) {
            load_sedplugins();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sedpluginsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SEMgrPS_func(LPCSTR param) noexcept {
        if (!SEMgrPSdll) {
            load_SEMgrPS();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SEMgrPSdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SEMgrSvc_func(LPCSTR param) noexcept {
        if (!SEMgrSvcdll) {
            load_SEMgrSvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SEMgrSvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sendmail_func(LPCSTR param) noexcept {
        if (!sendmaildll) {
            load_sendmail();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sendmaildll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_Sens_func(LPCSTR param) noexcept {
        if (!Sensdll) {
            load_Sens();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(Sensdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SensApi_func(LPCSTR param) noexcept {
        if (!SensApidll) {
            load_SensApi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SensApidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SensorPerformanceEvents_func(LPCSTR param) noexcept {
        if (!SensorPerformanceEventsdll) {
            load_SensorPerformanceEvents();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SensorPerformanceEventsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SensorsApi_func(LPCSTR param) noexcept {
        if (!SensorsApidll) {
            load_SensorsApi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SensorsApidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SensorsClassExtension_func(LPCSTR param) noexcept {
        if (!SensorsClassExtensiondll) {
            load_SensorsClassExtension();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SensorsClassExtensiondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SensorsCpl_func(LPCSTR param) noexcept {
        if (!SensorsCpldll) {
            load_SensorsCpl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SensorsCpldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SensorService_func(LPCSTR param) noexcept {
        if (!SensorServicedll) {
            load_SensorService();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SensorServicedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SensorsNativeApi_func(LPCSTR param) noexcept {
        if (!SensorsNativeApidll) {
            load_SensorsNativeApi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SensorsNativeApidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SensorsNativeApiV2_func(LPCSTR param) noexcept {
        if (!SensorsNativeApiV2dll) {
            load_SensorsNativeApiV2();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SensorsNativeApiV2dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SensorsUtilsV2_func(LPCSTR param) noexcept {
        if (!SensorsUtilsV2dll) {
            load_SensorsUtilsV2();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SensorsUtilsV2dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sensrsvc_func(LPCSTR param) noexcept {
        if (!sensrsvcdll) {
            load_sensrsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sensrsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_serialui_func(LPCSTR param) noexcept {
        if (!serialuidll) {
            load_serialui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(serialuidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ServicingCommon_func(LPCSTR param) noexcept {
        if (!ServicingCommondll) {
            load_ServicingCommon();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ServicingCommondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ServicingUAPI_func(LPCSTR param) noexcept {
        if (!ServicingUAPIdll) {
            load_ServicingUAPI();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ServicingUAPIdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_serwvdrv_func(LPCSTR param) noexcept {
        if (!serwvdrvdll) {
            load_serwvdrv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(serwvdrvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SessEnv_func(LPCSTR param) noexcept {
        if (!SessEnvdll) {
            load_SessEnv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SessEnvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_setbcdlocale_func(LPCSTR param) noexcept {
        if (!setbcdlocaledll) {
            load_setbcdlocale();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(setbcdlocaledll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SetNetworkLocation_func(LPCSTR param) noexcept {
        if (!SetNetworkLocationdll) {
            load_SetNetworkLocation();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SetNetworkLocationdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SetNetworkLocationFlyout_func(LPCSTR param) noexcept {
        if (!SetNetworkLocationFlyoutdll) {
            load_SetNetworkLocationFlyout();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SetNetworkLocationFlyoutdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SetProxyCredential_func(LPCSTR param) noexcept {
        if (!SetProxyCredentialdll) {
            load_SetProxyCredential();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SetProxyCredentialdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsEnvironmentDesktop_func(LPCSTR param) noexcept {
        if (!SettingsEnvironmentDesktopdll) {
            load_SettingsEnvironmentDesktop();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsEnvironmentDesktopdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsExtensibilityHandlers_func(LPCSTR param) noexcept {
        if (!SettingsExtensibilityHandlersdll) {
            load_SettingsExtensibilityHandlers();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsExtensibilityHandlersdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_Accessibility_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_Accessibilitydll) {
            load_SettingsHandlers_Accessibility();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_Accessibilitydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_AdvertisingId_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_AdvertisingIddll) {
            load_SettingsHandlers_AdvertisingId();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_AdvertisingIddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_AnalogShell_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_AnalogShelldll) {
            load_SettingsHandlers_AnalogShell();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_AnalogShelldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_AppControl_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_AppControldll) {
            load_SettingsHandlers_AppControl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_AppControldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_AppExecutionAlias_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_AppExecutionAliasdll) {
            load_SettingsHandlers_AppExecutionAlias();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_AppExecutionAliasdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_AssignedAccess_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_AssignedAccessdll) {
            load_SettingsHandlers_AssignedAccess();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_AssignedAccessdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_Authentication_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_Authenticationdll) {
            load_SettingsHandlers_Authentication();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_Authenticationdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_BackgroundApps_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_BackgroundAppsdll) {
            load_SettingsHandlers_BackgroundApps();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_BackgroundAppsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_Backup_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_Backupdll) {
            load_SettingsHandlers_Backup();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_Backupdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_BatteryUsage_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_BatteryUsagedll) {
            load_SettingsHandlers_BatteryUsage();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_BatteryUsagedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_Camera_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_Cameradll) {
            load_SettingsHandlers_Camera();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_Cameradll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_CapabilityAccess_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_CapabilityAccessdll) {
            load_SettingsHandlers_CapabilityAccess();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_CapabilityAccessdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_Clipboard_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_Clipboarddll) {
            load_SettingsHandlers_Clipboard();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_Clipboarddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_ClosedCaptioning_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_ClosedCaptioningdll) {
            load_SettingsHandlers_ClosedCaptioning();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_ClosedCaptioningdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_CloudPC_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_CloudPCdll) {
            load_SettingsHandlers_CloudPC();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_CloudPCdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_ContentDeliveryManager_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_ContentDeliveryManagerdll) {
            load_SettingsHandlers_ContentDeliveryManager();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_ContentDeliveryManagerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_Cortana_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_Cortanadll) {
            load_SettingsHandlers_Cortana();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_Cortanadll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_DesktopTaskbar_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_DesktopTaskbardll) {
            load_SettingsHandlers_DesktopTaskbar();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_DesktopTaskbardll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_Devices_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_Devicesdll) {
            load_SettingsHandlers_Devices();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_Devicesdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_Display_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_Displaydll) {
            load_SettingsHandlers_Display();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_Displaydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_Flights_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_Flightsdll) {
            load_SettingsHandlers_Flights();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_Flightsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_Fonts_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_Fontsdll) {
            load_SettingsHandlers_Fonts();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_Fontsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_ForceSync_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_ForceSyncdll) {
            load_SettingsHandlers_ForceSync();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_ForceSyncdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_Gaming_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_Gamingdll) {
            load_SettingsHandlers_Gaming();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_Gamingdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_Geolocation_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_Geolocationdll) {
            load_SettingsHandlers_Geolocation();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_Geolocationdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_Gpu_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_Gpudll) {
            load_SettingsHandlers_Gpu();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_Gpudll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_HoloLens_Environment_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_HoloLens_Environmentdll) {
            load_SettingsHandlers_HoloLens_Environment();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_HoloLens_Environmentdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_HumanPresence_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_HumanPresencedll) {
            load_SettingsHandlers_HumanPresence();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_HumanPresencedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_IME_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_IMEdll) {
            load_SettingsHandlers_IME();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_IMEdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_InkingTypingPrivacy_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_InkingTypingPrivacydll) {
            load_SettingsHandlers_InkingTypingPrivacy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_InkingTypingPrivacydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_InputPersonalization_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_InputPersonalizationdll) {
            load_SettingsHandlers_InputPersonalization();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_InputPersonalizationdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_InstalledUpdates_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_InstalledUpdatesdll) {
            load_SettingsHandlers_InstalledUpdates();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_InstalledUpdatesdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_Keyboard_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_Keyboarddll) {
            load_SettingsHandlers_Keyboard();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_Keyboarddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_Language_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_Languagedll) {
            load_SettingsHandlers_Language();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_Languagedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_Lighting_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_Lightingdll) {
            load_SettingsHandlers_Lighting();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_Lightingdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_ManagePhone_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_ManagePhonedll) {
            load_SettingsHandlers_ManagePhone();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_ManagePhonedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_Maps_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_Mapsdll) {
            load_SettingsHandlers_Maps();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_Mapsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_Mouse_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_Mousedll) {
            load_SettingsHandlers_Mouse();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_Mousedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_Notifications_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_Notificationsdll) {
            load_SettingsHandlers_Notifications();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_Notificationsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_nt_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_ntdll) {
            load_SettingsHandlers_nt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_ntdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_OneCore_BatterySaver_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_OneCore_BatterySaverdll) {
            load_SettingsHandlers_OneCore_BatterySaver();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_OneCore_BatterySaverdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_OneCore_PowerAndSleep_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_OneCore_PowerAndSleepdll) {
            load_SettingsHandlers_OneCore_PowerAndSleep();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_OneCore_PowerAndSleepdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_OneDriveBackup_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_OneDriveBackupdll) {
            load_SettingsHandlers_OneDriveBackup();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_OneDriveBackupdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_OptionalFeatures_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_OptionalFeaturesdll) {
            load_SettingsHandlers_OptionalFeatures();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_OptionalFeaturesdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_PCDisplay_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_PCDisplaydll) {
            load_SettingsHandlers_PCDisplay();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_PCDisplaydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_Pen_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_Pendll) {
            load_SettingsHandlers_Pen();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_Pendll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_Region_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_Regiondll) {
            load_SettingsHandlers_Region();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_Regiondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_SharedExperiences_Rome_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_SharedExperiences_Romedll) {
            load_SettingsHandlers_SharedExperiences_Rome();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_SharedExperiences_Romedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_SIUF_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_SIUFdll) {
            load_SettingsHandlers_SIUF();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_SIUFdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_SpeechPrivacy_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_SpeechPrivacydll) {
            load_SettingsHandlers_SpeechPrivacy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_SpeechPrivacydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_Startup_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_Startupdll) {
            load_SettingsHandlers_Startup();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_Startupdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_Storage_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_Storagedll) {
            load_SettingsHandlers_Storage();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_Storagedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_StorageSense_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_StorageSensedll) {
            load_SettingsHandlers_StorageSense();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_StorageSensedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_Touch_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_Touchdll) {
            load_SettingsHandlers_Touch();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_Touchdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_Troubleshoot_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_Troubleshootdll) {
            load_SettingsHandlers_Troubleshoot();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_Troubleshootdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_User_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_Userdll) {
            load_SettingsHandlers_User();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_Userdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_UserAccount_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_UserAccountdll) {
            load_SettingsHandlers_UserAccount();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_UserAccountdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_UserExperience_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_UserExperiencedll) {
            load_SettingsHandlers_UserExperience();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_UserExperiencedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_UserIntent_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_UserIntentdll) {
            load_SettingsHandlers_UserIntent();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_UserIntentdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingsHandlers_WorkAccess_func(LPCSTR param) noexcept {
        if (!SettingsHandlers_WorkAccessdll) {
            load_SettingsHandlers_WorkAccess();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingsHandlers_WorkAccessdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SettingSyncDownloadHelper_func(LPCSTR param) noexcept {
        if (!SettingSyncDownloadHelperdll) {
            load_SettingSyncDownloadHelper();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SettingSyncDownloadHelperdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_setupapi_func(LPCSTR param) noexcept {
        if (!setupapidll) {
            load_setupapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(setupapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_setupcl_func(LPCSTR param) noexcept {
        if (!setupcldll) {
            load_setupcl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(setupcldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_setupcln_func(LPCSTR param) noexcept {
        if (!setupclndll) {
            load_setupcln();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(setupclndll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_setupetw_func(LPCSTR param) noexcept {
        if (!setupetwdll) {
            load_setupetw();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(setupetwdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SFAPE_func(LPCSTR param) noexcept {
        if (!SFAPEdll) {
            load_SFAPE();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SFAPEdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SFAPM_func(LPCSTR param) noexcept {
        if (!SFAPMdll) {
            load_SFAPM();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SFAPMdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sfc_func(LPCSTR param) noexcept {
        if (!sfcdll) {
            load_sfc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sfcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sfc_os_func(LPCSTR param) noexcept {
        if (!sfc_osdll) {
            load_sfc_os();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sfc_osdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_shacct_func(LPCSTR param) noexcept {
        if (!shacctdll) {
            load_shacct();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(shacctdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_shacctprofile_func(LPCSTR param) noexcept {
        if (!shacctprofiledll) {
            load_shacctprofile();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(shacctprofiledll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SharedPCCSP_func(LPCSTR param) noexcept {
        if (!SharedPCCSPdll) {
            load_SharedPCCSP();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SharedPCCSPdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SharedRealitySvc_func(LPCSTR param) noexcept {
        if (!SharedRealitySvcdll) {
            load_SharedRealitySvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SharedRealitySvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ShareHost_func(LPCSTR param) noexcept {
        if (!ShareHostdll) {
            load_ShareHost();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ShareHostdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sharemediacpl_func(LPCSTR param) noexcept {
        if (!sharemediacpldll) {
            load_sharemediacpl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sharemediacpldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SHCore_func(LPCSTR param) noexcept {
        if (!SHCoredll) {
            load_SHCore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SHCoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_shdocvw_func(LPCSTR param) noexcept {
        if (!shdocvwdll) {
            load_shdocvw();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(shdocvwdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_shell32_func(LPCSTR param) noexcept {
        if (!shell32dll) {
            load_shell32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(shell32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ShellCommonCommonProxyStub_func(LPCSTR param) noexcept {
        if (!ShellCommonCommonProxyStubdll) {
            load_ShellCommonCommonProxyStub();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ShellCommonCommonProxyStubdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_shellstyle_func(LPCSTR param) noexcept {
        if (!shellstyledll) {
            load_shellstyle();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(shellstyledll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_shfolder_func(LPCSTR param) noexcept {
        if (!shfolderdll) {
            load_shfolder();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(shfolderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_shgina_func(LPCSTR param) noexcept {
        if (!shginadll) {
            load_shgina();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(shginadll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_shimeng_func(LPCSTR param) noexcept {
        if (!shimengdll) {
            load_shimeng();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(shimengdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_shimgvw_func(LPCSTR param) noexcept {
        if (!shimgvwdll) {
            load_shimgvw();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(shimgvwdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_shlwapi_func(LPCSTR param) noexcept {
        if (!shlwapidll) {
            load_shlwapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(shlwapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_shpafact_func(LPCSTR param) noexcept {
        if (!shpafactdll) {
            load_shpafact();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(shpafactdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_shsetup_func(LPCSTR param) noexcept {
        if (!shsetupdll) {
            load_shsetup();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(shsetupdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_shsvcs_func(LPCSTR param) noexcept {
        if (!shsvcsdll) {
            load_shsvcs();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(shsvcsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_shunimpl_func(LPCSTR param) noexcept {
        if (!shunimpldll) {
            load_shunimpl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(shunimpldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_shutdownext_func(LPCSTR param) noexcept {
        if (!shutdownextdll) {
            load_shutdownext();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(shutdownextdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_shutdownux_func(LPCSTR param) noexcept {
        if (!shutdownuxdll) {
            load_shutdownux();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(shutdownuxdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_shwebsvc_func(LPCSTR param) noexcept {
        if (!shwebsvcdll) {
            load_shwebsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(shwebsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_signdrv_func(LPCSTR param) noexcept {
        if (!signdrvdll) {
            load_signdrv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(signdrvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SimAuth_func(LPCSTR param) noexcept {
        if (!SimAuthdll) {
            load_SimAuth();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SimAuthdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SimCfg_func(LPCSTR param) noexcept {
        if (!SimCfgdll) {
            load_SimCfg();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SimCfgdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_skci_func(LPCSTR param) noexcept {
        if (!skcidll) {
            load_skci();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(skcidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_slc_func(LPCSTR param) noexcept {
        if (!slcdll) {
            load_slc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(slcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_slcext_func(LPCSTR param) noexcept {
        if (!slcextdll) {
            load_slcext();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(slcextdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_slwga_func(LPCSTR param) noexcept {
        if (!slwgadll) {
            load_slwga();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(slwgadll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SmartActionPlatform_func(LPCSTR param) noexcept {
        if (!SmartActionPlatformdll) {
            load_SmartActionPlatform();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SmartActionPlatformdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SmartCardBackgroundPolicy_func(LPCSTR param) noexcept {
        if (!SmartCardBackgroundPolicydll) {
            load_SmartCardBackgroundPolicy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SmartCardBackgroundPolicydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SmartcardCredentialProvider_func(LPCSTR param) noexcept {
        if (!SmartcardCredentialProviderdll) {
            load_SmartcardCredentialProvider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SmartcardCredentialProviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SmartCardSimulator_func(LPCSTR param) noexcept {
        if (!SmartCardSimulatordll) {
            load_SmartCardSimulator();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SmartCardSimulatordll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_smartscreen_func(LPCSTR param) noexcept {
        if (!smartscreendll) {
            load_smartscreen();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(smartscreendll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_smartscreenps_func(LPCSTR param) noexcept {
        if (!smartscreenpsdll) {
            load_smartscreenps();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(smartscreenpsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SmartWorkflows_func(LPCSTR param) noexcept {
        if (!SmartWorkflowsdll) {
            load_SmartWorkflows();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SmartWorkflowsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SMBHelperClass_func(LPCSTR param) noexcept {
        if (!SMBHelperClassdll) {
            load_SMBHelperClass();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SMBHelperClassdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_smbwmiv2_func(LPCSTR param) noexcept {
        if (!smbwmiv2dll) {
            load_smbwmiv2();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(smbwmiv2dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SmiEngine_func(LPCSTR param) noexcept {
        if (!SmiEnginedll) {
            load_SmiEngine();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SmiEnginedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_smphost_func(LPCSTR param) noexcept {
        if (!smphostdll) {
            load_smphost();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(smphostdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SmsRouterSvc_func(LPCSTR param) noexcept {
        if (!SmsRouterSvcdll) {
            load_SmsRouterSvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SmsRouterSvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SndVolSSO_func(LPCSTR param) noexcept {
        if (!SndVolSSOdll) {
            load_SndVolSSO();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SndVolSSOdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_snmpapi_func(LPCSTR param) noexcept {
        if (!snmpapidll) {
            load_snmpapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(snmpapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_socialapis_func(LPCSTR param) noexcept {
        if (!socialapisdll) {
            load_socialapis();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(socialapisdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_softkbd_func(LPCSTR param) noexcept {
        if (!softkbddll) {
            load_softkbd();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(softkbddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_softpub_func(LPCSTR param) noexcept {
        if (!softpubdll) {
            load_softpub();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(softpubdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SortServer2003Compat_func(LPCSTR param) noexcept {
        if (!SortServer2003Compatdll) {
            load_SortServer2003Compat();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SortServer2003Compatdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SortWindows61_func(LPCSTR param) noexcept {
        if (!SortWindows61dll) {
            load_SortWindows61();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SortWindows61dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SortWindows62_func(LPCSTR param) noexcept {
        if (!SortWindows62dll) {
            load_SortWindows62();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SortWindows62dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SortWindows63_func(LPCSTR param) noexcept {
        if (!SortWindows63dll) {
            load_SortWindows63();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SortWindows63dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SortWindows6Compat_func(LPCSTR param) noexcept {
        if (!SortWindows6Compatdll) {
            load_SortWindows6Compat();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SortWindows6Compatdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SpaceControl_func(LPCSTR param) noexcept {
        if (!SpaceControldll) {
            load_SpaceControl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SpaceControldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_spatialinteraction_func(LPCSTR param) noexcept {
        if (!spatialinteractiondll) {
            load_spatialinteraction();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(spatialinteractiondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SpatializerApo_func(LPCSTR param) noexcept {
        if (!SpatializerApodll) {
            load_SpatializerApo();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SpatializerApodll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SpatialStore_func(LPCSTR param) noexcept {
        if (!SpatialStoredll) {
            load_SpatialStore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SpatialStoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_spbcd_func(LPCSTR param) noexcept {
        if (!spbcddll) {
            load_spbcd();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(spbcddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SpectrumSyncClient_func(LPCSTR param) noexcept {
        if (!SpectrumSyncClientdll) {
            load_SpectrumSyncClient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SpectrumSyncClientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_spfileq_func(LPCSTR param) noexcept {
        if (!spfileqdll) {
            load_spfileq();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(spfileqdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_spinf_func(LPCSTR param) noexcept {
        if (!spinfdll) {
            load_spinf();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(spinfdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_spmpm_func(LPCSTR param) noexcept {
        if (!spmpmdll) {
            load_spmpm();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(spmpmdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_spnet_func(LPCSTR param) noexcept {
        if (!spnetdll) {
            load_spnet();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(spnetdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_spoolss_func(LPCSTR param) noexcept {
        if (!spoolssdll) {
            load_spoolss();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(spoolssdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_spopk_func(LPCSTR param) noexcept {
        if (!spopkdll) {
            load_spopk();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(spopkdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_spp_func(LPCSTR param) noexcept {
        if (!sppdll) {
            load_spp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sppdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sppc_func(LPCSTR param) noexcept {
        if (!sppcdll) {
            load_sppc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sppcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sppcext_func(LPCSTR param) noexcept {
        if (!sppcextdll) {
            load_sppcext();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sppcextdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sppcomapi_func(LPCSTR param) noexcept {
        if (!sppcomapidll) {
            load_sppcomapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sppcomapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sppcommdlg_func(LPCSTR param) noexcept {
        if (!sppcommdlgdll) {
            load_sppcommdlg();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sppcommdlgdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sppnp_func(LPCSTR param) noexcept {
        if (!sppnpdll) {
            load_sppnp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sppnpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sppobjs_func(LPCSTR param) noexcept {
        if (!sppobjsdll) {
            load_sppobjs();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sppobjsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sppwinob_func(LPCSTR param) noexcept {
        if (!sppwinobdll) {
            load_sppwinob();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sppwinobdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sppwmi_func(LPCSTR param) noexcept {
        if (!sppwmidll) {
            load_sppwmi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sppwmidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_spwinsat_func(LPCSTR param) noexcept {
        if (!spwinsatdll) {
            load_spwinsat();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(spwinsatdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_spwizeng_func(LPCSTR param) noexcept {
        if (!spwizengdll) {
            load_spwizeng();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(spwizengdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_spwizimg_func(LPCSTR param) noexcept {
        if (!spwizimgdll) {
            load_spwizimg();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(spwizimgdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_spwizres_func(LPCSTR param) noexcept {
        if (!spwizresdll) {
            load_spwizres();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(spwizresdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SqlServerSpatial150_func(LPCSTR param) noexcept {
        if (!SqlServerSpatial150dll) {
            load_SqlServerSpatial150();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SqlServerSpatial150dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sqlsrv32_func(LPCSTR param) noexcept {
        if (!sqlsrv32dll) {
            load_sqlsrv32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sqlsrv32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sqmapi_func(LPCSTR param) noexcept {
        if (!sqmapidll) {
            load_sqmapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sqmapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_srchadmin_func(LPCSTR param) noexcept {
        if (!srchadmindll) {
            load_srchadmin();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(srchadmindll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_srclient_func(LPCSTR param) noexcept {
        if (!srclientdll) {
            load_srclient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(srclientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_srcore_func(LPCSTR param) noexcept {
        if (!srcoredll) {
            load_srcore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(srcoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SrEvents_func(LPCSTR param) noexcept {
        if (!SrEventsdll) {
            load_SrEvents();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SrEventsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SRH_func(LPCSTR param) noexcept {
        if (!SRHdll) {
            load_SRH();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SRHdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_srhelper_func(LPCSTR param) noexcept {
        if (!srhelperdll) {
            load_srhelper();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(srhelperdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_srm_func(LPCSTR param) noexcept {
        if (!srmdll) {
            load_srm();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(srmdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_srmclient_func(LPCSTR param) noexcept {
        if (!srmclientdll) {
            load_srmclient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(srmclientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_srmlib_func(LPCSTR param) noexcept {
        if (!srmlibdll) {
            load_srmlib();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(srmlibdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_srmscan_func(LPCSTR param) noexcept {
        if (!srmscandll) {
            load_srmscan();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(srmscandll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_srmshell_func(LPCSTR param) noexcept {
        if (!srmshelldll) {
            load_srmshell();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(srmshelldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_srmstormod_func(LPCSTR param) noexcept {
        if (!srmstormoddll) {
            load_srmstormod();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(srmstormoddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_srmtrace_func(LPCSTR param) noexcept {
        if (!srmtracedll) {
            load_srmtrace();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(srmtracedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_srm_ps_func(LPCSTR param) noexcept {
        if (!srm_psdll) {
            load_srm_ps();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(srm_psdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_srpapi_func(LPCSTR param) noexcept {
        if (!srpapidll) {
            load_srpapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(srpapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SrpUxNativeSnapIn_func(LPCSTR param) noexcept {
        if (!SrpUxNativeSnapIndll) {
            load_SrpUxNativeSnapIn();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SrpUxNativeSnapIndll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_srrstr_func(LPCSTR param) noexcept {
        if (!srrstrdll) {
            load_srrstr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(srrstrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_srumapi_func(LPCSTR param) noexcept {
        if (!srumapidll) {
            load_srumapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(srumapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_srumsvc_func(LPCSTR param) noexcept {
        if (!srumsvcdll) {
            load_srumsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(srumsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_srvcli_func(LPCSTR param) noexcept {
        if (!srvclidll) {
            load_srvcli();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(srvclidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_srvsvc_func(LPCSTR param) noexcept {
        if (!srvsvcdll) {
            load_srvsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(srvsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_srwmi_func(LPCSTR param) noexcept {
        if (!srwmidll) {
            load_srwmi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(srwmidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sscore_func(LPCSTR param) noexcept {
        if (!sscoredll) {
            load_sscore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sscoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sscoreext_func(LPCSTR param) noexcept {
        if (!sscoreextdll) {
            load_sscoreext();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sscoreextdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ssdm_func(LPCSTR param) noexcept {
        if (!ssdmdll) {
            load_ssdm();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ssdmdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ssdpapi_func(LPCSTR param) noexcept {
        if (!ssdpapidll) {
            load_ssdpapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ssdpapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ssdpsrv_func(LPCSTR param) noexcept {
        if (!ssdpsrvdll) {
            load_ssdpsrv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ssdpsrvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SshdBroker_func(LPCSTR param) noexcept {
        if (!SshdBrokerdll) {
            load_SshdBroker();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SshdBrokerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SshdPinAuthLsa_func(LPCSTR param) noexcept {
        if (!SshdPinAuthLsadll) {
            load_SshdPinAuthLsa();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SshdPinAuthLsadll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sspicli_func(LPCSTR param) noexcept {
        if (!sspiclidll) {
            load_sspicli();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sspiclidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sspisrv_func(LPCSTR param) noexcept {
        if (!sspisrvdll) {
            load_sspisrv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sspisrvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SSShim_func(LPCSTR param) noexcept {
        if (!SSShimdll) {
            load_SSShim();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SSShimdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sstpcfg_func(LPCSTR param) noexcept {
        if (!sstpcfgdll) {
            load_sstpcfg();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sstpcfgdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sstpsvc_func(LPCSTR param) noexcept {
        if (!sstpsvcdll) {
            load_sstpsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sstpsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_StartTileData_func(LPCSTR param) noexcept {
        if (!StartTileDatadll) {
            load_StartTileData();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(StartTileDatadll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_Startupscan_func(LPCSTR param) noexcept {
        if (!Startupscandll) {
            load_Startupscan();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(Startupscandll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_StateRepositoryCore_func(LPCSTR param) noexcept {
        if (!StateRepositoryCoredll) {
            load_StateRepositoryCore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(StateRepositoryCoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_stclient_func(LPCSTR param) noexcept {
        if (!stclientdll) {
            load_stclient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(stclientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sti_func(LPCSTR param) noexcept {
        if (!stidll) {
            load_sti();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(stidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sti_ci_func(LPCSTR param) noexcept {
        if (!sti_cidll) {
            load_sti_ci();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sti_cidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_stobject_func(LPCSTR param) noexcept {
        if (!stobjectdll) {
            load_stobject();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(stobjectdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_StorageContextHandler_func(LPCSTR param) noexcept {
        if (!StorageContextHandlerdll) {
            load_StorageContextHandler();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(StorageContextHandlerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_StorageUsage_func(LPCSTR param) noexcept {
        if (!StorageUsagedll) {
            load_StorageUsage();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(StorageUsagedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_storagewmi_func(LPCSTR param) noexcept {
        if (!storagewmidll) {
            load_storagewmi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(storagewmidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_storagewmi_passthru_func(LPCSTR param) noexcept {
        if (!storagewmi_passthrudll) {
            load_storagewmi_passthru();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(storagewmi_passthrudll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_storewuauth_func(LPCSTR param) noexcept {
        if (!storewuauthdll) {
            load_storewuauth();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(storewuauthdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_Storprop_func(LPCSTR param) noexcept {
        if (!Storpropdll) {
            load_Storprop();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(Storpropdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_StorSvc_func(LPCSTR param) noexcept {
        if (!StorSvcdll) {
            load_StorSvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(StorSvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_streamci_func(LPCSTR param) noexcept {
        if (!streamcidll) {
            load_streamci();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(streamcidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_StringFeedbackEngine_func(LPCSTR param) noexcept {
        if (!StringFeedbackEnginedll) {
            load_StringFeedbackEngine();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(StringFeedbackEnginedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_StructuredQuery_func(LPCSTR param) noexcept {
        if (!StructuredQuerydll) {
            load_StructuredQuery();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(StructuredQuerydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sud_func(LPCSTR param) noexcept {
        if (!suddll) {
            load_sud();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(suddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SustainabilityService_func(LPCSTR param) noexcept {
        if (!SustainabilityServicedll) {
            load_SustainabilityService();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SustainabilityServicedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_svf_func(LPCSTR param) noexcept {
        if (!svfdll) {
            load_svf();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(svfdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_svsvc_func(LPCSTR param) noexcept {
        if (!svsvcdll) {
            load_svsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(svsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SwitcherDataModel_func(LPCSTR param) noexcept {
        if (!SwitcherDataModeldll) {
            load_SwitcherDataModel();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SwitcherDataModeldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_swprv_func(LPCSTR param) noexcept {
        if (!swprvdll) {
            load_swprv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(swprvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sxproxy_func(LPCSTR param) noexcept {
        if (!sxproxydll) {
            load_sxproxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sxproxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sxs_func(LPCSTR param) noexcept {
        if (!sxsdll) {
            load_sxs();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sxsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sxshared_func(LPCSTR param) noexcept {
        if (!sxshareddll) {
            load_sxshared();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sxshareddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sxssrv_func(LPCSTR param) noexcept {
        if (!sxssrvdll) {
            load_sxssrv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sxssrvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sxsstore_func(LPCSTR param) noexcept {
        if (!sxsstoredll) {
            load_sxsstore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sxsstoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SyncCenter_func(LPCSTR param) noexcept {
        if (!SyncCenterdll) {
            load_SyncCenter();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SyncCenterdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SyncController_func(LPCSTR param) noexcept {
        if (!SyncControllerdll) {
            load_SyncController();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SyncControllerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SyncHostps_func(LPCSTR param) noexcept {
        if (!SyncHostpsdll) {
            load_SyncHostps();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SyncHostpsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SyncInfrastructure_func(LPCSTR param) noexcept {
        if (!SyncInfrastructuredll) {
            load_SyncInfrastructure();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SyncInfrastructuredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SyncInfrastructureps_func(LPCSTR param) noexcept {
        if (!SyncInfrastructurepsdll) {
            load_SyncInfrastructureps();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SyncInfrastructurepsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SyncProxy_func(LPCSTR param) noexcept {
        if (!SyncProxydll) {
            load_SyncProxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SyncProxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_Syncreg_func(LPCSTR param) noexcept {
        if (!Syncregdll) {
            load_Syncreg();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(Syncregdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SyncRes_func(LPCSTR param) noexcept {
        if (!SyncResdll) {
            load_SyncRes();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SyncResdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SyncSettings_func(LPCSTR param) noexcept {
        if (!SyncSettingsdll) {
            load_SyncSettings();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SyncSettingsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_syncutil_func(LPCSTR param) noexcept {
        if (!syncutildll) {
            load_syncutil();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(syncutildll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sysclass_func(LPCSTR param) noexcept {
        if (!sysclassdll) {
            load_sysclass();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sysclassdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SysFxUI_func(LPCSTR param) noexcept {
        if (!SysFxUIdll) {
            load_SysFxUI();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SysFxUIdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sysmain_func(LPCSTR param) noexcept {
        if (!sysmaindll) {
            load_sysmain();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sysmaindll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_sysntfy_func(LPCSTR param) noexcept {
        if (!sysntfydll) {
            load_sysntfy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(sysntfydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_syssetup_func(LPCSTR param) noexcept {
        if (!syssetupdll) {
            load_syssetup();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(syssetupdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_systemcpl_func(LPCSTR param) noexcept {
        if (!systemcpldll) {
            load_systemcpl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(systemcpldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SystemEventsBrokerClient_func(LPCSTR param) noexcept {
        if (!SystemEventsBrokerClientdll) {
            load_SystemEventsBrokerClient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SystemEventsBrokerClientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SystemEventsBrokerServer_func(LPCSTR param) noexcept {
        if (!SystemEventsBrokerServerdll) {
            load_SystemEventsBrokerServer();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SystemEventsBrokerServerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SystemSettingsDataModel_func(LPCSTR param) noexcept {
        if (!SystemSettingsDataModeldll) {
            load_SystemSettingsDataModel();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SystemSettingsDataModeldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SystemSettingsDeviceEncryptionHandlers_func(LPCSTR param) noexcept {
        if (!SystemSettingsDeviceEncryptionHandlersdll) {
            load_SystemSettingsDeviceEncryptionHandlers();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SystemSettingsDeviceEncryptionHandlersdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SystemSettingsHandlers_func(LPCSTR param) noexcept {
        if (!SystemSettingsHandlersdll) {
            load_SystemSettingsHandlers();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SystemSettingsHandlersdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SystemSettingsSettingsExtensibility_func(LPCSTR param) noexcept {
        if (!SystemSettingsSettingsExtensibilitydll) {
            load_SystemSettingsSettingsExtensibility();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SystemSettingsSettingsExtensibilitydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SystemSettingsUserAccountsHandlers_func(LPCSTR param) noexcept {
        if (!SystemSettingsUserAccountsHandlersdll) {
            load_SystemSettingsUserAccountsHandlers();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SystemSettingsUserAccountsHandlersdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SystemSettingsThresholdAdminFlowUI_func(LPCSTR param) noexcept {
        if (!SystemSettingsThresholdAdminFlowUIdll) {
            load_SystemSettingsThresholdAdminFlowUI();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SystemSettingsThresholdAdminFlowUIdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_SystemSupportInfo_func(LPCSTR param) noexcept {
        if (!SystemSupportInfodll) {
            load_SystemSupportInfo();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(SystemSupportInfodll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_t2embed_func(LPCSTR param) noexcept {
        if (!t2embeddll) {
            load_t2embed();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(t2embeddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_t6indisp_func(LPCSTR param) noexcept {
        if (!t6indispdll) {
            load_t6indisp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(t6indispdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_Tabbtn_func(LPCSTR param) noexcept {
        if (!Tabbtndll) {
            load_Tabbtn();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(Tabbtndll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TabbtnEx_func(LPCSTR param) noexcept {
        if (!TabbtnExdll) {
            load_TabbtnEx();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TabbtnExdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TabSvc_func(LPCSTR param) noexcept {
        if (!TabSvcdll) {
            load_TabSvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TabSvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_tapi3_func(LPCSTR param) noexcept {
        if (!tapi3dll) {
            load_tapi3();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(tapi3dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_tapi32_func(LPCSTR param) noexcept {
        if (!tapi32dll) {
            load_tapi32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(tapi32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_tapilua_func(LPCSTR param) noexcept {
        if (!tapiluadll) {
            load_tapilua();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(tapiluadll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TapiMigPlugin_func(LPCSTR param) noexcept {
        if (!TapiMigPlugindll) {
            load_TapiMigPlugin();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TapiMigPlugindll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_tapiperf_func(LPCSTR param) noexcept {
        if (!tapiperfdll) {
            load_tapiperf();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(tapiperfdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_tapisrv_func(LPCSTR param) noexcept {
        if (!tapisrvdll) {
            load_tapisrv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(tapisrvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TapiSysprep_func(LPCSTR param) noexcept {
        if (!TapiSysprepdll) {
            load_TapiSysprep();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TapiSysprepdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_tapiui_func(LPCSTR param) noexcept {
        if (!tapiuidll) {
            load_tapiui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(tapiuidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TaskApis_func(LPCSTR param) noexcept {
        if (!TaskApisdll) {
            load_TaskApis();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TaskApisdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_Taskbar_func(LPCSTR param) noexcept {
        if (!Taskbardll) {
            load_Taskbar();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(Taskbardll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_taskbarcpl_func(LPCSTR param) noexcept {
        if (!taskbarcpldll) {
            load_taskbarcpl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(taskbarcpldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_taskcomp_func(LPCSTR param) noexcept {
        if (!taskcompdll) {
            load_taskcomp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(taskcompdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TaskFlowDataEngine_func(LPCSTR param) noexcept {
        if (!TaskFlowDataEnginedll) {
            load_TaskFlowDataEngine();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TaskFlowDataEnginedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TaskManagerDataLayer_func(LPCSTR param) noexcept {
        if (!TaskManagerDataLayerdll) {
            load_TaskManagerDataLayer();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TaskManagerDataLayerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_taskschd_func(LPCSTR param) noexcept {
        if (!taskschddll) {
            load_taskschd();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(taskschddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TaskSchdPS_func(LPCSTR param) noexcept {
        if (!TaskSchdPSdll) {
            load_TaskSchdPS();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TaskSchdPSdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_tbauth_func(LPCSTR param) noexcept {
        if (!tbauthdll) {
            load_tbauth();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(tbauthdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_tbs_func(LPCSTR param) noexcept {
        if (!tbsdll) {
            load_tbs();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(tbsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_tcbloader_func(LPCSTR param) noexcept {
        if (!tcbloaderdll) {
            load_tcbloader();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(tcbloaderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_tcpipcfg_func(LPCSTR param) noexcept {
        if (!tcpipcfgdll) {
            load_tcpipcfg();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(tcpipcfgdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_tcpmib_func(LPCSTR param) noexcept {
        if (!tcpmibdll) {
            load_tcpmib();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(tcpmibdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_tcpmon_func(LPCSTR param) noexcept {
        if (!tcpmondll) {
            load_tcpmon();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(tcpmondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_tcpmonui_func(LPCSTR param) noexcept {
        if (!tcpmonuidll) {
            load_tcpmonui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(tcpmonuidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_tdh_func(LPCSTR param) noexcept {
        if (!tdhdll) {
            load_tdh();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(tdhdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_tdhres_func(LPCSTR param) noexcept {
        if (!tdhresdll) {
            load_tdhres();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(tdhresdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TDLMigration_func(LPCSTR param) noexcept {
        if (!TDLMigrationdll) {
            load_TDLMigration();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TDLMigrationdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TEEManagement64_func(LPCSTR param) noexcept {
        if (!TEEManagement64dll) {
            load_TEEManagement64();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TEEManagement64dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TelephonyInteractiveUser_func(LPCSTR param) noexcept {
        if (!TelephonyInteractiveUserdll) {
            load_TelephonyInteractiveUser();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TelephonyInteractiveUserdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TelephonyInteractiveUserRes_func(LPCSTR param) noexcept {
        if (!TelephonyInteractiveUserResdll) {
            load_TelephonyInteractiveUserRes();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TelephonyInteractiveUserResdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_tellib_func(LPCSTR param) noexcept {
        if (!tellibdll) {
            load_tellib();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(tellibdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TempSignedLicenseExchangeTask_func(LPCSTR param) noexcept {
        if (!TempSignedLicenseExchangeTaskdll) {
            load_TempSignedLicenseExchangeTask();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TempSignedLicenseExchangeTaskdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TenantRestrictionsPlugin_func(LPCSTR param) noexcept {
        if (!TenantRestrictionsPlugindll) {
            load_TenantRestrictionsPlugin();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TenantRestrictionsPlugindll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_termmgr_func(LPCSTR param) noexcept {
        if (!termmgrdll) {
            load_termmgr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(termmgrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_termsrv_func(LPCSTR param) noexcept {
        if (!termsrvdll) {
            load_termsrv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(termsrvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_tetheringclient_func(LPCSTR param) noexcept {
        if (!tetheringclientdll) {
            load_tetheringclient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(tetheringclientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_tetheringconfigsp_func(LPCSTR param) noexcept {
        if (!tetheringconfigspdll) {
            load_tetheringconfigsp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(tetheringconfigspdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TetheringIeProvider_func(LPCSTR param) noexcept {
        if (!TetheringIeProviderdll) {
            load_TetheringIeProvider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TetheringIeProviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TetheringMgr_func(LPCSTR param) noexcept {
        if (!TetheringMgrdll) {
            load_TetheringMgr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TetheringMgrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_tetheringservice_func(LPCSTR param) noexcept {
        if (!tetheringservicedll) {
            load_tetheringservice();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(tetheringservicedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TetheringStation_func(LPCSTR param) noexcept {
        if (!TetheringStationdll) {
            load_TetheringStation();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TetheringStationdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TextInputFramework_func(LPCSTR param) noexcept {
        if (!TextInputFrameworkdll) {
            load_TextInputFramework();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TextInputFrameworkdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TextInputMethodFormatter_func(LPCSTR param) noexcept {
        if (!TextInputMethodFormatterdll) {
            load_TextInputMethodFormatter();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TextInputMethodFormatterdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TextShaping_func(LPCSTR param) noexcept {
        if (!TextShapingdll) {
            load_TextShaping();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TextShapingdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_themecpl_func(LPCSTR param) noexcept {
        if (!themecpldll) {
            load_themecpl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(themecpldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ThemesSsfDownloadScheduledTask_func(LPCSTR param) noexcept {
        if (!ThemesSsfDownloadScheduledTaskdll) {
            load_ThemesSsfDownloadScheduledTask();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ThemesSsfDownloadScheduledTaskdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_themeservice_func(LPCSTR param) noexcept {
        if (!themeservicedll) {
            load_themeservice();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(themeservicedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_themeui_func(LPCSTR param) noexcept {
        if (!themeuidll) {
            load_themeui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(themeuidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_threadpoolwinrt_func(LPCSTR param) noexcept {
        if (!threadpoolwinrtdll) {
            load_threadpoolwinrt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(threadpoolwinrtdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ThreatAssessment_func(LPCSTR param) noexcept {
        if (!ThreatAssessmentdll) {
            load_ThreatAssessment();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ThreatAssessmentdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ThreatExperienceManager_func(LPCSTR param) noexcept {
        if (!ThreatExperienceManagerdll) {
            load_ThreatExperienceManager();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ThreatExperienceManagerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ThreatIntelligence_func(LPCSTR param) noexcept {
        if (!ThreatIntelligencedll) {
            load_ThreatIntelligence();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ThreatIntelligencedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ThreatResponseEngine_func(LPCSTR param) noexcept {
        if (!ThreatResponseEnginedll) {
            load_ThreatResponseEngine();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ThreatResponseEnginedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_thumbcache_func(LPCSTR param) noexcept {
        if (!thumbcachedll) {
            load_thumbcache();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(thumbcachedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_tier2punctuations_func(LPCSTR param) noexcept {
        if (!tier2punctuationsdll) {
            load_tier2punctuations();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(tier2punctuationsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TieringEngineProxy_func(LPCSTR param) noexcept {
        if (!TieringEngineProxydll) {
            load_TieringEngineProxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TieringEngineProxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TileDataRepository_func(LPCSTR param) noexcept {
        if (!TileDataRepositorydll) {
            load_TileDataRepository();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TileDataRepositorydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TimeBrokerClient_func(LPCSTR param) noexcept {
        if (!TimeBrokerClientdll) {
            load_TimeBrokerClient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TimeBrokerClientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TimeBrokerServer_func(LPCSTR param) noexcept {
        if (!TimeBrokerServerdll) {
            load_TimeBrokerServer();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TimeBrokerServerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TimeDateMUICallback_func(LPCSTR param) noexcept {
        if (!TimeDateMUICallbackdll) {
            load_TimeDateMUICallback();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TimeDateMUICallbackdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_timesync_func(LPCSTR param) noexcept {
        if (!timesyncdll) {
            load_timesync();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(timesyncdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TimeSyncTask_func(LPCSTR param) noexcept {
        if (!TimeSyncTaskdll) {
            load_TimeSyncTask();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TimeSyncTaskdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_tlscsp_func(LPCSTR param) noexcept {
        if (!tlscspdll) {
            load_tlscsp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(tlscspdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_tokenbinding_func(LPCSTR param) noexcept {
        if (!tokenbindingdll) {
            load_tokenbinding();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(tokenbindingdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TokenBroker_func(LPCSTR param) noexcept {
        if (!TokenBrokerdll) {
            load_TokenBroker();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TokenBrokerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TokenBrokerUI_func(LPCSTR param) noexcept {
        if (!TokenBrokerUIdll) {
            load_TokenBrokerUI();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TokenBrokerUIdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TpmCertResources_func(LPCSTR param) noexcept {
        if (!TpmCertResourcesdll) {
            load_TpmCertResources();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TpmCertResourcesdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_tpmcompc_func(LPCSTR param) noexcept {
        if (!tpmcompcdll) {
            load_tpmcompc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(tpmcompcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TpmCoreProvisioning_func(LPCSTR param) noexcept {
        if (!TpmCoreProvisioningdll) {
            load_TpmCoreProvisioning();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TpmCoreProvisioningdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TpmEngUM_func(LPCSTR param) noexcept {
        if (!TpmEngUMdll) {
            load_TpmEngUM();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TpmEngUMdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TpmEngUM138_func(LPCSTR param) noexcept {
        if (!TpmEngUM138dll) {
            load_TpmEngUM138();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TpmEngUM138dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TpmTasks_func(LPCSTR param) noexcept {
        if (!TpmTasksdll) {
            load_TpmTasks();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TpmTasksdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_tpmvsc_func(LPCSTR param) noexcept {
        if (!tpmvscdll) {
            load_tpmvsc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(tpmvscdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_tprtdll_func(LPCSTR param) noexcept {
        if (!tprtdlldll) {
            load_tprtdll();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(tprtdlldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_tquery_func(LPCSTR param) noexcept {
        if (!tquerydll) {
            load_tquery();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(tquerydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_traffic_func(LPCSTR param) noexcept {
        if (!trafficdll) {
            load_traffic();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(trafficdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TransliterationRanker_func(LPCSTR param) noexcept {
        if (!TransliterationRankerdll) {
            load_TransliterationRanker();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TransliterationRankerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TransportDSA_func(LPCSTR param) noexcept {
        if (!TransportDSAdll) {
            load_TransportDSA();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TransportDSAdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_trie_func(LPCSTR param) noexcept {
        if (!triedll) {
            load_trie();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(triedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_trkwks_func(LPCSTR param) noexcept {
        if (!trkwksdll) {
            load_trkwks();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(trkwksdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TrustedSignalCredProv_func(LPCSTR param) noexcept {
        if (!TrustedSignalCredProvdll) {
            load_TrustedSignalCredProv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TrustedSignalCredProvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_tsbyuv_func(LPCSTR param) noexcept {
        if (!tsbyuvdll) {
            load_tsbyuv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(tsbyuvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_tscfgwmi_func(LPCSTR param) noexcept {
        if (!tscfgwmidll) {
            load_tscfgwmi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(tscfgwmidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TSErrRedir_func(LPCSTR param) noexcept {
        if (!TSErrRedirdll) {
            load_TSErrRedir();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TSErrRedirdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_tsf3gip_func(LPCSTR param) noexcept {
        if (!tsf3gipdll) {
            load_tsf3gip();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(tsf3gipdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_tsgqec_func(LPCSTR param) noexcept {
        if (!tsgqecdll) {
            load_tsgqec();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(tsgqecdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_tsmf_func(LPCSTR param) noexcept {
        if (!tsmfdll) {
            load_tsmf();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(tsmfdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TSpkg_func(LPCSTR param) noexcept {
        if (!TSpkgdll) {
            load_TSpkg();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TSpkgdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_tspubwmi_func(LPCSTR param) noexcept {
        if (!tspubwmidll) {
            load_tspubwmi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(tspubwmidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TSSessionUX_func(LPCSTR param) noexcept {
        if (!TSSessionUXdll) {
            load_TSSessionUX();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TSSessionUXdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_tssrvlic_func(LPCSTR param) noexcept {
        if (!tssrvlicdll) {
            load_tssrvlic();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(tssrvlicdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TsUsbGDCoInstaller_func(LPCSTR param) noexcept {
        if (!TsUsbGDCoInstallerdll) {
            load_TsUsbGDCoInstaller();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TsUsbGDCoInstallerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TsUsbRedirectionGroupPolicyExtension_func(LPCSTR param) noexcept {
        if (!TsUsbRedirectionGroupPolicyExtensiondll) {
            load_TsUsbRedirectionGroupPolicyExtension();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TsUsbRedirectionGroupPolicyExtensiondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TSWorkspace_func(LPCSTR param) noexcept {
        if (!TSWorkspacedll) {
            load_TSWorkspace();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TSWorkspacedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ttdloader_func(LPCSTR param) noexcept {
        if (!ttdloaderdll) {
            load_ttdloader();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ttdloaderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ttdplm_func(LPCSTR param) noexcept {
        if (!ttdplmdll) {
            load_ttdplm();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ttdplmdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ttdrecord_func(LPCSTR param) noexcept {
        if (!ttdrecorddll) {
            load_ttdrecord();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ttdrecorddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ttdrecordcpu_func(LPCSTR param) noexcept {
        if (!ttdrecordcpudll) {
            load_ttdrecordcpu();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ttdrecordcpudll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TtlsAuth_func(LPCSTR param) noexcept {
        if (!TtlsAuthdll) {
            load_TtlsAuth();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TtlsAuthdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TtlsCfg_func(LPCSTR param) noexcept {
        if (!TtlsCfgdll) {
            load_TtlsCfg();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TtlsCfgdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_TtlsExt_func(LPCSTR param) noexcept {
        if (!TtlsExtdll) {
            load_TtlsExt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(TtlsExtdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_tvratings_func(LPCSTR param) noexcept {
        if (!tvratingsdll) {
            load_tvratings();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(tvratingsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_twext_func(LPCSTR param) noexcept {
        if (!twextdll) {
            load_twext();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(twextdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_twinapiappcore_func(LPCSTR param) noexcept {
        if (!twinapiappcoredll) {
            load_twinapiappcore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(twinapiappcoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_twinapi_func(LPCSTR param) noexcept {
        if (!twinapidll) {
            load_twinapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(twinapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_twinuiappcore_func(LPCSTR param) noexcept {
        if (!twinuiappcoredll) {
            load_twinuiappcore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(twinuiappcoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_twinui_func(LPCSTR param) noexcept {
        if (!twinuidll) {
            load_twinui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(twinuidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_twinuipcshell_func(LPCSTR param) noexcept {
        if (!twinuipcshelldll) {
            load_twinuipcshell();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(twinuipcshelldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_txflog_func(LPCSTR param) noexcept {
        if (!txflogdll) {
            load_txflog();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(txflogdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_txfw32_func(LPCSTR param) noexcept {
        if (!txfw32dll) {
            load_txfw32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(txfw32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_tzautoupdate_func(LPCSTR param) noexcept {
        if (!tzautoupdatedll) {
            load_tzautoupdate();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(tzautoupdatedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_tzres_func(LPCSTR param) noexcept {
        if (!tzresdll) {
            load_tzres();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(tzresdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_tzsyncres_func(LPCSTR param) noexcept {
        if (!tzsyncresdll) {
            load_tzsyncres();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(tzsyncresdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ubpm_func(LPCSTR param) noexcept {
        if (!ubpmdll) {
            load_ubpm();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ubpmdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ucmhc_func(LPCSTR param) noexcept {
        if (!ucmhcdll) {
            load_ucmhc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ucmhcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ucrtbase_func(LPCSTR param) noexcept {
        if (!ucrtbasedll) {
            load_ucrtbase();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ucrtbasedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ucrtbased_func(LPCSTR param) noexcept {
        if (!ucrtbaseddll) {
            load_ucrtbased();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ucrtbaseddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ucrtbase_clr0400_func(LPCSTR param) noexcept {
        if (!ucrtbase_clr0400dll) {
            load_ucrtbase_clr0400();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ucrtbase_clr0400dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ucrtbase_enclave_func(LPCSTR param) noexcept {
        if (!ucrtbase_enclavedll) {
            load_ucrtbase_enclave();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ucrtbase_enclavedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_udhisapi_func(LPCSTR param) noexcept {
        if (!udhisapidll) {
            load_udhisapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(udhisapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_uDWM_func(LPCSTR param) noexcept {
        if (!uDWMdll) {
            load_uDWM();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(uDWMdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_UefiCsp_func(LPCSTR param) noexcept {
        if (!UefiCspdll) {
            load_UefiCsp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(UefiCspdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_uexfat_func(LPCSTR param) noexcept {
        if (!uexfatdll) {
            load_uexfat();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(uexfatdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ufat_func(LPCSTR param) noexcept {
        if (!ufatdll) {
            load_ufat();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ufatdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_UiaManager_func(LPCSTR param) noexcept {
        if (!UiaManagerdll) {
            load_UiaManager();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(UiaManagerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_UIAnimation_func(LPCSTR param) noexcept {
        if (!UIAnimationdll) {
            load_UIAnimation();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(UIAnimationdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_UIAutomationCore_func(LPCSTR param) noexcept {
        if (!UIAutomationCoredll) {
            load_UIAutomationCore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(UIAutomationCoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_uicom_func(LPCSTR param) noexcept {
        if (!uicomdll) {
            load_uicom();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(uicomdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_UIManagerBrokerps_func(LPCSTR param) noexcept {
        if (!UIManagerBrokerpsdll) {
            load_UIManagerBrokerps();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(UIManagerBrokerpsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_uireng_func(LPCSTR param) noexcept {
        if (!uirengdll) {
            load_uireng();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(uirengdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_UIRibbon_func(LPCSTR param) noexcept {
        if (!UIRibbondll) {
            load_UIRibbon();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(UIRibbondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_UIRibbonRes_func(LPCSTR param) noexcept {
        if (!UIRibbonResdll) {
            load_UIRibbonRes();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(UIRibbonResdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ulib_func(LPCSTR param) noexcept {
        if (!ulibdll) {
            load_ulib();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ulibdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_umb_func(LPCSTR param) noexcept {
        if (!umbdll) {
            load_umb();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(umbdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_umdmxfrm_func(LPCSTR param) noexcept {
        if (!umdmxfrmdll) {
            load_umdmxfrm();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(umdmxfrmdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_umpdc_func(LPCSTR param) noexcept {
        if (!umpdcdll) {
            load_umpdc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(umpdcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_umpnpmgr_func(LPCSTR param) noexcept {
        if (!umpnpmgrdll) {
            load_umpnpmgr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(umpnpmgrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_umpo_overrides_func(LPCSTR param) noexcept {
        if (!umpo_overridesdll) {
            load_umpo_overrides();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(umpo_overridesdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_umpo_func(LPCSTR param) noexcept {
        if (!umpodll) {
            load_umpo();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(umpodll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_umpodev_func(LPCSTR param) noexcept {
        if (!umpodevdll) {
            load_umpodev();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(umpodevdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_umpoext_func(LPCSTR param) noexcept {
        if (!umpoextdll) {
            load_umpoext();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(umpoextdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_umpowmi_func(LPCSTR param) noexcept {
        if (!umpowmidll) {
            load_umpowmi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(umpowmidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_umrdp_func(LPCSTR param) noexcept {
        if (!umrdpdll) {
            load_umrdp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(umrdpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_unattend_func(LPCSTR param) noexcept {
        if (!unattenddll) {
            load_unattend();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(unattenddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_unenrollhook_func(LPCSTR param) noexcept {
        if (!unenrollhookdll) {
            load_unenrollhook();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(unenrollhookdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_UnifiedConsent_func(LPCSTR param) noexcept {
        if (!UnifiedConsentdll) {
            load_UnifiedConsent();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(UnifiedConsentdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_unimdmat_func(LPCSTR param) noexcept {
        if (!unimdmatdll) {
            load_unimdmat();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(unimdmatdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_uniplat_func(LPCSTR param) noexcept {
        if (!uniplatdll) {
            load_uniplat();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(uniplatdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_Unistore_func(LPCSTR param) noexcept {
        if (!Unistoredll) {
            load_Unistore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(Unistoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_untfs_func(LPCSTR param) noexcept {
        if (!untfsdll) {
            load_untfs();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(untfsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_UpdateAgent_func(LPCSTR param) noexcept {
        if (!UpdateAgentdll) {
            load_UpdateAgent();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(UpdateAgentdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_updatecsp_func(LPCSTR param) noexcept {
        if (!updatecspdll) {
            load_updatecsp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(updatecspdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_UpdateHeartbeatScan_func(LPCSTR param) noexcept {
        if (!UpdateHeartbeatScandll) {
            load_UpdateHeartbeatScan();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(UpdateHeartbeatScandll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_updatepolicy_func(LPCSTR param) noexcept {
        if (!updatepolicydll) {
            load_updatepolicy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(updatepolicydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_UpdatePolicyScenarioReliabilityAggregator_func(LPCSTR param) noexcept {
        if (!UpdatePolicyScenarioReliabilityAggregatordll) {
            load_UpdatePolicyScenarioReliabilityAggregator();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(UpdatePolicyScenarioReliabilityAggregatordll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_UpdateReboot_func(LPCSTR param) noexcept {
        if (!UpdateRebootdll) {
            load_UpdateReboot();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(UpdateRebootdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_upnp_func(LPCSTR param) noexcept {
        if (!upnpdll) {
            load_upnp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(upnpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_upnphost_func(LPCSTR param) noexcept {
        if (!upnphostdll) {
            load_upnphost();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(upnphostdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_UPPrinterInstallsCSP_func(LPCSTR param) noexcept {
        if (!UPPrinterInstallsCSPdll) {
            load_UPPrinterInstallsCSP();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(UPPrinterInstallsCSPdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_upshared_func(LPCSTR param) noexcept {
        if (!upshareddll) {
            load_upshared();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(upshareddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_uReFS_func(LPCSTR param) noexcept {
        if (!uReFSdll) {
            load_uReFS();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(uReFSdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_uReFSv1_func(LPCSTR param) noexcept {
        if (!uReFSv1dll) {
            load_uReFSv1();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(uReFSv1dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ureg_func(LPCSTR param) noexcept {
        if (!uregdll) {
            load_ureg();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(uregdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_url_func(LPCSTR param) noexcept {
        if (!urldll) {
            load_url();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(urldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_urlmon_func(LPCSTR param) noexcept {
        if (!urlmondll) {
            load_urlmon();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(urlmondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_UsbCApi_func(LPCSTR param) noexcept {
        if (!UsbCApidll) {
            load_UsbCApi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(UsbCApidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_usbceip_func(LPCSTR param) noexcept {
        if (!usbceipdll) {
            load_usbceip();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(usbceipdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_usbmon_func(LPCSTR param) noexcept {
        if (!usbmondll) {
            load_usbmon();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(usbmondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_usbperf_func(LPCSTR param) noexcept {
        if (!usbperfdll) {
            load_usbperf();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(usbperfdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_UsbPmApi_func(LPCSTR param) noexcept {
        if (!UsbPmApidll) {
            load_UsbPmApi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(UsbPmApidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_UsbSettingsHandlers_func(LPCSTR param) noexcept {
        if (!UsbSettingsHandlersdll) {
            load_UsbSettingsHandlers();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(UsbSettingsHandlersdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_UsbTask_func(LPCSTR param) noexcept {
        if (!UsbTaskdll) {
            load_UsbTask();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(UsbTaskdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_usbui_func(LPCSTR param) noexcept {
        if (!usbuidll) {
            load_usbui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(usbuidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_user32_func(LPCSTR param) noexcept {
        if (!user32dll) {
            load_user32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(user32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_UserAccountControlSettings_func(LPCSTR param) noexcept {
        if (!UserAccountControlSettingsdll) {
            load_UserAccountControlSettings();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(UserAccountControlSettingsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_useractivitybroker_func(LPCSTR param) noexcept {
        if (!useractivitybrokerdll) {
            load_useractivitybroker();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(useractivitybrokerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_usercpl_func(LPCSTR param) noexcept {
        if (!usercpldll) {
            load_usercpl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(usercpldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_UserDataAccessRes_func(LPCSTR param) noexcept {
        if (!UserDataAccessResdll) {
            load_UserDataAccessRes();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(UserDataAccessResdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_UserDataAccountApis_func(LPCSTR param) noexcept {
        if (!UserDataAccountApisdll) {
            load_UserDataAccountApis();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(UserDataAccountApisdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_UserDataLanguageUtil_func(LPCSTR param) noexcept {
        if (!UserDataLanguageUtildll) {
            load_UserDataLanguageUtil();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(UserDataLanguageUtildll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_UserDataPlatformHelperUtil_func(LPCSTR param) noexcept {
        if (!UserDataPlatformHelperUtildll) {
            load_UserDataPlatformHelperUtil();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(UserDataPlatformHelperUtildll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_UserDataService_func(LPCSTR param) noexcept {
        if (!UserDataServicedll) {
            load_UserDataService();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(UserDataServicedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_UserDataTimeUtil_func(LPCSTR param) noexcept {
        if (!UserDataTimeUtildll) {
            load_UserDataTimeUtil();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(UserDataTimeUtildll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_UserDataTypeHelperUtil_func(LPCSTR param) noexcept {
        if (!UserDataTypeHelperUtildll) {
            load_UserDataTypeHelperUtil();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(UserDataTypeHelperUtildll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_UserDeviceRegistration_func(LPCSTR param) noexcept {
        if (!UserDeviceRegistrationdll) {
            load_UserDeviceRegistration();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(UserDeviceRegistrationdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_UserDeviceRegistrationNgc_func(LPCSTR param) noexcept {
        if (!UserDeviceRegistrationNgcdll) {
            load_UserDeviceRegistrationNgc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(UserDeviceRegistrationNgcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_userenv_func(LPCSTR param) noexcept {
        if (!userenvdll) {
            load_userenv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(userenvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_userinitext_func(LPCSTR param) noexcept {
        if (!userinitextdll) {
            load_userinitext();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(userinitextdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_UserLanguageProfileCallback_func(LPCSTR param) noexcept {
        if (!UserLanguageProfileCallbackdll) {
            load_UserLanguageProfileCallback();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(UserLanguageProfileCallbackdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_usermgr_func(LPCSTR param) noexcept {
        if (!usermgrdll) {
            load_usermgr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(usermgrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_usermgrcli_func(LPCSTR param) noexcept {
        if (!usermgrclidll) {
            load_usermgrcli();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(usermgrclidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_UserMgrProxy_func(LPCSTR param) noexcept {
        if (!UserMgrProxydll) {
            load_UserMgrProxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(UserMgrProxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_usoapi_func(LPCSTR param) noexcept {
        if (!usoapidll) {
            load_usoapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(usoapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_usocoreps_func(LPCSTR param) noexcept {
        if (!usocorepsdll) {
            load_usocoreps();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(usocorepsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_usodocked_func(LPCSTR param) noexcept {
        if (!usodockeddll) {
            load_usodocked();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(usodockeddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_usosvc_func(LPCSTR param) noexcept {
        if (!usosvcdll) {
            load_usosvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(usosvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_usosvcimpl_func(LPCSTR param) noexcept {
        if (!usosvcimpldll) {
            load_usosvcimpl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(usosvcimpldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_usp10_func(LPCSTR param) noexcept {
        if (!usp10dll) {
            load_usp10();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(usp10dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ustprov_func(LPCSTR param) noexcept {
        if (!ustprovdll) {
            load_ustprov();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ustprovdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_utcapi_func(LPCSTR param) noexcept {
        if (!utcapidll) {
            load_utcapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(utcapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_utcutil_func(LPCSTR param) noexcept {
        if (!utcutildll) {
            load_utcutil();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(utcutildll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_utildll_func(LPCSTR param) noexcept {
        if (!utildlldll) {
            load_utildll();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(utildlldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_uudf_func(LPCSTR param) noexcept {
        if (!uudfdll) {
            load_uudf();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(uudfdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_UvcModel_func(LPCSTR param) noexcept {
        if (!UvcModeldll) {
            load_UvcModel();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(UvcModeldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_uwfcfgmgmt_func(LPCSTR param) noexcept {
        if (!uwfcfgmgmtdll) {
            load_uwfcfgmgmt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(uwfcfgmgmtdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_uwfcsp_func(LPCSTR param) noexcept {
        if (!uwfcspdll) {
            load_uwfcsp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(uwfcspdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_uwfservicingapi_func(LPCSTR param) noexcept {
        if (!uwfservicingapidll) {
            load_uwfservicingapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(uwfservicingapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_UXInit_func(LPCSTR param) noexcept {
        if (!UXInitdll) {
            load_UXInit();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(UXInitdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_uxlib_func(LPCSTR param) noexcept {
        if (!uxlibdll) {
            load_uxlib();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(uxlibdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_uxlibres_func(LPCSTR param) noexcept {
        if (!uxlibresdll) {
            load_uxlibres();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(uxlibresdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_uxtheme_func(LPCSTR param) noexcept {
        if (!uxthemedll) {
            load_uxtheme();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(uxthemedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vac_func(LPCSTR param) noexcept {
        if (!vacdll) {
            load_vac();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vacdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_VAN_func(LPCSTR param) noexcept {
        if (!VANdll) {
            load_VAN();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(VANdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_Vault_func(LPCSTR param) noexcept {
        if (!Vaultdll) {
            load_Vault();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(Vaultdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_VaultCDS_func(LPCSTR param) noexcept {
        if (!VaultCDSdll) {
            load_VaultCDS();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(VaultCDSdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vaultcli_func(LPCSTR param) noexcept {
        if (!vaultclidll) {
            load_vaultcli();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vaultclidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_VaultRoaming_func(LPCSTR param) noexcept {
        if (!VaultRoamingdll) {
            load_VaultRoaming();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(VaultRoamingdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vaultsvc_func(LPCSTR param) noexcept {
        if (!vaultsvcdll) {
            load_vaultsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vaultsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vbsapi_func(LPCSTR param) noexcept {
        if (!vbsapidll) {
            load_vbsapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vbsapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vbscript_func(LPCSTR param) noexcept {
        if (!vbscriptdll) {
            load_vbscript();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vbscriptdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vbssysprep_func(LPCSTR param) noexcept {
        if (!vbssysprepdll) {
            load_vbssysprep();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vbssysprepdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vcamp110_func(LPCSTR param) noexcept {
        if (!vcamp110dll) {
            load_vcamp110();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vcamp110dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vcamp120_func(LPCSTR param) noexcept {
        if (!vcamp120dll) {
            load_vcamp120();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vcamp120dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vcamp140_func(LPCSTR param) noexcept {
        if (!vcamp140dll) {
            load_vcamp140();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vcamp140dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vcamp140d_func(LPCSTR param) noexcept {
        if (!vcamp140ddll) {
            load_vcamp140d();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vcamp140ddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_VCardParser_func(LPCSTR param) noexcept {
        if (!VCardParserdll) {
            load_VCardParser();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(VCardParserdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vccorlib110_func(LPCSTR param) noexcept {
        if (!vccorlib110dll) {
            load_vccorlib110();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vccorlib110dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vccorlib120_func(LPCSTR param) noexcept {
        if (!vccorlib120dll) {
            load_vccorlib120();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vccorlib120dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vccorlib140_func(LPCSTR param) noexcept {
        if (!vccorlib140dll) {
            load_vccorlib140();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vccorlib140dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vccorlib140d_func(LPCSTR param) noexcept {
        if (!vccorlib140ddll) {
            load_vccorlib140d();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vccorlib140ddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vcomp100_func(LPCSTR param) noexcept {
        if (!vcomp100dll) {
            load_vcomp100();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vcomp100dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vcomp110_func(LPCSTR param) noexcept {
        if (!vcomp110dll) {
            load_vcomp110();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vcomp110dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vcomp120_func(LPCSTR param) noexcept {
        if (!vcomp120dll) {
            load_vcomp120();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vcomp120dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vcomp140_func(LPCSTR param) noexcept {
        if (!vcomp140dll) {
            load_vcomp140();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vcomp140dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vcomp140d_func(LPCSTR param) noexcept {
        if (!vcomp140ddll) {
            load_vcomp140d();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vcomp140ddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vcruntime140_func(LPCSTR param) noexcept {
        if (!vcruntime140dll) {
            load_vcruntime140();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vcruntime140dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vcruntime140d_func(LPCSTR param) noexcept {
        if (!vcruntime140ddll) {
            load_vcruntime140d();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vcruntime140ddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vcruntime140_1_func(LPCSTR param) noexcept {
        if (!vcruntime140_1dll) {
            load_vcruntime140_1();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vcruntime140_1dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vcruntime140_1d_func(LPCSTR param) noexcept {
        if (!vcruntime140_1ddll) {
            load_vcruntime140_1d();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vcruntime140_1ddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vcruntime140_1_clr0400_func(LPCSTR param) noexcept {
        if (!vcruntime140_1_clr0400dll) {
            load_vcruntime140_1_clr0400();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vcruntime140_1_clr0400dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vcruntime140_clr0400_func(LPCSTR param) noexcept {
        if (!vcruntime140_clr0400dll) {
            load_vcruntime140_clr0400();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vcruntime140_clr0400dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vcruntime140_threads_func(LPCSTR param) noexcept {
        if (!vcruntime140_threadsdll) {
            load_vcruntime140_threads();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vcruntime140_threadsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vcruntime140_threadsd_func(LPCSTR param) noexcept {
        if (!vcruntime140_threadsddll) {
            load_vcruntime140_threadsd();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vcruntime140_threadsddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vdsbas_func(LPCSTR param) noexcept {
        if (!vdsbasdll) {
            load_vdsbas();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vdsbasdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vdsdyn_func(LPCSTR param) noexcept {
        if (!vdsdyndll) {
            load_vdsdyn();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vdsdyndll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vdsutil_func(LPCSTR param) noexcept {
        if (!vdsutildll) {
            load_vdsutil();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vdsutildll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vdsvd_func(LPCSTR param) noexcept {
        if (!vdsvddll) {
            load_vdsvd();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vdsvddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vds_ps_func(LPCSTR param) noexcept {
        if (!vds_psdll) {
            load_vds_ps();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vds_psdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_verifier_func(LPCSTR param) noexcept {
        if (!verifierdll) {
            load_verifier();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(verifierdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_version_func(LPCSTR param) noexcept {
        if (!versiondll) {
            load_version();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(versiondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vertdll_func(LPCSTR param) noexcept {
        if (!vertdlldll) {
            load_vertdll();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vertdlldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vfbasics_func(LPCSTR param) noexcept {
        if (!vfbasicsdll) {
            load_vfbasics();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vfbasicsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vfcompat_func(LPCSTR param) noexcept {
        if (!vfcompatdll) {
            load_vfcompat();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vfcompatdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vfcuzz_func(LPCSTR param) noexcept {
        if (!vfcuzzdll) {
            load_vfcuzz();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vfcuzzdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vfluapriv_func(LPCSTR param) noexcept {
        if (!vfluaprivdll) {
            load_vfluapriv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vfluaprivdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vfnet_func(LPCSTR param) noexcept {
        if (!vfnetdll) {
            load_vfnet();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vfnetdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vfntlmless_func(LPCSTR param) noexcept {
        if (!vfntlmlessdll) {
            load_vfntlmless();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vfntlmlessdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vfnws_func(LPCSTR param) noexcept {
        if (!vfnwsdll) {
            load_vfnws();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vfnwsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vfpapi_func(LPCSTR param) noexcept {
        if (!vfpapidll) {
            load_vfpapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vfpapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vfprint_func(LPCSTR param) noexcept {
        if (!vfprintdll) {
            load_vfprint();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vfprintdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vfprintpthelper_func(LPCSTR param) noexcept {
        if (!vfprintpthelperdll) {
            load_vfprintpthelper();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vfprintpthelperdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vfrdvcompat_func(LPCSTR param) noexcept {
        if (!vfrdvcompatdll) {
            load_vfrdvcompat();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vfrdvcompatdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vfuprov_func(LPCSTR param) noexcept {
        if (!vfuprovdll) {
            load_vfuprov();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vfuprovdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vfwwdm32_func(LPCSTR param) noexcept {
        if (!vfwwdm32dll) {
            load_vfwwdm32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vfwwdm32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_VhfUm_func(LPCSTR param) noexcept {
        if (!VhfUmdll) {
            load_VhfUm();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(VhfUmdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vid_func(LPCSTR param) noexcept {
        if (!viddll) {
            load_vid();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(viddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_VideoHandlers_func(LPCSTR param) noexcept {
        if (!VideoHandlersdll) {
            load_VideoHandlers();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(VideoHandlersdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_virtdisk_func(LPCSTR param) noexcept {
        if (!virtdiskdll) {
            load_virtdisk();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(virtdiskdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_VirtualMonitorManager_func(LPCSTR param) noexcept {
        if (!VirtualMonitorManagerdll) {
            load_VirtualMonitorManager();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(VirtualMonitorManagerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_VirtualSurroundApo_func(LPCSTR param) noexcept {
        if (!VirtualSurroundApodll) {
            load_VirtualSurroundApo();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(VirtualSurroundApodll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_VmApplicationHealthMonitorProxy_func(LPCSTR param) noexcept {
        if (!VmApplicationHealthMonitorProxydll) {
            load_VmApplicationHealthMonitorProxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(VmApplicationHealthMonitorProxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vmbuspipe_func(LPCSTR param) noexcept {
        if (!vmbuspipedll) {
            load_vmbuspipe();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vmbuspipedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vmbuspiper_func(LPCSTR param) noexcept {
        if (!vmbuspiperdll) {
            load_vmbuspiper();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vmbuspiperdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vmbusvdev_func(LPCSTR param) noexcept {
        if (!vmbusvdevdll) {
            load_vmbusvdev();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vmbusvdevdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vmchipset_func(LPCSTR param) noexcept {
        if (!vmchipsetdll) {
            load_vmchipset();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vmchipsetdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vmcompute_func(LPCSTR param) noexcept {
        if (!vmcomputedll) {
            load_vmcompute();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vmcomputedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vmcomputeeventlog_func(LPCSTR param) noexcept {
        if (!vmcomputeeventlogdll) {
            load_vmcomputeeventlog();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vmcomputeeventlogdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_VmCrashDump_func(LPCSTR param) noexcept {
        if (!VmCrashDumpdll) {
            load_VmCrashDump();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(VmCrashDumpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_VmDataStore_func(LPCSTR param) noexcept {
        if (!VmDataStoredll) {
            load_VmDataStore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(VmDataStoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vmdebug_func(LPCSTR param) noexcept {
        if (!vmdebugdll) {
            load_vmdebug();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vmdebugdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vmdevicehost_func(LPCSTR param) noexcept {
        if (!vmdevicehostdll) {
            load_vmdevicehost();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vmdevicehostdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vmdynmem_func(LPCSTR param) noexcept {
        if (!vmdynmemdll) {
            load_vmdynmem();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vmdynmemdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vmemulateddevices_func(LPCSTR param) noexcept {
        if (!vmemulateddevicesdll) {
            load_vmemulateddevices();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vmemulateddevicesdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_VmEmulatedNic_func(LPCSTR param) noexcept {
        if (!VmEmulatedNicdll) {
            load_VmEmulatedNic();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(VmEmulatedNicdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_VmEmulatedStorage_func(LPCSTR param) noexcept {
        if (!VmEmulatedStoragedll) {
            load_VmEmulatedStorage();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(VmEmulatedStoragedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vmfirmware_func(LPCSTR param) noexcept {
        if (!vmfirmwaredll) {
            load_vmfirmware();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vmfirmwaredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vmfirmwarehcl_func(LPCSTR param) noexcept {
        if (!vmfirmwarehcldll) {
            load_vmfirmwarehcl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vmfirmwarehcldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vmfirmwarepcat_func(LPCSTR param) noexcept {
        if (!vmfirmwarepcatdll) {
            load_vmfirmwarepcat();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vmfirmwarepcatdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vmflexio_func(LPCSTR param) noexcept {
        if (!vmflexiodll) {
            load_vmflexio();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vmflexiodll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vmhbmgmt_func(LPCSTR param) noexcept {
        if (!vmhbmgmtdll) {
            load_vmhbmgmt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vmhbmgmtdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vmhgs_func(LPCSTR param) noexcept {
        if (!vmhgsdll) {
            load_vmhgs();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vmhgsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vmiccore_func(LPCSTR param) noexcept {
        if (!vmiccoredll) {
            load_vmiccore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vmiccoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vmicrdv_func(LPCSTR param) noexcept {
        if (!vmicrdvdll) {
            load_vmicrdv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vmicrdvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vmictimeprovider_func(LPCSTR param) noexcept {
        if (!vmictimeproviderdll) {
            load_vmictimeprovider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vmictimeproviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vmicvdev_func(LPCSTR param) noexcept {
        if (!vmicvdevdll) {
            load_vmicvdev();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vmicvdevdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vmmsprox_func(LPCSTR param) noexcept {
        if (!vmmsproxdll) {
            load_vmmsprox();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vmmsproxdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vmpmem_func(LPCSTR param) noexcept {
        if (!vmpmemdll) {
            load_vmpmem();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vmpmemdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vmprox_func(LPCSTR param) noexcept {
        if (!vmproxdll) {
            load_vmprox();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vmproxdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vmrdvcore_func(LPCSTR param) noexcept {
        if (!vmrdvcoredll) {
            load_vmrdvcore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vmrdvcoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vmserial_func(LPCSTR param) noexcept {
        if (!vmserialdll) {
            load_vmserial();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vmserialdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vmsif_func(LPCSTR param) noexcept {
        if (!vmsifdll) {
            load_vmsif();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vmsifdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vmsifcore_func(LPCSTR param) noexcept {
        if (!vmsifcoredll) {
            load_vmsifcore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vmsifcoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vmsifproxystub_func(LPCSTR param) noexcept {
        if (!vmsifproxystubdll) {
            load_vmsifproxystub();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vmsifproxystubdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vmsmb_func(LPCSTR param) noexcept {
        if (!vmsmbdll) {
            load_vmsmb();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vmsmbdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vmstaging_func(LPCSTR param) noexcept {
        if (!vmstagingdll) {
            load_vmstaging();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vmstagingdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vmsynthfcvdev_func(LPCSTR param) noexcept {
        if (!vmsynthfcvdevdll) {
            load_vmsynthfcvdev();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vmsynthfcvdevdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_VmSynthNic_func(LPCSTR param) noexcept {
        if (!VmSynthNicdll) {
            load_VmSynthNic();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(VmSynthNicdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vmsynthstor_func(LPCSTR param) noexcept {
        if (!vmsynthstordll) {
            load_vmsynthstor();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vmsynthstordll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vmtpm_func(LPCSTR param) noexcept {
        if (!vmtpmdll) {
            load_vmtpm();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vmtpmdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vmuidevices_func(LPCSTR param) noexcept {
        if (!vmuidevicesdll) {
            load_vmuidevices();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vmuidevicesdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vmusrv_func(LPCSTR param) noexcept {
        if (!vmusrvdll) {
            load_vmusrv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vmusrvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vmvirtio_func(LPCSTR param) noexcept {
        if (!vmvirtiodll) {
            load_vmvirtio();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vmvirtiodll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vmvpci_func(LPCSTR param) noexcept {
        if (!vmvpcidll) {
            load_vmvpci();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vmvpcidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vmwpctrl_func(LPCSTR param) noexcept {
        if (!vmwpctrldll) {
            load_vmwpctrl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vmwpctrldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vmwpevents_func(LPCSTR param) noexcept {
        if (!vmwpeventsdll) {
            load_vmwpevents();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vmwpeventsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_VocabRoamingHandler_func(LPCSTR param) noexcept {
        if (!VocabRoamingHandlerdll) {
            load_VocabRoamingHandler();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(VocabRoamingHandlerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_VoiceActivationManager_func(LPCSTR param) noexcept {
        if (!VoiceActivationManagerdll) {
            load_VoiceActivationManager();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(VoiceActivationManagerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_VoipRT_func(LPCSTR param) noexcept {
        if (!VoipRTdll) {
            load_VoipRT();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(VoipRTdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vp9fs_func(LPCSTR param) noexcept {
        if (!vp9fsdll) {
            load_vp9fs();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vp9fsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vpcievdev_func(LPCSTR param) noexcept {
        if (!vpcievdevdll) {
            load_vpcievdev();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vpcievdevdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vpnike_func(LPCSTR param) noexcept {
        if (!vpnikedll) {
            load_vpnike();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vpnikedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vpnikeapi_func(LPCSTR param) noexcept {
        if (!vpnikeapidll) {
            load_vpnikeapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vpnikeapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_VpnSohDesktop_func(LPCSTR param) noexcept {
        if (!VpnSohDesktopdll) {
            load_VpnSohDesktop();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(VpnSohDesktopdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_VPNv2CSP_func(LPCSTR param) noexcept {
        if (!VPNv2CSPdll) {
            load_VPNv2CSP();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(VPNv2CSPdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_VrdUmed_func(LPCSTR param) noexcept {
        if (!VrdUmeddll) {
            load_VrdUmed();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(VrdUmeddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vrfcore_func(LPCSTR param) noexcept {
        if (!vrfcoredll) {
            load_vrfcore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vrfcoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_VscMgrPS_func(LPCSTR param) noexcept {
        if (!VscMgrPSdll) {
            load_VscMgrPS();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(VscMgrPSdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vsconfig_func(LPCSTR param) noexcept {
        if (!vsconfigdll) {
            load_vsconfig();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vsconfigdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vscover170_func(LPCSTR param) noexcept {
        if (!vscover170dll) {
            load_vscover170();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vscover170dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_VSD3DWARPDebug_func(LPCSTR param) noexcept {
        if (!VSD3DWARPDebugdll) {
            load_VSD3DWARPDebug();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(VSD3DWARPDebugdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_VsGraphicsCapture_func(LPCSTR param) noexcept {
        if (!VsGraphicsCapturedll) {
            load_VsGraphicsCapture();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(VsGraphicsCapturedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_VsGraphicsExperiment_func(LPCSTR param) noexcept {
        if (!VsGraphicsExperimentdll) {
            load_VsGraphicsExperiment();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(VsGraphicsExperimentdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_VsGraphicsHelper_func(LPCSTR param) noexcept {
        if (!VsGraphicsHelperdll) {
            load_VsGraphicsHelper();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(VsGraphicsHelperdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_VsGraphicsProxyStub_func(LPCSTR param) noexcept {
        if (!VsGraphicsProxyStubdll) {
            load_VsGraphicsProxyStub();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(VsGraphicsProxyStubdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_VSPerf170_func(LPCSTR param) noexcept {
        if (!VSPerf170dll) {
            load_VSPerf170();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(VSPerf170dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vssapi_func(LPCSTR param) noexcept {
        if (!vssapidll) {
            load_vssapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vssapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vsstrace_func(LPCSTR param) noexcept {
        if (!vsstracedll) {
            load_vsstrace();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vsstracedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vss_ps_func(LPCSTR param) noexcept {
        if (!vss_psdll) {
            load_vss_ps();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vss_psdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vulkan_1_999_0_0_0_func(LPCSTR param) noexcept {
        if (!vulkan_1_999_0_0_0dll) {
            load_vulkan_1_999_0_0_0();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vulkan_1_999_0_0_0dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_vulkan_1_func(LPCSTR param) noexcept {
        if (!vulkan_1dll) {
            load_vulkan_1();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(vulkan_1dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_w32time_func(LPCSTR param) noexcept {
        if (!w32timedll) {
            load_w32time();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(w32timedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_w32topl_func(LPCSTR param) noexcept {
        if (!w32topldll) {
            load_w32topl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(w32topldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WaaSAssessment_func(LPCSTR param) noexcept {
        if (!WaaSAssessmentdll) {
            load_WaaSAssessment();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WaaSAssessmentdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WaaSMedicPS_func(LPCSTR param) noexcept {
        if (!WaaSMedicPSdll) {
            load_WaaSMedicPS();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WaaSMedicPSdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WaaSMedicSvc_func(LPCSTR param) noexcept {
        if (!WaaSMedicSvcdll) {
            load_WaaSMedicSvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WaaSMedicSvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WABSyncProvider_func(LPCSTR param) noexcept {
        if (!WABSyncProviderdll) {
            load_WABSyncProvider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WABSyncProviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WalletBackgroundServiceProxy_func(LPCSTR param) noexcept {
        if (!WalletBackgroundServiceProxydll) {
            load_WalletBackgroundServiceProxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WalletBackgroundServiceProxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WalletProxy_func(LPCSTR param) noexcept {
        if (!WalletProxydll) {
            load_WalletProxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WalletProxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WalletService_func(LPCSTR param) noexcept {
        if (!WalletServicedll) {
            load_WalletService();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WalletServicedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wamregps_func(LPCSTR param) noexcept {
        if (!wamregpsdll) {
            load_wamregps();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wamregpsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wavemsp_func(LPCSTR param) noexcept {
        if (!wavemspdll) {
            load_wavemsp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wavemspdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wbemcomn_func(LPCSTR param) noexcept {
        if (!wbemcomndll) {
            load_wbemcomn();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wbemcomndll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wbiosrvc_func(LPCSTR param) noexcept {
        if (!wbiosrvcdll) {
            load_wbiosrvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wbiosrvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wci_func(LPCSTR param) noexcept {
        if (!wcidll) {
            load_wci();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wcidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wcimage_func(LPCSTR param) noexcept {
        if (!wcimagedll) {
            load_wcimage();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wcimagedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wcmapi_func(LPCSTR param) noexcept {
        if (!wcmapidll) {
            load_wcmapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wcmapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wcmcsp_func(LPCSTR param) noexcept {
        if (!wcmcspdll) {
            load_wcmcsp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wcmcspdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wcmsvc_func(LPCSTR param) noexcept {
        if (!wcmsvcdll) {
            load_wcmsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wcmsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WcnApi_func(LPCSTR param) noexcept {
        if (!WcnApidll) {
            load_WcnApi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WcnApidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wcncsvc_func(LPCSTR param) noexcept {
        if (!wcncsvcdll) {
            load_wcncsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wcncsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WcnEapAuthProxy_func(LPCSTR param) noexcept {
        if (!WcnEapAuthProxydll) {
            load_WcnEapAuthProxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WcnEapAuthProxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WcnEapPeerProxy_func(LPCSTR param) noexcept {
        if (!WcnEapPeerProxydll) {
            load_WcnEapPeerProxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WcnEapPeerProxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WcnNetsh_func(LPCSTR param) noexcept {
        if (!WcnNetshdll) {
            load_WcnNetsh();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WcnNetshdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wcnwiz_func(LPCSTR param) noexcept {
        if (!wcnwizdll) {
            load_wcnwiz();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wcnwizdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wc_storage_func(LPCSTR param) noexcept {
        if (!wc_storagedll) {
            load_wc_storage();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wc_storagedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wdc_func(LPCSTR param) noexcept {
        if (!wdcdll) {
            load_wdc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wdcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wdi_func(LPCSTR param) noexcept {
        if (!wdidll) {
            load_wdi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wdidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wdigest_func(LPCSTR param) noexcept {
        if (!wdigestdll) {
            load_wdigest();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wdigestdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wdp_func(LPCSTR param) noexcept {
        if (!wdpdll) {
            load_wdp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wdpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wdscore_func(LPCSTR param) noexcept {
        if (!wdscoredll) {
            load_wdscore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wdscoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_webauthn_func(LPCSTR param) noexcept {
        if (!webauthndll) {
            load_webauthn();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(webauthndll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WebcamUi_func(LPCSTR param) noexcept {
        if (!WebcamUidll) {
            load_WebcamUi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WebcamUidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_webcheck_func(LPCSTR param) noexcept {
        if (!webcheckdll) {
            load_webcheck();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(webcheckdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WebClnt_func(LPCSTR param) noexcept {
        if (!WebClntdll) {
            load_WebClnt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WebClntdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_webio_func(LPCSTR param) noexcept {
        if (!webiodll) {
            load_webio();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(webiodll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WebManagementUser_func(LPCSTR param) noexcept {
        if (!WebManagementUserdll) {
            load_WebManagementUser();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WebManagementUserdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_webplatstorageserver_func(LPCSTR param) noexcept {
        if (!webplatstorageserverdll) {
            load_webplatstorageserver();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(webplatstorageserverdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WebRuntimeManager_func(LPCSTR param) noexcept {
        if (!WebRuntimeManagerdll) {
            load_WebRuntimeManager();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WebRuntimeManagerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_webservices_func(LPCSTR param) noexcept {
        if (!webservicesdll) {
            load_webservices();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(webservicesdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_Websocket_func(LPCSTR param) noexcept {
        if (!Websocketdll) {
            load_Websocket();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(Websocketdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_webthreatdefsvc_func(LPCSTR param) noexcept {
        if (!webthreatdefsvcdll) {
            load_webthreatdefsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(webthreatdefsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_webthreatdefusersvc_func(LPCSTR param) noexcept {
        if (!webthreatdefusersvcdll) {
            load_webthreatdefusersvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(webthreatdefusersvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wecapi_func(LPCSTR param) noexcept {
        if (!wecapidll) {
            load_wecapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wecapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wecsvc_func(LPCSTR param) noexcept {
        if (!wecsvcdll) {
            load_wecsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wecsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wephostsvc_func(LPCSTR param) noexcept {
        if (!wephostsvcdll) {
            load_wephostsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wephostsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wer_func(LPCSTR param) noexcept {
        if (!werdll) {
            load_wer();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(werdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_werconcpl_func(LPCSTR param) noexcept {
        if (!werconcpldll) {
            load_werconcpl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(werconcpldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wercplsupport_func(LPCSTR param) noexcept {
        if (!wercplsupportdll) {
            load_wercplsupport();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wercplsupportdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_werdiagcontroller_func(LPCSTR param) noexcept {
        if (!werdiagcontrollerdll) {
            load_werdiagcontroller();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(werdiagcontrollerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WerEnc_func(LPCSTR param) noexcept {
        if (!WerEncdll) {
            load_WerEnc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WerEncdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_weretw_func(LPCSTR param) noexcept {
        if (!weretwdll) {
            load_weretw();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(weretwdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wersvc_func(LPCSTR param) noexcept {
        if (!wersvcdll) {
            load_wersvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wersvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_werui_func(LPCSTR param) noexcept {
        if (!weruidll) {
            load_werui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(weruidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wevtapi_func(LPCSTR param) noexcept {
        if (!wevtapidll) {
            load_wevtapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wevtapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wevtfwd_func(LPCSTR param) noexcept {
        if (!wevtfwddll) {
            load_wevtfwd();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wevtfwddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wevtsvc_func(LPCSTR param) noexcept {
        if (!wevtsvcdll) {
            load_wevtsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wevtsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wfapigp_func(LPCSTR param) noexcept {
        if (!wfapigpdll) {
            load_wfapigp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wfapigpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wfdprov_func(LPCSTR param) noexcept {
        if (!wfdprovdll) {
            load_wfdprov();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wfdprovdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WFDSConMgr_func(LPCSTR param) noexcept {
        if (!WFDSConMgrdll) {
            load_WFDSConMgr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WFDSConMgrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WFDSConMgrSvc_func(LPCSTR param) noexcept {
        if (!WFDSConMgrSvcdll) {
            load_WFDSConMgrSvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WFDSConMgrSvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WfHC_func(LPCSTR param) noexcept {
        if (!WfHCdll) {
            load_WfHC();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WfHCdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_whealogr_func(LPCSTR param) noexcept {
        if (!whealogrdll) {
            load_whealogr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(whealogrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_whhelper_func(LPCSTR param) noexcept {
        if (!whhelperdll) {
            load_whhelper();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(whhelperdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wiaaut_func(LPCSTR param) noexcept {
        if (!wiaautdll) {
            load_wiaaut();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wiaautdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wiadefui_func(LPCSTR param) noexcept {
        if (!wiadefuidll) {
            load_wiadefui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wiadefuidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wiadss_func(LPCSTR param) noexcept {
        if (!wiadssdll) {
            load_wiadss();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wiadssdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WiaExtensionHost64_func(LPCSTR param) noexcept {
        if (!WiaExtensionHost64dll) {
            load_WiaExtensionHost64();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WiaExtensionHost64dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wiarpc_func(LPCSTR param) noexcept {
        if (!wiarpcdll) {
            load_wiarpc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wiarpcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wiascanprofiles_func(LPCSTR param) noexcept {
        if (!wiascanprofilesdll) {
            load_wiascanprofiles();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wiascanprofilesdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wiaservc_func(LPCSTR param) noexcept {
        if (!wiaservcdll) {
            load_wiaservc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wiaservcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wiashext_func(LPCSTR param) noexcept {
        if (!wiashextdll) {
            load_wiashext();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wiashextdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wiatrace_func(LPCSTR param) noexcept {
        if (!wiatracedll) {
            load_wiatrace();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wiatracedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WiFiCloudStore_func(LPCSTR param) noexcept {
        if (!WiFiCloudStoredll) {
            load_WiFiCloudStore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WiFiCloudStoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WiFiConfigSP_func(LPCSTR param) noexcept {
        if (!WiFiConfigSPdll) {
            load_WiFiConfigSP();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WiFiConfigSPdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wifidatacapabilityhandler_func(LPCSTR param) noexcept {
        if (!wifidatacapabilityhandlerdll) {
            load_wifidatacapabilityhandler();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wifidatacapabilityhandlerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WiFiDisplay_func(LPCSTR param) noexcept {
        if (!WiFiDisplaydll) {
            load_WiFiDisplay();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WiFiDisplaydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wifinetworkmanager_func(LPCSTR param) noexcept {
        if (!wifinetworkmanagerdll) {
            load_wifinetworkmanager();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wifinetworkmanagerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wimgapi_func(LPCSTR param) noexcept {
        if (!wimgapidll) {
            load_wimgapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wimgapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_win32appinventorycsp_func(LPCSTR param) noexcept {
        if (!win32appinventorycspdll) {
            load_win32appinventorycsp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(win32appinventorycspdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_Win32CompatibilityAppraiserCSP_func(LPCSTR param) noexcept {
        if (!Win32CompatibilityAppraiserCSPdll) {
            load_Win32CompatibilityAppraiserCSP();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(Win32CompatibilityAppraiserCSPdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_win32spl_func(LPCSTR param) noexcept {
        if (!win32spldll) {
            load_win32spl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(win32spldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_win32u_func(LPCSTR param) noexcept {
        if (!win32udll) {
            load_win32u();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(win32udll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_Win32_DeviceGuard_func(LPCSTR param) noexcept {
        if (!Win32_DeviceGuarddll) {
            load_Win32_DeviceGuard();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(Win32_DeviceGuarddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_winbio_func(LPCSTR param) noexcept {
        if (!winbiodll) {
            load_winbio();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(winbiodll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WinBioDataModel_func(LPCSTR param) noexcept {
        if (!WinBioDataModeldll) {
            load_WinBioDataModel();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WinBioDataModeldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_winbioext_func(LPCSTR param) noexcept {
        if (!winbioextdll) {
            load_winbioext();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(winbioextdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_winbrand_func(LPCSTR param) noexcept {
        if (!winbranddll) {
            load_winbrand();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(winbranddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wincorlib_func(LPCSTR param) noexcept {
        if (!wincorlibdll) {
            load_wincorlib();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wincorlibdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wincredprovider_func(LPCSTR param) noexcept {
        if (!wincredproviderdll) {
            load_wincredprovider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wincredproviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wincredui_func(LPCSTR param) noexcept {
        if (!wincreduidll) {
            load_wincredui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wincreduidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_windlp_func(LPCSTR param) noexcept {
        if (!windlpdll) {
            load_windlp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(windlpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowManagement_func(LPCSTR param) noexcept {
        if (!WindowManagementdll) {
            load_WindowManagement();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowManagementdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowManagementAPI_func(LPCSTR param) noexcept {
        if (!WindowManagementAPIdll) {
            load_WindowManagementAPI();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowManagementAPIdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsAccountsControl_func(LPCSTR param) noexcept {
        if (!WindowsAccountsControldll) {
            load_WindowsAccountsControl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsAccountsControldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsAIMachineLearning_func(LPCSTR param) noexcept {
        if (!WindowsAIMachineLearningdll) {
            load_WindowsAIMachineLearning();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsAIMachineLearningdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsAIMachineLearningPreview_func(LPCSTR param) noexcept {
        if (!WindowsAIMachineLearningPreviewdll) {
            load_WindowsAIMachineLearningPreview();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsAIMachineLearningPreviewdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsApplicationModelBackgroundSystemEventsBroker_func(LPCSTR param) noexcept {
        if (!WindowsApplicationModelBackgroundSystemEventsBrokerdll) {
            load_WindowsApplicationModelBackgroundSystemEventsBroker();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsApplicationModelBackgroundSystemEventsBrokerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsApplicationModelBackgroundTimeBroker_func(LPCSTR param) noexcept {
        if (!WindowsApplicationModelBackgroundTimeBrokerdll) {
            load_WindowsApplicationModelBackgroundTimeBroker();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsApplicationModelBackgroundTimeBrokerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsApplicationModelConversationalAgent_func(LPCSTR param) noexcept {
        if (!WindowsApplicationModelConversationalAgentdll) {
            load_WindowsApplicationModelConversationalAgent();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsApplicationModelConversationalAgentdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_windowsapplicationmodelconversationalagentinternalproxystub_func(LPCSTR param) noexcept {
        if (!windowsapplicationmodelconversationalagentinternalproxystubdll) {
            load_windowsapplicationmodelconversationalagentinternalproxystub();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(windowsapplicationmodelconversationalagentinternalproxystubdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_windowsapplicationmodelconversationalagentproxystub_func(LPCSTR param) noexcept {
        if (!windowsapplicationmodelconversationalagentproxystubdll) {
            load_windowsapplicationmodelconversationalagentproxystub();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(windowsapplicationmodelconversationalagentproxystubdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsApplicationModelCore_func(LPCSTR param) noexcept {
        if (!WindowsApplicationModelCoredll) {
            load_WindowsApplicationModelCore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsApplicationModelCoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_windowsapplicationmodeldatatransfer_func(LPCSTR param) noexcept {
        if (!windowsapplicationmodeldatatransferdll) {
            load_windowsapplicationmodeldatatransfer();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(windowsapplicationmodeldatatransferdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsApplicationModel_func(LPCSTR param) noexcept {
        if (!WindowsApplicationModeldll) {
            load_WindowsApplicationModel();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsApplicationModeldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsApplicationModelLockScreen_func(LPCSTR param) noexcept {
        if (!WindowsApplicationModelLockScreendll) {
            load_WindowsApplicationModelLockScreen();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsApplicationModelLockScreendll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsApplicationModelStore_func(LPCSTR param) noexcept {
        if (!WindowsApplicationModelStoredll) {
            load_WindowsApplicationModelStore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsApplicationModelStoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsApplicationModelStorePreviewDOSettings_func(LPCSTR param) noexcept {
        if (!WindowsApplicationModelStorePreviewDOSettingsdll) {
            load_WindowsApplicationModelStorePreviewDOSettings();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsApplicationModelStorePreviewDOSettingsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsApplicationModelStoreTestingFramework_func(LPCSTR param) noexcept {
        if (!WindowsApplicationModelStoreTestingFrameworkdll) {
            load_WindowsApplicationModelStoreTestingFramework();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsApplicationModelStoreTestingFrameworkdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsApplicationModelWallet_func(LPCSTR param) noexcept {
        if (!WindowsApplicationModelWalletdll) {
            load_WindowsApplicationModelWallet();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsApplicationModelWalletdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsCloudStore_func(LPCSTR param) noexcept {
        if (!WindowsCloudStoredll) {
            load_WindowsCloudStore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsCloudStoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsCloudStoreEarlyDownloader_func(LPCSTR param) noexcept {
        if (!WindowsCloudStoreEarlyDownloaderdll) {
            load_WindowsCloudStoreEarlyDownloader();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsCloudStoreEarlyDownloaderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsCloudStoreSchemaDesktopShell_func(LPCSTR param) noexcept {
        if (!WindowsCloudStoreSchemaDesktopShelldll) {
            load_WindowsCloudStoreSchemaDesktopShell();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsCloudStoreSchemaDesktopShelldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsCloudStoreSchemaShell_func(LPCSTR param) noexcept {
        if (!WindowsCloudStoreSchemaShelldll) {
            load_WindowsCloudStoreSchemaShell();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsCloudStoreSchemaShelldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsCortanaDesktop_func(LPCSTR param) noexcept {
        if (!WindowsCortanaDesktopdll) {
            load_WindowsCortanaDesktop();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsCortanaDesktopdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsCortanaOneCore_func(LPCSTR param) noexcept {
        if (!WindowsCortanaOneCoredll) {
            load_WindowsCortanaOneCore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsCortanaOneCoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsCortanaProxyStub_func(LPCSTR param) noexcept {
        if (!WindowsCortanaProxyStubdll) {
            load_WindowsCortanaProxyStub();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsCortanaProxyStubdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsDataActivities_func(LPCSTR param) noexcept {
        if (!WindowsDataActivitiesdll) {
            load_WindowsDataActivities();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsDataActivitiesdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsDataPdf_func(LPCSTR param) noexcept {
        if (!WindowsDataPdfdll) {
            load_WindowsDataPdf();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsDataPdfdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsDevicesAllJoyn_func(LPCSTR param) noexcept {
        if (!WindowsDevicesAllJoyndll) {
            load_WindowsDevicesAllJoyn();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsDevicesAllJoyndll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsDevicesBackground_func(LPCSTR param) noexcept {
        if (!WindowsDevicesBackgrounddll) {
            load_WindowsDevicesBackground();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsDevicesBackgrounddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsDevicesBackgroundps_func(LPCSTR param) noexcept {
        if (!WindowsDevicesBackgroundpsdll) {
            load_WindowsDevicesBackgroundps();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsDevicesBackgroundpsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsDevicesBluetooth_func(LPCSTR param) noexcept {
        if (!WindowsDevicesBluetoothdll) {
            load_WindowsDevicesBluetooth();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsDevicesBluetoothdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsDevicesCustom_func(LPCSTR param) noexcept {
        if (!WindowsDevicesCustomdll) {
            load_WindowsDevicesCustom();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsDevicesCustomdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsDevicesCustomps_func(LPCSTR param) noexcept {
        if (!WindowsDevicesCustompsdll) {
            load_WindowsDevicesCustomps();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsDevicesCustompsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsDevicesEnumeration_func(LPCSTR param) noexcept {
        if (!WindowsDevicesEnumerationdll) {
            load_WindowsDevicesEnumeration();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsDevicesEnumerationdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsDevicesHaptics_func(LPCSTR param) noexcept {
        if (!WindowsDevicesHapticsdll) {
            load_WindowsDevicesHaptics();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsDevicesHapticsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsDevicesHumanInterfaceDevice_func(LPCSTR param) noexcept {
        if (!WindowsDevicesHumanInterfaceDevicedll) {
            load_WindowsDevicesHumanInterfaceDevice();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsDevicesHumanInterfaceDevicedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsDevicesLights_func(LPCSTR param) noexcept {
        if (!WindowsDevicesLightsdll) {
            load_WindowsDevicesLights();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsDevicesLightsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsDevicesLowLevel_func(LPCSTR param) noexcept {
        if (!WindowsDevicesLowLeveldll) {
            load_WindowsDevicesLowLevel();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsDevicesLowLeveldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsDevicesMidi_func(LPCSTR param) noexcept {
        if (!WindowsDevicesMididll) {
            load_WindowsDevicesMidi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsDevicesMididll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsDevicesPerception_func(LPCSTR param) noexcept {
        if (!WindowsDevicesPerceptiondll) {
            load_WindowsDevicesPerception();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsDevicesPerceptiondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsDevicesPicker_func(LPCSTR param) noexcept {
        if (!WindowsDevicesPickerdll) {
            load_WindowsDevicesPicker();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsDevicesPickerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsDevicesPointOfService_func(LPCSTR param) noexcept {
        if (!WindowsDevicesPointOfServicedll) {
            load_WindowsDevicesPointOfService();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsDevicesPointOfServicedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsDevicesPortable_func(LPCSTR param) noexcept {
        if (!WindowsDevicesPortabledll) {
            load_WindowsDevicesPortable();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsDevicesPortabledll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsDevicesPrinters_func(LPCSTR param) noexcept {
        if (!WindowsDevicesPrintersdll) {
            load_WindowsDevicesPrinters();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsDevicesPrintersdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsDevicesPrintersExtensions_func(LPCSTR param) noexcept {
        if (!WindowsDevicesPrintersExtensionsdll) {
            load_WindowsDevicesPrintersExtensions();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsDevicesPrintersExtensionsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsDevicesRadios_func(LPCSTR param) noexcept {
        if (!WindowsDevicesRadiosdll) {
            load_WindowsDevicesRadios();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsDevicesRadiosdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsDevicesScanners_func(LPCSTR param) noexcept {
        if (!WindowsDevicesScannersdll) {
            load_WindowsDevicesScanners();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsDevicesScannersdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsDevicesSensors_func(LPCSTR param) noexcept {
        if (!WindowsDevicesSensorsdll) {
            load_WindowsDevicesSensors();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsDevicesSensorsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsDevicesSerialCommunication_func(LPCSTR param) noexcept {
        if (!WindowsDevicesSerialCommunicationdll) {
            load_WindowsDevicesSerialCommunication();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsDevicesSerialCommunicationdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsDevicesSmartCards_func(LPCSTR param) noexcept {
        if (!WindowsDevicesSmartCardsdll) {
            load_WindowsDevicesSmartCards();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsDevicesSmartCardsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsDevicesSmartCardsPhone_func(LPCSTR param) noexcept {
        if (!WindowsDevicesSmartCardsPhonedll) {
            load_WindowsDevicesSmartCardsPhone();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsDevicesSmartCardsPhonedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsDevicesUsb_func(LPCSTR param) noexcept {
        if (!WindowsDevicesUsbdll) {
            load_WindowsDevicesUsb();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsDevicesUsbdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsDevicesWiFi_func(LPCSTR param) noexcept {
        if (!WindowsDevicesWiFidll) {
            load_WindowsDevicesWiFi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsDevicesWiFidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsDevicesWiFiDirect_func(LPCSTR param) noexcept {
        if (!WindowsDevicesWiFiDirectdll) {
            load_WindowsDevicesWiFiDirect();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsDevicesWiFiDirectdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsEnergy_func(LPCSTR param) noexcept {
        if (!WindowsEnergydll) {
            load_WindowsEnergy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsEnergydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsFileExplorerCommon_func(LPCSTR param) noexcept {
        if (!WindowsFileExplorerCommondll) {
            load_WindowsFileExplorerCommon();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsFileExplorerCommondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsGamingInput_func(LPCSTR param) noexcept {
        if (!WindowsGamingInputdll) {
            load_WindowsGamingInput();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsGamingInputdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsGamingPreview_func(LPCSTR param) noexcept {
        if (!WindowsGamingPreviewdll) {
            load_WindowsGamingPreview();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsGamingPreviewdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsGamingUIGameBar_func(LPCSTR param) noexcept {
        if (!WindowsGamingUIGameBardll) {
            load_WindowsGamingUIGameBar();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsGamingUIGameBardll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsGamingXboxLiveStorage_func(LPCSTR param) noexcept {
        if (!WindowsGamingXboxLiveStoragedll) {
            load_WindowsGamingXboxLiveStorage();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsGamingXboxLiveStoragedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsGlobalization_func(LPCSTR param) noexcept {
        if (!WindowsGlobalizationdll) {
            load_WindowsGlobalization();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsGlobalizationdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsGlobalizationFontgroups_func(LPCSTR param) noexcept {
        if (!WindowsGlobalizationFontgroupsdll) {
            load_WindowsGlobalizationFontgroups();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsGlobalizationFontgroupsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsGlobalizationPhoneNumberFormatting_func(LPCSTR param) noexcept {
        if (!WindowsGlobalizationPhoneNumberFormattingdll) {
            load_WindowsGlobalizationPhoneNumberFormatting();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsGlobalizationPhoneNumberFormattingdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsGraphicsDisplayBrightnessOverride_func(LPCSTR param) noexcept {
        if (!WindowsGraphicsDisplayBrightnessOverridedll) {
            load_WindowsGraphicsDisplayBrightnessOverride();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsGraphicsDisplayBrightnessOverridedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsGraphicsDisplayDisplayEnhancementOverride_func(LPCSTR param) noexcept {
        if (!WindowsGraphicsDisplayDisplayEnhancementOverridedll) {
            load_WindowsGraphicsDisplayDisplayEnhancementOverride();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsGraphicsDisplayDisplayEnhancementOverridedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsGraphics_func(LPCSTR param) noexcept {
        if (!WindowsGraphicsdll) {
            load_WindowsGraphics();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsGraphicsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsGraphicsPrinting3D_func(LPCSTR param) noexcept {
        if (!WindowsGraphicsPrinting3Ddll) {
            load_WindowsGraphicsPrinting3D();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsGraphicsPrinting3Ddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsGraphicsPrinting_func(LPCSTR param) noexcept {
        if (!WindowsGraphicsPrintingdll) {
            load_WindowsGraphicsPrinting();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsGraphicsPrintingdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsGraphicsPrintingWorkflow_func(LPCSTR param) noexcept {
        if (!WindowsGraphicsPrintingWorkflowdll) {
            load_WindowsGraphicsPrintingWorkflow();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsGraphicsPrintingWorkflowdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsGraphicsPrintingWorkflowNative_func(LPCSTR param) noexcept {
        if (!WindowsGraphicsPrintingWorkflowNativedll) {
            load_WindowsGraphicsPrintingWorkflowNative();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsGraphicsPrintingWorkflowNativedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsHelpRuntime_func(LPCSTR param) noexcept {
        if (!WindowsHelpRuntimedll) {
            load_WindowsHelpRuntime();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsHelpRuntimedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_windowsimmersiveshellserviceprovider_func(LPCSTR param) noexcept {
        if (!windowsimmersiveshellserviceproviderdll) {
            load_windowsimmersiveshellserviceprovider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(windowsimmersiveshellserviceproviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsInternalAdaptiveCardsXamlCardRenderer_func(LPCSTR param) noexcept {
        if (!WindowsInternalAdaptiveCardsXamlCardRendererdll) {
            load_WindowsInternalAdaptiveCardsXamlCardRenderer();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsInternalAdaptiveCardsXamlCardRendererdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsInternalCapturePickerDesktop_func(LPCSTR param) noexcept {
        if (!WindowsInternalCapturePickerDesktopdll) {
            load_WindowsInternalCapturePickerDesktop();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsInternalCapturePickerDesktopdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsInternalCapturePicker_func(LPCSTR param) noexcept {
        if (!WindowsInternalCapturePickerdll) {
            load_WindowsInternalCapturePicker();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsInternalCapturePickerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsInternalDevicesBluetooth_func(LPCSTR param) noexcept {
        if (!WindowsInternalDevicesBluetoothdll) {
            load_WindowsInternalDevicesBluetooth();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsInternalDevicesBluetoothdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsInternalDevicesSensors_func(LPCSTR param) noexcept {
        if (!WindowsInternalDevicesSensorsdll) {
            load_WindowsInternalDevicesSensors();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsInternalDevicesSensorsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsInternalFeedbackAnalog_func(LPCSTR param) noexcept {
        if (!WindowsInternalFeedbackAnalogdll) {
            load_WindowsInternalFeedbackAnalog();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsInternalFeedbackAnalogdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsInternalFeedbackAnalogProxyStub_func(LPCSTR param) noexcept {
        if (!WindowsInternalFeedbackAnalogProxyStubdll) {
            load_WindowsInternalFeedbackAnalogProxyStub();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsInternalFeedbackAnalogProxyStubdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsInternalGraphicsDisplayDisplayColorManagement_func(LPCSTR param) noexcept {
        if (!WindowsInternalGraphicsDisplayDisplayColorManagementdll) {
            load_WindowsInternalGraphicsDisplayDisplayColorManagement();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsInternalGraphicsDisplayDisplayColorManagementdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsInternalGraphicsDisplayDisplayEnhancementManagement_func(LPCSTR param) noexcept {
        if (!WindowsInternalGraphicsDisplayDisplayEnhancementManagementdll) {
            load_WindowsInternalGraphicsDisplayDisplayEnhancementManagement();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsInternalGraphicsDisplayDisplayEnhancementManagementdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsInternalHardwareConfirmator_func(LPCSTR param) noexcept {
        if (!WindowsInternalHardwareConfirmatordll) {
            load_WindowsInternalHardwareConfirmator();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsInternalHardwareConfirmatordll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsInternalManagement_func(LPCSTR param) noexcept {
        if (!WindowsInternalManagementdll) {
            load_WindowsInternalManagement();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsInternalManagementdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsInternalManagementSecureAssessment_func(LPCSTR param) noexcept {
        if (!WindowsInternalManagementSecureAssessmentdll) {
            load_WindowsInternalManagementSecureAssessment();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsInternalManagementSecureAssessmentdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsInternalOpenWithHost_func(LPCSTR param) noexcept {
        if (!WindowsInternalOpenWithHostdll) {
            load_WindowsInternalOpenWithHost();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsInternalOpenWithHostdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsInternalPlatformExtensionDevicePickerExperience_func(LPCSTR param) noexcept {
        if (!WindowsInternalPlatformExtensionDevicePickerExperiencedll) {
            load_WindowsInternalPlatformExtensionDevicePickerExperience();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsInternalPlatformExtensionDevicePickerExperiencedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsInternalPlatformExtensionMiracastBannerExperience_func(LPCSTR param) noexcept {
        if (!WindowsInternalPlatformExtensionMiracastBannerExperiencedll) {
            load_WindowsInternalPlatformExtensionMiracastBannerExperience();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsInternalPlatformExtensionMiracastBannerExperiencedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsInternalPredictionUnit_func(LPCSTR param) noexcept {
        if (!WindowsInternalPredictionUnitdll) {
            load_WindowsInternalPredictionUnit();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsInternalPredictionUnitdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsInternalSecurityAttestationDeviceAttestation_func(LPCSTR param) noexcept {
        if (!WindowsInternalSecurityAttestationDeviceAttestationdll) {
            load_WindowsInternalSecurityAttestationDeviceAttestation();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsInternalSecurityAttestationDeviceAttestationdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsInternalSecurityMitigationsBroker_func(LPCSTR param) noexcept {
        if (!WindowsInternalSecurityMitigationsBrokerdll) {
            load_WindowsInternalSecurityMitigationsBroker();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsInternalSecurityMitigationsBrokerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsInternalShellBroker_func(LPCSTR param) noexcept {
        if (!WindowsInternalShellBrokerdll) {
            load_WindowsInternalShellBroker();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsInternalShellBrokerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsInternalShellCloudDesktopTransitionScreen_func(LPCSTR param) noexcept {
        if (!WindowsInternalShellCloudDesktopTransitionScreendll) {
            load_WindowsInternalShellCloudDesktopTransitionScreen();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsInternalShellCloudDesktopTransitionScreendll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsInternalShellXamlInputViewHost_func(LPCSTR param) noexcept {
        if (!WindowsInternalShellXamlInputViewHostdll) {
            load_WindowsInternalShellXamlInputViewHost();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsInternalShellXamlInputViewHostdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_windowsinternalshellcommonAccountsControlExperience_func(LPCSTR param) noexcept {
        if (!windowsinternalshellcommonAccountsControlExperiencedll) {
            load_windowsinternalshellcommonAccountsControlExperience();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(windowsinternalshellcommonAccountsControlExperiencedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_windowsinternalshellcommonAppResolverModal_func(LPCSTR param) noexcept {
        if (!windowsinternalshellcommonAppResolverModaldll) {
            load_windowsinternalshellcommonAppResolverModal();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(windowsinternalshellcommonAppResolverModaldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsInternalShellCommonBroker_func(LPCSTR param) noexcept {
        if (!WindowsInternalShellCommonBrokerdll) {
            load_WindowsInternalShellCommonBroker();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsInternalShellCommonBrokerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsInternalShellCommon_func(LPCSTR param) noexcept {
        if (!WindowsInternalShellCommondll) {
            load_WindowsInternalShellCommon();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsInternalShellCommondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_windowsinternalshellcommonFilePickerExperienceMEM_func(LPCSTR param) noexcept {
        if (!windowsinternalshellcommonFilePickerExperienceMEMdll) {
            load_windowsinternalshellcommonFilePickerExperienceMEM();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(windowsinternalshellcommonFilePickerExperienceMEMdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsInternalShellCommonPrintExperience_func(LPCSTR param) noexcept {
        if (!WindowsInternalShellCommonPrintExperiencedll) {
            load_WindowsInternalShellCommonPrintExperience();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsInternalShellCommonPrintExperiencedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_windowsinternalshellcommonshareexperience_func(LPCSTR param) noexcept {
        if (!windowsinternalshellcommonshareexperiencedll) {
            load_windowsinternalshellcommonshareexperience();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(windowsinternalshellcommonshareexperiencedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_windowsinternalshellcommonTokenBrokerModal_func(LPCSTR param) noexcept {
        if (!windowsinternalshellcommonTokenBrokerModaldll) {
            load_windowsinternalshellcommonTokenBrokerModal();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(windowsinternalshellcommonTokenBrokerModaldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsInternalSignals_func(LPCSTR param) noexcept {
        if (!WindowsInternalSignalsdll) {
            load_WindowsInternalSignals();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsInternalSignalsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsInternalSystemUserProfile_func(LPCSTR param) noexcept {
        if (!WindowsInternalSystemUserProfiledll) {
            load_WindowsInternalSystemUserProfile();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsInternalSystemUserProfiledll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsInternalTaskbar_func(LPCSTR param) noexcept {
        if (!WindowsInternalTaskbardll) {
            load_WindowsInternalTaskbar();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsInternalTaskbardll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsInternalUIBioEnrollmentProxyStub_func(LPCSTR param) noexcept {
        if (!WindowsInternalUIBioEnrollmentProxyStubdll) {
            load_WindowsInternalUIBioEnrollmentProxyStub();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsInternalUIBioEnrollmentProxyStubdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsInternalUIDialogs_func(LPCSTR param) noexcept {
        if (!WindowsInternalUIDialogsdll) {
            load_WindowsInternalUIDialogs();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsInternalUIDialogsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsInternalUILogonProxyStub_func(LPCSTR param) noexcept {
        if (!WindowsInternalUILogonProxyStubdll) {
            load_WindowsInternalUILogonProxyStub();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsInternalUILogonProxyStubdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsInternalUIShellWindowTabManager_func(LPCSTR param) noexcept {
        if (!WindowsInternalUIShellWindowTabManagerdll) {
            load_WindowsInternalUIShellWindowTabManager();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsInternalUIShellWindowTabManagerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsInternalWaaSMedicDocked_func(LPCSTR param) noexcept {
        if (!WindowsInternalWaaSMedicDockeddll) {
            load_WindowsInternalWaaSMedicDocked();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsInternalWaaSMedicDockeddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsManagementEnrollmentStatusTrackingConfigProvider_func(LPCSTR param) noexcept {
        if (!WindowsManagementEnrollmentStatusTrackingConfigProviderdll) {
            load_WindowsManagementEnrollmentStatusTrackingConfigProvider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsManagementEnrollmentStatusTrackingConfigProviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsManagementInprocObjects_func(LPCSTR param) noexcept {
        if (!WindowsManagementInprocObjectsdll) {
            load_WindowsManagementInprocObjects();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsManagementInprocObjectsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsManagementModernDeploymentConfigProviders_func(LPCSTR param) noexcept {
        if (!WindowsManagementModernDeploymentConfigProvidersdll) {
            load_WindowsManagementModernDeploymentConfigProviders();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsManagementModernDeploymentConfigProvidersdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsManagementProvisioningProxyStub_func(LPCSTR param) noexcept {
        if (!WindowsManagementProvisioningProxyStubdll) {
            load_WindowsManagementProvisioningProxyStub();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsManagementProvisioningProxyStubdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsManagementSecureAssessmentCfgProvider_func(LPCSTR param) noexcept {
        if (!WindowsManagementSecureAssessmentCfgProviderdll) {
            load_WindowsManagementSecureAssessmentCfgProvider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsManagementSecureAssessmentCfgProviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsManagementSecureAssessmentDiagnostics_func(LPCSTR param) noexcept {
        if (!WindowsManagementSecureAssessmentDiagnosticsdll) {
            load_WindowsManagementSecureAssessmentDiagnostics();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsManagementSecureAssessmentDiagnosticsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsManagementService_func(LPCSTR param) noexcept {
        if (!WindowsManagementServicedll) {
            load_WindowsManagementService();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsManagementServicedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsManagementUpdate_func(LPCSTR param) noexcept {
        if (!WindowsManagementUpdatedll) {
            load_WindowsManagementUpdate();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsManagementUpdatedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsManagementWorkplace_func(LPCSTR param) noexcept {
        if (!WindowsManagementWorkplacedll) {
            load_WindowsManagementWorkplace();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsManagementWorkplacedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsManagementWorkplaceWorkplaceSettings_func(LPCSTR param) noexcept {
        if (!WindowsManagementWorkplaceWorkplaceSettingsdll) {
            load_WindowsManagementWorkplaceWorkplaceSettings();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsManagementWorkplaceWorkplaceSettingsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsMediaAudio_func(LPCSTR param) noexcept {
        if (!WindowsMediaAudiodll) {
            load_WindowsMediaAudio();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsMediaAudiodll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsMediaBackgroundMediaPlayback_func(LPCSTR param) noexcept {
        if (!WindowsMediaBackgroundMediaPlaybackdll) {
            load_WindowsMediaBackgroundMediaPlayback();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsMediaBackgroundMediaPlaybackdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsMediaDevices_func(LPCSTR param) noexcept {
        if (!WindowsMediaDevicesdll) {
            load_WindowsMediaDevices();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsMediaDevicesdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsMedia_func(LPCSTR param) noexcept {
        if (!WindowsMediadll) {
            load_WindowsMedia();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsMediadll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsMediaEditing_func(LPCSTR param) noexcept {
        if (!WindowsMediaEditingdll) {
            load_WindowsMediaEditing();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsMediaEditingdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsMediaFaceAnalysis_func(LPCSTR param) noexcept {
        if (!WindowsMediaFaceAnalysisdll) {
            load_WindowsMediaFaceAnalysis();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsMediaFaceAnalysisdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsMediaImport_func(LPCSTR param) noexcept {
        if (!WindowsMediaImportdll) {
            load_WindowsMediaImport();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsMediaImportdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsMediaMediaControl_func(LPCSTR param) noexcept {
        if (!WindowsMediaMediaControldll) {
            load_WindowsMediaMediaControl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsMediaMediaControldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsMediaMixedRealityCapture_func(LPCSTR param) noexcept {
        if (!WindowsMediaMixedRealityCapturedll) {
            load_WindowsMediaMixedRealityCapture();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsMediaMixedRealityCapturedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsMediaOcr_func(LPCSTR param) noexcept {
        if (!WindowsMediaOcrdll) {
            load_WindowsMediaOcr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsMediaOcrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsMediaPlaybackBackgroundMediaPlayer_func(LPCSTR param) noexcept {
        if (!WindowsMediaPlaybackBackgroundMediaPlayerdll) {
            load_WindowsMediaPlaybackBackgroundMediaPlayer();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsMediaPlaybackBackgroundMediaPlayerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsMediaPlaybackMediaPlayer_func(LPCSTR param) noexcept {
        if (!WindowsMediaPlaybackMediaPlayerdll) {
            load_WindowsMediaPlaybackMediaPlayer();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsMediaPlaybackMediaPlayerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsMediaPlaybackProxyStub_func(LPCSTR param) noexcept {
        if (!WindowsMediaPlaybackProxyStubdll) {
            load_WindowsMediaPlaybackProxyStub();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsMediaPlaybackProxyStubdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsMediaProtectionPlayReady_func(LPCSTR param) noexcept {
        if (!WindowsMediaProtectionPlayReadydll) {
            load_WindowsMediaProtectionPlayReady();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsMediaProtectionPlayReadydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsMediaRenewal_func(LPCSTR param) noexcept {
        if (!WindowsMediaRenewaldll) {
            load_WindowsMediaRenewal();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsMediaRenewaldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsMediaSpeech_func(LPCSTR param) noexcept {
        if (!WindowsMediaSpeechdll) {
            load_WindowsMediaSpeech();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsMediaSpeechdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsMediaSpeechUXRes_func(LPCSTR param) noexcept {
        if (!WindowsMediaSpeechUXResdll) {
            load_WindowsMediaSpeechUXRes();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsMediaSpeechUXResdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsMediaStreaming_func(LPCSTR param) noexcept {
        if (!WindowsMediaStreamingdll) {
            load_WindowsMediaStreaming();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsMediaStreamingdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsMediaStreamingps_func(LPCSTR param) noexcept {
        if (!WindowsMediaStreamingpsdll) {
            load_WindowsMediaStreamingps();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsMediaStreamingpsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsMirage_func(LPCSTR param) noexcept {
        if (!WindowsMiragedll) {
            load_WindowsMirage();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsMiragedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsMirageInternal_func(LPCSTR param) noexcept {
        if (!WindowsMirageInternaldll) {
            load_WindowsMirageInternal();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsMirageInternaldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsNetworkingBackgroundTransferBackgroundManagerPolicy_func(LPCSTR param) noexcept {
        if (!WindowsNetworkingBackgroundTransferBackgroundManagerPolicydll) {
            load_WindowsNetworkingBackgroundTransferBackgroundManagerPolicy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsNetworkingBackgroundTransferBackgroundManagerPolicydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsNetworkingBackgroundTransferContentPrefetchTask_func(LPCSTR param) noexcept {
        if (!WindowsNetworkingBackgroundTransferContentPrefetchTaskdll) {
            load_WindowsNetworkingBackgroundTransferContentPrefetchTask();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsNetworkingBackgroundTransferContentPrefetchTaskdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsNetworkingBackgroundTransfer_func(LPCSTR param) noexcept {
        if (!WindowsNetworkingBackgroundTransferdll) {
            load_WindowsNetworkingBackgroundTransfer();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsNetworkingBackgroundTransferdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsNetworkingConnectivity_func(LPCSTR param) noexcept {
        if (!WindowsNetworkingConnectivitydll) {
            load_WindowsNetworkingConnectivity();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsNetworkingConnectivitydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsNetworking_func(LPCSTR param) noexcept {
        if (!WindowsNetworkingdll) {
            load_WindowsNetworking();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsNetworkingdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsNetworkingHostName_func(LPCSTR param) noexcept {
        if (!WindowsNetworkingHostNamedll) {
            load_WindowsNetworkingHostName();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsNetworkingHostNamedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsNetworkingNetworkOperatorsESim_func(LPCSTR param) noexcept {
        if (!WindowsNetworkingNetworkOperatorsESimdll) {
            load_WindowsNetworkingNetworkOperatorsESim();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsNetworkingNetworkOperatorsESimdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsNetworkingNetworkOperatorsHotspotAuthentication_func(LPCSTR param) noexcept {
        if (!WindowsNetworkingNetworkOperatorsHotspotAuthenticationdll) {
            load_WindowsNetworkingNetworkOperatorsHotspotAuthentication();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsNetworkingNetworkOperatorsHotspotAuthenticationdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsNetworkingProximity_func(LPCSTR param) noexcept {
        if (!WindowsNetworkingProximitydll) {
            load_WindowsNetworkingProximity();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsNetworkingProximitydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsNetworkingServiceDiscoveryDnssd_func(LPCSTR param) noexcept {
        if (!WindowsNetworkingServiceDiscoveryDnssddll) {
            load_WindowsNetworkingServiceDiscoveryDnssd();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsNetworkingServiceDiscoveryDnssddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsNetworkingSocketsPushEnabledApplication_func(LPCSTR param) noexcept {
        if (!WindowsNetworkingSocketsPushEnabledApplicationdll) {
            load_WindowsNetworkingSocketsPushEnabledApplication();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsNetworkingSocketsPushEnabledApplicationdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsNetworkingUXEapRequestHandler_func(LPCSTR param) noexcept {
        if (!WindowsNetworkingUXEapRequestHandlerdll) {
            load_WindowsNetworkingUXEapRequestHandler();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsNetworkingUXEapRequestHandlerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsNetworkingVpn_func(LPCSTR param) noexcept {
        if (!WindowsNetworkingVpndll) {
            load_WindowsNetworkingVpn();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsNetworkingVpndll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsNetworkingXboxLiveProxyStub_func(LPCSTR param) noexcept {
        if (!WindowsNetworkingXboxLiveProxyStubdll) {
            load_WindowsNetworkingXboxLiveProxyStub();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsNetworkingXboxLiveProxyStubdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsPayments_func(LPCSTR param) noexcept {
        if (!WindowsPaymentsdll) {
            load_WindowsPayments();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsPaymentsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsPerceptionStub_func(LPCSTR param) noexcept {
        if (!WindowsPerceptionStubdll) {
            load_WindowsPerceptionStub();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsPerceptionStubdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsSecurityAuthenticationIdentityProvider_func(LPCSTR param) noexcept {
        if (!WindowsSecurityAuthenticationIdentityProviderdll) {
            load_WindowsSecurityAuthenticationIdentityProvider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsSecurityAuthenticationIdentityProviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsSecurityAuthenticationOnlineId_func(LPCSTR param) noexcept {
        if (!WindowsSecurityAuthenticationOnlineIddll) {
            load_WindowsSecurityAuthenticationOnlineId();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsSecurityAuthenticationOnlineIddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsSecurityAuthenticationWebCore_func(LPCSTR param) noexcept {
        if (!WindowsSecurityAuthenticationWebCoredll) {
            load_WindowsSecurityAuthenticationWebCore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsSecurityAuthenticationWebCoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsSecurityCredentialsUICredentialPicker_func(LPCSTR param) noexcept {
        if (!WindowsSecurityCredentialsUICredentialPickerdll) {
            load_WindowsSecurityCredentialsUICredentialPicker();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsSecurityCredentialsUICredentialPickerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsSecurityCredentialsUIUserConsentVerifier_func(LPCSTR param) noexcept {
        if (!WindowsSecurityCredentialsUIUserConsentVerifierdll) {
            load_WindowsSecurityCredentialsUIUserConsentVerifier();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsSecurityCredentialsUIUserConsentVerifierdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsSecurityIntegrity_func(LPCSTR param) noexcept {
        if (!WindowsSecurityIntegritydll) {
            load_WindowsSecurityIntegrity();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsSecurityIntegritydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsServicesTargetedContent_func(LPCSTR param) noexcept {
        if (!WindowsServicesTargetedContentdll) {
            load_WindowsServicesTargetedContent();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsServicesTargetedContentdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsSharedPCAccountManager_func(LPCSTR param) noexcept {
        if (!WindowsSharedPCAccountManagerdll) {
            load_WindowsSharedPCAccountManager();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsSharedPCAccountManagerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsSharedPCCredentialProvider_func(LPCSTR param) noexcept {
        if (!WindowsSharedPCCredentialProviderdll) {
            load_WindowsSharedPCCredentialProvider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsSharedPCCredentialProviderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsShellBlueLightReduction_func(LPCSTR param) noexcept {
        if (!WindowsShellBlueLightReductiondll) {
            load_WindowsShellBlueLightReduction();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsShellBlueLightReductiondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsShellServiceHostBuilder_func(LPCSTR param) noexcept {
        if (!WindowsShellServiceHostBuilderdll) {
            load_WindowsShellServiceHostBuilder();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsShellServiceHostBuilderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsShellStartLayoutPopulationEvents_func(LPCSTR param) noexcept {
        if (!WindowsShellStartLayoutPopulationEventsdll) {
            load_WindowsShellStartLayoutPopulationEvents();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsShellStartLayoutPopulationEventsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsStateRepository_func(LPCSTR param) noexcept {
        if (!WindowsStateRepositorydll) {
            load_WindowsStateRepository();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsStateRepositorydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsStateRepositoryBroker_func(LPCSTR param) noexcept {
        if (!WindowsStateRepositoryBrokerdll) {
            load_WindowsStateRepositoryBroker();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsStateRepositoryBrokerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsStateRepositoryClient_func(LPCSTR param) noexcept {
        if (!WindowsStateRepositoryClientdll) {
            load_WindowsStateRepositoryClient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsStateRepositoryClientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsStateRepositoryCore_func(LPCSTR param) noexcept {
        if (!WindowsStateRepositoryCoredll) {
            load_WindowsStateRepositoryCore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsStateRepositoryCoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsStateRepositoryPS_func(LPCSTR param) noexcept {
        if (!WindowsStateRepositoryPSdll) {
            load_WindowsStateRepositoryPS();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsStateRepositoryPSdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsStateRepositoryUpgrade_func(LPCSTR param) noexcept {
        if (!WindowsStateRepositoryUpgradedll) {
            load_WindowsStateRepositoryUpgrade();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsStateRepositoryUpgradedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsStorageApplicationData_func(LPCSTR param) noexcept {
        if (!WindowsStorageApplicationDatadll) {
            load_WindowsStorageApplicationData();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsStorageApplicationDatadll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsStorageCompression_func(LPCSTR param) noexcept {
        if (!WindowsStorageCompressiondll) {
            load_WindowsStorageCompression();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsStorageCompressiondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_windowsstorage_func(LPCSTR param) noexcept {
        if (!windowsstoragedll) {
            load_windowsstorage();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(windowsstoragedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsStorageOneCore_func(LPCSTR param) noexcept {
        if (!WindowsStorageOneCoredll) {
            load_WindowsStorageOneCore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsStorageOneCoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsStorageSearch_func(LPCSTR param) noexcept {
        if (!WindowsStorageSearchdll) {
            load_WindowsStorageSearch();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsStorageSearchdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsSystemDiagnostics_func(LPCSTR param) noexcept {
        if (!WindowsSystemDiagnosticsdll) {
            load_WindowsSystemDiagnostics();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsSystemDiagnosticsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsSystemDiagnosticsTelemetryPlatformTelemetryClient_func(LPCSTR param) noexcept {
        if (!WindowsSystemDiagnosticsTelemetryPlatformTelemetryClientdll) {
            load_WindowsSystemDiagnosticsTelemetryPlatformTelemetryClient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsSystemDiagnosticsTelemetryPlatformTelemetryClientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsSystemDiagnosticsTraceReportingPlatformDiagnosticActions_func(LPCSTR param) noexcept {
        if (!WindowsSystemDiagnosticsTraceReportingPlatformDiagnosticActionsdll) {
            load_WindowsSystemDiagnosticsTraceReportingPlatformDiagnosticActions();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsSystemDiagnosticsTraceReportingPlatformDiagnosticActionsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsSystemLauncher_func(LPCSTR param) noexcept {
        if (!WindowsSystemLauncherdll) {
            load_WindowsSystemLauncher();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsSystemLauncherdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsSystemProfileHardwareId_func(LPCSTR param) noexcept {
        if (!WindowsSystemProfileHardwareIddll) {
            load_WindowsSystemProfileHardwareId();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsSystemProfileHardwareIddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsSystemProfilePlatformDiagnosticsAndUsageDataSettings_func(LPCSTR param) noexcept {
        if (!WindowsSystemProfilePlatformDiagnosticsAndUsageDataSettingsdll) {
            load_WindowsSystemProfilePlatformDiagnosticsAndUsageDataSettings();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsSystemProfilePlatformDiagnosticsAndUsageDataSettingsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsSystemProfileRetailInfo_func(LPCSTR param) noexcept {
        if (!WindowsSystemProfileRetailInfodll) {
            load_WindowsSystemProfileRetailInfo();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsSystemProfileRetailInfodll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsSystemProfileSystemId_func(LPCSTR param) noexcept {
        if (!WindowsSystemProfileSystemIddll) {
            load_WindowsSystemProfileSystemId();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsSystemProfileSystemIddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsSystemProfileSystemManufacturers_func(LPCSTR param) noexcept {
        if (!WindowsSystemProfileSystemManufacturersdll) {
            load_WindowsSystemProfileSystemManufacturers();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsSystemProfileSystemManufacturersdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsSystemRemoteDesktop_func(LPCSTR param) noexcept {
        if (!WindowsSystemRemoteDesktopdll) {
            load_WindowsSystemRemoteDesktop();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsSystemRemoteDesktopdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsSystemSystemManagement_func(LPCSTR param) noexcept {
        if (!WindowsSystemSystemManagementdll) {
            load_WindowsSystemSystemManagement();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsSystemSystemManagementdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsSystemUserDeviceAssociation_func(LPCSTR param) noexcept {
        if (!WindowsSystemUserDeviceAssociationdll) {
            load_WindowsSystemUserDeviceAssociation();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsSystemUserDeviceAssociationdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsSystemUserProfileDiagnosticsSettings_func(LPCSTR param) noexcept {
        if (!WindowsSystemUserProfileDiagnosticsSettingsdll) {
            load_WindowsSystemUserProfileDiagnosticsSettings();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsSystemUserProfileDiagnosticsSettingsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsUIAccessibility_func(LPCSTR param) noexcept {
        if (!WindowsUIAccessibilitydll) {
            load_WindowsUIAccessibility();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsUIAccessibilitydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsUIAppDefaults_func(LPCSTR param) noexcept {
        if (!WindowsUIAppDefaultsdll) {
            load_WindowsUIAppDefaults();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsUIAppDefaultsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsUIBioFeedback_func(LPCSTR param) noexcept {
        if (!WindowsUIBioFeedbackdll) {
            load_WindowsUIBioFeedback();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsUIBioFeedbackdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsUIBlockedShutdown_func(LPCSTR param) noexcept {
        if (!WindowsUIBlockedShutdowndll) {
            load_WindowsUIBlockedShutdown();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsUIBlockedShutdowndll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsUICoreTextInput_func(LPCSTR param) noexcept {
        if (!WindowsUICoreTextInputdll) {
            load_WindowsUICoreTextInput();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsUICoreTextInputdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsUICred_func(LPCSTR param) noexcept {
        if (!WindowsUICreddll) {
            load_WindowsUICred();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsUICreddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsUICredDialogController_func(LPCSTR param) noexcept {
        if (!WindowsUICredDialogControllerdll) {
            load_WindowsUICredDialogController();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsUICredDialogControllerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsUI_func(LPCSTR param) noexcept {
        if (!WindowsUIdll) {
            load_WindowsUI();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsUIdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsUIFileExplorer_func(LPCSTR param) noexcept {
        if (!WindowsUIFileExplorerdll) {
            load_WindowsUIFileExplorer();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsUIFileExplorerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsUIImmersive_func(LPCSTR param) noexcept {
        if (!WindowsUIImmersivedll) {
            load_WindowsUIImmersive();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsUIImmersivedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsUIInputInkingAnalysis_func(LPCSTR param) noexcept {
        if (!WindowsUIInputInkingAnalysisdll) {
            load_WindowsUIInputInkingAnalysis();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsUIInputInkingAnalysisdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsUIInputInking_func(LPCSTR param) noexcept {
        if (!WindowsUIInputInkingdll) {
            load_WindowsUIInputInking();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsUIInputInkingdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsUILogon_func(LPCSTR param) noexcept {
        if (!WindowsUILogondll) {
            load_WindowsUILogon();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsUILogondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsUINetworkUXController_func(LPCSTR param) noexcept {
        if (!WindowsUINetworkUXControllerdll) {
            load_WindowsUINetworkUXController();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsUINetworkUXControllerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsUIPicturePassword_func(LPCSTR param) noexcept {
        if (!WindowsUIPicturePassworddll) {
            load_WindowsUIPicturePassword();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsUIPicturePassworddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsUISearch_func(LPCSTR param) noexcept {
        if (!WindowsUISearchdll) {
            load_WindowsUISearch();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsUISearchdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsUIShell_func(LPCSTR param) noexcept {
        if (!WindowsUIShelldll) {
            load_WindowsUIShell();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsUIShelldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsUIShellInternalAdaptiveCards_func(LPCSTR param) noexcept {
        if (!WindowsUIShellInternalAdaptiveCardsdll) {
            load_WindowsUIShellInternalAdaptiveCards();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsUIShellInternalAdaptiveCardsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsUIStorage_func(LPCSTR param) noexcept {
        if (!WindowsUIStoragedll) {
            load_WindowsUIStorage();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsUIStoragedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsUIXamlControls_func(LPCSTR param) noexcept {
        if (!WindowsUIXamlControlsdll) {
            load_WindowsUIXamlControls();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsUIXamlControlsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsUIXaml_func(LPCSTR param) noexcept {
        if (!WindowsUIXamldll) {
            load_WindowsUIXaml();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsUIXamldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsUIXamlInkControls_func(LPCSTR param) noexcept {
        if (!WindowsUIXamlInkControlsdll) {
            load_WindowsUIXamlInkControls();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsUIXamlInkControlsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsUIXamlMaps_func(LPCSTR param) noexcept {
        if (!WindowsUIXamlMapsdll) {
            load_WindowsUIXamlMaps();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsUIXamlMapsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsUIXamlPhone_func(LPCSTR param) noexcept {
        if (!WindowsUIXamlPhonedll) {
            load_WindowsUIXamlPhone();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsUIXamlPhonedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsUIXamlResources19h1_func(LPCSTR param) noexcept {
        if (!WindowsUIXamlResources19h1dll) {
            load_WindowsUIXamlResources19h1();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsUIXamlResources19h1dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsUIXamlResources21h1_func(LPCSTR param) noexcept {
        if (!WindowsUIXamlResources21h1dll) {
            load_WindowsUIXamlResources21h1();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsUIXamlResources21h1dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsUIXamlResourcesCommon_func(LPCSTR param) noexcept {
        if (!WindowsUIXamlResourcesCommondll) {
            load_WindowsUIXamlResourcesCommon();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsUIXamlResourcesCommondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsUIXamlResourcesrs1_func(LPCSTR param) noexcept {
        if (!WindowsUIXamlResourcesrs1dll) {
            load_WindowsUIXamlResourcesrs1();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsUIXamlResourcesrs1dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsUIXamlResourcesrs2_func(LPCSTR param) noexcept {
        if (!WindowsUIXamlResourcesrs2dll) {
            load_WindowsUIXamlResourcesrs2();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsUIXamlResourcesrs2dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsUIXamlResourcesrs3_func(LPCSTR param) noexcept {
        if (!WindowsUIXamlResourcesrs3dll) {
            load_WindowsUIXamlResourcesrs3();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsUIXamlResourcesrs3dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsUIXamlResourcesrs4_func(LPCSTR param) noexcept {
        if (!WindowsUIXamlResourcesrs4dll) {
            load_WindowsUIXamlResourcesrs4();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsUIXamlResourcesrs4dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsUIXamlResourcesrs5_func(LPCSTR param) noexcept {
        if (!WindowsUIXamlResourcesrs5dll) {
            load_WindowsUIXamlResourcesrs5();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsUIXamlResourcesrs5dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsUIXamlResourcesth_func(LPCSTR param) noexcept {
        if (!WindowsUIXamlResourcesthdll) {
            load_WindowsUIXamlResourcesth();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsUIXamlResourcesthdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsUIXamlResourceswin81_func(LPCSTR param) noexcept {
        if (!WindowsUIXamlResourceswin81dll) {
            load_WindowsUIXamlResourceswin81();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsUIXamlResourceswin81dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsUIXamlResourceswin8rtm_func(LPCSTR param) noexcept {
        if (!WindowsUIXamlResourceswin8rtmdll) {
            load_WindowsUIXamlResourceswin8rtm();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsUIXamlResourceswin8rtmdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsUIXamlHost_func(LPCSTR param) noexcept {
        if (!WindowsUIXamlHostdll) {
            load_WindowsUIXamlHost();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsUIXamlHostdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsWARPJITService_func(LPCSTR param) noexcept {
        if (!WindowsWARPJITServicedll) {
            load_WindowsWARPJITService();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsWARPJITServicedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsWebDiagnostics_func(LPCSTR param) noexcept {
        if (!WindowsWebDiagnosticsdll) {
            load_WindowsWebDiagnostics();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsWebDiagnosticsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsWeb_func(LPCSTR param) noexcept {
        if (!WindowsWebdll) {
            load_WindowsWeb();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsWebdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsWebHttp_func(LPCSTR param) noexcept {
        if (!WindowsWebHttpdll) {
            load_WindowsWebHttp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsWebHttpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsCodecs_func(LPCSTR param) noexcept {
        if (!WindowsCodecsdll) {
            load_WindowsCodecs();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsCodecsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsCodecsExt_func(LPCSTR param) noexcept {
        if (!WindowsCodecsExtdll) {
            load_WindowsCodecsExt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsCodecsExtdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsDefaultHeatProcessor_func(LPCSTR param) noexcept {
        if (!WindowsDefaultHeatProcessordll) {
            load_WindowsDefaultHeatProcessor();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsDefaultHeatProcessordll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_windowsdefenderapplicationguardcsp_func(LPCSTR param) noexcept {
        if (!windowsdefenderapplicationguardcspdll) {
            load_windowsdefenderapplicationguardcsp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(windowsdefenderapplicationguardcspdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsInternalComposableShellDisplay_func(LPCSTR param) noexcept {
        if (!WindowsInternalComposableShellDisplaydll) {
            load_WindowsInternalComposableShellDisplay();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsInternalComposableShellDisplaydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsInternalShellCompUiActivation_func(LPCSTR param) noexcept {
        if (!WindowsInternalShellCompUiActivationdll) {
            load_WindowsInternalShellCompUiActivation();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsInternalShellCompUiActivationdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsIoTCsp_func(LPCSTR param) noexcept {
        if (!WindowsIoTCspdll) {
            load_WindowsIoTCsp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsIoTCspdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_windowslivelogin_func(LPCSTR param) noexcept {
        if (!windowslivelogindll) {
            load_windowslivelogin();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(windowslivelogindll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WindowsManagementServiceWinRtProxyStub_func(LPCSTR param) noexcept {
        if (!WindowsManagementServiceWinRtProxyStubdll) {
            load_WindowsManagementServiceWinRtProxyStub();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WindowsManagementServiceWinRtProxyStubdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_windowsperformancerecordercontrol_func(LPCSTR param) noexcept {
        if (!windowsperformancerecordercontroldll) {
            load_windowsperformancerecordercontrol();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(windowsperformancerecordercontroldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_windowsudkshellcommon_func(LPCSTR param) noexcept {
        if (!windowsudkshellcommondll) {
            load_windowsudkshellcommon();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(windowsudkshellcommondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_windowsudkservicesshellcommon_func(LPCSTR param) noexcept {
        if (!windowsudkservicesshellcommondll) {
            load_windowsudkservicesshellcommon();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(windowsudkservicesshellcommondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_winethc_func(LPCSTR param) noexcept {
        if (!winethcdll) {
            load_winethc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(winethcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_winhttp_func(LPCSTR param) noexcept {
        if (!winhttpdll) {
            load_winhttp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(winhttpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_winhttpcom_func(LPCSTR param) noexcept {
        if (!winhttpcomdll) {
            load_winhttpcom();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(winhttpcomdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WinHvEmulation_func(LPCSTR param) noexcept {
        if (!WinHvEmulationdll) {
            load_WinHvEmulation();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WinHvEmulationdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WinHvPlatform_func(LPCSTR param) noexcept {
        if (!WinHvPlatformdll) {
            load_WinHvPlatform();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WinHvPlatformdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wininet_func(LPCSTR param) noexcept {
        if (!wininetdll) {
            load_wininet();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wininetdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wininetlui_func(LPCSTR param) noexcept {
        if (!wininetluidll) {
            load_wininetlui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wininetluidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wininitext_func(LPCSTR param) noexcept {
        if (!wininitextdll) {
            load_wininitext();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wininitextdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_winipcfile_func(LPCSTR param) noexcept {
        if (!winipcfiledll) {
            load_winipcfile();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(winipcfiledll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_winipcsecproc_func(LPCSTR param) noexcept {
        if (!winipcsecprocdll) {
            load_winipcsecproc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(winipcsecprocdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_winipsec_func(LPCSTR param) noexcept {
        if (!winipsecdll) {
            load_winipsec();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(winipsecdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_Winlangdb_func(LPCSTR param) noexcept {
        if (!Winlangdbdll) {
            load_Winlangdb();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(Winlangdbdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_winlogonext_func(LPCSTR param) noexcept {
        if (!winlogonextdll) {
            load_winlogonext();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(winlogonextdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_winmde_func(LPCSTR param) noexcept {
        if (!winmdedll) {
            load_winmde();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(winmdedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_winml_func(LPCSTR param) noexcept {
        if (!winmldll) {
            load_winml();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(winmldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_winmm_func(LPCSTR param) noexcept {
        if (!winmmdll) {
            load_winmm();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(winmmdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_winmmbase_func(LPCSTR param) noexcept {
        if (!winmmbasedll) {
            load_winmmbase();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(winmmbasedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_winmsipc_func(LPCSTR param) noexcept {
        if (!winmsipcdll) {
            load_winmsipc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(winmsipcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WinMsoIrmProtector_func(LPCSTR param) noexcept {
        if (!WinMsoIrmProtectordll) {
            load_WinMsoIrmProtector();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WinMsoIrmProtectordll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_winnlsres_func(LPCSTR param) noexcept {
        if (!winnlsresdll) {
            load_winnlsres();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(winnlsresdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_winnsi_func(LPCSTR param) noexcept {
        if (!winnsidll) {
            load_winnsi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(winnsidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WinOpcIrmProtector_func(LPCSTR param) noexcept {
        if (!WinOpcIrmProtectordll) {
            load_WinOpcIrmProtector();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WinOpcIrmProtectordll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WinREAgent_func(LPCSTR param) noexcept {
        if (!WinREAgentdll) {
            load_WinREAgent();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WinREAgentdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_winrnr_func(LPCSTR param) noexcept {
        if (!winrnrdll) {
            load_winrnr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(winrnrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_winrscmd_func(LPCSTR param) noexcept {
        if (!winrscmddll) {
            load_winrscmd();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(winrscmddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_winrsmgr_func(LPCSTR param) noexcept {
        if (!winrsmgrdll) {
            load_winrsmgr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(winrsmgrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_winrssrv_func(LPCSTR param) noexcept {
        if (!winrssrvdll) {
            load_winrssrv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(winrssrvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WinRtTracing_func(LPCSTR param) noexcept {
        if (!WinRtTracingdll) {
            load_WinRtTracing();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WinRtTracingdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WinSATAPI_func(LPCSTR param) noexcept {
        if (!WinSATAPIdll) {
            load_WinSATAPI();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WinSATAPIdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WinSCard_func(LPCSTR param) noexcept {
        if (!WinSCarddll) {
            load_WinSCard();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WinSCarddll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_winshfhc_func(LPCSTR param) noexcept {
        if (!winshfhcdll) {
            load_winshfhc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(winshfhcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_winsku_func(LPCSTR param) noexcept {
        if (!winskudll) {
            load_winsku();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(winskudll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_winsockhc_func(LPCSTR param) noexcept {
        if (!winsockhcdll) {
            load_winsockhc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(winsockhcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_winsqlite3_func(LPCSTR param) noexcept {
        if (!winsqlite3dll) {
            load_winsqlite3();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(winsqlite3dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_winsrv_func(LPCSTR param) noexcept {
        if (!winsrvdll) {
            load_winsrv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(winsrvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_winsrvext_func(LPCSTR param) noexcept {
        if (!winsrvextdll) {
            load_winsrvext();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(winsrvextdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_winsta_func(LPCSTR param) noexcept {
        if (!winstadll) {
            load_winsta();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(winstadll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WinSync_func(LPCSTR param) noexcept {
        if (!WinSyncdll) {
            load_WinSync();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WinSyncdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WinSyncMetastore_func(LPCSTR param) noexcept {
        if (!WinSyncMetastoredll) {
            load_WinSyncMetastore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WinSyncMetastoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WinSyncProviders_func(LPCSTR param) noexcept {
        if (!WinSyncProvidersdll) {
            load_WinSyncProviders();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WinSyncProvidersdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wintrust_func(LPCSTR param) noexcept {
        if (!wintrustdll) {
            load_wintrust();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wintrustdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WinTypes_func(LPCSTR param) noexcept {
        if (!WinTypesdll) {
            load_WinTypes();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WinTypesdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WinUICohabitation_func(LPCSTR param) noexcept {
        if (!WinUICohabitationdll) {
            load_WinUICohabitation();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WinUICohabitationdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_winusb_func(LPCSTR param) noexcept {
        if (!winusbdll) {
            load_winusb();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(winusbdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WiredNetworkCSP_func(LPCSTR param) noexcept {
        if (!WiredNetworkCSPdll) {
            load_WiredNetworkCSP();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WiredNetworkCSPdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wisp_func(LPCSTR param) noexcept {
        if (!wispdll) {
            load_wisp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wispdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_witnesswmiv2provider_func(LPCSTR param) noexcept {
        if (!witnesswmiv2providerdll) {
            load_witnesswmiv2provider();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(witnesswmiv2providerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wkscli_func(LPCSTR param) noexcept {
        if (!wksclidll) {
            load_wkscli();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wksclidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wkspbrokerAx_func(LPCSTR param) noexcept {
        if (!wkspbrokerAxdll) {
            load_wkspbrokerAx();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wkspbrokerAxdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wksprtPS_func(LPCSTR param) noexcept {
        if (!wksprtPSdll) {
            load_wksprtPS();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wksprtPSdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wkssvc_func(LPCSTR param) noexcept {
        if (!wkssvcdll) {
            load_wkssvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wkssvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wlanapi_func(LPCSTR param) noexcept {
        if (!wlanapidll) {
            load_wlanapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wlanapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wlancfg_func(LPCSTR param) noexcept {
        if (!wlancfgdll) {
            load_wlancfg();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wlancfgdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WLanConn_func(LPCSTR param) noexcept {
        if (!WLanConndll) {
            load_WLanConn();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WLanConndll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wlandlg_func(LPCSTR param) noexcept {
        if (!wlandlgdll) {
            load_wlandlg();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wlandlgdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wlangpui_func(LPCSTR param) noexcept {
        if (!wlangpuidll) {
            load_wlangpui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wlangpuidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WLanHC_func(LPCSTR param) noexcept {
        if (!WLanHCdll) {
            load_WLanHC();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WLanHCdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wlanhlp_func(LPCSTR param) noexcept {
        if (!wlanhlpdll) {
            load_wlanhlp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wlanhlpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WlanMediaManager_func(LPCSTR param) noexcept {
        if (!WlanMediaManagerdll) {
            load_WlanMediaManager();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WlanMediaManagerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WlanMM_func(LPCSTR param) noexcept {
        if (!WlanMMdll) {
            load_WlanMM();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WlanMMdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wlanmsm_func(LPCSTR param) noexcept {
        if (!wlanmsmdll) {
            load_wlanmsm();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wlanmsmdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wlanpref_func(LPCSTR param) noexcept {
        if (!wlanprefdll) {
            load_wlanpref();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wlanprefdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WlanRadioManager_func(LPCSTR param) noexcept {
        if (!WlanRadioManagerdll) {
            load_WlanRadioManager();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WlanRadioManagerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wlansec_func(LPCSTR param) noexcept {
        if (!wlansecdll) {
            load_wlansec();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wlansecdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wlansvc_func(LPCSTR param) noexcept {
        if (!wlansvcdll) {
            load_wlansvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wlansvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wlansvcpal_func(LPCSTR param) noexcept {
        if (!wlansvcpaldll) {
            load_wlansvcpal();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wlansvcpaldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wlanui_func(LPCSTR param) noexcept {
        if (!wlanuidll) {
            load_wlanui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wlanuidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wlanutil_func(LPCSTR param) noexcept {
        if (!wlanutildll) {
            load_wlanutil();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wlanutildll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_Wldap32_func(LPCSTR param) noexcept {
        if (!Wldap32dll) {
            load_Wldap32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(Wldap32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wldp_func(LPCSTR param) noexcept {
        if (!wldpdll) {
            load_wldp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wldpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wlgpclnt_func(LPCSTR param) noexcept {
        if (!wlgpclntdll) {
            load_wlgpclnt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wlgpclntdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wlidcli_func(LPCSTR param) noexcept {
        if (!wlidclidll) {
            load_wlidcli();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wlidclidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wlidcredprov_func(LPCSTR param) noexcept {
        if (!wlidcredprovdll) {
            load_wlidcredprov();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wlidcredprovdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wlidfdp_func(LPCSTR param) noexcept {
        if (!wlidfdpdll) {
            load_wlidfdp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wlidfdpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wlidnsp_func(LPCSTR param) noexcept {
        if (!wlidnspdll) {
            load_wlidnsp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wlidnspdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wlidprov_func(LPCSTR param) noexcept {
        if (!wlidprovdll) {
            load_wlidprov();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wlidprovdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wlidres_func(LPCSTR param) noexcept {
        if (!wlidresdll) {
            load_wlidres();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wlidresdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wlidsvc_func(LPCSTR param) noexcept {
        if (!wlidsvcdll) {
            load_wlidsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wlidsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WMALFXGFXDSP_func(LPCSTR param) noexcept {
        if (!WMALFXGFXDSPdll) {
            load_WMALFXGFXDSP();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WMALFXGFXDSPdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wmcodecdspps_func(LPCSTR param) noexcept {
        if (!wmcodecdsppsdll) {
            load_wmcodecdspps();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wmcodecdsppsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wmdmlog_func(LPCSTR param) noexcept {
        if (!wmdmlogdll) {
            load_wmdmlog();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wmdmlogdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wmdmps_func(LPCSTR param) noexcept {
        if (!wmdmpsdll) {
            load_wmdmps();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wmdmpsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wmdrmsdk_func(LPCSTR param) noexcept {
        if (!wmdrmsdkdll) {
            load_wmdrmsdk();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wmdrmsdkdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wmi_func(LPCSTR param) noexcept {
        if (!wmidll) {
            load_wmi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wmidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wmiclnt_func(LPCSTR param) noexcept {
        if (!wmiclntdll) {
            load_wmiclnt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wmiclntdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wmidcom_func(LPCSTR param) noexcept {
        if (!wmidcomdll) {
            load_wmidcom();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wmidcomdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wmidx_func(LPCSTR param) noexcept {
        if (!wmidxdll) {
            load_wmidx();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wmidxdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wmiprop_func(LPCSTR param) noexcept {
        if (!wmipropdll) {
            load_wmiprop();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wmipropdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wmitomi_func(LPCSTR param) noexcept {
        if (!wmitomidll) {
            load_wmitomi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wmitomidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WMNetMgr_func(LPCSTR param) noexcept {
        if (!WMNetMgrdll) {
            load_WMNetMgr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WMNetMgrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WmpDui_func(LPCSTR param) noexcept {
        if (!WmpDuidll) {
            load_WmpDui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WmpDuidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WMPhoto_func(LPCSTR param) noexcept {
        if (!WMPhotodll) {
            load_WMPhoto();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WMPhotodll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wmsgapi_func(LPCSTR param) noexcept {
        if (!wmsgapidll) {
            load_wmsgapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wmsgapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wmvdspa_func(LPCSTR param) noexcept {
        if (!wmvdspadll) {
            load_wmvdspa();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wmvdspadll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WofTasks_func(LPCSTR param) noexcept {
        if (!WofTasksdll) {
            load_WofTasks();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WofTasksdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WofUtil_func(LPCSTR param) noexcept {
        if (!WofUtildll) {
            load_WofUtil();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WofUtildll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WordBreakers_func(LPCSTR param) noexcept {
        if (!WordBreakersdll) {
            load_WordBreakers();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WordBreakersdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WorkfoldersControl_func(LPCSTR param) noexcept {
        if (!WorkfoldersControldll) {
            load_WorkfoldersControl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WorkfoldersControldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WorkFoldersGPExt_func(LPCSTR param) noexcept {
        if (!WorkFoldersGPExtdll) {
            load_WorkFoldersGPExt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WorkFoldersGPExtdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WorkFoldersRes_func(LPCSTR param) noexcept {
        if (!WorkFoldersResdll) {
            load_WorkFoldersRes();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WorkFoldersResdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WorkFoldersShell_func(LPCSTR param) noexcept {
        if (!WorkFoldersShelldll) {
            load_WorkFoldersShell();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WorkFoldersShelldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_workfolderssvc_func(LPCSTR param) noexcept {
        if (!workfolderssvcdll) {
            load_workfolderssvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(workfolderssvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wosc_func(LPCSTR param) noexcept {
        if (!woscdll) {
            load_wosc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(woscdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wow64_func(LPCSTR param) noexcept {
        if (!wow64dll) {
            load_wow64();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wow64dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wow64base_func(LPCSTR param) noexcept {
        if (!wow64basedll) {
            load_wow64base();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wow64basedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wow64con_func(LPCSTR param) noexcept {
        if (!wow64condll) {
            load_wow64con();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wow64condll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wow64cpu_func(LPCSTR param) noexcept {
        if (!wow64cpudll) {
            load_wow64cpu();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wow64cpudll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wow64win_func(LPCSTR param) noexcept {
        if (!wow64windll) {
            load_wow64win();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wow64windll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wpbcreds_func(LPCSTR param) noexcept {
        if (!wpbcredsdll) {
            load_wpbcreds();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wpbcredsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_Wpc_func(LPCSTR param) noexcept {
        if (!Wpcdll) {
            load_Wpc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(Wpcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WpcApi_func(LPCSTR param) noexcept {
        if (!WpcApidll) {
            load_WpcApi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WpcApidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WpcDesktopMonSvc_func(LPCSTR param) noexcept {
        if (!WpcDesktopMonSvcdll) {
            load_WpcDesktopMonSvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WpcDesktopMonSvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WpcProxyStubs_func(LPCSTR param) noexcept {
        if (!WpcProxyStubsdll) {
            load_WpcProxyStubs();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WpcProxyStubsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WpcRefreshTask_func(LPCSTR param) noexcept {
        if (!WpcRefreshTaskdll) {
            load_WpcRefreshTask();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WpcRefreshTaskdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WpcWebFilter_func(LPCSTR param) noexcept {
        if (!WpcWebFilterdll) {
            load_WpcWebFilter();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WpcWebFilterdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wpdbusenum_func(LPCSTR param) noexcept {
        if (!wpdbusenumdll) {
            load_wpdbusenum();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wpdbusenumdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WpdMtp_func(LPCSTR param) noexcept {
        if (!WpdMtpdll) {
            load_WpdMtp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WpdMtpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WpdMtpUS_func(LPCSTR param) noexcept {
        if (!WpdMtpUSdll) {
            load_WpdMtpUS();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WpdMtpUSdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wpdshext_func(LPCSTR param) noexcept {
        if (!wpdshextdll) {
            load_wpdshext();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wpdshextdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WPDShServiceObj_func(LPCSTR param) noexcept {
        if (!WPDShServiceObjdll) {
            load_WPDShServiceObj();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WPDShServiceObjdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WPDSp_func(LPCSTR param) noexcept {
        if (!WPDSpdll) {
            load_WPDSp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WPDSpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wpd_ci_func(LPCSTR param) noexcept {
        if (!wpd_cidll) {
            load_wpd_ci();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wpd_cidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wpnapps_func(LPCSTR param) noexcept {
        if (!wpnappsdll) {
            load_wpnapps();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wpnappsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wpnclient_func(LPCSTR param) noexcept {
        if (!wpnclientdll) {
            load_wpnclient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wpnclientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wpncore_func(LPCSTR param) noexcept {
        if (!wpncoredll) {
            load_wpncore();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wpncoredll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wpninprc_func(LPCSTR param) noexcept {
        if (!wpninprcdll) {
            load_wpninprc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wpninprcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wpnprv_func(LPCSTR param) noexcept {
        if (!wpnprvdll) {
            load_wpnprv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wpnprvdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wpnservice_func(LPCSTR param) noexcept {
        if (!wpnservicedll) {
            load_wpnservice();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wpnservicedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wpnsruprov_func(LPCSTR param) noexcept {
        if (!wpnsruprovdll) {
            load_wpnsruprov();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wpnsruprovdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WpnUserService_func(LPCSTR param) noexcept {
        if (!WpnUserServicedll) {
            load_WpnUserService();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WpnUserServicedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WpPortingLibrary_func(LPCSTR param) noexcept {
        if (!WpPortingLibrarydll) {
            load_WpPortingLibrary();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WpPortingLibrarydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WppRecorderUM_func(LPCSTR param) noexcept {
        if (!WppRecorderUMdll) {
            load_WppRecorderUM();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WppRecorderUMdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WPTaskScheduler_func(LPCSTR param) noexcept {
        if (!WPTaskSchedulerdll) {
            load_WPTaskScheduler();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WPTaskSchedulerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wpx_func(LPCSTR param) noexcept {
        if (!wpxdll) {
            load_wpx();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wpxdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ws2help_func(LPCSTR param) noexcept {
        if (!ws2helpdll) {
            load_ws2help();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ws2helpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ws2_32_func(LPCSTR param) noexcept {
        if (!ws2_32dll) {
            load_ws2_32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ws2_32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wscapi_func(LPCSTR param) noexcept {
        if (!wscapidll) {
            load_wscapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wscapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wscinterop_func(LPCSTR param) noexcept {
        if (!wscinteropdll) {
            load_wscinterop();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wscinteropdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wscisvif_func(LPCSTR param) noexcept {
        if (!wscisvifdll) {
            load_wscisvif();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wscisvifdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WSClient_func(LPCSTR param) noexcept {
        if (!WSClientdll) {
            load_WSClient();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WSClientdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wscproxystub_func(LPCSTR param) noexcept {
        if (!wscproxystubdll) {
            load_wscproxystub();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wscproxystubdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wscsvc_func(LPCSTR param) noexcept {
        if (!wscsvcdll) {
            load_wscsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wscsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WSDApi_func(LPCSTR param) noexcept {
        if (!WSDApidll) {
            load_WSDApi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WSDApidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wsdchngr_func(LPCSTR param) noexcept {
        if (!wsdchngrdll) {
            load_wsdchngr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wsdchngrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WsdProviderUtil_func(LPCSTR param) noexcept {
        if (!WsdProviderUtildll) {
            load_WsdProviderUtil();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WsdProviderUtildll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WSDScanProxy_func(LPCSTR param) noexcept {
        if (!WSDScanProxydll) {
            load_WSDScanProxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WSDScanProxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wsecedit_func(LPCSTR param) noexcept {
        if (!wseceditdll) {
            load_wsecedit();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wseceditdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wsepno_func(LPCSTR param) noexcept {
        if (!wsepnodll) {
            load_wsepno();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wsepnodll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wshbth_func(LPCSTR param) noexcept {
        if (!wshbthdll) {
            load_wshbth();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wshbthdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wshcon_func(LPCSTR param) noexcept {
        if (!wshcondll) {
            load_wshcon();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wshcondll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wshelper_func(LPCSTR param) noexcept {
        if (!wshelperdll) {
            load_wshelper();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wshelperdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wshext_func(LPCSTR param) noexcept {
        if (!wshextdll) {
            load_wshext();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wshextdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wshhyperv_func(LPCSTR param) noexcept {
        if (!wshhypervdll) {
            load_wshhyperv();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wshhypervdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wship6_func(LPCSTR param) noexcept {
        if (!wship6dll) {
            load_wship6();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wship6dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wshqos_func(LPCSTR param) noexcept {
        if (!wshqosdll) {
            load_wshqos();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wshqosdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wshrm_func(LPCSTR param) noexcept {
        if (!wshrmdll) {
            load_wshrm();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wshrmdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wshunix_func(LPCSTR param) noexcept {
        if (!wshunixdll) {
            load_wshunix();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wshunixdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wslapi_func(LPCSTR param) noexcept {
        if (!wslapidll) {
            load_wslapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wslapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WsmAgent_func(LPCSTR param) noexcept {
        if (!WsmAgentdll) {
            load_WsmAgent();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WsmAgentdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WSManMigrationPlugin_func(LPCSTR param) noexcept {
        if (!WSManMigrationPlugindll) {
            load_WSManMigrationPlugin();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WSManMigrationPlugindll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WsmAuto_func(LPCSTR param) noexcept {
        if (!WsmAutodll) {
            load_WsmAuto();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WsmAutodll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wsmplpxy_func(LPCSTR param) noexcept {
        if (!wsmplpxydll) {
            load_wsmplpxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wsmplpxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WsmRes_func(LPCSTR param) noexcept {
        if (!WsmResdll) {
            load_WsmRes();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WsmResdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WsmSvc_func(LPCSTR param) noexcept {
        if (!WsmSvcdll) {
            load_WsmSvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WsmSvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WsmWmiPl_func(LPCSTR param) noexcept {
        if (!WsmWmiPldll) {
            load_WsmWmiPl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WsmWmiPldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wsnmp32_func(LPCSTR param) noexcept {
        if (!wsnmp32dll) {
            load_wsnmp32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wsnmp32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wsock32_func(LPCSTR param) noexcept {
        if (!wsock32dll) {
            load_wsock32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wsock32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wsplib_func(LPCSTR param) noexcept {
        if (!wsplibdll) {
            load_wsplib();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wsplibdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wsp_fs_func(LPCSTR param) noexcept {
        if (!wsp_fsdll) {
            load_wsp_fs();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wsp_fsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wsp_health_func(LPCSTR param) noexcept {
        if (!wsp_healthdll) {
            load_wsp_health();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wsp_healthdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wsp_sr_func(LPCSTR param) noexcept {
        if (!wsp_srdll) {
            load_wsp_sr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wsp_srdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wtdccm_func(LPCSTR param) noexcept {
        if (!wtdccmdll) {
            load_wtdccm();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wtdccmdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wtdhost_func(LPCSTR param) noexcept {
        if (!wtdhostdll) {
            load_wtdhost();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wtdhostdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wtdsensor_func(LPCSTR param) noexcept {
        if (!wtdsensordll) {
            load_wtdsensor();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wtdsensordll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wtsapi32_func(LPCSTR param) noexcept {
        if (!wtsapi32dll) {
            load_wtsapi32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wtsapi32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wuapi_func(LPCSTR param) noexcept {
        if (!wuapidll) {
            load_wuapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wuapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wuaueng_func(LPCSTR param) noexcept {
        if (!wuauengdll) {
            load_wuaueng();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wuauengdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wuceffects_func(LPCSTR param) noexcept {
        if (!wuceffectsdll) {
            load_wuceffects();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wuceffectsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WUDFCoinstaller_func(LPCSTR param) noexcept {
        if (!WUDFCoinstallerdll) {
            load_WUDFCoinstaller();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WUDFCoinstallerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WUDFPlatform_func(LPCSTR param) noexcept {
        if (!WUDFPlatformdll) {
            load_WUDFPlatform();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WUDFPlatformdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WudfSMCClassExt_func(LPCSTR param) noexcept {
        if (!WudfSMCClassExtdll) {
            load_WudfSMCClassExt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WudfSMCClassExtdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WUDFx_func(LPCSTR param) noexcept {
        if (!WUDFxdll) {
            load_WUDFx();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WUDFxdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WUDFx02000_func(LPCSTR param) noexcept {
        if (!WUDFx02000dll) {
            load_WUDFx02000();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WUDFx02000dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wudriver_func(LPCSTR param) noexcept {
        if (!wudriverdll) {
            load_wudriver();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wudriverdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wups_func(LPCSTR param) noexcept {
        if (!wupsdll) {
            load_wups();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wupsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wups2_func(LPCSTR param) noexcept {
        if (!wups2dll) {
            load_wups2();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wups2dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wusys_func(LPCSTR param) noexcept {
        if (!wusysdll) {
            load_wusys();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wusysdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wvc_func(LPCSTR param) noexcept {
        if (!wvcdll) {
            load_wvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WwaApi_func(LPCSTR param) noexcept {
        if (!WwaApidll) {
            load_WwaApi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WwaApidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WwaExt_func(LPCSTR param) noexcept {
        if (!WwaExtdll) {
            load_WwaExt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WwaExtdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WWanAPI_func(LPCSTR param) noexcept {
        if (!WWanAPIdll) {
            load_WWanAPI();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WWanAPIdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wwancfg_func(LPCSTR param) noexcept {
        if (!wwancfgdll) {
            load_wwancfg();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wwancfgdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WWanHC_func(LPCSTR param) noexcept {
        if (!WWanHCdll) {
            load_WWanHC();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WWanHCdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WwanPrfl_func(LPCSTR param) noexcept {
        if (!WwanPrfldll) {
            load_WwanPrfl();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WwanPrfldll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wwanprotdim_func(LPCSTR param) noexcept {
        if (!wwanprotdimdll) {
            load_wwanprotdim();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wwanprotdimdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_WwanRadioManager_func(LPCSTR param) noexcept {
        if (!WwanRadioManagerdll) {
            load_WwanRadioManager();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(WwanRadioManagerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wwansvc_func(LPCSTR param) noexcept {
        if (!wwansvcdll) {
            load_wwansvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wwansvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_wwapi_func(LPCSTR param) noexcept {
        if (!wwapidll) {
            load_wwapi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(wwapidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_x3daudio1_0_func(LPCSTR param) noexcept {
        if (!x3daudio1_0dll) {
            load_x3daudio1_0();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(x3daudio1_0dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_x3daudio1_1_func(LPCSTR param) noexcept {
        if (!x3daudio1_1dll) {
            load_x3daudio1_1();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(x3daudio1_1dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_X3DAudio1_2_func(LPCSTR param) noexcept {
        if (!X3DAudio1_2dll) {
            load_X3DAudio1_2();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(X3DAudio1_2dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_X3DAudio1_3_func(LPCSTR param) noexcept {
        if (!X3DAudio1_3dll) {
            load_X3DAudio1_3();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(X3DAudio1_3dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_X3DAudio1_4_func(LPCSTR param) noexcept {
        if (!X3DAudio1_4dll) {
            load_X3DAudio1_4();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(X3DAudio1_4dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_X3DAudio1_5_func(LPCSTR param) noexcept {
        if (!X3DAudio1_5dll) {
            load_X3DAudio1_5();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(X3DAudio1_5dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_X3DAudio1_6_func(LPCSTR param) noexcept {
        if (!X3DAudio1_6dll) {
            load_X3DAudio1_6();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(X3DAudio1_6dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_X3DAudio1_7_func(LPCSTR param) noexcept {
        if (!X3DAudio1_7dll) {
            load_X3DAudio1_7();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(X3DAudio1_7dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_xactengine2_0_func(LPCSTR param) noexcept {
        if (!xactengine2_0dll) {
            load_xactengine2_0();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(xactengine2_0dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_xactengine2_1_func(LPCSTR param) noexcept {
        if (!xactengine2_1dll) {
            load_xactengine2_1();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(xactengine2_1dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_xactengine2_10_func(LPCSTR param) noexcept {
        if (!xactengine2_10dll) {
            load_xactengine2_10();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(xactengine2_10dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_xactengine2_2_func(LPCSTR param) noexcept {
        if (!xactengine2_2dll) {
            load_xactengine2_2();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(xactengine2_2dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_xactengine2_3_func(LPCSTR param) noexcept {
        if (!xactengine2_3dll) {
            load_xactengine2_3();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(xactengine2_3dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_xactengine2_4_func(LPCSTR param) noexcept {
        if (!xactengine2_4dll) {
            load_xactengine2_4();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(xactengine2_4dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_xactengine2_5_func(LPCSTR param) noexcept {
        if (!xactengine2_5dll) {
            load_xactengine2_5();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(xactengine2_5dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_xactengine2_6_func(LPCSTR param) noexcept {
        if (!xactengine2_6dll) {
            load_xactengine2_6();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(xactengine2_6dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_xactengine2_7_func(LPCSTR param) noexcept {
        if (!xactengine2_7dll) {
            load_xactengine2_7();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(xactengine2_7dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_xactengine2_8_func(LPCSTR param) noexcept {
        if (!xactengine2_8dll) {
            load_xactengine2_8();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(xactengine2_8dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_xactengine2_9_func(LPCSTR param) noexcept {
        if (!xactengine2_9dll) {
            load_xactengine2_9();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(xactengine2_9dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_xactengine3_0_func(LPCSTR param) noexcept {
        if (!xactengine3_0dll) {
            load_xactengine3_0();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(xactengine3_0dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_xactengine3_1_func(LPCSTR param) noexcept {
        if (!xactengine3_1dll) {
            load_xactengine3_1();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(xactengine3_1dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_xactengine3_2_func(LPCSTR param) noexcept {
        if (!xactengine3_2dll) {
            load_xactengine3_2();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(xactengine3_2dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_xactengine3_3_func(LPCSTR param) noexcept {
        if (!xactengine3_3dll) {
            load_xactengine3_3();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(xactengine3_3dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_xactengine3_4_func(LPCSTR param) noexcept {
        if (!xactengine3_4dll) {
            load_xactengine3_4();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(xactengine3_4dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_xactengine3_5_func(LPCSTR param) noexcept {
        if (!xactengine3_5dll) {
            load_xactengine3_5();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(xactengine3_5dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_xactengine3_6_func(LPCSTR param) noexcept {
        if (!xactengine3_6dll) {
            load_xactengine3_6();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(xactengine3_6dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_xactengine3_7_func(LPCSTR param) noexcept {
        if (!xactengine3_7dll) {
            load_xactengine3_7();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(xactengine3_7dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_XamlTileRender_func(LPCSTR param) noexcept {
        if (!XamlTileRenderdll) {
            load_XamlTileRender();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(XamlTileRenderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_XAPOFX1_0_func(LPCSTR param) noexcept {
        if (!XAPOFX1_0dll) {
            load_XAPOFX1_0();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(XAPOFX1_0dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_XAPOFX1_1_func(LPCSTR param) noexcept {
        if (!XAPOFX1_1dll) {
            load_XAPOFX1_1();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(XAPOFX1_1dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_XAPOFX1_2_func(LPCSTR param) noexcept {
        if (!XAPOFX1_2dll) {
            load_XAPOFX1_2();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(XAPOFX1_2dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_XAPOFX1_3_func(LPCSTR param) noexcept {
        if (!XAPOFX1_3dll) {
            load_XAPOFX1_3();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(XAPOFX1_3dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_XAPOFX1_4_func(LPCSTR param) noexcept {
        if (!XAPOFX1_4dll) {
            load_XAPOFX1_4();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(XAPOFX1_4dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_XAPOFX1_5_func(LPCSTR param) noexcept {
        if (!XAPOFX1_5dll) {
            load_XAPOFX1_5();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(XAPOFX1_5dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_XAudio2_0_func(LPCSTR param) noexcept {
        if (!XAudio2_0dll) {
            load_XAudio2_0();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(XAudio2_0dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_XAudio2_1_func(LPCSTR param) noexcept {
        if (!XAudio2_1dll) {
            load_XAudio2_1();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(XAudio2_1dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_XAudio2_2_func(LPCSTR param) noexcept {
        if (!XAudio2_2dll) {
            load_XAudio2_2();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(XAudio2_2dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_XAudio2_3_func(LPCSTR param) noexcept {
        if (!XAudio2_3dll) {
            load_XAudio2_3();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(XAudio2_3dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_XAudio2_4_func(LPCSTR param) noexcept {
        if (!XAudio2_4dll) {
            load_XAudio2_4();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(XAudio2_4dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_XAudio2_5_func(LPCSTR param) noexcept {
        if (!XAudio2_5dll) {
            load_XAudio2_5();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(XAudio2_5dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_XAudio2_6_func(LPCSTR param) noexcept {
        if (!XAudio2_6dll) {
            load_XAudio2_6();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(XAudio2_6dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_XAudio2_7_func(LPCSTR param) noexcept {
        if (!XAudio2_7dll) {
            load_XAudio2_7();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(XAudio2_7dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_XAudio2_8_func(LPCSTR param) noexcept {
        if (!XAudio2_8dll) {
            load_XAudio2_8();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(XAudio2_8dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_XAudio2_9_func(LPCSTR param) noexcept {
        if (!XAudio2_9dll) {
            load_XAudio2_9();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(XAudio2_9dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_XblAuthManager_func(LPCSTR param) noexcept {
        if (!XblAuthManagerdll) {
            load_XblAuthManager();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(XblAuthManagerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_XblAuthManagerProxy_func(LPCSTR param) noexcept {
        if (!XblAuthManagerProxydll) {
            load_XblAuthManagerProxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(XblAuthManagerProxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_XblAuthTokenBrokerExt_func(LPCSTR param) noexcept {
        if (!XblAuthTokenBrokerExtdll) {
            load_XblAuthTokenBrokerExt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(XblAuthTokenBrokerExtdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_XblGameSave_func(LPCSTR param) noexcept {
        if (!XblGameSavedll) {
            load_XblGameSave();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(XblGameSavedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_XblGameSaveExt_func(LPCSTR param) noexcept {
        if (!XblGameSaveExtdll) {
            load_XblGameSaveExt();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(XblGameSaveExtdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_XblGameSaveProxy_func(LPCSTR param) noexcept {
        if (!XblGameSaveProxydll) {
            load_XblGameSaveProxy();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(XblGameSaveProxydll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_XboxGipRadioManager_func(LPCSTR param) noexcept {
        if (!XboxGipRadioManagerdll) {
            load_XboxGipRadioManager();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(XboxGipRadioManagerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_xboxgipsvc_func(LPCSTR param) noexcept {
        if (!xboxgipsvcdll) {
            load_xboxgipsvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(xboxgipsvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_xboxgipsynthetic_func(LPCSTR param) noexcept {
        if (!xboxgipsyntheticdll) {
            load_xboxgipsynthetic();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(xboxgipsyntheticdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_XboxNetApiSvc_func(LPCSTR param) noexcept {
        if (!XboxNetApiSvcdll) {
            load_XboxNetApiSvc();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(XboxNetApiSvcdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_xinput1_1_func(LPCSTR param) noexcept {
        if (!xinput1_1dll) {
            load_xinput1_1();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(xinput1_1dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_xinput1_2_func(LPCSTR param) noexcept {
        if (!xinput1_2dll) {
            load_xinput1_2();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(xinput1_2dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_xinput1_3_func(LPCSTR param) noexcept {
        if (!xinput1_3dll) {
            load_xinput1_3();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(xinput1_3dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_XInput1_4_func(LPCSTR param) noexcept {
        if (!XInput1_4dll) {
            load_XInput1_4();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(XInput1_4dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_XInput9_1_0_func(LPCSTR param) noexcept {
        if (!XInput9_1_0dll) {
            load_XInput9_1_0();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(XInput9_1_0dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_XInputUap_func(LPCSTR param) noexcept {
        if (!XInputUapdll) {
            load_XInputUap();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(XInputUapdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_xmlfilter_func(LPCSTR param) noexcept {
        if (!xmlfilterdll) {
            load_xmlfilter();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(xmlfilterdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_xmllite_func(LPCSTR param) noexcept {
        if (!xmllitedll) {
            load_xmllite();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(xmllitedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_xmlprovi_func(LPCSTR param) noexcept {
        if (!xmlprovidll) {
            load_xmlprovi();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(xmlprovidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_xolehlp_func(LPCSTR param) noexcept {
        if (!xolehlpdll) {
            load_xolehlp();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(xolehlpdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_XpsDocumentTargetPrint_func(LPCSTR param) noexcept {
        if (!XpsDocumentTargetPrintdll) {
            load_XpsDocumentTargetPrint();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(XpsDocumentTargetPrintdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_XpsGdiConverter_func(LPCSTR param) noexcept {
        if (!XpsGdiConverterdll) {
            load_XpsGdiConverter();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(XpsGdiConverterdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_XpsPrint_func(LPCSTR param) noexcept {
        if (!XpsPrintdll) {
            load_XpsPrint();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(XpsPrintdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_xpspushlayer_func(LPCSTR param) noexcept {
        if (!xpspushlayerdll) {
            load_xpspushlayer();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(xpspushlayerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_XpsRasterService_func(LPCSTR param) noexcept {
        if (!XpsRasterServicedll) {
            load_XpsRasterService();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(XpsRasterServicedll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_xpsservices_func(LPCSTR param) noexcept {
        if (!xpsservicesdll) {
            load_xpsservices();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(xpsservicesdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_XpsToPclmConverter_func(LPCSTR param) noexcept {
        if (!XpsToPclmConverterdll) {
            load_XpsToPclmConverter();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(XpsToPclmConverterdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_XpsToPwgrConverter_func(LPCSTR param) noexcept {
        if (!XpsToPwgrConverterdll) {
            load_XpsToPwgrConverter();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(XpsToPwgrConverterdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_xwizards_func(LPCSTR param) noexcept {
        if (!xwizardsdll) {
            load_xwizards();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(xwizardsdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_xwreg_func(LPCSTR param) noexcept {
        if (!xwregdll) {
            load_xwreg();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(xwregdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_xwtpdui_func(LPCSTR param) noexcept {
        if (!xwtpduidll) {
            load_xwtpdui();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(xwtpduidll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_xwtpw32_func(LPCSTR param) noexcept {
        if (!xwtpw32dll) {
            load_xwtpw32();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(xwtpw32dll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ze_loader_func(LPCSTR param) noexcept {
        if (!ze_loaderdll) {
            load_ze_loader();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ze_loaderdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ze_validation_layer_func(LPCSTR param) noexcept {
        if (!ze_validation_layerdll) {
            load_ze_validation_layer();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ze_validation_layerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_zipcontainer_func(LPCSTR param) noexcept {
        if (!zipcontainerdll) {
            load_zipcontainer();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(zipcontainerdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_zipfldr_func(LPCSTR param) noexcept {
        if (!zipfldrdll) {
            load_zipfldr();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(zipfldrdll, param));
    }
    template <typename FuncPtr> [[nodiscard]] __forceinline
    FuncPtr find_ztrace_maps_func(LPCSTR param) noexcept {
        if (!ztrace_mapsdll) {
            load_ztrace_maps();
        }
        return reinterpret_cast<FuncPtr>(get_symbol_address(ztrace_mapsdll, param));
    }

    ////////////////////////////////////////////////////////////////////////////
    //               Initialize libraries for easy consumption
    ////////////////////////////////////////////////////////////////////////////

private:
    __forceinline LoadLibraryA_t set_loadlibrary_a(UINT_PTR _kernel32dll) const noexcept {
        char szLoadLibraryA[] = "LoadLibraryA";
        return reinterpret_cast<LoadLibraryA_t>(get_symbol_address(_kernel32dll, szLoadLibraryA));
    }

    ////////////////////////////////////////////////////////////////////////////
    //               Generated using generator python script
    ////////////////////////////////////////////////////////////////////////////

    __forceinline void load_aadauthhelper() noexcept {
        if (f_LoadLibraryA) {
            char aadauthhelperdll_str[] = "aadauthhelper.dll";
            aadauthhelperdll = f_LoadLibraryA(aadauthhelperdll_str);
        }
    }
    __forceinline void load_aadcloudap() noexcept {
        if (f_LoadLibraryA) {
            char aadcloudapdll_str[] = "aadcloudap.dll";
            aadcloudapdll = f_LoadLibraryA(aadcloudapdll_str);
        }
    }
    __forceinline void load_aadjcsp() noexcept {
        if (f_LoadLibraryA) {
            char aadjcspdll_str[] = "aadjcsp.dll";
            aadjcspdll = f_LoadLibraryA(aadjcspdll_str);
        }
    }
    __forceinline void load_aadtb() noexcept {
        if (f_LoadLibraryA) {
            char aadtbdll_str[] = "aadtb.dll";
            aadtbdll = f_LoadLibraryA(aadtbdll_str);
        }
    }
    __forceinline void load_aadWamExtension() noexcept {
        if (f_LoadLibraryA) {
            char aadWamExtensiondll_str[] = "aadWamExtension.dll";
            aadWamExtensiondll = f_LoadLibraryA(aadWamExtensiondll_str);
        }
    }
    __forceinline void load_AarSvc() noexcept {
        if (f_LoadLibraryA) {
            char AarSvcdll_str[] = "AarSvc.dll";
            AarSvcdll = f_LoadLibraryA(AarSvcdll_str);
        }
    }
    __forceinline void load_AboutSettingsHandlers() noexcept {
        if (f_LoadLibraryA) {
            char AboutSettingsHandlersdll_str[] = "AboutSettingsHandlers.dll";
            AboutSettingsHandlersdll = f_LoadLibraryA(AboutSettingsHandlersdll_str);
        }
    }
    __forceinline void load_AboveLockAppHost() noexcept {
        if (f_LoadLibraryA) {
            char AboveLockAppHostdll_str[] = "AboveLockAppHost.dll";
            AboveLockAppHostdll = f_LoadLibraryA(AboveLockAppHostdll_str);
        }
    }
    __forceinline void load_accessibilitycpl() noexcept {
        if (f_LoadLibraryA) {
            char accessibilitycpldll_str[] = "accessibilitycpl.dll";
            accessibilitycpldll = f_LoadLibraryA(accessibilitycpldll_str);
        }
    }
    __forceinline void load_accountaccessor() noexcept {
        if (f_LoadLibraryA) {
            char accountaccessordll_str[] = "accountaccessor.dll";
            accountaccessordll = f_LoadLibraryA(accountaccessordll_str);
        }
    }
    __forceinline void load_AccountsRt() noexcept {
        if (f_LoadLibraryA) {
            char AccountsRtdll_str[] = "AccountsRt.dll";
            AccountsRtdll = f_LoadLibraryA(AccountsRtdll_str);
        }
    }
    __forceinline void load_AcGenral() noexcept {
        if (f_LoadLibraryA) {
            char AcGenraldll_str[] = "AcGenral.dll";
            AcGenraldll = f_LoadLibraryA(AcGenraldll_str);
        }
    }
    __forceinline void load_AcLayers() noexcept {
        if (f_LoadLibraryA) {
            char AcLayersdll_str[] = "AcLayers.dll";
            AcLayersdll = f_LoadLibraryA(AcLayersdll_str);
        }
    }
    __forceinline void load_acledit() noexcept {
        if (f_LoadLibraryA) {
            char acleditdll_str[] = "acledit.dll";
            acleditdll = f_LoadLibraryA(acleditdll_str);
        }
    }
    __forceinline void load_aclui() noexcept {
        if (f_LoadLibraryA) {
            char acluidll_str[] = "aclui.dll";
            acluidll = f_LoadLibraryA(acluidll_str);
        }
    }
    __forceinline void load_acmigration() noexcept {
        if (f_LoadLibraryA) {
            char acmigrationdll_str[] = "acmigration.dll";
            acmigrationdll = f_LoadLibraryA(acmigrationdll_str);
        }
    }
    __forceinline void load_ACPBackgroundManagerPolicy() noexcept {
        if (f_LoadLibraryA) {
            char ACPBackgroundManagerPolicydll_str[] = "ACPBackgroundManagerPolicy.dll";
            ACPBackgroundManagerPolicydll = f_LoadLibraryA(ACPBackgroundManagerPolicydll_str);
        }
    }
    __forceinline void load_acppage() noexcept {
        if (f_LoadLibraryA) {
            char acppagedll_str[] = "acppage.dll";
            acppagedll = f_LoadLibraryA(acppagedll_str);
        }
    }
    __forceinline void load_acproxy() noexcept {
        if (f_LoadLibraryA) {
            char acproxydll_str[] = "acproxy.dll";
            acproxydll = f_LoadLibraryA(acproxydll_str);
        }
    }
    __forceinline void load_AcSpecfc() noexcept {
        if (f_LoadLibraryA) {
            char AcSpecfcdll_str[] = "AcSpecfc.dll";
            AcSpecfcdll = f_LoadLibraryA(AcSpecfcdll_str);
        }
    }
    __forceinline void load_ActionCenter() noexcept {
        if (f_LoadLibraryA) {
            char ActionCenterdll_str[] = "ActionCenter.dll";
            ActionCenterdll = f_LoadLibraryA(ActionCenterdll_str);
        }
    }
    __forceinline void load_ActionCenterCPL() noexcept {
        if (f_LoadLibraryA) {
            char ActionCenterCPLdll_str[] = "ActionCenterCPL.dll";
            ActionCenterCPLdll = f_LoadLibraryA(ActionCenterCPLdll_str);
        }
    }
    __forceinline void load_ActionQueue() noexcept {
        if (f_LoadLibraryA) {
            char ActionQueuedll_str[] = "ActionQueue.dll";
            ActionQueuedll = f_LoadLibraryA(ActionQueuedll_str);
        }
    }
    __forceinline void load_ActivationClient() noexcept {
        if (f_LoadLibraryA) {
            char ActivationClientdll_str[] = "ActivationClient.dll";
            ActivationClientdll = f_LoadLibraryA(ActivationClientdll_str);
        }
    }
    __forceinline void load_ActivationManager() noexcept {
        if (f_LoadLibraryA) {
            char ActivationManagerdll_str[] = "ActivationManager.dll";
            ActivationManagerdll = f_LoadLibraryA(ActivationManagerdll_str);
        }
    }
    __forceinline void load_ActivationVdev() noexcept {
        if (f_LoadLibraryA) {
            char ActivationVdevdll_str[] = "ActivationVdev.dll";
            ActivationVdevdll = f_LoadLibraryA(ActivationVdevdll_str);
        }
    }
    __forceinline void load_activeds() noexcept {
        if (f_LoadLibraryA) {
            char activedsdll_str[] = "activeds.dll";
            activedsdll = f_LoadLibraryA(activedsdll_str);
        }
    }
    __forceinline void load_ActiveSyncCsp() noexcept {
        if (f_LoadLibraryA) {
            char ActiveSyncCspdll_str[] = "ActiveSyncCsp.dll";
            ActiveSyncCspdll = f_LoadLibraryA(ActiveSyncCspdll_str);
        }
    }
    __forceinline void load_ActiveSyncProvider() noexcept {
        if (f_LoadLibraryA) {
            char ActiveSyncProviderdll_str[] = "ActiveSyncProvider.dll";
            ActiveSyncProviderdll = f_LoadLibraryA(ActiveSyncProviderdll_str);
        }
    }
    __forceinline void load_actxprxy() noexcept {
        if (f_LoadLibraryA) {
            char actxprxydll_str[] = "actxprxy.dll";
            actxprxydll = f_LoadLibraryA(actxprxydll_str);
        }
    }
    __forceinline void load_AcWinRT() noexcept {
        if (f_LoadLibraryA) {
            char AcWinRTdll_str[] = "AcWinRT.dll";
            AcWinRTdll = f_LoadLibraryA(AcWinRTdll_str);
        }
    }
    __forceinline void load_AcXtrnal() noexcept {
        if (f_LoadLibraryA) {
            char AcXtrnaldll_str[] = "AcXtrnal.dll";
            AcXtrnaldll = f_LoadLibraryA(AcXtrnaldll_str);
        }
    }
    __forceinline void load_AdaptiveCards() noexcept {
        if (f_LoadLibraryA) {
            char AdaptiveCardsdll_str[] = "AdaptiveCards.dll";
            AdaptiveCardsdll = f_LoadLibraryA(AdaptiveCardsdll_str);
        }
    }
    __forceinline void load_AddressParser() noexcept {
        if (f_LoadLibraryA) {
            char AddressParserdll_str[] = "AddressParser.dll";
            AddressParserdll = f_LoadLibraryA(AddressParserdll_str);
        }
    }
    __forceinline void load_adhapi() noexcept {
        if (f_LoadLibraryA) {
            char adhapidll_str[] = "adhapi.dll";
            adhapidll = f_LoadLibraryA(adhapidll_str);
        }
    }
    __forceinline void load_adhsvc() noexcept {
        if (f_LoadLibraryA) {
            char adhsvcdll_str[] = "adhsvc.dll";
            adhsvcdll = f_LoadLibraryA(adhsvcdll_str);
        }
    }
    __forceinline void load_AdmTmpl() noexcept {
        if (f_LoadLibraryA) {
            char AdmTmpldll_str[] = "AdmTmpl.dll";
            AdmTmpldll = f_LoadLibraryA(AdmTmpldll_str);
        }
    }
    __forceinline void load_admwprox() noexcept {
        if (f_LoadLibraryA) {
            char admwproxdll_str[] = "admwprox.dll";
            admwproxdll = f_LoadLibraryA(admwproxdll_str);
        }
    }
    __forceinline void load_adprovider() noexcept {
        if (f_LoadLibraryA) {
            char adproviderdll_str[] = "adprovider.dll";
            adproviderdll = f_LoadLibraryA(adproviderdll_str);
        }
    }
    __forceinline void load_adrclient() noexcept {
        if (f_LoadLibraryA) {
            char adrclientdll_str[] = "adrclient.dll";
            adrclientdll = f_LoadLibraryA(adrclientdll_str);
        }
    }
    __forceinline void load_adsldp() noexcept {
        if (f_LoadLibraryA) {
            char adsldpdll_str[] = "adsldp.dll";
            adsldpdll = f_LoadLibraryA(adsldpdll_str);
        }
    }
    __forceinline void load_adsldpc() noexcept {
        if (f_LoadLibraryA) {
            char adsldpcdll_str[] = "adsldpc.dll";
            adsldpcdll = f_LoadLibraryA(adsldpcdll_str);
        }
    }
    __forceinline void load_adsmsext() noexcept {
        if (f_LoadLibraryA) {
            char adsmsextdll_str[] = "adsmsext.dll";
            adsmsextdll = f_LoadLibraryA(adsmsextdll_str);
        }
    }
    __forceinline void load_adsnt() noexcept {
        if (f_LoadLibraryA) {
            char adsntdll_str[] = "adsnt.dll";
            adsntdll = f_LoadLibraryA(adsntdll_str);
        }
    }
    __forceinline void load_adtschema() noexcept {
        if (f_LoadLibraryA) {
            char adtschemadll_str[] = "adtschema.dll";
            adtschemadll = f_LoadLibraryA(adtschemadll_str);
        }
    }
    __forceinline void load_AdvancedEmojiDS() noexcept {
        if (f_LoadLibraryA) {
            char AdvancedEmojiDSdll_str[] = "AdvancedEmojiDS.dll";
            AdvancedEmojiDSdll = f_LoadLibraryA(AdvancedEmojiDSdll_str);
        }
    }
    __forceinline void load_advapi32() noexcept {
        if (f_LoadLibraryA) {
            char advapi32dll_str[] = "advapi32.dll";
            advapi32dll = f_LoadLibraryA(advapi32dll_str);
        }
    }
    __forceinline void load_advapi32res() noexcept {
        if (f_LoadLibraryA) {
            char advapi32resdll_str[] = "advapi32res.dll";
            advapi32resdll = f_LoadLibraryA(advapi32resdll_str);
        }
    }
    __forceinline void load_advpack() noexcept {
        if (f_LoadLibraryA) {
            char advpackdll_str[] = "advpack.dll";
            advpackdll = f_LoadLibraryA(advpackdll_str);
        }
    }
    __forceinline void load_aeevts() noexcept {
        if (f_LoadLibraryA) {
            char aeevtsdll_str[] = "aeevts.dll";
            aeevtsdll = f_LoadLibraryA(aeevtsdll_str);
        }
    }
    __forceinline void load_aeinv() noexcept {
        if (f_LoadLibraryA) {
            char aeinvdll_str[] = "aeinv.dll";
            aeinvdll = f_LoadLibraryA(aeinvdll_str);
        }
    }
    __forceinline void load_aemarebackup() noexcept {
        if (f_LoadLibraryA) {
            char aemarebackupdll_str[] = "aemarebackup.dll";
            aemarebackupdll = f_LoadLibraryA(aemarebackupdll_str);
        }
    }
    __forceinline void load_aepic() noexcept {
        if (f_LoadLibraryA) {
            char aepicdll_str[] = "aepic.dll";
            aepicdll = f_LoadLibraryA(aepicdll_str);
        }
    }
    __forceinline void load_agentactivationruntime() noexcept {
        if (f_LoadLibraryA) {
            char agentactivationruntimedll_str[] = "agentactivationruntime.dll";
            agentactivationruntimedll = f_LoadLibraryA(agentactivationruntimedll_str);
        }
    }
    __forceinline void load_agentactivationruntimewindows() noexcept {
        if (f_LoadLibraryA) {
            char agentactivationruntimewindowsdll_str[] = "agentactivationruntimewindows.dll";
            agentactivationruntimewindowsdll = f_LoadLibraryA(agentactivationruntimewindowsdll_str);
        }
    }
    __forceinline void load_ahadmin() noexcept {
        if (f_LoadLibraryA) {
            char ahadmindll_str[] = "ahadmin.dll";
            ahadmindll = f_LoadLibraryA(ahadmindll_str);
        }
    }
    __forceinline void load_AJRouter() noexcept {
        if (f_LoadLibraryA) {
            char AJRouterdll_str[] = "AJRouter.dll";
            AJRouterdll = f_LoadLibraryA(AJRouterdll_str);
        }
    }
    __forceinline void load_amsi() noexcept {
        if (f_LoadLibraryA) {
            char amsidll_str[] = "amsi.dll";
            amsidll = f_LoadLibraryA(amsidll_str);
        }
    }
    __forceinline void load_amsiproxy() noexcept {
        if (f_LoadLibraryA) {
            char amsiproxydll_str[] = "amsiproxy.dll";
            amsiproxydll = f_LoadLibraryA(amsiproxydll_str);
        }
    }
    __forceinline void load_amstream() noexcept {
        if (f_LoadLibraryA) {
            char amstreamdll_str[] = "amstream.dll";
            amstreamdll = f_LoadLibraryA(amstreamdll_str);
        }
    }
    __forceinline void load_AnalogShellBroker() noexcept {
        if (f_LoadLibraryA) {
            char AnalogShellBrokerdll_str[] = "Analog.Shell.Broker.dll";
            AnalogShellBrokerdll = f_LoadLibraryA(AnalogShellBrokerdll_str);
        }
    }
    __forceinline void load_AnalogCommonProxyStub() noexcept {
        if (f_LoadLibraryA) {
            char AnalogCommonProxyStubdll_str[] = "AnalogCommonProxyStub.dll";
            AnalogCommonProxyStubdll = f_LoadLibraryA(AnalogCommonProxyStubdll_str);
        }
    }
    __forceinline void load_apds() noexcept {
        if (f_LoadLibraryA) {
            char apdsdll_str[] = "apds.dll";
            apdsdll = f_LoadLibraryA(apdsdll_str);
        }
    }
    __forceinline void load_APHostClient() noexcept {
        if (f_LoadLibraryA) {
            char APHostClientdll_str[] = "APHostClient.dll";
            APHostClientdll = f_LoadLibraryA(APHostClientdll_str);
        }
    }
    __forceinline void load_APHostRes() noexcept {
        if (f_LoadLibraryA) {
            char APHostResdll_str[] = "APHostRes.dll";
            APHostResdll = f_LoadLibraryA(APHostResdll_str);
        }
    }
    __forceinline void load_APHostService() noexcept {
        if (f_LoadLibraryA) {
            char APHostServicedll_str[] = "APHostService.dll";
            APHostServicedll = f_LoadLibraryA(APHostServicedll_str);
        }
    }
    __forceinline void load_apisampling() noexcept {
        if (f_LoadLibraryA) {
            char apisamplingdll_str[] = "apisampling.dll";
            apisamplingdll = f_LoadLibraryA(apisamplingdll_str);
        }
    }
    __forceinline void load_ApiSetHostAppExecutionAlias() noexcept {
        if (f_LoadLibraryA) {
            char ApiSetHostAppExecutionAliasdll_str[] = "ApiSetHost.AppExecutionAlias.dll";
            ApiSetHostAppExecutionAliasdll = f_LoadLibraryA(ApiSetHostAppExecutionAliasdll_str);
        }
    }
    __forceinline void load_apisetschema() noexcept {
        if (f_LoadLibraryA) {
            char apisetschemadll_str[] = "apisetschema.dll";
            apisetschemadll = f_LoadLibraryA(apisetschemadll_str);
        }
    }
    __forceinline void load_APMon() noexcept {
        if (f_LoadLibraryA) {
            char APMondll_str[] = "APMon.dll";
            APMondll = f_LoadLibraryA(APMondll_str);
        }
    }
    __forceinline void load_APMonUI() noexcept {
        if (f_LoadLibraryA) {
            char APMonUIdll_str[] = "APMonUI.dll";
            APMonUIdll = f_LoadLibraryA(APMonUIdll_str);
        }
    }
    __forceinline void load_AppContracts() noexcept {
        if (f_LoadLibraryA) {
            char AppContractsdll_str[] = "AppContracts.dll";
            AppContractsdll = f_LoadLibraryA(AppContractsdll_str);
        }
    }
    __forceinline void load_AppExtension() noexcept {
        if (f_LoadLibraryA) {
            char AppExtensiondll_str[] = "AppExtension.dll";
            AppExtensiondll = f_LoadLibraryA(AppExtensiondll_str);
        }
    }
    __forceinline void load_apphelp() noexcept {
        if (f_LoadLibraryA) {
            char apphelpdll_str[] = "apphelp.dll";
            apphelpdll = f_LoadLibraryA(apphelpdll_str);
        }
    }
    __forceinline void load_Apphlpdm() noexcept {
        if (f_LoadLibraryA) {
            char Apphlpdmdll_str[] = "Apphlpdm.dll";
            Apphlpdmdll = f_LoadLibraryA(Apphlpdmdll_str);
        }
    }
    __forceinline void load_appidapi() noexcept {
        if (f_LoadLibraryA) {
            char appidapidll_str[] = "appidapi.dll";
            appidapidll = f_LoadLibraryA(appidapidll_str);
        }
    }
    __forceinline void load_AppIdPolicyEngineApi() noexcept {
        if (f_LoadLibraryA) {
            char AppIdPolicyEngineApidll_str[] = "AppIdPolicyEngineApi.dll";
            AppIdPolicyEngineApidll = f_LoadLibraryA(AppIdPolicyEngineApidll_str);
        }
    }
    __forceinline void load_appidsvc() noexcept {
        if (f_LoadLibraryA) {
            char appidsvcdll_str[] = "appidsvc.dll";
            appidsvcdll = f_LoadLibraryA(appidsvcdll_str);
        }
    }
    __forceinline void load_appinfo() noexcept {
        if (f_LoadLibraryA) {
            char appinfodll_str[] = "appinfo.dll";
            appinfodll = f_LoadLibraryA(appinfodll_str);
        }
    }
    __forceinline void load_appinfoext() noexcept {
        if (f_LoadLibraryA) {
            char appinfoextdll_str[] = "appinfoext.dll";
            appinfoextdll = f_LoadLibraryA(appinfoextdll_str);
        }
    }
    __forceinline void load_AppInstallerPromptDesktop() noexcept {
        if (f_LoadLibraryA) {
            char AppInstallerPromptDesktopdll_str[] = "AppInstallerPrompt.Desktop.dll";
            AppInstallerPromptDesktopdll = f_LoadLibraryA(AppInstallerPromptDesktopdll_str);
        }
    }
    __forceinline void load_ApplicationControlCSP() noexcept {
        if (f_LoadLibraryA) {
            char ApplicationControlCSPdll_str[] = "ApplicationControlCSP.dll";
            ApplicationControlCSPdll = f_LoadLibraryA(ApplicationControlCSPdll_str);
        }
    }
    __forceinline void load_ApplicationFrame() noexcept {
        if (f_LoadLibraryA) {
            char ApplicationFramedll_str[] = "ApplicationFrame.dll";
            ApplicationFramedll = f_LoadLibraryA(ApplicationFramedll_str);
        }
    }
    __forceinline void load_ApplicationTargetedFeatureDatabase() noexcept {
        if (f_LoadLibraryA) {
            char ApplicationTargetedFeatureDatabasedll_str[] = "ApplicationTargetedFeatureDatabase.dll";
            ApplicationTargetedFeatureDatabasedll = f_LoadLibraryA(ApplicationTargetedFeatureDatabasedll_str);
        }
    }
    __forceinline void load_AppListBackupLauncher() noexcept {
        if (f_LoadLibraryA) {
            char AppListBackupLauncherdll_str[] = "AppListBackupLauncher.dll";
            AppListBackupLauncherdll = f_LoadLibraryA(AppListBackupLauncherdll_str);
        }
    }
    __forceinline void load_AppLockerCSP() noexcept {
        if (f_LoadLibraryA) {
            char AppLockerCSPdll_str[] = "AppLockerCSP.dll";
            AppLockerCSPdll = f_LoadLibraryA(AppLockerCSPdll_str);
        }
    }
    __forceinline void load_AppManagementConfiguration() noexcept {
        if (f_LoadLibraryA) {
            char AppManagementConfigurationdll_str[] = "AppManagementConfiguration.dll";
            AppManagementConfigurationdll = f_LoadLibraryA(AppManagementConfigurationdll_str);
        }
    }
    __forceinline void load_appmgmts() noexcept {
        if (f_LoadLibraryA) {
            char appmgmtsdll_str[] = "appmgmts.dll";
            appmgmtsdll = f_LoadLibraryA(appmgmtsdll_str);
        }
    }
    __forceinline void load_appmgr() noexcept {
        if (f_LoadLibraryA) {
            char appmgrdll_str[] = "appmgr.dll";
            appmgrdll = f_LoadLibraryA(appmgrdll_str);
        }
    }
    __forceinline void load_AppMon() noexcept {
        if (f_LoadLibraryA) {
            char AppMondll_str[] = "AppMon.dll";
            AppMondll = f_LoadLibraryA(AppMondll_str);
        }
    }
    __forceinline void load_AppointmentActivation() noexcept {
        if (f_LoadLibraryA) {
            char AppointmentActivationdll_str[] = "AppointmentActivation.dll";
            AppointmentActivationdll = f_LoadLibraryA(AppointmentActivationdll_str);
        }
    }
    __forceinline void load_AppointmentApis() noexcept {
        if (f_LoadLibraryA) {
            char AppointmentApisdll_str[] = "AppointmentApis.dll";
            AppointmentApisdll = f_LoadLibraryA(AppointmentApisdll_str);
        }
    }
    __forceinline void load_appraiser() noexcept {
        if (f_LoadLibraryA) {
            char appraiserdll_str[] = "appraiser.dll";
            appraiserdll = f_LoadLibraryA(appraiserdll_str);
        }
    }
    __forceinline void load_AppReadiness() noexcept {
        if (f_LoadLibraryA) {
            char AppReadinessdll_str[] = "AppReadiness.dll";
            AppReadinessdll = f_LoadLibraryA(AppReadinessdll_str);
        }
    }
    __forceinline void load_apprepapi() noexcept {
        if (f_LoadLibraryA) {
            char apprepapidll_str[] = "apprepapi.dll";
            apprepapidll = f_LoadLibraryA(apprepapidll_str);
        }
    }
    __forceinline void load_AppResolver() noexcept {
        if (f_LoadLibraryA) {
            char AppResolverdll_str[] = "AppResolver.dll";
            AppResolverdll = f_LoadLibraryA(AppResolverdll_str);
        }
    }
    __forceinline void load_appsruprov() noexcept {
        if (f_LoadLibraryA) {
            char appsruprovdll_str[] = "appsruprov.dll";
            appsruprovdll = f_LoadLibraryA(appsruprovdll_str);
        }
    }
    __forceinline void load_AppVCatalog() noexcept {
        if (f_LoadLibraryA) {
            char AppVCatalogdll_str[] = "AppVCatalog.dll";
            AppVCatalogdll = f_LoadLibraryA(AppVCatalogdll_str);
        }
    }
    __forceinline void load_AppvClientEventLog() noexcept {
        if (f_LoadLibraryA) {
            char AppvClientEventLogdll_str[] = "AppvClientEventLog.dll";
            AppvClientEventLogdll = f_LoadLibraryA(AppvClientEventLogdll_str);
        }
    }
    __forceinline void load_AppVClientPS() noexcept {
        if (f_LoadLibraryA) {
            char AppVClientPSdll_str[] = "AppVClientPS.dll";
            AppVClientPSdll = f_LoadLibraryA(AppVClientPSdll_str);
        }
    }
    __forceinline void load_AppVEntStreamingManager() noexcept {
        if (f_LoadLibraryA) {
            char AppVEntStreamingManagerdll_str[] = "AppVEntStreamingManager.dll";
            AppVEntStreamingManagerdll = f_LoadLibraryA(AppVEntStreamingManagerdll_str);
        }
    }
    __forceinline void load_AppVEntSubsystemController() noexcept {
        if (f_LoadLibraryA) {
            char AppVEntSubsystemControllerdll_str[] = "AppVEntSubsystemController.dll";
            AppVEntSubsystemControllerdll = f_LoadLibraryA(AppVEntSubsystemControllerdll_str);
        }
    }
    __forceinline void load_AppVEntSubsystems64() noexcept {
        if (f_LoadLibraryA) {
            char AppVEntSubsystems64dll_str[] = "AppVEntSubsystems64.dll";
            AppVEntSubsystems64dll = f_LoadLibraryA(AppVEntSubsystems64dll_str);
        }
    }
    __forceinline void load_AppVEntVirtualization() noexcept {
        if (f_LoadLibraryA) {
            char AppVEntVirtualizationdll_str[] = "AppVEntVirtualization.dll";
            AppVEntVirtualizationdll = f_LoadLibraryA(AppVEntVirtualizationdll_str);
        }
    }
    __forceinline void load_appverifUI() noexcept {
        if (f_LoadLibraryA) {
            char appverifUIdll_str[] = "appverifUI.dll";
            appverifUIdll = f_LoadLibraryA(appverifUIdll_str);
        }
    }
    __forceinline void load_appvetwclientres() noexcept {
        if (f_LoadLibraryA) {
            char appvetwclientresdll_str[] = "appvetwclientres.dll";
            appvetwclientresdll = f_LoadLibraryA(appvetwclientresdll_str);
        }
    }
    __forceinline void load_appvetwsharedperformance() noexcept {
        if (f_LoadLibraryA) {
            char appvetwsharedperformancedll_str[] = "appvetwsharedperformance.dll";
            appvetwsharedperformancedll = f_LoadLibraryA(appvetwsharedperformancedll_str);
        }
    }
    __forceinline void load_appvetwstreamingux() noexcept {
        if (f_LoadLibraryA) {
            char appvetwstreaminguxdll_str[] = "appvetwstreamingux.dll";
            appvetwstreaminguxdll = f_LoadLibraryA(appvetwstreaminguxdll_str);
        }
    }
    __forceinline void load_AppVFileSystemMetadata() noexcept {
        if (f_LoadLibraryA) {
            char AppVFileSystemMetadatadll_str[] = "AppVFileSystemMetadata.dll";
            AppVFileSystemMetadatadll = f_LoadLibraryA(AppVFileSystemMetadatadll_str);
        }
    }
    __forceinline void load_AppVIntegration() noexcept {
        if (f_LoadLibraryA) {
            char AppVIntegrationdll_str[] = "AppVIntegration.dll";
            AppVIntegrationdll = f_LoadLibraryA(AppVIntegrationdll_str);
        }
    }
    __forceinline void load_AppVManifest() noexcept {
        if (f_LoadLibraryA) {
            char AppVManifestdll_str[] = "AppVManifest.dll";
            AppVManifestdll = f_LoadLibraryA(AppVManifestdll_str);
        }
    }
    __forceinline void load_AppVOrchestration() noexcept {
        if (f_LoadLibraryA) {
            char AppVOrchestrationdll_str[] = "AppVOrchestration.dll";
            AppVOrchestrationdll = f_LoadLibraryA(AppVOrchestrationdll_str);
        }
    }
    __forceinline void load_AppVPolicy() noexcept {
        if (f_LoadLibraryA) {
            char AppVPolicydll_str[] = "AppVPolicy.dll";
            AppVPolicydll = f_LoadLibraryA(AppVPolicydll_str);
        }
    }
    __forceinline void load_AppVPublishing() noexcept {
        if (f_LoadLibraryA) {
            char AppVPublishingdll_str[] = "AppVPublishing.dll";
            AppVPublishingdll = f_LoadLibraryA(AppVPublishingdll_str);
        }
    }
    __forceinline void load_AppVReporting() noexcept {
        if (f_LoadLibraryA) {
            char AppVReportingdll_str[] = "AppVReporting.dll";
            AppVReportingdll = f_LoadLibraryA(AppVReportingdll_str);
        }
    }
    __forceinline void load_AppVScripting() noexcept {
        if (f_LoadLibraryA) {
            char AppVScriptingdll_str[] = "AppVScripting.dll";
            AppVScriptingdll = f_LoadLibraryA(AppVScriptingdll_str);
        }
    }
    __forceinline void load_AppVSentinel() noexcept {
        if (f_LoadLibraryA) {
            char AppVSentineldll_str[] = "AppVSentinel.dll";
            AppVSentineldll = f_LoadLibraryA(AppVSentineldll_str);
        }
    }
    __forceinline void load_AppVStreamingUX() noexcept {
        if (f_LoadLibraryA) {
            char AppVStreamingUXdll_str[] = "AppVStreamingUX.dll";
            AppVStreamingUXdll = f_LoadLibraryA(AppVStreamingUXdll_str);
        }
    }
    __forceinline void load_AppVStreamMap() noexcept {
        if (f_LoadLibraryA) {
            char AppVStreamMapdll_str[] = "AppVStreamMap.dll";
            AppVStreamMapdll = f_LoadLibraryA(AppVStreamMapdll_str);
        }
    }
    __forceinline void load_AppVTerminator() noexcept {
        if (f_LoadLibraryA) {
            char AppVTerminatordll_str[] = "AppVTerminator.dll";
            AppVTerminatordll = f_LoadLibraryA(AppVTerminatordll_str);
        }
    }
    __forceinline void load_AppxAllUserStore() noexcept {
        if (f_LoadLibraryA) {
            char AppxAllUserStoredll_str[] = "AppxAllUserStore.dll";
            AppxAllUserStoredll = f_LoadLibraryA(AppxAllUserStoredll_str);
        }
    }
    __forceinline void load_AppXApplicabilityBlob() noexcept {
        if (f_LoadLibraryA) {
            char AppXApplicabilityBlobdll_str[] = "AppXApplicabilityBlob.dll";
            AppXApplicabilityBlobdll = f_LoadLibraryA(AppXApplicabilityBlobdll_str);
        }
    }
    __forceinline void load_AppxApplicabilityEngine() noexcept {
        if (f_LoadLibraryA) {
            char AppxApplicabilityEnginedll_str[] = "AppxApplicabilityEngine.dll";
            AppxApplicabilityEnginedll = f_LoadLibraryA(AppxApplicabilityEnginedll_str);
        }
    }
    __forceinline void load_AppXDeploymentClient() noexcept {
        if (f_LoadLibraryA) {
            char AppXDeploymentClientdll_str[] = "AppXDeploymentClient.dll";
            AppXDeploymentClientdll = f_LoadLibraryA(AppXDeploymentClientdll_str);
        }
    }
    __forceinline void load_AppXDeploymentExtensionsdesktop() noexcept {
        if (f_LoadLibraryA) {
            char AppXDeploymentExtensionsdesktopdll_str[] = "AppXDeploymentExtensions.desktop.dll";
            AppXDeploymentExtensionsdesktopdll = f_LoadLibraryA(AppXDeploymentExtensionsdesktopdll_str);
        }
    }
    __forceinline void load_AppXDeploymentExtensionsonecore() noexcept {
        if (f_LoadLibraryA) {
            char AppXDeploymentExtensionsonecoredll_str[] = "AppXDeploymentExtensions.onecore.dll";
            AppXDeploymentExtensionsonecoredll = f_LoadLibraryA(AppXDeploymentExtensionsonecoredll_str);
        }
    }
    __forceinline void load_AppXDeploymentServer() noexcept {
        if (f_LoadLibraryA) {
            char AppXDeploymentServerdll_str[] = "AppXDeploymentServer.dll";
            AppXDeploymentServerdll = f_LoadLibraryA(AppXDeploymentServerdll_str);
        }
    }
    __forceinline void load_AppxPackaging() noexcept {
        if (f_LoadLibraryA) {
            char AppxPackagingdll_str[] = "AppxPackaging.dll";
            AppxPackagingdll = f_LoadLibraryA(AppxPackagingdll_str);
        }
    }
    __forceinline void load_AppxSip() noexcept {
        if (f_LoadLibraryA) {
            char AppxSipdll_str[] = "AppxSip.dll";
            AppxSipdll = f_LoadLibraryA(AppxSipdll_str);
        }
    }
    __forceinline void load_AppxStreamingDataSourcePS() noexcept {
        if (f_LoadLibraryA) {
            char AppxStreamingDataSourcePSdll_str[] = "AppxStreamingDataSourcePS.dll";
            AppxStreamingDataSourcePSdll = f_LoadLibraryA(AppxStreamingDataSourcePSdll_str);
        }
    }
    __forceinline void load_AppxSysprep() noexcept {
        if (f_LoadLibraryA) {
            char AppxSysprepdll_str[] = "AppxSysprep.dll";
            AppxSysprepdll = f_LoadLibraryA(AppxSysprepdll_str);
        }
    }
    __forceinline void load_Apx01000() noexcept {
        if (f_LoadLibraryA) {
            char Apx01000dll_str[] = "Apx01000.dll";
            Apx01000dll = f_LoadLibraryA(Apx01000dll_str);
        }
    }
    __forceinline void load_archiveint() noexcept {
        if (f_LoadLibraryA) {
            char archiveintdll_str[] = "archiveint.dll";
            archiveintdll = f_LoadLibraryA(archiveintdll_str);
        }
    }
    __forceinline void load_asferror() noexcept {
        if (f_LoadLibraryA) {
            char asferrordll_str[] = "asferror.dll";
            asferrordll = f_LoadLibraryA(asferrordll_str);
        }
    }
    __forceinline void load_aspnet_counters() noexcept {
        if (f_LoadLibraryA) {
            char aspnet_countersdll_str[] = "aspnet_counters.dll";
            aspnet_countersdll = f_LoadLibraryA(aspnet_countersdll_str);
        }
    }
    __forceinline void load_AssignedAccessCsp() noexcept {
        if (f_LoadLibraryA) {
            char AssignedAccessCspdll_str[] = "AssignedAccessCsp.dll";
            AssignedAccessCspdll = f_LoadLibraryA(AssignedAccessCspdll_str);
        }
    }
    __forceinline void load_AssignedAccessManager() noexcept {
        if (f_LoadLibraryA) {
            char AssignedAccessManagerdll_str[] = "AssignedAccessManager.dll";
            AssignedAccessManagerdll = f_LoadLibraryA(AssignedAccessManagerdll_str);
        }
    }
    __forceinline void load_assignedaccessmanagersvc() noexcept {
        if (f_LoadLibraryA) {
            char assignedaccessmanagersvcdll_str[] = "assignedaccessmanagersvc.dll";
            assignedaccessmanagersvcdll = f_LoadLibraryA(assignedaccessmanagersvcdll_str);
        }
    }
    __forceinline void load_assignedaccessproviderevents() noexcept {
        if (f_LoadLibraryA) {
            char assignedaccessprovidereventsdll_str[] = "assignedaccessproviderevents.dll";
            assignedaccessprovidereventsdll = f_LoadLibraryA(assignedaccessprovidereventsdll_str);
        }
    }
    __forceinline void load_AssignedAccessRuntime() noexcept {
        if (f_LoadLibraryA) {
            char AssignedAccessRuntimedll_str[] = "AssignedAccessRuntime.dll";
            AssignedAccessRuntimedll = f_LoadLibraryA(AssignedAccessRuntimedll_str);
        }
    }
    __forceinline void load_AssignedAccessShellProxy() noexcept {
        if (f_LoadLibraryA) {
            char AssignedAccessShellProxydll_str[] = "AssignedAccessShellProxy.dll";
            AssignedAccessShellProxydll = f_LoadLibraryA(AssignedAccessShellProxydll_str);
        }
    }
    __forceinline void load_asycfilt() noexcept {
        if (f_LoadLibraryA) {
            char asycfiltdll_str[] = "asycfilt.dll";
            asycfiltdll = f_LoadLibraryA(asycfiltdll_str);
        }
    }
    __forceinline void load_atl() noexcept {
        if (f_LoadLibraryA) {
            char atldll_str[] = "atl.dll";
            atldll = f_LoadLibraryA(atldll_str);
        }
    }
    __forceinline void load_atl100() noexcept {
        if (f_LoadLibraryA) {
            char atl100dll_str[] = "atl100.dll";
            atl100dll = f_LoadLibraryA(atl100dll_str);
        }
    }
    __forceinline void load_atl110() noexcept {
        if (f_LoadLibraryA) {
            char atl110dll_str[] = "atl110.dll";
            atl110dll = f_LoadLibraryA(atl110dll_str);
        }
    }
    __forceinline void load_atlthunk() noexcept {
        if (f_LoadLibraryA) {
            char atlthunkdll_str[] = "atlthunk.dll";
            atlthunkdll = f_LoadLibraryA(atlthunkdll_str);
        }
    }
    __forceinline void load_atmlib() noexcept {
        if (f_LoadLibraryA) {
            char atmlibdll_str[] = "atmlib.dll";
            atmlibdll = f_LoadLibraryA(atmlibdll_str);
        }
    }
    __forceinline void load_AttestationWmiProvider() noexcept {
        if (f_LoadLibraryA) {
            char AttestationWmiProviderdll_str[] = "AttestationWmiProvider.dll";
            AttestationWmiProviderdll = f_LoadLibraryA(AttestationWmiProviderdll_str);
        }
    }
    __forceinline void load_AudioEndpointBuilder() noexcept {
        if (f_LoadLibraryA) {
            char AudioEndpointBuilderdll_str[] = "AudioEndpointBuilder.dll";
            AudioEndpointBuilderdll = f_LoadLibraryA(AudioEndpointBuilderdll_str);
        }
    }
    __forceinline void load_AudioEng() noexcept {
        if (f_LoadLibraryA) {
            char AudioEngdll_str[] = "AudioEng.dll";
            AudioEngdll = f_LoadLibraryA(AudioEngdll_str);
        }
    }
    __forceinline void load_AudioHandlers() noexcept {
        if (f_LoadLibraryA) {
            char AudioHandlersdll_str[] = "AudioHandlers.dll";
            AudioHandlersdll = f_LoadLibraryA(AudioHandlersdll_str);
        }
    }
    __forceinline void load_AUDIOKSE() noexcept {
        if (f_LoadLibraryA) {
            char AUDIOKSEdll_str[] = "AUDIOKSE.dll";
            AUDIOKSEdll = f_LoadLibraryA(AUDIOKSEdll_str);
        }
    }
    __forceinline void load_audioresourceregistrar() noexcept {
        if (f_LoadLibraryA) {
            char audioresourceregistrardll_str[] = "audioresourceregistrar.dll";
            audioresourceregistrardll = f_LoadLibraryA(audioresourceregistrardll_str);
        }
    }
    __forceinline void load_AudioSes() noexcept {
        if (f_LoadLibraryA) {
            char AudioSesdll_str[] = "AudioSes.dll";
            AudioSesdll = f_LoadLibraryA(AudioSesdll_str);
        }
    }
    __forceinline void load_audiosrv() noexcept {
        if (f_LoadLibraryA) {
            char audiosrvdll_str[] = "audiosrv.dll";
            audiosrvdll = f_LoadLibraryA(audiosrvdll_str);
        }
    }
    __forceinline void load_AudioSrvPolicyManager() noexcept {
        if (f_LoadLibraryA) {
            char AudioSrvPolicyManagerdll_str[] = "AudioSrvPolicyManager.dll";
            AudioSrvPolicyManagerdll = f_LoadLibraryA(AudioSrvPolicyManagerdll_str);
        }
    }
    __forceinline void load_auditcse() noexcept {
        if (f_LoadLibraryA) {
            char auditcsedll_str[] = "auditcse.dll";
            auditcsedll = f_LoadLibraryA(auditcsedll_str);
        }
    }
    __forceinline void load_AuditNativeSnapIn() noexcept {
        if (f_LoadLibraryA) {
            char AuditNativeSnapIndll_str[] = "AuditNativeSnapIn.dll";
            AuditNativeSnapIndll = f_LoadLibraryA(AuditNativeSnapIndll_str);
        }
    }
    __forceinline void load_auditpolcore() noexcept {
        if (f_LoadLibraryA) {
            char auditpolcoredll_str[] = "auditpolcore.dll";
            auditpolcoredll = f_LoadLibraryA(auditpolcoredll_str);
        }
    }
    __forceinline void load_AuditPolicyGPInterop() noexcept {
        if (f_LoadLibraryA) {
            char AuditPolicyGPInteropdll_str[] = "AuditPolicyGPInterop.dll";
            AuditPolicyGPInteropdll = f_LoadLibraryA(AuditPolicyGPInteropdll_str);
        }
    }
    __forceinline void load_auditpolmsg() noexcept {
        if (f_LoadLibraryA) {
            char auditpolmsgdll_str[] = "auditpolmsg.dll";
            auditpolmsgdll = f_LoadLibraryA(auditpolmsgdll_str);
        }
    }
    __forceinline void load_AuthBroker() noexcept {
        if (f_LoadLibraryA) {
            char AuthBrokerdll_str[] = "AuthBroker.dll";
            AuthBrokerdll = f_LoadLibraryA(AuthBrokerdll_str);
        }
    }
    __forceinline void load_AuthBrokerUI() noexcept {
        if (f_LoadLibraryA) {
            char AuthBrokerUIdll_str[] = "AuthBrokerUI.dll";
            AuthBrokerUIdll = f_LoadLibraryA(AuthBrokerUIdll_str);
        }
    }
    __forceinline void load_authentication() noexcept {
        if (f_LoadLibraryA) {
            char authenticationdll_str[] = "authentication.dll";
            authenticationdll = f_LoadLibraryA(authenticationdll_str);
        }
    }
    __forceinline void load_AuthExt() noexcept {
        if (f_LoadLibraryA) {
            char AuthExtdll_str[] = "AuthExt.dll";
            AuthExtdll = f_LoadLibraryA(AuthExtdll_str);
        }
    }
    __forceinline void load_authfwcfg() noexcept {
        if (f_LoadLibraryA) {
            char authfwcfgdll_str[] = "authfwcfg.dll";
            authfwcfgdll = f_LoadLibraryA(authfwcfgdll_str);
        }
    }
    __forceinline void load_AuthFWGP() noexcept {
        if (f_LoadLibraryA) {
            char AuthFWGPdll_str[] = "AuthFWGP.dll";
            AuthFWGPdll = f_LoadLibraryA(AuthFWGPdll_str);
        }
    }
    __forceinline void load_AuthFWSnapin() noexcept {
        if (f_LoadLibraryA) {
            char AuthFWSnapindll_str[] = "AuthFWSnapin.dll";
            AuthFWSnapindll = f_LoadLibraryA(AuthFWSnapindll_str);
        }
    }
    __forceinline void load_AuthFWWizFwk() noexcept {
        if (f_LoadLibraryA) {
            char AuthFWWizFwkdll_str[] = "AuthFWWizFwk.dll";
            AuthFWWizFwkdll = f_LoadLibraryA(AuthFWWizFwkdll_str);
        }
    }
    __forceinline void load_AuthHostProxy() noexcept {
        if (f_LoadLibraryA) {
            char AuthHostProxydll_str[] = "AuthHostProxy.dll";
            AuthHostProxydll = f_LoadLibraryA(AuthHostProxydll_str);
        }
    }
    __forceinline void load_authui() noexcept {
        if (f_LoadLibraryA) {
            char authuidll_str[] = "authui.dll";
            authuidll = f_LoadLibraryA(authuidll_str);
        }
    }
    __forceinline void load_authz() noexcept {
        if (f_LoadLibraryA) {
            char authzdll_str[] = "authz.dll";
            authzdll = f_LoadLibraryA(authzdll_str);
        }
    }
    __forceinline void load_AutomaticAppSignInPolicy() noexcept {
        if (f_LoadLibraryA) {
            char AutomaticAppSignInPolicydll_str[] = "AutomaticAppSignInPolicy.dll";
            AutomaticAppSignInPolicydll = f_LoadLibraryA(AutomaticAppSignInPolicydll_str);
        }
    }
    __forceinline void load_autopilot() noexcept {
        if (f_LoadLibraryA) {
            char autopilotdll_str[] = "autopilot.dll";
            autopilotdll = f_LoadLibraryA(autopilotdll_str);
        }
    }
    __forceinline void load_autopilotdiag() noexcept {
        if (f_LoadLibraryA) {
            char autopilotdiagdll_str[] = "autopilotdiag.dll";
            autopilotdiagdll = f_LoadLibraryA(autopilotdiagdll_str);
        }
    }
    __forceinline void load_autoplay() noexcept {
        if (f_LoadLibraryA) {
            char autoplaydll_str[] = "autoplay.dll";
            autoplaydll = f_LoadLibraryA(autoplaydll_str);
        }
    }
    __forceinline void load_autotimesvc() noexcept {
        if (f_LoadLibraryA) {
            char autotimesvcdll_str[] = "autotimesvc.dll";
            autotimesvcdll = f_LoadLibraryA(autotimesvcdll_str);
        }
    }
    __forceinline void load_avicap32() noexcept {
        if (f_LoadLibraryA) {
            char avicap32dll_str[] = "avicap32.dll";
            avicap32dll = f_LoadLibraryA(avicap32dll_str);
        }
    }
    __forceinline void load_avifil32() noexcept {
        if (f_LoadLibraryA) {
            char avifil32dll_str[] = "avifil32.dll";
            avifil32dll = f_LoadLibraryA(avifil32dll_str);
        }
    }
    __forceinline void load_avrt() noexcept {
        if (f_LoadLibraryA) {
            char avrtdll_str[] = "avrt.dll";
            avrtdll = f_LoadLibraryA(avrtdll_str);
        }
    }
    __forceinline void load_AxInstSv() noexcept {
        if (f_LoadLibraryA) {
            char AxInstSvdll_str[] = "AxInstSv.dll";
            AxInstSvdll = f_LoadLibraryA(AxInstSvdll_str);
        }
    }
    __forceinline void load_azroles() noexcept {
        if (f_LoadLibraryA) {
            char azrolesdll_str[] = "azroles.dll";
            azrolesdll = f_LoadLibraryA(azrolesdll_str);
        }
    }
    __forceinline void load_azroleui() noexcept {
        if (f_LoadLibraryA) {
            char azroleuidll_str[] = "azroleui.dll";
            azroleuidll = f_LoadLibraryA(azroleuidll_str);
        }
    }
    __forceinline void load_AzSqlExt() noexcept {
        if (f_LoadLibraryA) {
            char AzSqlExtdll_str[] = "AzSqlExt.dll";
            AzSqlExtdll = f_LoadLibraryA(AzSqlExtdll_str);
        }
    }
    __forceinline void load_BackgroundMediaPolicy() noexcept {
        if (f_LoadLibraryA) {
            char BackgroundMediaPolicydll_str[] = "BackgroundMediaPolicy.dll";
            BackgroundMediaPolicydll = f_LoadLibraryA(BackgroundMediaPolicydll_str);
        }
    }
    __forceinline void load_BamSettingsClient() noexcept {
        if (f_LoadLibraryA) {
            char BamSettingsClientdll_str[] = "BamSettingsClient.dll";
            BamSettingsClientdll = f_LoadLibraryA(BamSettingsClientdll_str);
        }
    }
    __forceinline void load_BarcodeProvisioningPlugin() noexcept {
        if (f_LoadLibraryA) {
            char BarcodeProvisioningPlugindll_str[] = "BarcodeProvisioningPlugin.dll";
            BarcodeProvisioningPlugindll = f_LoadLibraryA(BarcodeProvisioningPlugindll_str);
        }
    }
    __forceinline void load_basecsp() noexcept {
        if (f_LoadLibraryA) {
            char basecspdll_str[] = "basecsp.dll";
            basecspdll = f_LoadLibraryA(basecspdll_str);
        }
    }
    __forceinline void load_basesrv() noexcept {
        if (f_LoadLibraryA) {
            char basesrvdll_str[] = "basesrv.dll";
            basesrvdll = f_LoadLibraryA(basesrvdll_str);
        }
    }
    __forceinline void load_batmeter() noexcept {
        if (f_LoadLibraryA) {
            char batmeterdll_str[] = "batmeter.dll";
            batmeterdll = f_LoadLibraryA(batmeterdll_str);
        }
    }
    __forceinline void load_bcastdvrproxy() noexcept {
        if (f_LoadLibraryA) {
            char bcastdvrproxydll_str[] = "bcastdvr.proxy.dll";
            bcastdvrproxydll = f_LoadLibraryA(bcastdvrproxydll_str);
        }
    }
    __forceinline void load_BcastDVRBroker() noexcept {
        if (f_LoadLibraryA) {
            char BcastDVRBrokerdll_str[] = "BcastDVRBroker.dll";
            BcastDVRBrokerdll = f_LoadLibraryA(BcastDVRBrokerdll_str);
        }
    }
    __forceinline void load_BcastDVRClient() noexcept {
        if (f_LoadLibraryA) {
            char BcastDVRClientdll_str[] = "BcastDVRClient.dll";
            BcastDVRClientdll = f_LoadLibraryA(BcastDVRClientdll_str);
        }
    }
    __forceinline void load_BcastDVRCommon() noexcept {
        if (f_LoadLibraryA) {
            char BcastDVRCommondll_str[] = "BcastDVRCommon.dll";
            BcastDVRCommondll = f_LoadLibraryA(BcastDVRCommondll_str);
        }
    }
    __forceinline void load_bcastdvruserservice() noexcept {
        if (f_LoadLibraryA) {
            char bcastdvruserservicedll_str[] = "bcastdvruserservice.dll";
            bcastdvruserservicedll = f_LoadLibraryA(bcastdvruserservicedll_str);
        }
    }
    __forceinline void load_bcd() noexcept {
        if (f_LoadLibraryA) {
            char bcddll_str[] = "bcd.dll";
            bcddll = f_LoadLibraryA(bcddll_str);
        }
    }
    __forceinline void load_bcdprov() noexcept {
        if (f_LoadLibraryA) {
            char bcdprovdll_str[] = "bcdprov.dll";
            bcdprovdll = f_LoadLibraryA(bcdprovdll_str);
        }
    }
    __forceinline void load_bcdsrv() noexcept {
        if (f_LoadLibraryA) {
            char bcdsrvdll_str[] = "bcdsrv.dll";
            bcdsrvdll = f_LoadLibraryA(bcdsrvdll_str);
        }
    }
    __forceinline void load_BCP47Langs() noexcept {
        if (f_LoadLibraryA) {
            char BCP47Langsdll_str[] = "BCP47Langs.dll";
            BCP47Langsdll = f_LoadLibraryA(BCP47Langsdll_str);
        }
    }
    __forceinline void load_BCP47mrm() noexcept {
        if (f_LoadLibraryA) {
            char BCP47mrmdll_str[] = "BCP47mrm.dll";
            BCP47mrmdll = f_LoadLibraryA(BCP47mrmdll_str);
        }
    }
    __forceinline void load_bcrypt() noexcept {
        if (f_LoadLibraryA) {
            char bcryptdll_str[] = "bcrypt.dll";
            bcryptdll = f_LoadLibraryA(bcryptdll_str);
        }
    }
    __forceinline void load_bcryptprimitives() noexcept {
        if (f_LoadLibraryA) {
            char bcryptprimitivesdll_str[] = "bcryptprimitives.dll";
            bcryptprimitivesdll = f_LoadLibraryA(bcryptprimitivesdll_str);
        }
    }
    __forceinline void load_BdeHdCfgLib() noexcept {
        if (f_LoadLibraryA) {
            char BdeHdCfgLibdll_str[] = "BdeHdCfgLib.dll";
            BdeHdCfgLibdll = f_LoadLibraryA(BdeHdCfgLibdll_str);
        }
    }
    __forceinline void load_bderepair() noexcept {
        if (f_LoadLibraryA) {
            char bderepairdll_str[] = "bderepair.dll";
            bderepairdll = f_LoadLibraryA(bderepairdll_str);
        }
    }
    __forceinline void load_bdesvc() noexcept {
        if (f_LoadLibraryA) {
            char bdesvcdll_str[] = "bdesvc.dll";
            bdesvcdll = f_LoadLibraryA(bdesvcdll_str);
        }
    }
    __forceinline void load_BdeSysprep() noexcept {
        if (f_LoadLibraryA) {
            char BdeSysprepdll_str[] = "BdeSysprep.dll";
            BdeSysprepdll = f_LoadLibraryA(BdeSysprepdll_str);
        }
    }
    __forceinline void load_bdeui() noexcept {
        if (f_LoadLibraryA) {
            char bdeuidll_str[] = "bdeui.dll";
            bdeuidll = f_LoadLibraryA(bdeuidll_str);
        }
    }
    __forceinline void load_bi() noexcept {
        if (f_LoadLibraryA) {
            char bidll_str[] = "bi.dll";
            bidll = f_LoadLibraryA(bidll_str);
        }
    }
    __forceinline void load_bidispl() noexcept {
        if (f_LoadLibraryA) {
            char bidispldll_str[] = "bidispl.dll";
            bidispldll = f_LoadLibraryA(bidispldll_str);
        }
    }
    __forceinline void load_bindfltapi() noexcept {
        if (f_LoadLibraryA) {
            char bindfltapidll_str[] = "bindfltapi.dll";
            bindfltapidll = f_LoadLibraryA(bindfltapidll_str);
        }
    }
    __forceinline void load_BingASDS() noexcept {
        if (f_LoadLibraryA) {
            char BingASDSdll_str[] = "BingASDS.dll";
            BingASDSdll = f_LoadLibraryA(BingASDSdll_str);
        }
    }
    __forceinline void load_BingFilterDS() noexcept {
        if (f_LoadLibraryA) {
            char BingFilterDSdll_str[] = "BingFilterDS.dll";
            BingFilterDSdll = f_LoadLibraryA(BingFilterDSdll_str);
        }
    }
    __forceinline void load_BingMaps() noexcept {
        if (f_LoadLibraryA) {
            char BingMapsdll_str[] = "BingMaps.dll";
            BingMapsdll = f_LoadLibraryA(BingMapsdll_str);
        }
    }
    __forceinline void load_BingOnlineServices() noexcept {
        if (f_LoadLibraryA) {
            char BingOnlineServicesdll_str[] = "BingOnlineServices.dll";
            BingOnlineServicesdll = f_LoadLibraryA(BingOnlineServicesdll_str);
        }
    }
    __forceinline void load_BioCredProv() noexcept {
        if (f_LoadLibraryA) {
            char BioCredProvdll_str[] = "BioCredProv.dll";
            BioCredProvdll = f_LoadLibraryA(BioCredProvdll_str);
        }
    }
    __forceinline void load_bisrv() noexcept {
        if (f_LoadLibraryA) {
            char bisrvdll_str[] = "bisrv.dll";
            bisrvdll = f_LoadLibraryA(bisrvdll_str);
        }
    }
    __forceinline void load_BitLockerCsp() noexcept {
        if (f_LoadLibraryA) {
            char BitLockerCspdll_str[] = "BitLockerCsp.dll";
            BitLockerCspdll = f_LoadLibraryA(BitLockerCspdll_str);
        }
    }
    __forceinline void load_bitsigd() noexcept {
        if (f_LoadLibraryA) {
            char bitsigddll_str[] = "bitsigd.dll";
            bitsigddll = f_LoadLibraryA(bitsigddll_str);
        }
    }
    __forceinline void load_bitsperf() noexcept {
        if (f_LoadLibraryA) {
            char bitsperfdll_str[] = "bitsperf.dll";
            bitsperfdll = f_LoadLibraryA(bitsperfdll_str);
        }
    }
    __forceinline void load_BitsProxy() noexcept {
        if (f_LoadLibraryA) {
            char BitsProxydll_str[] = "BitsProxy.dll";
            BitsProxydll = f_LoadLibraryA(BitsProxydll_str);
        }
    }
    __forceinline void load_biwinrt() noexcept {
        if (f_LoadLibraryA) {
            char biwinrtdll_str[] = "biwinrt.dll";
            biwinrtdll = f_LoadLibraryA(biwinrtdll_str);
        }
    }
    __forceinline void load_BlbEvents() noexcept {
        if (f_LoadLibraryA) {
            char BlbEventsdll_str[] = "BlbEvents.dll";
            BlbEventsdll = f_LoadLibraryA(BlbEventsdll_str);
        }
    }
    __forceinline void load_blbres() noexcept {
        if (f_LoadLibraryA) {
            char blbresdll_str[] = "blbres.dll";
            blbresdll = f_LoadLibraryA(blbresdll_str);
        }
    }
    __forceinline void load_blb_ps() noexcept {
        if (f_LoadLibraryA) {
            char blb_psdll_str[] = "blb_ps.dll";
            blb_psdll = f_LoadLibraryA(blb_psdll_str);
        }
    }
    __forceinline void load_BluetoothApis() noexcept {
        if (f_LoadLibraryA) {
            char BluetoothApisdll_str[] = "BluetoothApis.dll";
            BluetoothApisdll = f_LoadLibraryA(BluetoothApisdll_str);
        }
    }
    __forceinline void load_BluetoothDesktopHandlers() noexcept {
        if (f_LoadLibraryA) {
            char BluetoothDesktopHandlersdll_str[] = "BluetoothDesktopHandlers.dll";
            BluetoothDesktopHandlersdll = f_LoadLibraryA(BluetoothDesktopHandlersdll_str);
        }
    }
    __forceinline void load_BluetoothOppPushClient() noexcept {
        if (f_LoadLibraryA) {
            char BluetoothOppPushClientdll_str[] = "BluetoothOppPushClient.dll";
            BluetoothOppPushClientdll = f_LoadLibraryA(BluetoothOppPushClientdll_str);
        }
    }
    __forceinline void load_bnmanager() noexcept {
        if (f_LoadLibraryA) {
            char bnmanagerdll_str[] = "bnmanager.dll";
            bnmanagerdll = f_LoadLibraryA(bnmanagerdll_str);
        }
    }
    __forceinline void load_BootMenuUX() noexcept {
        if (f_LoadLibraryA) {
            char BootMenuUXdll_str[] = "BootMenuUX.dll";
            BootMenuUXdll = f_LoadLibraryA(BootMenuUXdll_str);
        }
    }
    __forceinline void load_bootstr() noexcept {
        if (f_LoadLibraryA) {
            char bootstrdll_str[] = "bootstr.dll";
            bootstrdll = f_LoadLibraryA(bootstrdll_str);
        }
    }
    __forceinline void load_bootsvc() noexcept {
        if (f_LoadLibraryA) {
            char bootsvcdll_str[] = "bootsvc.dll";
            bootsvcdll = f_LoadLibraryA(bootsvcdll_str);
        }
    }
    __forceinline void load_bootux() noexcept {
        if (f_LoadLibraryA) {
            char bootuxdll_str[] = "bootux.dll";
            bootuxdll = f_LoadLibraryA(bootuxdll_str);
        }
    }
    __forceinline void load_bridgeres() noexcept {
        if (f_LoadLibraryA) {
            char bridgeresdll_str[] = "bridgeres.dll";
            bridgeresdll = f_LoadLibraryA(bridgeresdll_str);
        }
    }
    __forceinline void load_BrokerFileDialog() noexcept {
        if (f_LoadLibraryA) {
            char BrokerFileDialogdll_str[] = "BrokerFileDialog.dll";
            BrokerFileDialogdll = f_LoadLibraryA(BrokerFileDialogdll_str);
        }
    }
    __forceinline void load_BrokerLib() noexcept {
        if (f_LoadLibraryA) {
            char BrokerLibdll_str[] = "BrokerLib.dll";
            BrokerLibdll = f_LoadLibraryA(BrokerLibdll_str);
        }
    }
    __forceinline void load_browcli() noexcept {
        if (f_LoadLibraryA) {
            char browclidll_str[] = "browcli.dll";
            browclidll = f_LoadLibraryA(browclidll_str);
        }
    }
    __forceinline void load_browserbroker() noexcept {
        if (f_LoadLibraryA) {
            char browserbrokerdll_str[] = "browserbroker.dll";
            browserbrokerdll = f_LoadLibraryA(browserbrokerdll_str);
        }
    }
    __forceinline void load_browseui() noexcept {
        if (f_LoadLibraryA) {
            char browseuidll_str[] = "browseui.dll";
            browseuidll = f_LoadLibraryA(browseuidll_str);
        }
    }
    __forceinline void load_BTAGService() noexcept {
        if (f_LoadLibraryA) {
            char BTAGServicedll_str[] = "BTAGService.dll";
            BTAGServicedll = f_LoadLibraryA(BTAGServicedll_str);
        }
    }
    __forceinline void load_BthAvctpSvc() noexcept {
        if (f_LoadLibraryA) {
            char BthAvctpSvcdll_str[] = "BthAvctpSvc.dll";
            BthAvctpSvcdll = f_LoadLibraryA(BthAvctpSvcdll_str);
        }
    }
    __forceinline void load_BthAvrcp() noexcept {
        if (f_LoadLibraryA) {
            char BthAvrcpdll_str[] = "BthAvrcp.dll";
            BthAvrcpdll = f_LoadLibraryA(BthAvrcpdll_str);
        }
    }
    __forceinline void load_BthAvrcpAppSvc() noexcept {
        if (f_LoadLibraryA) {
            char BthAvrcpAppSvcdll_str[] = "BthAvrcpAppSvc.dll";
            BthAvrcpAppSvcdll = f_LoadLibraryA(BthAvrcpAppSvcdll_str);
        }
    }
    __forceinline void load_bthci() noexcept {
        if (f_LoadLibraryA) {
            char bthcidll_str[] = "bthci.dll";
            bthcidll = f_LoadLibraryA(bthcidll_str);
        }
    }
    __forceinline void load_BthMtpContextHandler() noexcept {
        if (f_LoadLibraryA) {
            char BthMtpContextHandlerdll_str[] = "BthMtpContextHandler.dll";
            BthMtpContextHandlerdll = f_LoadLibraryA(BthMtpContextHandlerdll_str);
        }
    }
    __forceinline void load_bthpanapi() noexcept {
        if (f_LoadLibraryA) {
            char bthpanapidll_str[] = "bthpanapi.dll";
            bthpanapidll = f_LoadLibraryA(bthpanapidll_str);
        }
    }
    __forceinline void load_BthpanContextHandler() noexcept {
        if (f_LoadLibraryA) {
            char BthpanContextHandlerdll_str[] = "BthpanContextHandler.dll";
            BthpanContextHandlerdll = f_LoadLibraryA(BthpanContextHandlerdll_str);
        }
    }
    __forceinline void load_BthRadioMedia() noexcept {
        if (f_LoadLibraryA) {
            char BthRadioMediadll_str[] = "BthRadioMedia.dll";
            BthRadioMediadll = f_LoadLibraryA(BthRadioMediadll_str);
        }
    }
    __forceinline void load_bthserv() noexcept {
        if (f_LoadLibraryA) {
            char bthservdll_str[] = "bthserv.dll";
            bthservdll = f_LoadLibraryA(bthservdll_str);
        }
    }
    __forceinline void load_BthTelemetry() noexcept {
        if (f_LoadLibraryA) {
            char BthTelemetrydll_str[] = "BthTelemetry.dll";
            BthTelemetrydll = f_LoadLibraryA(BthTelemetrydll_str);
        }
    }
    __forceinline void load_btpanui() noexcept {
        if (f_LoadLibraryA) {
            char btpanuidll_str[] = "btpanui.dll";
            btpanuidll = f_LoadLibraryA(btpanuidll_str);
        }
    }
    __forceinline void load_BWContextHandler() noexcept {
        if (f_LoadLibraryA) {
            char BWContextHandlerdll_str[] = "BWContextHandler.dll";
            BWContextHandlerdll = f_LoadLibraryA(BWContextHandlerdll_str);
        }
    }
    __forceinline void load_c28c7a4e_a619_4463_82b7_0fc9cc7187f5_HyperV_ComputeStorage() noexcept {
        if (f_LoadLibraryA) {
            char c28c7a4e_a619_4463_82b7_0fc9cc7187f5_HyperV_ComputeStoragedll_str[] = "c28c7a4e-a619-4463-82b7-0fc9cc7187f5_HyperV-ComputeStorage.dll";
            c28c7a4e_a619_4463_82b7_0fc9cc7187f5_HyperV_ComputeStoragedll = f_LoadLibraryA(c28c7a4e_a619_4463_82b7_0fc9cc7187f5_HyperV_ComputeStoragedll_str);
        }
    }
    __forceinline void load_c4d66f00_b6f0_4439_ac9b_c5ea13fe54d7_HyperV_ComputeCore() noexcept {
        if (f_LoadLibraryA) {
            char c4d66f00_b6f0_4439_ac9b_c5ea13fe54d7_HyperV_ComputeCoredll_str[] = "c4d66f00-b6f0-4439-ac9b-c5ea13fe54d7_HyperV-ComputeCore.dll";
            c4d66f00_b6f0_4439_ac9b_c5ea13fe54d7_HyperV_ComputeCoredll = f_LoadLibraryA(c4d66f00_b6f0_4439_ac9b_c5ea13fe54d7_HyperV_ComputeCoredll_str);
        }
    }
    __forceinline void load_cabapi() noexcept {
        if (f_LoadLibraryA) {
            char cabapidll_str[] = "cabapi.dll";
            cabapidll = f_LoadLibraryA(cabapidll_str);
        }
    }
    __forceinline void load_cabinet() noexcept {
        if (f_LoadLibraryA) {
            char cabinetdll_str[] = "cabinet.dll";
            cabinetdll = f_LoadLibraryA(cabinetdll_str);
        }
    }
    __forceinline void load_cabview() noexcept {
        if (f_LoadLibraryA) {
            char cabviewdll_str[] = "cabview.dll";
            cabviewdll = f_LoadLibraryA(cabviewdll_str);
        }
    }
    __forceinline void load_CallButtons() noexcept {
        if (f_LoadLibraryA) {
            char CallButtonsdll_str[] = "CallButtons.dll";
            CallButtonsdll = f_LoadLibraryA(CallButtonsdll_str);
        }
    }
    __forceinline void load_CallButtonsProxyStub() noexcept {
        if (f_LoadLibraryA) {
            char CallButtonsProxyStubdll_str[] = "CallButtons.ProxyStub.dll";
            CallButtonsProxyStubdll = f_LoadLibraryA(CallButtonsProxyStubdll_str);
        }
    }
    __forceinline void load_CallHistoryClient() noexcept {
        if (f_LoadLibraryA) {
            char CallHistoryClientdll_str[] = "CallHistoryClient.dll";
            CallHistoryClientdll = f_LoadLibraryA(CallHistoryClientdll_str);
        }
    }
    __forceinline void load_CameraCaptureUI() noexcept {
        if (f_LoadLibraryA) {
            char CameraCaptureUIdll_str[] = "CameraCaptureUI.dll";
            CameraCaptureUIdll = f_LoadLibraryA(CameraCaptureUIdll_str);
        }
    }
    __forceinline void load_camext() noexcept {
        if (f_LoadLibraryA) {
            char camextdll_str[] = "camext.dll";
            camextdll = f_LoadLibraryA(camextdll_str);
        }
    }
    __forceinline void load_CapabilityAccessHandlers() noexcept {
        if (f_LoadLibraryA) {
            char CapabilityAccessHandlersdll_str[] = "CapabilityAccessHandlers.dll";
            CapabilityAccessHandlersdll = f_LoadLibraryA(CapabilityAccessHandlersdll_str);
        }
    }
    __forceinline void load_CapabilityAccessManager() noexcept {
        if (f_LoadLibraryA) {
            char CapabilityAccessManagerdll_str[] = "CapabilityAccessManager.dll";
            CapabilityAccessManagerdll = f_LoadLibraryA(CapabilityAccessManagerdll_str);
        }
    }
    __forceinline void load_CapabilityAccessManagerClient() noexcept {
        if (f_LoadLibraryA) {
            char CapabilityAccessManagerClientdll_str[] = "CapabilityAccessManagerClient.dll";
            CapabilityAccessManagerClientdll = f_LoadLibraryA(CapabilityAccessManagerClientdll_str);
        }
    }
    __forceinline void load_capauthz() noexcept {
        if (f_LoadLibraryA) {
            char capauthzdll_str[] = "capauthz.dll";
            capauthzdll = f_LoadLibraryA(capauthzdll_str);
        }
    }
    __forceinline void load_capiprovider() noexcept {
        if (f_LoadLibraryA) {
            char capiproviderdll_str[] = "capiprovider.dll";
            capiproviderdll = f_LoadLibraryA(capiproviderdll_str);
        }
    }
    __forceinline void load_capisp() noexcept {
        if (f_LoadLibraryA) {
            char capispdll_str[] = "capisp.dll";
            capispdll = f_LoadLibraryA(capispdll_str);
        }
    }
    __forceinline void load_CaptureService() noexcept {
        if (f_LoadLibraryA) {
            char CaptureServicedll_str[] = "CaptureService.dll";
            CaptureServicedll = f_LoadLibraryA(CaptureServicedll_str);
        }
    }
    __forceinline void load_CastingShellExt() noexcept {
        if (f_LoadLibraryA) {
            char CastingShellExtdll_str[] = "CastingShellExt.dll";
            CastingShellExtdll = f_LoadLibraryA(CastingShellExtdll_str);
        }
    }
    __forceinline void load_CastLaunch() noexcept {
        if (f_LoadLibraryA) {
            char CastLaunchdll_str[] = "CastLaunch.dll";
            CastLaunchdll = f_LoadLibraryA(CastLaunchdll_str);
        }
    }
    __forceinline void load_catsrv() noexcept {
        if (f_LoadLibraryA) {
            char catsrvdll_str[] = "catsrv.dll";
            catsrvdll = f_LoadLibraryA(catsrvdll_str);
        }
    }
    __forceinline void load_catsrvps() noexcept {
        if (f_LoadLibraryA) {
            char catsrvpsdll_str[] = "catsrvps.dll";
            catsrvpsdll = f_LoadLibraryA(catsrvpsdll_str);
        }
    }
    __forceinline void load_catsrvut() noexcept {
        if (f_LoadLibraryA) {
            char catsrvutdll_str[] = "catsrvut.dll";
            catsrvutdll = f_LoadLibraryA(catsrvutdll_str);
        }
    }
    __forceinline void load_CBDHSvc() noexcept {
        if (f_LoadLibraryA) {
            char CBDHSvcdll_str[] = "CBDHSvc.dll";
            CBDHSvcdll = f_LoadLibraryA(CBDHSvcdll_str);
        }
    }
    __forceinline void load_cca() noexcept {
        if (f_LoadLibraryA) {
            char ccadll_str[] = "cca.dll";
            ccadll = f_LoadLibraryA(ccadll_str);
        }
    }
    __forceinline void load_CCGLaunchPad() noexcept {
        if (f_LoadLibraryA) {
            char CCGLaunchPaddll_str[] = "CCGLaunchPad.dll";
            CCGLaunchPaddll = f_LoadLibraryA(CCGLaunchPaddll_str);
        }
    }
    __forceinline void load_cdd() noexcept {
        if (f_LoadLibraryA) {
            char cdddll_str[] = "cdd.dll";
            cdddll = f_LoadLibraryA(cdddll_str);
        }
    }
    __forceinline void load_cdosys() noexcept {
        if (f_LoadLibraryA) {
            char cdosysdll_str[] = "cdosys.dll";
            cdosysdll = f_LoadLibraryA(cdosysdll_str);
        }
    }
    __forceinline void load_cdp() noexcept {
        if (f_LoadLibraryA) {
            char cdpdll_str[] = "cdp.dll";
            cdpdll = f_LoadLibraryA(cdpdll_str);
        }
    }
    __forceinline void load_cdprt() noexcept {
        if (f_LoadLibraryA) {
            char cdprtdll_str[] = "cdprt.dll";
            cdprtdll = f_LoadLibraryA(cdprtdll_str);
        }
    }
    __forceinline void load_cdpsvc() noexcept {
        if (f_LoadLibraryA) {
            char cdpsvcdll_str[] = "cdpsvc.dll";
            cdpsvcdll = f_LoadLibraryA(cdpsvcdll_str);
        }
    }
    __forceinline void load_cdpusersvc() noexcept {
        if (f_LoadLibraryA) {
            char cdpusersvcdll_str[] = "cdpusersvc.dll";
            cdpusersvcdll = f_LoadLibraryA(cdpusersvcdll_str);
        }
    }
    __forceinline void load_cellulardatacapabilityhandler() noexcept {
        if (f_LoadLibraryA) {
            char cellulardatacapabilityhandlerdll_str[] = "cellulardatacapabilityhandler.dll";
            cellulardatacapabilityhandlerdll = f_LoadLibraryA(cellulardatacapabilityhandlerdll_str);
        }
    }
    __forceinline void load_cemapi() noexcept {
        if (f_LoadLibraryA) {
            char cemapidll_str[] = "cemapi.dll";
            cemapidll = f_LoadLibraryA(cemapidll_str);
        }
    }
    __forceinline void load_certca() noexcept {
        if (f_LoadLibraryA) {
            char certcadll_str[] = "certca.dll";
            certcadll = f_LoadLibraryA(certcadll_str);
        }
    }
    __forceinline void load_certcli() noexcept {
        if (f_LoadLibraryA) {
            char certclidll_str[] = "certcli.dll";
            certclidll = f_LoadLibraryA(certclidll_str);
        }
    }
    __forceinline void load_certCredProvider() noexcept {
        if (f_LoadLibraryA) {
            char certCredProviderdll_str[] = "certCredProvider.dll";
            certCredProviderdll = f_LoadLibraryA(certCredProviderdll_str);
        }
    }
    __forceinline void load_certenc() noexcept {
        if (f_LoadLibraryA) {
            char certencdll_str[] = "certenc.dll";
            certencdll = f_LoadLibraryA(certencdll_str);
        }
    }
    __forceinline void load_CertEnroll() noexcept {
        if (f_LoadLibraryA) {
            char CertEnrolldll_str[] = "CertEnroll.dll";
            CertEnrolldll = f_LoadLibraryA(CertEnrolldll_str);
        }
    }
    __forceinline void load_CertEnrollUI() noexcept {
        if (f_LoadLibraryA) {
            char CertEnrollUIdll_str[] = "CertEnrollUI.dll";
            CertEnrollUIdll = f_LoadLibraryA(CertEnrollUIdll_str);
        }
    }
    __forceinline void load_certmgr() noexcept {
        if (f_LoadLibraryA) {
            char certmgrdll_str[] = "certmgr.dll";
            certmgrdll = f_LoadLibraryA(certmgrdll_str);
        }
    }
    __forceinline void load_CertPKICmdlet() noexcept {
        if (f_LoadLibraryA) {
            char CertPKICmdletdll_str[] = "CertPKICmdlet.dll";
            CertPKICmdletdll = f_LoadLibraryA(CertPKICmdletdll_str);
        }
    }
    __forceinline void load_CertPolEng() noexcept {
        if (f_LoadLibraryA) {
            char CertPolEngdll_str[] = "CertPolEng.dll";
            CertPolEngdll = f_LoadLibraryA(CertPolEngdll_str);
        }
    }
    __forceinline void load_certprop() noexcept {
        if (f_LoadLibraryA) {
            char certpropdll_str[] = "certprop.dll";
            certpropdll = f_LoadLibraryA(certpropdll_str);
        }
    }
    __forceinline void load_cewmdm() noexcept {
        if (f_LoadLibraryA) {
            char cewmdmdll_str[] = "cewmdm.dll";
            cewmdmdll = f_LoadLibraryA(cewmdmdll_str);
        }
    }
    __forceinline void load_cfgbkend() noexcept {
        if (f_LoadLibraryA) {
            char cfgbkenddll_str[] = "cfgbkend.dll";
            cfgbkenddll = f_LoadLibraryA(cfgbkenddll_str);
        }
    }
    __forceinline void load_cfgmgr32() noexcept {
        if (f_LoadLibraryA) {
            char cfgmgr32dll_str[] = "cfgmgr32.dll";
            cfgmgr32dll = f_LoadLibraryA(cfgmgr32dll_str);
        }
    }
    __forceinline void load_CfgSPCellular() noexcept {
        if (f_LoadLibraryA) {
            char CfgSPCellulardll_str[] = "CfgSPCellular.dll";
            CfgSPCellulardll = f_LoadLibraryA(CfgSPCellulardll_str);
        }
    }
    __forceinline void load_CfgSPPolicy() noexcept {
        if (f_LoadLibraryA) {
            char CfgSPPolicydll_str[] = "CfgSPPolicy.dll";
            CfgSPPolicydll = f_LoadLibraryA(CfgSPPolicydll_str);
        }
    }
    __forceinline void load_cflapi() noexcept {
        if (f_LoadLibraryA) {
            char cflapidll_str[] = "cflapi.dll";
            cflapidll = f_LoadLibraryA(cflapidll_str);
        }
    }
    __forceinline void load_cfmifs() noexcept {
        if (f_LoadLibraryA) {
            char cfmifsdll_str[] = "cfmifs.dll";
            cfmifsdll = f_LoadLibraryA(cfmifsdll_str);
        }
    }
    __forceinline void load_cfmifsproxy() noexcept {
        if (f_LoadLibraryA) {
            char cfmifsproxydll_str[] = "cfmifsproxy.dll";
            cfmifsproxydll = f_LoadLibraryA(cfmifsproxydll_str);
        }
    }
    __forceinline void load_Chakra() noexcept {
        if (f_LoadLibraryA) {
            char Chakradll_str[] = "Chakra.dll";
            Chakradll = f_LoadLibraryA(Chakradll_str);
        }
    }
    __forceinline void load_Chakradiag() noexcept {
        if (f_LoadLibraryA) {
            char Chakradiagdll_str[] = "Chakradiag.dll";
            Chakradiagdll = f_LoadLibraryA(Chakradiagdll_str);
        }
    }
    __forceinline void load_Chakrathunk() noexcept {
        if (f_LoadLibraryA) {
            char Chakrathunkdll_str[] = "Chakrathunk.dll";
            Chakrathunkdll = f_LoadLibraryA(Chakrathunkdll_str);
        }
    }
    __forceinline void load_chartv() noexcept {
        if (f_LoadLibraryA) {
            char chartvdll_str[] = "chartv.dll";
            chartvdll = f_LoadLibraryA(chartvdll_str);
        }
    }
    __forceinline void load_ChatApis() noexcept {
        if (f_LoadLibraryA) {
            char ChatApisdll_str[] = "ChatApis.dll";
            ChatApisdll = f_LoadLibraryA(ChatApisdll_str);
        }
    }
    __forceinline void load_ChsStrokeDS() noexcept {
        if (f_LoadLibraryA) {
            char ChsStrokeDSdll_str[] = "ChsStrokeDS.dll";
            ChsStrokeDSdll = f_LoadLibraryA(ChsStrokeDSdll_str);
        }
    }
    __forceinline void load_ChtBopomofoDS() noexcept {
        if (f_LoadLibraryA) {
            char ChtBopomofoDSdll_str[] = "ChtBopomofoDS.dll";
            ChtBopomofoDSdll = f_LoadLibraryA(ChtBopomofoDSdll_str);
        }
    }
    __forceinline void load_ChtCangjieDS() noexcept {
        if (f_LoadLibraryA) {
            char ChtCangjieDSdll_str[] = "ChtCangjieDS.dll";
            ChtCangjieDSdll = f_LoadLibraryA(ChtCangjieDSdll_str);
        }
    }
    __forceinline void load_ChtHkStrokeDS() noexcept {
        if (f_LoadLibraryA) {
            char ChtHkStrokeDSdll_str[] = "ChtHkStrokeDS.dll";
            ChtHkStrokeDSdll = f_LoadLibraryA(ChtHkStrokeDSdll_str);
        }
    }
    __forceinline void load_ChtQuickDS() noexcept {
        if (f_LoadLibraryA) {
            char ChtQuickDSdll_str[] = "ChtQuickDS.dll";
            ChtQuickDSdll = f_LoadLibraryA(ChtQuickDSdll_str);
        }
    }
    __forceinline void load_ChxAPDS() noexcept {
        if (f_LoadLibraryA) {
            char ChxAPDSdll_str[] = "ChxAPDS.dll";
            ChxAPDSdll = f_LoadLibraryA(ChxAPDSdll_str);
        }
    }
    __forceinline void load_ChxDecoder() noexcept {
        if (f_LoadLibraryA) {
            char ChxDecoderdll_str[] = "ChxDecoder.dll";
            ChxDecoderdll = f_LoadLibraryA(ChxDecoderdll_str);
        }
    }
    __forceinline void load_ChxHAPDS() noexcept {
        if (f_LoadLibraryA) {
            char ChxHAPDSdll_str[] = "ChxHAPDS.dll";
            ChxHAPDSdll = f_LoadLibraryA(ChxHAPDSdll_str);
        }
    }
    __forceinline void load_chxinputrouter() noexcept {
        if (f_LoadLibraryA) {
            char chxinputrouterdll_str[] = "chxinputrouter.dll";
            chxinputrouterdll = f_LoadLibraryA(chxinputrouterdll_str);
        }
    }
    __forceinline void load_chxranker() noexcept {
        if (f_LoadLibraryA) {
            char chxrankerdll_str[] = "chxranker.dll";
            chxrankerdll = f_LoadLibraryA(chxrankerdll_str);
        }
    }
    __forceinline void load_CHxReadingStringIME() noexcept {
        if (f_LoadLibraryA) {
            char CHxReadingStringIMEdll_str[] = "CHxReadingStringIME.dll";
            CHxReadingStringIMEdll = f_LoadLibraryA(CHxReadingStringIMEdll_str);
        }
    }
    __forceinline void load_ci() noexcept {
        if (f_LoadLibraryA) {
            char cidll_str[] = "ci.dll";
            cidll = f_LoadLibraryA(cidll_str);
        }
    }
    __forceinline void load_cic() noexcept {
        if (f_LoadLibraryA) {
            char cicdll_str[] = "cic.dll";
            cicdll = f_LoadLibraryA(cicdll_str);
        }
    }
    __forceinline void load_cimfs() noexcept {
        if (f_LoadLibraryA) {
            char cimfsdll_str[] = "cimfs.dll";
            cimfsdll = f_LoadLibraryA(cimfsdll_str);
        }
    }
    __forceinline void load_CIRCoInst() noexcept {
        if (f_LoadLibraryA) {
            char CIRCoInstdll_str[] = "CIRCoInst.dll";
            CIRCoInstdll = f_LoadLibraryA(CIRCoInstdll_str);
        }
    }
    __forceinline void load_CIWmi() noexcept {
        if (f_LoadLibraryA) {
            char CIWmidll_str[] = "CIWmi.dll";
            CIWmidll = f_LoadLibraryA(CIWmidll_str);
        }
    }
    __forceinline void load_clbcatq() noexcept {
        if (f_LoadLibraryA) {
            char clbcatqdll_str[] = "clbcatq.dll";
            clbcatqdll = f_LoadLibraryA(clbcatqdll_str);
        }
    }
    __forceinline void load_cldapi() noexcept {
        if (f_LoadLibraryA) {
            char cldapidll_str[] = "cldapi.dll";
            cldapidll = f_LoadLibraryA(cldapidll_str);
        }
    }
    __forceinline void load_CleanPCCSP() noexcept {
        if (f_LoadLibraryA) {
            char CleanPCCSPdll_str[] = "CleanPCCSP.dll";
            CleanPCCSPdll = f_LoadLibraryA(CleanPCCSPdll_str);
        }
    }
    __forceinline void load_clfsw32() noexcept {
        if (f_LoadLibraryA) {
            char clfsw32dll_str[] = "clfsw32.dll";
            clfsw32dll = f_LoadLibraryA(clfsw32dll_str);
        }
    }
    __forceinline void load_cliconfg() noexcept {
        if (f_LoadLibraryA) {
            char cliconfgdll_str[] = "cliconfg.dll";
            cliconfgdll = f_LoadLibraryA(cliconfgdll_str);
        }
    }
    __forceinline void load_ClipboardServer() noexcept {
        if (f_LoadLibraryA) {
            char ClipboardServerdll_str[] = "ClipboardServer.dll";
            ClipboardServerdll = f_LoadLibraryA(ClipboardServerdll_str);
        }
    }
    __forceinline void load_Clipc() noexcept {
        if (f_LoadLibraryA) {
            char Clipcdll_str[] = "Clipc.dll";
            Clipcdll = f_LoadLibraryA(Clipcdll_str);
        }
    }
    __forceinline void load_ClipSVC() noexcept {
        if (f_LoadLibraryA) {
            char ClipSVCdll_str[] = "ClipSVC.dll";
            ClipSVCdll = f_LoadLibraryA(ClipSVCdll_str);
        }
    }
    __forceinline void load_clipwinrt() noexcept {
        if (f_LoadLibraryA) {
            char clipwinrtdll_str[] = "clipwinrt.dll";
            clipwinrtdll = f_LoadLibraryA(clipwinrtdll_str);
        }
    }
    __forceinline void load_cloudAP() noexcept {
        if (f_LoadLibraryA) {
            char cloudAPdll_str[] = "cloudAP.dll";
            cloudAPdll = f_LoadLibraryA(cloudAPdll_str);
        }
    }
    __forceinline void load_CloudDesktopCSP() noexcept {
        if (f_LoadLibraryA) {
            char CloudDesktopCSPdll_str[] = "CloudDesktopCSP.dll";
            CloudDesktopCSPdll = f_LoadLibraryA(CloudDesktopCSPdll_str);
        }
    }
    __forceinline void load_CloudDomainJoinAUG() noexcept {
        if (f_LoadLibraryA) {
            char CloudDomainJoinAUGdll_str[] = "CloudDomainJoinAUG.dll";
            CloudDomainJoinAUGdll = f_LoadLibraryA(CloudDomainJoinAUGdll_str);
        }
    }
    __forceinline void load_CloudDomainJoinDataModelServer() noexcept {
        if (f_LoadLibraryA) {
            char CloudDomainJoinDataModelServerdll_str[] = "CloudDomainJoinDataModelServer.dll";
            CloudDomainJoinDataModelServerdll = f_LoadLibraryA(CloudDomainJoinDataModelServerdll_str);
        }
    }
    __forceinline void load_CloudExperienceHost() noexcept {
        if (f_LoadLibraryA) {
            char CloudExperienceHostdll_str[] = "CloudExperienceHost.dll";
            CloudExperienceHostdll = f_LoadLibraryA(CloudExperienceHostdll_str);
        }
    }
    __forceinline void load_CloudExperienceHostBroker() noexcept {
        if (f_LoadLibraryA) {
            char CloudExperienceHostBrokerdll_str[] = "CloudExperienceHostBroker.dll";
            CloudExperienceHostBrokerdll = f_LoadLibraryA(CloudExperienceHostBrokerdll_str);
        }
    }
    __forceinline void load_CloudExperienceHostCommon() noexcept {
        if (f_LoadLibraryA) {
            char CloudExperienceHostCommondll_str[] = "CloudExperienceHostCommon.dll";
            CloudExperienceHostCommondll = f_LoadLibraryA(CloudExperienceHostCommondll_str);
        }
    }
    __forceinline void load_CloudExperienceHostRedirection() noexcept {
        if (f_LoadLibraryA) {
            char CloudExperienceHostRedirectiondll_str[] = "CloudExperienceHostRedirection.dll";
            CloudExperienceHostRedirectiondll = f_LoadLibraryA(CloudExperienceHostRedirectiondll_str);
        }
    }
    __forceinline void load_CloudExperienceHostUser() noexcept {
        if (f_LoadLibraryA) {
            char CloudExperienceHostUserdll_str[] = "CloudExperienceHostUser.dll";
            CloudExperienceHostUserdll = f_LoadLibraryA(CloudExperienceHostUserdll_str);
        }
    }
    __forceinline void load_cloudidsvc() noexcept {
        if (f_LoadLibraryA) {
            char cloudidsvcdll_str[] = "cloudidsvc.dll";
            cloudidsvcdll = f_LoadLibraryA(cloudidsvcdll_str);
        }
    }
    __forceinline void load_CloudIdWxhExtension() noexcept {
        if (f_LoadLibraryA) {
            char CloudIdWxhExtensiondll_str[] = "CloudIdWxhExtension.dll";
            CloudIdWxhExtensiondll = f_LoadLibraryA(CloudIdWxhExtensiondll_str);
        }
    }
    __forceinline void load_CloudRecoveryDownloadTool() noexcept {
        if (f_LoadLibraryA) {
            char CloudRecoveryDownloadTooldll_str[] = "CloudRecoveryDownloadTool.dll";
            CloudRecoveryDownloadTooldll = f_LoadLibraryA(CloudRecoveryDownloadTooldll_str);
        }
    }
    __forceinline void load_CloudRestoreLauncher() noexcept {
        if (f_LoadLibraryA) {
            char CloudRestoreLauncherdll_str[] = "CloudRestoreLauncher.dll";
            CloudRestoreLauncherdll = f_LoadLibraryA(CloudRestoreLauncherdll_str);
        }
    }
    __forceinline void load_clrhost() noexcept {
        if (f_LoadLibraryA) {
            char clrhostdll_str[] = "clrhost.dll";
            clrhostdll = f_LoadLibraryA(clrhostdll_str);
        }
    }
    __forceinline void load_clusapi() noexcept {
        if (f_LoadLibraryA) {
            char clusapidll_str[] = "clusapi.dll";
            clusapidll = f_LoadLibraryA(clusapidll_str);
        }
    }
    __forceinline void load_cmcfg32() noexcept {
        if (f_LoadLibraryA) {
            char cmcfg32dll_str[] = "cmcfg32.dll";
            cmcfg32dll = f_LoadLibraryA(cmcfg32dll_str);
        }
    }
    __forceinline void load_cmdext() noexcept {
        if (f_LoadLibraryA) {
            char cmdextdll_str[] = "cmdext.dll";
            cmdextdll = f_LoadLibraryA(cmdextdll_str);
        }
    }
    __forceinline void load_cmdial32() noexcept {
        if (f_LoadLibraryA) {
            char cmdial32dll_str[] = "cmdial32.dll";
            cmdial32dll = f_LoadLibraryA(cmdial32dll_str);
        }
    }
    __forceinline void load_cmgrcspps() noexcept {
        if (f_LoadLibraryA) {
            char cmgrcsppsdll_str[] = "cmgrcspps.dll";
            cmgrcsppsdll = f_LoadLibraryA(cmgrcsppsdll_str);
        }
    }
    __forceinline void load_cmifw() noexcept {
        if (f_LoadLibraryA) {
            char cmifwdll_str[] = "cmifw.dll";
            cmifwdll = f_LoadLibraryA(cmifwdll_str);
        }
    }
    __forceinline void load_cmintegrator() noexcept {
        if (f_LoadLibraryA) {
            char cmintegratordll_str[] = "cmintegrator.dll";
            cmintegratordll = f_LoadLibraryA(cmintegratordll_str);
        }
    }
    __forceinline void load_cmlua() noexcept {
        if (f_LoadLibraryA) {
            char cmluadll_str[] = "cmlua.dll";
            cmluadll = f_LoadLibraryA(cmluadll_str);
        }
    }
    __forceinline void load_cmpbk32() noexcept {
        if (f_LoadLibraryA) {
            char cmpbk32dll_str[] = "cmpbk32.dll";
            cmpbk32dll = f_LoadLibraryA(cmpbk32dll_str);
        }
    }
    __forceinline void load_cmstplua() noexcept {
        if (f_LoadLibraryA) {
            char cmstpluadll_str[] = "cmstplua.dll";
            cmstpluadll = f_LoadLibraryA(cmstpluadll_str);
        }
    }
    __forceinline void load_cmutil() noexcept {
        if (f_LoadLibraryA) {
            char cmutildll_str[] = "cmutil.dll";
            cmutildll = f_LoadLibraryA(cmutildll_str);
        }
    }
    __forceinline void load_cngcredui() noexcept {
        if (f_LoadLibraryA) {
            char cngcreduidll_str[] = "cngcredui.dll";
            cngcreduidll = f_LoadLibraryA(cngcreduidll_str);
        }
    }
    __forceinline void load_cngkeyhelper() noexcept {
        if (f_LoadLibraryA) {
            char cngkeyhelperdll_str[] = "cngkeyhelper.dll";
            cngkeyhelperdll = f_LoadLibraryA(cngkeyhelperdll_str);
        }
    }
    __forceinline void load_cngprovider() noexcept {
        if (f_LoadLibraryA) {
            char cngproviderdll_str[] = "cngprovider.dll";
            cngproviderdll = f_LoadLibraryA(cngproviderdll_str);
        }
    }
    __forceinline void load_cnvfat() noexcept {
        if (f_LoadLibraryA) {
            char cnvfatdll_str[] = "cnvfat.dll";
            cnvfatdll = f_LoadLibraryA(cnvfatdll_str);
        }
    }
    __forceinline void load_CodeIntegrityAggregator() noexcept {
        if (f_LoadLibraryA) {
            char CodeIntegrityAggregatordll_str[] = "CodeIntegrityAggregator.dll";
            CodeIntegrityAggregatordll = f_LoadLibraryA(CodeIntegrityAggregatordll_str);
        }
    }
    __forceinline void load_cofiredm() noexcept {
        if (f_LoadLibraryA) {
            char cofiredmdll_str[] = "cofiredm.dll";
            cofiredmdll = f_LoadLibraryA(cofiredmdll_str);
        }
    }
    __forceinline void load_colbact() noexcept {
        if (f_LoadLibraryA) {
            char colbactdll_str[] = "colbact.dll";
            colbactdll = f_LoadLibraryA(colbactdll_str);
        }
    }
    __forceinline void load_colorui() noexcept {
        if (f_LoadLibraryA) {
            char coloruidll_str[] = "colorui.dll";
            coloruidll = f_LoadLibraryA(coloruidll_str);
        }
    }
    __forceinline void load_combase() noexcept {
        if (f_LoadLibraryA) {
            char combasedll_str[] = "combase.dll";
            combasedll = f_LoadLibraryA(combasedll_str);
        }
    }
    __forceinline void load_comcat() noexcept {
        if (f_LoadLibraryA) {
            char comcatdll_str[] = "comcat.dll";
            comcatdll = f_LoadLibraryA(comcatdll_str);
        }
    }
    __forceinline void load_comctl32() noexcept {
        if (f_LoadLibraryA) {
            char comctl32dll_str[] = "comctl32.dll";
            comctl32dll = f_LoadLibraryA(comctl32dll_str);
        }
    }
    __forceinline void load_comdlg32() noexcept {
        if (f_LoadLibraryA) {
            char comdlg32dll_str[] = "comdlg32.dll";
            comdlg32dll = f_LoadLibraryA(comdlg32dll_str);
        }
    }
    __forceinline void load_coml2() noexcept {
        if (f_LoadLibraryA) {
            char coml2dll_str[] = "coml2.dll";
            coml2dll = f_LoadLibraryA(coml2dll_str);
        }
    }
    __forceinline void load_CompatAggregator() noexcept {
        if (f_LoadLibraryA) {
            char CompatAggregatordll_str[] = "CompatAggregator.dll";
            CompatAggregatordll = f_LoadLibraryA(CompatAggregatordll_str);
        }
    }
    __forceinline void load_ComposableShellProxyStub() noexcept {
        if (f_LoadLibraryA) {
            char ComposableShellProxyStubdll_str[] = "ComposableShellProxyStub.dll";
            ComposableShellProxyStubdll = f_LoadLibraryA(ComposableShellProxyStubdll_str);
        }
    }
    __forceinline void load_ComposerFramework() noexcept {
        if (f_LoadLibraryA) {
            char ComposerFrameworkdll_str[] = "ComposerFramework.dll";
            ComposerFrameworkdll = f_LoadLibraryA(ComposerFrameworkdll_str);
        }
    }
    __forceinline void load_CompPkgSup() noexcept {
        if (f_LoadLibraryA) {
            char CompPkgSupdll_str[] = "CompPkgSup.dll";
            CompPkgSupdll = f_LoadLibraryA(CompPkgSupdll_str);
        }
    }
    __forceinline void load_compstui() noexcept {
        if (f_LoadLibraryA) {
            char compstuidll_str[] = "compstui.dll";
            compstuidll = f_LoadLibraryA(compstuidll_str);
        }
    }
    __forceinline void load_computecore() noexcept {
        if (f_LoadLibraryA) {
            char computecoredll_str[] = "computecore.dll";
            computecoredll = f_LoadLibraryA(computecoredll_str);
        }
    }
    __forceinline void load_computelibeventlog() noexcept {
        if (f_LoadLibraryA) {
            char computelibeventlogdll_str[] = "computelibeventlog.dll";
            computelibeventlogdll = f_LoadLibraryA(computelibeventlogdll_str);
        }
    }
    __forceinline void load_computenetwork() noexcept {
        if (f_LoadLibraryA) {
            char computenetworkdll_str[] = "computenetwork.dll";
            computenetworkdll = f_LoadLibraryA(computenetworkdll_str);
        }
    }
    __forceinline void load_computestorage() noexcept {
        if (f_LoadLibraryA) {
            char computestoragedll_str[] = "computestorage.dll";
            computestoragedll = f_LoadLibraryA(computestoragedll_str);
        }
    }
    __forceinline void load_comrepl() noexcept {
        if (f_LoadLibraryA) {
            char comrepldll_str[] = "comrepl.dll";
            comrepldll = f_LoadLibraryA(comrepldll_str);
        }
    }
    __forceinline void load_comres() noexcept {
        if (f_LoadLibraryA) {
            char comresdll_str[] = "comres.dll";
            comresdll = f_LoadLibraryA(comresdll_str);
        }
    }
    __forceinline void load_comsnap() noexcept {
        if (f_LoadLibraryA) {
            char comsnapdll_str[] = "comsnap.dll";
            comsnapdll = f_LoadLibraryA(comsnapdll_str);
        }
    }
    __forceinline void load_comsvcs() noexcept {
        if (f_LoadLibraryA) {
            char comsvcsdll_str[] = "comsvcs.dll";
            comsvcsdll = f_LoadLibraryA(comsvcsdll_str);
        }
    }
    __forceinline void load_comuid() noexcept {
        if (f_LoadLibraryA) {
            char comuiddll_str[] = "comuid.dll";
            comuiddll = f_LoadLibraryA(comuiddll_str);
        }
    }
    __forceinline void load_concrt140() noexcept {
        if (f_LoadLibraryA) {
            char concrt140dll_str[] = "concrt140.dll";
            concrt140dll = f_LoadLibraryA(concrt140dll_str);
        }
    }
    __forceinline void load_concrt140d() noexcept {
        if (f_LoadLibraryA) {
            char concrt140ddll_str[] = "concrt140d.dll";
            concrt140ddll = f_LoadLibraryA(concrt140ddll_str);
        }
    }
    __forceinline void load_configmanager2() noexcept {
        if (f_LoadLibraryA) {
            char configmanager2dll_str[] = "configmanager2.dll";
            configmanager2dll = f_LoadLibraryA(configmanager2dll_str);
        }
    }
    __forceinline void load_ConfigureExpandedStorage() noexcept {
        if (f_LoadLibraryA) {
            char ConfigureExpandedStoragedll_str[] = "ConfigureExpandedStorage.dll";
            ConfigureExpandedStoragedll = f_LoadLibraryA(ConfigureExpandedStoragedll_str);
        }
    }
    __forceinline void load_ConhostV1() noexcept {
        if (f_LoadLibraryA) {
            char ConhostV1dll_str[] = "ConhostV1.dll";
            ConhostV1dll = f_LoadLibraryA(ConhostV1dll_str);
        }
    }
    __forceinline void load_connect() noexcept {
        if (f_LoadLibraryA) {
            char connectdll_str[] = "connect.dll";
            connectdll = f_LoadLibraryA(connectdll_str);
        }
    }
    __forceinline void load_ConnectedAccountState() noexcept {
        if (f_LoadLibraryA) {
            char ConnectedAccountStatedll_str[] = "ConnectedAccountState.dll";
            ConnectedAccountStatedll = f_LoadLibraryA(ConnectedAccountStatedll_str);
        }
    }
    __forceinline void load_ConsentExperienceCommon() noexcept {
        if (f_LoadLibraryA) {
            char ConsentExperienceCommondll_str[] = "ConsentExperienceCommon.dll";
            ConsentExperienceCommondll = f_LoadLibraryA(ConsentExperienceCommondll_str);
        }
    }
    __forceinline void load_ConsentUX() noexcept {
        if (f_LoadLibraryA) {
            char ConsentUXdll_str[] = "ConsentUX.dll";
            ConsentUXdll = f_LoadLibraryA(ConsentUXdll_str);
        }
    }
    __forceinline void load_ConsentUxClient() noexcept {
        if (f_LoadLibraryA) {
            char ConsentUxClientdll_str[] = "ConsentUxClient.dll";
            ConsentUxClientdll = f_LoadLibraryA(ConsentUxClientdll_str);
        }
    }
    __forceinline void load_console() noexcept {
        if (f_LoadLibraryA) {
            char consoledll_str[] = "console.dll";
            consoledll = f_LoadLibraryA(consoledll_str);
        }
    }
    __forceinline void load_ConsoleLogon() noexcept {
        if (f_LoadLibraryA) {
            char ConsoleLogondll_str[] = "ConsoleLogon.dll";
            ConsoleLogondll = f_LoadLibraryA(ConsoleLogondll_str);
        }
    }
    __forceinline void load_ConstraintIndexSearch() noexcept {
        if (f_LoadLibraryA) {
            char ConstraintIndexSearchdll_str[] = "ConstraintIndex.Search.dll";
            ConstraintIndexSearchdll = f_LoadLibraryA(ConstraintIndexSearchdll_str);
        }
    }
    __forceinline void load_ContactActivation() noexcept {
        if (f_LoadLibraryA) {
            char ContactActivationdll_str[] = "ContactActivation.dll";
            ContactActivationdll = f_LoadLibraryA(ContactActivationdll_str);
        }
    }
    __forceinline void load_ContactApis() noexcept {
        if (f_LoadLibraryA) {
            char ContactApisdll_str[] = "ContactApis.dll";
            ContactApisdll = f_LoadLibraryA(ContactApisdll_str);
        }
    }
    __forceinline void load_ContactHarvesterDS() noexcept {
        if (f_LoadLibraryA) {
            char ContactHarvesterDSdll_str[] = "ContactHarvesterDS.dll";
            ContactHarvesterDSdll = f_LoadLibraryA(ContactHarvesterDSdll_str);
        }
    }
    __forceinline void load_container() noexcept {
        if (f_LoadLibraryA) {
            char containerdll_str[] = "container.dll";
            containerdll = f_LoadLibraryA(containerdll_str);
        }
    }
    __forceinline void load_containerdevicemanagement() noexcept {
        if (f_LoadLibraryA) {
            char containerdevicemanagementdll_str[] = "containerdevicemanagement.dll";
            containerdevicemanagementdll = f_LoadLibraryA(containerdevicemanagementdll_str);
        }
    }
    __forceinline void load_ContentDeliveryManagerUtilities() noexcept {
        if (f_LoadLibraryA) {
            char ContentDeliveryManagerUtilitiesdll_str[] = "ContentDeliveryManager.Utilities.dll";
            ContentDeliveryManagerUtilitiesdll = f_LoadLibraryA(ContentDeliveryManagerUtilitiesdll_str);
        }
    }
    __forceinline void load_coreaudiopolicymanagerext() noexcept {
        if (f_LoadLibraryA) {
            char coreaudiopolicymanagerextdll_str[] = "coreaudiopolicymanagerext.dll";
            coreaudiopolicymanagerextdll = f_LoadLibraryA(coreaudiopolicymanagerextdll_str);
        }
    }
    __forceinline void load_coredpus() noexcept {
        if (f_LoadLibraryA) {
            char coredpusdll_str[] = "coredpus.dll";
            coredpusdll = f_LoadLibraryA(coredpusdll_str);
        }
    }
    __forceinline void load_coreglobconfig() noexcept {
        if (f_LoadLibraryA) {
            char coreglobconfigdll_str[] = "coreglobconfig.dll";
            coreglobconfigdll = f_LoadLibraryA(coreglobconfigdll_str);
        }
    }
    __forceinline void load_CoreMas() noexcept {
        if (f_LoadLibraryA) {
            char CoreMasdll_str[] = "CoreMas.dll";
            CoreMasdll = f_LoadLibraryA(CoreMasdll_str);
        }
    }
    __forceinline void load_CoreMessaging() noexcept {
        if (f_LoadLibraryA) {
            char CoreMessagingdll_str[] = "CoreMessaging.dll";
            CoreMessagingdll = f_LoadLibraryA(CoreMessagingdll_str);
        }
    }
    __forceinline void load_CoreMmRes() noexcept {
        if (f_LoadLibraryA) {
            char CoreMmResdll_str[] = "CoreMmRes.dll";
            CoreMmResdll = f_LoadLibraryA(CoreMmResdll_str);
        }
    }
    __forceinline void load_CorePrivacySettingsStore() noexcept {
        if (f_LoadLibraryA) {
            char CorePrivacySettingsStoredll_str[] = "CorePrivacySettingsStore.dll";
            CorePrivacySettingsStoredll = f_LoadLibraryA(CorePrivacySettingsStoredll_str);
        }
    }
    __forceinline void load_CoreShell() noexcept {
        if (f_LoadLibraryA) {
            char CoreShelldll_str[] = "CoreShell.dll";
            CoreShelldll = f_LoadLibraryA(CoreShelldll_str);
        }
    }
    __forceinline void load_CoreShellAPI() noexcept {
        if (f_LoadLibraryA) {
            char CoreShellAPIdll_str[] = "CoreShellAPI.dll";
            CoreShellAPIdll = f_LoadLibraryA(CoreShellAPIdll_str);
        }
    }
    __forceinline void load_CoreShellExtFramework() noexcept {
        if (f_LoadLibraryA) {
            char CoreShellExtFrameworkdll_str[] = "CoreShellExtFramework.dll";
            CoreShellExtFrameworkdll = f_LoadLibraryA(CoreShellExtFrameworkdll_str);
        }
    }
    __forceinline void load_CoreUIComponents() noexcept {
        if (f_LoadLibraryA) {
            char CoreUIComponentsdll_str[] = "CoreUIComponents.dll";
            CoreUIComponentsdll = f_LoadLibraryA(CoreUIComponentsdll_str);
        }
    }
    __forceinline void load_correngine() noexcept {
        if (f_LoadLibraryA) {
            char correnginedll_str[] = "correngine.dll";
            correnginedll = f_LoadLibraryA(correnginedll_str);
        }
    }
    __forceinline void load_CourtesyEngine() noexcept {
        if (f_LoadLibraryA) {
            char CourtesyEnginedll_str[] = "CourtesyEngine.dll";
            CourtesyEnginedll = f_LoadLibraryA(CourtesyEnginedll_str);
        }
    }
    __forceinline void load_CPFilters() noexcept {
        if (f_LoadLibraryA) {
            char CPFiltersdll_str[] = "CPFilters.dll";
            CPFiltersdll = f_LoadLibraryA(CPFiltersdll_str);
        }
    }
    __forceinline void load_CredDialogBroker() noexcept {
        if (f_LoadLibraryA) {
            char CredDialogBrokerdll_str[] = "CredDialogBroker.dll";
            CredDialogBrokerdll = f_LoadLibraryA(CredDialogBrokerdll_str);
        }
    }
    __forceinline void load_CredentialEnrollmentManagerForUser() noexcept {
        if (f_LoadLibraryA) {
            char CredentialEnrollmentManagerForUserdll_str[] = "CredentialEnrollmentManagerForUser.dll";
            CredentialEnrollmentManagerForUserdll = f_LoadLibraryA(CredentialEnrollmentManagerForUserdll_str);
        }
    }
    __forceinline void load_CredProv2faHelper() noexcept {
        if (f_LoadLibraryA) {
            char CredProv2faHelperdll_str[] = "CredProv2faHelper.dll";
            CredProv2faHelperdll = f_LoadLibraryA(CredProv2faHelperdll_str);
        }
    }
    __forceinline void load_CredProvCommonCore() noexcept {
        if (f_LoadLibraryA) {
            char CredProvCommonCoredll_str[] = "CredProvCommonCore.dll";
            CredProvCommonCoredll = f_LoadLibraryA(CredProvCommonCoredll_str);
        }
    }
    __forceinline void load_CredProvDataModel() noexcept {
        if (f_LoadLibraryA) {
            char CredProvDataModeldll_str[] = "CredProvDataModel.dll";
            CredProvDataModeldll = f_LoadLibraryA(CredProvDataModeldll_str);
        }
    }
    __forceinline void load_CredProvHelper() noexcept {
        if (f_LoadLibraryA) {
            char CredProvHelperdll_str[] = "CredProvHelper.dll";
            CredProvHelperdll = f_LoadLibraryA(CredProvHelperdll_str);
        }
    }
    __forceinline void load_credprovhost() noexcept {
        if (f_LoadLibraryA) {
            char credprovhostdll_str[] = "credprovhost.dll";
            credprovhostdll = f_LoadLibraryA(credprovhostdll_str);
        }
    }
    __forceinline void load_credprovs() noexcept {
        if (f_LoadLibraryA) {
            char credprovsdll_str[] = "credprovs.dll";
            credprovsdll = f_LoadLibraryA(credprovsdll_str);
        }
    }
    __forceinline void load_credprovslegacy() noexcept {
        if (f_LoadLibraryA) {
            char credprovslegacydll_str[] = "credprovslegacy.dll";
            credprovslegacydll = f_LoadLibraryA(credprovslegacydll_str);
        }
    }
    __forceinline void load_credssp() noexcept {
        if (f_LoadLibraryA) {
            char credsspdll_str[] = "credssp.dll";
            credsspdll = f_LoadLibraryA(credsspdll_str);
        }
    }
    __forceinline void load_credui() noexcept {
        if (f_LoadLibraryA) {
            char creduidll_str[] = "credui.dll";
            creduidll = f_LoadLibraryA(creduidll_str);
        }
    }
    __forceinline void load_crypt32() noexcept {
        if (f_LoadLibraryA) {
            char crypt32dll_str[] = "crypt32.dll";
            crypt32dll = f_LoadLibraryA(crypt32dll_str);
        }
    }
    __forceinline void load_cryptbase() noexcept {
        if (f_LoadLibraryA) {
            char cryptbasedll_str[] = "cryptbase.dll";
            cryptbasedll = f_LoadLibraryA(cryptbasedll_str);
        }
    }
    __forceinline void load_cryptcatsvc() noexcept {
        if (f_LoadLibraryA) {
            char cryptcatsvcdll_str[] = "cryptcatsvc.dll";
            cryptcatsvcdll = f_LoadLibraryA(cryptcatsvcdll_str);
        }
    }
    __forceinline void load_cryptdlg() noexcept {
        if (f_LoadLibraryA) {
            char cryptdlgdll_str[] = "cryptdlg.dll";
            cryptdlgdll = f_LoadLibraryA(cryptdlgdll_str);
        }
    }
    __forceinline void load_cryptdll() noexcept {
        if (f_LoadLibraryA) {
            char cryptdlldll_str[] = "cryptdll.dll";
            cryptdlldll = f_LoadLibraryA(cryptdlldll_str);
        }
    }
    __forceinline void load_cryptext() noexcept {
        if (f_LoadLibraryA) {
            char cryptextdll_str[] = "cryptext.dll";
            cryptextdll = f_LoadLibraryA(cryptextdll_str);
        }
    }
    __forceinline void load_cryptnet() noexcept {
        if (f_LoadLibraryA) {
            char cryptnetdll_str[] = "cryptnet.dll";
            cryptnetdll = f_LoadLibraryA(cryptnetdll_str);
        }
    }
    __forceinline void load_cryptngc() noexcept {
        if (f_LoadLibraryA) {
            char cryptngcdll_str[] = "cryptngc.dll";
            cryptngcdll = f_LoadLibraryA(cryptngcdll_str);
        }
    }
    __forceinline void load_CryptoWinRT() noexcept {
        if (f_LoadLibraryA) {
            char CryptoWinRTdll_str[] = "CryptoWinRT.dll";
            CryptoWinRTdll = f_LoadLibraryA(CryptoWinRTdll_str);
        }
    }
    __forceinline void load_cryptsp() noexcept {
        if (f_LoadLibraryA) {
            char cryptspdll_str[] = "cryptsp.dll";
            cryptspdll = f_LoadLibraryA(cryptspdll_str);
        }
    }
    __forceinline void load_cryptsvc() noexcept {
        if (f_LoadLibraryA) {
            char cryptsvcdll_str[] = "cryptsvc.dll";
            cryptsvcdll = f_LoadLibraryA(cryptsvcdll_str);
        }
    }
    __forceinline void load_crypttpmeksvc() noexcept {
        if (f_LoadLibraryA) {
            char crypttpmeksvcdll_str[] = "crypttpmeksvc.dll";
            crypttpmeksvcdll = f_LoadLibraryA(crypttpmeksvcdll_str);
        }
    }
    __forceinline void load_cryptui() noexcept {
        if (f_LoadLibraryA) {
            char cryptuidll_str[] = "cryptui.dll";
            cryptuidll = f_LoadLibraryA(cryptuidll_str);
        }
    }
    __forceinline void load_cryptuiwizard() noexcept {
        if (f_LoadLibraryA) {
            char cryptuiwizarddll_str[] = "cryptuiwizard.dll";
            cryptuiwizarddll = f_LoadLibraryA(cryptuiwizarddll_str);
        }
    }
    __forceinline void load_cryptxml() noexcept {
        if (f_LoadLibraryA) {
            char cryptxmldll_str[] = "cryptxml.dll";
            cryptxmldll = f_LoadLibraryA(cryptxmldll_str);
        }
    }
    __forceinline void load_cscapi() noexcept {
        if (f_LoadLibraryA) {
            char cscapidll_str[] = "cscapi.dll";
            cscapidll = f_LoadLibraryA(cscapidll_str);
        }
    }
    __forceinline void load_cscdll() noexcept {
        if (f_LoadLibraryA) {
            char cscdlldll_str[] = "cscdll.dll";
            cscdlldll = f_LoadLibraryA(cscdlldll_str);
        }
    }
    __forceinline void load_CscMig() noexcept {
        if (f_LoadLibraryA) {
            char CscMigdll_str[] = "CscMig.dll";
            CscMigdll = f_LoadLibraryA(CscMigdll_str);
        }
    }
    __forceinline void load_cscobj() noexcept {
        if (f_LoadLibraryA) {
            char cscobjdll_str[] = "cscobj.dll";
            cscobjdll = f_LoadLibraryA(cscobjdll_str);
        }
    }
    __forceinline void load_cscsvc() noexcept {
        if (f_LoadLibraryA) {
            char cscsvcdll_str[] = "cscsvc.dll";
            cscsvcdll = f_LoadLibraryA(cscsvcdll_str);
        }
    }
    __forceinline void load_cscui() noexcept {
        if (f_LoadLibraryA) {
            char cscuidll_str[] = "cscui.dll";
            cscuidll = f_LoadLibraryA(cscuidll_str);
        }
    }
    __forceinline void load_CspCellularSettings() noexcept {
        if (f_LoadLibraryA) {
            char CspCellularSettingsdll_str[] = "CspCellularSettings.dll";
            CspCellularSettingsdll = f_LoadLibraryA(CspCellularSettingsdll_str);
        }
    }
    __forceinline void load_csplte() noexcept {
        if (f_LoadLibraryA) {
            char cspltedll_str[] = "csplte.dll";
            cspltedll = f_LoadLibraryA(cspltedll_str);
        }
    }
    __forceinline void load_CspProxy() noexcept {
        if (f_LoadLibraryA) {
            char CspProxydll_str[] = "CspProxy.dll";
            CspProxydll = f_LoadLibraryA(CspProxydll_str);
        }
    }
    __forceinline void load_csrsrv() noexcept {
        if (f_LoadLibraryA) {
            char csrsrvdll_str[] = "csrsrv.dll";
            csrsrvdll = f_LoadLibraryA(csrsrvdll_str);
        }
    }
    __forceinline void load_CSystemEventsBrokerClient() noexcept {
        if (f_LoadLibraryA) {
            char CSystemEventsBrokerClientdll_str[] = "CSystemEventsBrokerClient.dll";
            CSystemEventsBrokerClientdll = f_LoadLibraryA(CSystemEventsBrokerClientdll_str);
        }
    }
    __forceinline void load_cuzzapi() noexcept {
        if (f_LoadLibraryA) {
            char cuzzapidll_str[] = "cuzzapi.dll";
            cuzzapidll = f_LoadLibraryA(cuzzapidll_str);
        }
    }
    __forceinline void load_cxcredprov() noexcept {
        if (f_LoadLibraryA) {
            char cxcredprovdll_str[] = "cxcredprov.dll";
            cxcredprovdll = f_LoadLibraryA(cxcredprovdll_str);
        }
    }
    __forceinline void load_CXHProvisioningServer() noexcept {
        if (f_LoadLibraryA) {
            char CXHProvisioningServerdll_str[] = "CXHProvisioningServer.dll";
            CXHProvisioningServerdll = f_LoadLibraryA(CXHProvisioningServerdll_str);
        }
    }
    __forceinline void load_d2d1() noexcept {
        if (f_LoadLibraryA) {
            char d2d1dll_str[] = "d2d1.dll";
            d2d1dll = f_LoadLibraryA(d2d1dll_str);
        }
    }
    __forceinline void load_d2d1debug3() noexcept {
        if (f_LoadLibraryA) {
            char d2d1debug3dll_str[] = "d2d1debug3.dll";
            d2d1debug3dll = f_LoadLibraryA(d2d1debug3dll_str);
        }
    }
    __forceinline void load_d3d10() noexcept {
        if (f_LoadLibraryA) {
            char d3d10dll_str[] = "d3d10.dll";
            d3d10dll = f_LoadLibraryA(d3d10dll_str);
        }
    }
    __forceinline void load_d3d10core() noexcept {
        if (f_LoadLibraryA) {
            char d3d10coredll_str[] = "d3d10core.dll";
            d3d10coredll = f_LoadLibraryA(d3d10coredll_str);
        }
    }
    __forceinline void load_d3d10level9() noexcept {
        if (f_LoadLibraryA) {
            char d3d10level9dll_str[] = "d3d10level9.dll";
            d3d10level9dll = f_LoadLibraryA(d3d10level9dll_str);
        }
    }
    __forceinline void load_d3d10ref() noexcept {
        if (f_LoadLibraryA) {
            char d3d10refdll_str[] = "d3d10ref.dll";
            d3d10refdll = f_LoadLibraryA(d3d10refdll_str);
        }
    }
    __forceinline void load_d3d10sdklayers() noexcept {
        if (f_LoadLibraryA) {
            char d3d10sdklayersdll_str[] = "d3d10sdklayers.dll";
            d3d10sdklayersdll = f_LoadLibraryA(d3d10sdklayersdll_str);
        }
    }
    __forceinline void load_d3d10warp() noexcept {
        if (f_LoadLibraryA) {
            char d3d10warpdll_str[] = "d3d10warp.dll";
            d3d10warpdll = f_LoadLibraryA(d3d10warpdll_str);
        }
    }
    __forceinline void load_d3d10_1() noexcept {
        if (f_LoadLibraryA) {
            char d3d10_1dll_str[] = "d3d10_1.dll";
            d3d10_1dll = f_LoadLibraryA(d3d10_1dll_str);
        }
    }
    __forceinline void load_d3d10_1core() noexcept {
        if (f_LoadLibraryA) {
            char d3d10_1coredll_str[] = "d3d10_1core.dll";
            d3d10_1coredll = f_LoadLibraryA(d3d10_1coredll_str);
        }
    }
    __forceinline void load_d3d11() noexcept {
        if (f_LoadLibraryA) {
            char d3d11dll_str[] = "d3d11.dll";
            d3d11dll = f_LoadLibraryA(d3d11dll_str);
        }
    }
    __forceinline void load_d3d11on12() noexcept {
        if (f_LoadLibraryA) {
            char d3d11on12dll_str[] = "d3d11on12.dll";
            d3d11on12dll = f_LoadLibraryA(d3d11on12dll_str);
        }
    }
    __forceinline void load_d3d11_3SDKLayers() noexcept {
        if (f_LoadLibraryA) {
            char d3d11_3SDKLayersdll_str[] = "d3d11_3SDKLayers.dll";
            d3d11_3SDKLayersdll = f_LoadLibraryA(d3d11_3SDKLayersdll_str);
        }
    }
    __forceinline void load_D3D12() noexcept {
        if (f_LoadLibraryA) {
            char D3D12dll_str[] = "D3D12.dll";
            D3D12dll = f_LoadLibraryA(D3D12dll_str);
        }
    }
    __forceinline void load_D3D12Core() noexcept {
        if (f_LoadLibraryA) {
            char D3D12Coredll_str[] = "D3D12Core.dll";
            D3D12Coredll = f_LoadLibraryA(D3D12Coredll_str);
        }
    }
    __forceinline void load_d3d12SDKLayers() noexcept {
        if (f_LoadLibraryA) {
            char d3d12SDKLayersdll_str[] = "d3d12SDKLayers.dll";
            d3d12SDKLayersdll = f_LoadLibraryA(d3d12SDKLayersdll_str);
        }
    }
    __forceinline void load_d3d8thk() noexcept {
        if (f_LoadLibraryA) {
            char d3d8thkdll_str[] = "d3d8thk.dll";
            d3d8thkdll = f_LoadLibraryA(d3d8thkdll_str);
        }
    }
    __forceinline void load_d3d9() noexcept {
        if (f_LoadLibraryA) {
            char d3d9dll_str[] = "d3d9.dll";
            d3d9dll = f_LoadLibraryA(d3d9dll_str);
        }
    }
    __forceinline void load_d3d9on12() noexcept {
        if (f_LoadLibraryA) {
            char d3d9on12dll_str[] = "d3d9on12.dll";
            d3d9on12dll = f_LoadLibraryA(d3d9on12dll_str);
        }
    }
    __forceinline void load_D3DCompiler_33() noexcept {
        if (f_LoadLibraryA) {
            char D3DCompiler_33dll_str[] = "D3DCompiler_33.dll";
            D3DCompiler_33dll = f_LoadLibraryA(D3DCompiler_33dll_str);
        }
    }
    __forceinline void load_D3DCompiler_34() noexcept {
        if (f_LoadLibraryA) {
            char D3DCompiler_34dll_str[] = "D3DCompiler_34.dll";
            D3DCompiler_34dll = f_LoadLibraryA(D3DCompiler_34dll_str);
        }
    }
    __forceinline void load_D3DCompiler_35() noexcept {
        if (f_LoadLibraryA) {
            char D3DCompiler_35dll_str[] = "D3DCompiler_35.dll";
            D3DCompiler_35dll = f_LoadLibraryA(D3DCompiler_35dll_str);
        }
    }
    __forceinline void load_D3DCompiler_36() noexcept {
        if (f_LoadLibraryA) {
            char D3DCompiler_36dll_str[] = "D3DCompiler_36.dll";
            D3DCompiler_36dll = f_LoadLibraryA(D3DCompiler_36dll_str);
        }
    }
    __forceinline void load_D3DCompiler_37() noexcept {
        if (f_LoadLibraryA) {
            char D3DCompiler_37dll_str[] = "D3DCompiler_37.dll";
            D3DCompiler_37dll = f_LoadLibraryA(D3DCompiler_37dll_str);
        }
    }
    __forceinline void load_D3DCompiler_38() noexcept {
        if (f_LoadLibraryA) {
            char D3DCompiler_38dll_str[] = "D3DCompiler_38.dll";
            D3DCompiler_38dll = f_LoadLibraryA(D3DCompiler_38dll_str);
        }
    }
    __forceinline void load_D3DCompiler_39() noexcept {
        if (f_LoadLibraryA) {
            char D3DCompiler_39dll_str[] = "D3DCompiler_39.dll";
            D3DCompiler_39dll = f_LoadLibraryA(D3DCompiler_39dll_str);
        }
    }
    __forceinline void load_D3DCompiler_40() noexcept {
        if (f_LoadLibraryA) {
            char D3DCompiler_40dll_str[] = "D3DCompiler_40.dll";
            D3DCompiler_40dll = f_LoadLibraryA(D3DCompiler_40dll_str);
        }
    }
    __forceinline void load_D3DCompiler_41() noexcept {
        if (f_LoadLibraryA) {
            char D3DCompiler_41dll_str[] = "D3DCompiler_41.dll";
            D3DCompiler_41dll = f_LoadLibraryA(D3DCompiler_41dll_str);
        }
    }
    __forceinline void load_D3DCompiler_42() noexcept {
        if (f_LoadLibraryA) {
            char D3DCompiler_42dll_str[] = "D3DCompiler_42.dll";
            D3DCompiler_42dll = f_LoadLibraryA(D3DCompiler_42dll_str);
        }
    }
    __forceinline void load_D3DCompiler_43() noexcept {
        if (f_LoadLibraryA) {
            char D3DCompiler_43dll_str[] = "D3DCompiler_43.dll";
            D3DCompiler_43dll = f_LoadLibraryA(D3DCompiler_43dll_str);
        }
    }
    __forceinline void load_D3DCompiler_47() noexcept {
        if (f_LoadLibraryA) {
            char D3DCompiler_47dll_str[] = "D3DCompiler_47.dll";
            D3DCompiler_47dll = f_LoadLibraryA(D3DCompiler_47dll_str);
        }
    }
    __forceinline void load_d3dcsx_42() noexcept {
        if (f_LoadLibraryA) {
            char d3dcsx_42dll_str[] = "d3dcsx_42.dll";
            d3dcsx_42dll = f_LoadLibraryA(d3dcsx_42dll_str);
        }
    }
    __forceinline void load_d3dcsx_43() noexcept {
        if (f_LoadLibraryA) {
            char d3dcsx_43dll_str[] = "d3dcsx_43.dll";
            d3dcsx_43dll = f_LoadLibraryA(d3dcsx_43dll_str);
        }
    }
    __forceinline void load_d3dref9() noexcept {
        if (f_LoadLibraryA) {
            char d3dref9dll_str[] = "d3dref9.dll";
            d3dref9dll = f_LoadLibraryA(d3dref9dll_str);
        }
    }
    __forceinline void load_D3DSCache() noexcept {
        if (f_LoadLibraryA) {
            char D3DSCachedll_str[] = "D3DSCache.dll";
            D3DSCachedll = f_LoadLibraryA(D3DSCachedll_str);
        }
    }
    __forceinline void load_d3dx10() noexcept {
        if (f_LoadLibraryA) {
            char d3dx10dll_str[] = "d3dx10.dll";
            d3dx10dll = f_LoadLibraryA(d3dx10dll_str);
        }
    }
    __forceinline void load_d3dx10_33() noexcept {
        if (f_LoadLibraryA) {
            char d3dx10_33dll_str[] = "d3dx10_33.dll";
            d3dx10_33dll = f_LoadLibraryA(d3dx10_33dll_str);
        }
    }
    __forceinline void load_d3dx10_34() noexcept {
        if (f_LoadLibraryA) {
            char d3dx10_34dll_str[] = "d3dx10_34.dll";
            d3dx10_34dll = f_LoadLibraryA(d3dx10_34dll_str);
        }
    }
    __forceinline void load_d3dx10_35() noexcept {
        if (f_LoadLibraryA) {
            char d3dx10_35dll_str[] = "d3dx10_35.dll";
            d3dx10_35dll = f_LoadLibraryA(d3dx10_35dll_str);
        }
    }
    __forceinline void load_d3dx10_36() noexcept {
        if (f_LoadLibraryA) {
            char d3dx10_36dll_str[] = "d3dx10_36.dll";
            d3dx10_36dll = f_LoadLibraryA(d3dx10_36dll_str);
        }
    }
    __forceinline void load_d3dx10_37() noexcept {
        if (f_LoadLibraryA) {
            char d3dx10_37dll_str[] = "d3dx10_37.dll";
            d3dx10_37dll = f_LoadLibraryA(d3dx10_37dll_str);
        }
    }
    __forceinline void load_d3dx10_38() noexcept {
        if (f_LoadLibraryA) {
            char d3dx10_38dll_str[] = "d3dx10_38.dll";
            d3dx10_38dll = f_LoadLibraryA(d3dx10_38dll_str);
        }
    }
    __forceinline void load_d3dx10_39() noexcept {
        if (f_LoadLibraryA) {
            char d3dx10_39dll_str[] = "d3dx10_39.dll";
            d3dx10_39dll = f_LoadLibraryA(d3dx10_39dll_str);
        }
    }
    __forceinline void load_d3dx10_40() noexcept {
        if (f_LoadLibraryA) {
            char d3dx10_40dll_str[] = "d3dx10_40.dll";
            d3dx10_40dll = f_LoadLibraryA(d3dx10_40dll_str);
        }
    }
    __forceinline void load_d3dx10_41() noexcept {
        if (f_LoadLibraryA) {
            char d3dx10_41dll_str[] = "d3dx10_41.dll";
            d3dx10_41dll = f_LoadLibraryA(d3dx10_41dll_str);
        }
    }
    __forceinline void load_d3dx10_42() noexcept {
        if (f_LoadLibraryA) {
            char d3dx10_42dll_str[] = "d3dx10_42.dll";
            d3dx10_42dll = f_LoadLibraryA(d3dx10_42dll_str);
        }
    }
    __forceinline void load_d3dx10_43() noexcept {
        if (f_LoadLibraryA) {
            char d3dx10_43dll_str[] = "d3dx10_43.dll";
            d3dx10_43dll = f_LoadLibraryA(d3dx10_43dll_str);
        }
    }
    __forceinline void load_d3dx11_42() noexcept {
        if (f_LoadLibraryA) {
            char d3dx11_42dll_str[] = "d3dx11_42.dll";
            d3dx11_42dll = f_LoadLibraryA(d3dx11_42dll_str);
        }
    }
    __forceinline void load_d3dx11_43() noexcept {
        if (f_LoadLibraryA) {
            char d3dx11_43dll_str[] = "d3dx11_43.dll";
            d3dx11_43dll = f_LoadLibraryA(d3dx11_43dll_str);
        }
    }
    __forceinline void load_d3dx9_24() noexcept {
        if (f_LoadLibraryA) {
            char d3dx9_24dll_str[] = "d3dx9_24.dll";
            d3dx9_24dll = f_LoadLibraryA(d3dx9_24dll_str);
        }
    }
    __forceinline void load_d3dx9_25() noexcept {
        if (f_LoadLibraryA) {
            char d3dx9_25dll_str[] = "d3dx9_25.dll";
            d3dx9_25dll = f_LoadLibraryA(d3dx9_25dll_str);
        }
    }
    __forceinline void load_d3dx9_26() noexcept {
        if (f_LoadLibraryA) {
            char d3dx9_26dll_str[] = "d3dx9_26.dll";
            d3dx9_26dll = f_LoadLibraryA(d3dx9_26dll_str);
        }
    }
    __forceinline void load_d3dx9_27() noexcept {
        if (f_LoadLibraryA) {
            char d3dx9_27dll_str[] = "d3dx9_27.dll";
            d3dx9_27dll = f_LoadLibraryA(d3dx9_27dll_str);
        }
    }
    __forceinline void load_d3dx9_28() noexcept {
        if (f_LoadLibraryA) {
            char d3dx9_28dll_str[] = "d3dx9_28.dll";
            d3dx9_28dll = f_LoadLibraryA(d3dx9_28dll_str);
        }
    }
    __forceinline void load_d3dx9_29() noexcept {
        if (f_LoadLibraryA) {
            char d3dx9_29dll_str[] = "d3dx9_29.dll";
            d3dx9_29dll = f_LoadLibraryA(d3dx9_29dll_str);
        }
    }
    __forceinline void load_d3dx9_30() noexcept {
        if (f_LoadLibraryA) {
            char d3dx9_30dll_str[] = "d3dx9_30.dll";
            d3dx9_30dll = f_LoadLibraryA(d3dx9_30dll_str);
        }
    }
    __forceinline void load_d3dx9_31() noexcept {
        if (f_LoadLibraryA) {
            char d3dx9_31dll_str[] = "d3dx9_31.dll";
            d3dx9_31dll = f_LoadLibraryA(d3dx9_31dll_str);
        }
    }
    __forceinline void load_d3dx9_32() noexcept {
        if (f_LoadLibraryA) {
            char d3dx9_32dll_str[] = "d3dx9_32.dll";
            d3dx9_32dll = f_LoadLibraryA(d3dx9_32dll_str);
        }
    }
    __forceinline void load_d3dx9_33() noexcept {
        if (f_LoadLibraryA) {
            char d3dx9_33dll_str[] = "d3dx9_33.dll";
            d3dx9_33dll = f_LoadLibraryA(d3dx9_33dll_str);
        }
    }
    __forceinline void load_d3dx9_34() noexcept {
        if (f_LoadLibraryA) {
            char d3dx9_34dll_str[] = "d3dx9_34.dll";
            d3dx9_34dll = f_LoadLibraryA(d3dx9_34dll_str);
        }
    }
    __forceinline void load_d3dx9_35() noexcept {
        if (f_LoadLibraryA) {
            char d3dx9_35dll_str[] = "d3dx9_35.dll";
            d3dx9_35dll = f_LoadLibraryA(d3dx9_35dll_str);
        }
    }
    __forceinline void load_d3dx9_36() noexcept {
        if (f_LoadLibraryA) {
            char d3dx9_36dll_str[] = "d3dx9_36.dll";
            d3dx9_36dll = f_LoadLibraryA(d3dx9_36dll_str);
        }
    }
    __forceinline void load_D3DX9_37() noexcept {
        if (f_LoadLibraryA) {
            char D3DX9_37dll_str[] = "D3DX9_37.dll";
            D3DX9_37dll = f_LoadLibraryA(D3DX9_37dll_str);
        }
    }
    __forceinline void load_D3DX9_38() noexcept {
        if (f_LoadLibraryA) {
            char D3DX9_38dll_str[] = "D3DX9_38.dll";
            D3DX9_38dll = f_LoadLibraryA(D3DX9_38dll_str);
        }
    }
    __forceinline void load_D3DX9_39() noexcept {
        if (f_LoadLibraryA) {
            char D3DX9_39dll_str[] = "D3DX9_39.dll";
            D3DX9_39dll = f_LoadLibraryA(D3DX9_39dll_str);
        }
    }
    __forceinline void load_D3DX9_40() noexcept {
        if (f_LoadLibraryA) {
            char D3DX9_40dll_str[] = "D3DX9_40.dll";
            D3DX9_40dll = f_LoadLibraryA(D3DX9_40dll_str);
        }
    }
    __forceinline void load_D3DX9_41() noexcept {
        if (f_LoadLibraryA) {
            char D3DX9_41dll_str[] = "D3DX9_41.dll";
            D3DX9_41dll = f_LoadLibraryA(D3DX9_41dll_str);
        }
    }
    __forceinline void load_D3DX9_42() noexcept {
        if (f_LoadLibraryA) {
            char D3DX9_42dll_str[] = "D3DX9_42.dll";
            D3DX9_42dll = f_LoadLibraryA(D3DX9_42dll_str);
        }
    }
    __forceinline void load_D3DX9_43() noexcept {
        if (f_LoadLibraryA) {
            char D3DX9_43dll_str[] = "D3DX9_43.dll";
            D3DX9_43dll = f_LoadLibraryA(D3DX9_43dll_str);
        }
    }
    __forceinline void load_d4d78066_e6db_44b7_b5cd_2eb82dce620c_HyperV_ComputeLegacy() noexcept {
        if (f_LoadLibraryA) {
            char d4d78066_e6db_44b7_b5cd_2eb82dce620c_HyperV_ComputeLegacydll_str[] = "d4d78066-e6db-44b7-b5cd-2eb82dce620c_HyperV-ComputeLegacy.dll";
            d4d78066_e6db_44b7_b5cd_2eb82dce620c_HyperV_ComputeLegacydll = f_LoadLibraryA(d4d78066_e6db_44b7_b5cd_2eb82dce620c_HyperV_ComputeLegacydll_str);
        }
    }
    __forceinline void load_dab() noexcept {
        if (f_LoadLibraryA) {
            char dabdll_str[] = "dab.dll";
            dabdll = f_LoadLibraryA(dabdll_str);
        }
    }
    __forceinline void load_dabapi() noexcept {
        if (f_LoadLibraryA) {
            char dabapidll_str[] = "dabapi.dll";
            dabapidll = f_LoadLibraryA(dabapidll_str);
        }
    }
    __forceinline void load_DAConn() noexcept {
        if (f_LoadLibraryA) {
            char DAConndll_str[] = "DAConn.dll";
            DAConndll = f_LoadLibraryA(DAConndll_str);
        }
    }
    __forceinline void load_dafAspInfraProvider() noexcept {
        if (f_LoadLibraryA) {
            char dafAspInfraProviderdll_str[] = "dafAspInfraProvider.dll";
            dafAspInfraProviderdll = f_LoadLibraryA(dafAspInfraProviderdll_str);
        }
    }
    __forceinline void load_dafBth() noexcept {
        if (f_LoadLibraryA) {
            char dafBthdll_str[] = "dafBth.dll";
            dafBthdll = f_LoadLibraryA(dafBthdll_str);
        }
    }
    __forceinline void load_DafDnsSd() noexcept {
        if (f_LoadLibraryA) {
            char DafDnsSddll_str[] = "DafDnsSd.dll";
            DafDnsSddll = f_LoadLibraryA(DafDnsSddll_str);
        }
    }
    __forceinline void load_dafDockingProvider() noexcept {
        if (f_LoadLibraryA) {
            char dafDockingProviderdll_str[] = "dafDockingProvider.dll";
            dafDockingProviderdll = f_LoadLibraryA(dafDockingProviderdll_str);
        }
    }
    __forceinline void load_DAFESCL() noexcept {
        if (f_LoadLibraryA) {
            char DAFESCLdll_str[] = "DAFESCL.dll";
            DAFESCLdll = f_LoadLibraryA(DAFESCLdll_str);
        }
    }
    __forceinline void load_DafGip() noexcept {
        if (f_LoadLibraryA) {
            char DafGipdll_str[] = "DafGip.dll";
            DafGipdll = f_LoadLibraryA(DafGipdll_str);
        }
    }
    __forceinline void load_DAFIoT() noexcept {
        if (f_LoadLibraryA) {
            char DAFIoTdll_str[] = "DAFIoT.dll";
            DAFIoTdll = f_LoadLibraryA(DAFIoTdll_str);
        }
    }
    __forceinline void load_DAFIPP() noexcept {
        if (f_LoadLibraryA) {
            char DAFIPPdll_str[] = "DAFIPP.dll";
            DAFIPPdll = f_LoadLibraryA(DAFIPPdll_str);
        }
    }
    __forceinline void load_DAFMCP() noexcept {
        if (f_LoadLibraryA) {
            char DAFMCPdll_str[] = "DAFMCP.dll";
            DAFMCPdll = f_LoadLibraryA(DAFMCPdll_str);
        }
    }
    __forceinline void load_dafpos() noexcept {
        if (f_LoadLibraryA) {
            char dafposdll_str[] = "dafpos.dll";
            dafposdll = f_LoadLibraryA(dafposdll_str);
        }
    }
    __forceinline void load_DafPrintProvider() noexcept {
        if (f_LoadLibraryA) {
            char DafPrintProviderdll_str[] = "DafPrintProvider.dll";
            DafPrintProviderdll = f_LoadLibraryA(DafPrintProviderdll_str);
        }
    }
    __forceinline void load_dafupnp() noexcept {
        if (f_LoadLibraryA) {
            char dafupnpdll_str[] = "dafupnp.dll";
            dafupnpdll = f_LoadLibraryA(dafupnpdll_str);
        }
    }
    __forceinline void load_dafWCN() noexcept {
        if (f_LoadLibraryA) {
            char dafWCNdll_str[] = "dafWCN.dll";
            dafWCNdll = f_LoadLibraryA(dafWCNdll_str);
        }
    }
    __forceinline void load_dafWfdProvider() noexcept {
        if (f_LoadLibraryA) {
            char dafWfdProviderdll_str[] = "dafWfdProvider.dll";
            dafWfdProviderdll = f_LoadLibraryA(dafWfdProviderdll_str);
        }
    }
    __forceinline void load_DAFWiProv() noexcept {
        if (f_LoadLibraryA) {
            char DAFWiProvdll_str[] = "DAFWiProv.dll";
            DAFWiProvdll = f_LoadLibraryA(DAFWiProvdll_str);
        }
    }
    __forceinline void load_DAFWSD() noexcept {
        if (f_LoadLibraryA) {
            char DAFWSDdll_str[] = "DAFWSD.dll";
            DAFWSDdll = f_LoadLibraryA(DAFWSDdll_str);
        }
    }
    __forceinline void load_DAMediaManager() noexcept {
        if (f_LoadLibraryA) {
            char DAMediaManagerdll_str[] = "DAMediaManager.dll";
            DAMediaManagerdll = f_LoadLibraryA(DAMediaManagerdll_str);
        }
    }
    __forceinline void load_DAMM() noexcept {
        if (f_LoadLibraryA) {
            char DAMMdll_str[] = "DAMM.dll";
            DAMMdll = f_LoadLibraryA(DAMMdll_str);
        }
    }
    __forceinline void load_DaOtpCredentialProvider() noexcept {
        if (f_LoadLibraryA) {
            char DaOtpCredentialProviderdll_str[] = "DaOtpCredentialProvider.dll";
            DaOtpCredentialProviderdll = f_LoadLibraryA(DaOtpCredentialProviderdll_str);
        }
    }
    __forceinline void load_das() noexcept {
        if (f_LoadLibraryA) {
            char dasdll_str[] = "das.dll";
            dasdll = f_LoadLibraryA(dasdll_str);
        }
    }
    __forceinline void load_dataclen() noexcept {
        if (f_LoadLibraryA) {
            char dataclendll_str[] = "dataclen.dll";
            dataclendll = f_LoadLibraryA(dataclendll_str);
        }
    }
    __forceinline void load_DataExchange() noexcept {
        if (f_LoadLibraryA) {
            char DataExchangedll_str[] = "DataExchange.dll";
            DataExchangedll = f_LoadLibraryA(DataExchangedll_str);
        }
    }
    __forceinline void load_datusage() noexcept {
        if (f_LoadLibraryA) {
            char datusagedll_str[] = "datusage.dll";
            datusagedll = f_LoadLibraryA(datusagedll_str);
        }
    }
    __forceinline void load_davclnt() noexcept {
        if (f_LoadLibraryA) {
            char davclntdll_str[] = "davclnt.dll";
            davclntdll = f_LoadLibraryA(davclntdll_str);
        }
    }
    __forceinline void load_davhlpr() noexcept {
        if (f_LoadLibraryA) {
            char davhlprdll_str[] = "davhlpr.dll";
            davhlprdll = f_LoadLibraryA(davhlprdll_str);
        }
    }
    __forceinline void load_DavSyncProvider() noexcept {
        if (f_LoadLibraryA) {
            char DavSyncProviderdll_str[] = "DavSyncProvider.dll";
            DavSyncProviderdll = f_LoadLibraryA(DavSyncProviderdll_str);
        }
    }
    __forceinline void load_daxexec() noexcept {
        if (f_LoadLibraryA) {
            char daxexecdll_str[] = "daxexec.dll";
            daxexecdll = f_LoadLibraryA(daxexecdll_str);
        }
    }
    __forceinline void load_dbgcore() noexcept {
        if (f_LoadLibraryA) {
            char dbgcoredll_str[] = "dbgcore.dll";
            dbgcoredll = f_LoadLibraryA(dbgcoredll_str);
        }
    }
    __forceinline void load_dbgeng() noexcept {
        if (f_LoadLibraryA) {
            char dbgengdll_str[] = "dbgeng.dll";
            dbgengdll = f_LoadLibraryA(dbgengdll_str);
        }
    }
    __forceinline void load_dbghelp() noexcept {
        if (f_LoadLibraryA) {
            char dbghelpdll_str[] = "dbghelp.dll";
            dbghelpdll = f_LoadLibraryA(dbghelpdll_str);
        }
    }
    __forceinline void load_DbgModel() noexcept {
        if (f_LoadLibraryA) {
            char DbgModeldll_str[] = "DbgModel.dll";
            DbgModeldll = f_LoadLibraryA(DbgModeldll_str);
        }
    }
    __forceinline void load_dbnetlib() noexcept {
        if (f_LoadLibraryA) {
            char dbnetlibdll_str[] = "dbnetlib.dll";
            dbnetlibdll = f_LoadLibraryA(dbnetlibdll_str);
        }
    }
    __forceinline void load_dbnmpntw() noexcept {
        if (f_LoadLibraryA) {
            char dbnmpntwdll_str[] = "dbnmpntw.dll";
            dbnmpntwdll = f_LoadLibraryA(dbnmpntwdll_str);
        }
    }
    __forceinline void load_dciman32() noexcept {
        if (f_LoadLibraryA) {
            char dciman32dll_str[] = "dciman32.dll";
            dciman32dll = f_LoadLibraryA(dciman32dll_str);
        }
    }
    __forceinline void load_dcntel() noexcept {
        if (f_LoadLibraryA) {
            char dcnteldll_str[] = "dcntel.dll";
            dcnteldll = f_LoadLibraryA(dcnteldll_str);
        }
    }
    __forceinline void load_dcomp() noexcept {
        if (f_LoadLibraryA) {
            char dcompdll_str[] = "dcomp.dll";
            dcompdll = f_LoadLibraryA(dcompdll_str);
        }
    }
    __forceinline void load_dcsvc() noexcept {
        if (f_LoadLibraryA) {
            char dcsvcdll_str[] = "dcsvc.dll";
            dcsvcdll = f_LoadLibraryA(dcsvcdll_str);
        }
    }
    __forceinline void load_DDACLSys() noexcept {
        if (f_LoadLibraryA) {
            char DDACLSysdll_str[] = "DDACLSys.dll";
            DDACLSysdll = f_LoadLibraryA(DDACLSysdll_str);
        }
    }
    __forceinline void load_DdcClaimsApi() noexcept {
        if (f_LoadLibraryA) {
            char DdcClaimsApidll_str[] = "DdcClaimsApi.dll";
            DdcClaimsApidll = f_LoadLibraryA(DdcClaimsApidll_str);
        }
    }
    __forceinline void load_DdcComImplementationsDesktop() noexcept {
        if (f_LoadLibraryA) {
            char DdcComImplementationsDesktopdll_str[] = "DdcComImplementationsDesktop.dll";
            DdcComImplementationsDesktopdll = f_LoadLibraryA(DdcComImplementationsDesktopdll_str);
        }
    }
    __forceinline void load_DDDS() noexcept {
        if (f_LoadLibraryA) {
            char DDDSdll_str[] = "DDDS.dll";
            DDDSdll = f_LoadLibraryA(DDDSdll_str);
        }
    }
    __forceinline void load_ddisplay() noexcept {
        if (f_LoadLibraryA) {
            char ddisplaydll_str[] = "ddisplay.dll";
            ddisplaydll = f_LoadLibraryA(ddisplaydll_str);
        }
    }
    __forceinline void load_DDOIProxy() noexcept {
        if (f_LoadLibraryA) {
            char DDOIProxydll_str[] = "DDOIProxy.dll";
            DDOIProxydll = f_LoadLibraryA(DDOIProxydll_str);
        }
    }
    __forceinline void load_DDORes() noexcept {
        if (f_LoadLibraryA) {
            char DDOResdll_str[] = "DDORes.dll";
            DDOResdll = f_LoadLibraryA(DDOResdll_str);
        }
    }
    __forceinline void load_ddpchunk() noexcept {
        if (f_LoadLibraryA) {
            char ddpchunkdll_str[] = "ddpchunk.dll";
            ddpchunkdll = f_LoadLibraryA(ddpchunkdll_str);
        }
    }
    __forceinline void load_ddptrace() noexcept {
        if (f_LoadLibraryA) {
            char ddptracedll_str[] = "ddptrace.dll";
            ddptracedll = f_LoadLibraryA(ddptracedll_str);
        }
    }
    __forceinline void load_ddputils() noexcept {
        if (f_LoadLibraryA) {
            char ddputilsdll_str[] = "ddputils.dll";
            ddputilsdll = f_LoadLibraryA(ddputilsdll_str);
        }
    }
    __forceinline void load_ddp_ps() noexcept {
        if (f_LoadLibraryA) {
            char ddp_psdll_str[] = "ddp_ps.dll";
            ddp_psdll = f_LoadLibraryA(ddp_psdll_str);
        }
    }
    __forceinline void load_ddraw() noexcept {
        if (f_LoadLibraryA) {
            char ddrawdll_str[] = "ddraw.dll";
            ddrawdll = f_LoadLibraryA(ddrawdll_str);
        }
    }
    __forceinline void load_ddrawex() noexcept {
        if (f_LoadLibraryA) {
            char ddrawexdll_str[] = "ddrawex.dll";
            ddrawexdll = f_LoadLibraryA(ddrawexdll_str);
        }
    }
    __forceinline void load_debugregsvc() noexcept {
        if (f_LoadLibraryA) {
            char debugregsvcdll_str[] = "debugregsvc.dll";
            debugregsvcdll = f_LoadLibraryA(debugregsvcdll_str);
        }
    }
    __forceinline void load_debugregsvcapi() noexcept {
        if (f_LoadLibraryA) {
            char debugregsvcapidll_str[] = "debugregsvcapi.dll";
            debugregsvcapidll = f_LoadLibraryA(debugregsvcapidll_str);
        }
    }
    __forceinline void load_declaredconfiguration() noexcept {
        if (f_LoadLibraryA) {
            char declaredconfigurationdll_str[] = "declaredconfiguration.dll";
            declaredconfigurationdll = f_LoadLibraryA(declaredconfigurationdll_str);
        }
    }
    __forceinline void load_DefaultDeviceManager() noexcept {
        if (f_LoadLibraryA) {
            char DefaultDeviceManagerdll_str[] = "DefaultDeviceManager.dll";
            DefaultDeviceManagerdll = f_LoadLibraryA(DefaultDeviceManagerdll_str);
        }
    }
    __forceinline void load_DefaultPrinterProvider() noexcept {
        if (f_LoadLibraryA) {
            char DefaultPrinterProviderdll_str[] = "DefaultPrinterProvider.dll";
            DefaultPrinterProviderdll = f_LoadLibraryA(DefaultPrinterProviderdll_str);
        }
    }
    __forceinline void load_defragproxy() noexcept {
        if (f_LoadLibraryA) {
            char defragproxydll_str[] = "defragproxy.dll";
            defragproxydll = f_LoadLibraryA(defragproxydll_str);
        }
    }
    __forceinline void load_defragres() noexcept {
        if (f_LoadLibraryA) {
            char defragresdll_str[] = "defragres.dll";
            defragresdll = f_LoadLibraryA(defragresdll_str);
        }
    }
    __forceinline void load_defragsvc() noexcept {
        if (f_LoadLibraryA) {
            char defragsvcdll_str[] = "defragsvc.dll";
            defragsvcdll = f_LoadLibraryA(defragsvcdll_str);
        }
    }
    __forceinline void load_delegatorprovider() noexcept {
        if (f_LoadLibraryA) {
            char delegatorproviderdll_str[] = "delegatorprovider.dll";
            delegatorproviderdll = f_LoadLibraryA(delegatorproviderdll_str);
        }
    }
    __forceinline void load_deploymentcsps() noexcept {
        if (f_LoadLibraryA) {
            char deploymentcspsdll_str[] = "deploymentcsps.dll";
            deploymentcspsdll = f_LoadLibraryA(deploymentcspsdll_str);
        }
    }
    __forceinline void load_deskadp() noexcept {
        if (f_LoadLibraryA) {
            char deskadpdll_str[] = "deskadp.dll";
            deskadpdll = f_LoadLibraryA(deskadpdll_str);
        }
    }
    __forceinline void load_deskmon() noexcept {
        if (f_LoadLibraryA) {
            char deskmondll_str[] = "deskmon.dll";
            deskmondll = f_LoadLibraryA(deskmondll_str);
        }
    }
    __forceinline void load_DesktopShellAppStateContract() noexcept {
        if (f_LoadLibraryA) {
            char DesktopShellAppStateContractdll_str[] = "DesktopShellAppStateContract.dll";
            DesktopShellAppStateContractdll = f_LoadLibraryA(DesktopShellAppStateContractdll_str);
        }
    }
    __forceinline void load_DesktopShellExt() noexcept {
        if (f_LoadLibraryA) {
            char DesktopShellExtdll_str[] = "DesktopShellExt.dll";
            DesktopShellExtdll = f_LoadLibraryA(DesktopShellExtdll_str);
        }
    }
    __forceinline void load_DesktopSwitcherDataModel() noexcept {
        if (f_LoadLibraryA) {
            char DesktopSwitcherDataModeldll_str[] = "DesktopSwitcherDataModel.dll";
            DesktopSwitcherDataModeldll = f_LoadLibraryA(DesktopSwitcherDataModeldll_str);
        }
    }
    __forceinline void load_DesktopViewInternalBroker() noexcept {
        if (f_LoadLibraryA) {
            char DesktopViewInternalBrokerdll_str[] = "DesktopView.Internal.Broker.dll";
            DesktopViewInternalBrokerdll = f_LoadLibraryA(DesktopViewInternalBrokerdll_str);
        }
    }
    __forceinline void load_DesktopViewInternalBrokerProxyStub() noexcept {
        if (f_LoadLibraryA) {
            char DesktopViewInternalBrokerProxyStubdll_str[] = "DesktopView.Internal.Broker.ProxyStub.dll";
            DesktopViewInternalBrokerProxyStubdll = f_LoadLibraryA(DesktopViewInternalBrokerProxyStubdll_str);
        }
    }
    __forceinline void load_DevDispItemProvider() noexcept {
        if (f_LoadLibraryA) {
            char DevDispItemProviderdll_str[] = "DevDispItemProvider.dll";
            DevDispItemProviderdll = f_LoadLibraryA(DevDispItemProviderdll_str);
        }
    }
    __forceinline void load_DeveloperOptionsSettingsHandlers() noexcept {
        if (f_LoadLibraryA) {
            char DeveloperOptionsSettingsHandlersdll_str[] = "DeveloperOptionsSettingsHandlers.dll";
            DeveloperOptionsSettingsHandlersdll = f_LoadLibraryA(DeveloperOptionsSettingsHandlersdll_str);
        }
    }
    __forceinline void load_DeveloperSetupCSP() noexcept {
        if (f_LoadLibraryA) {
            char DeveloperSetupCSPdll_str[] = "DeveloperSetupCSP.dll";
            DeveloperSetupCSPdll = f_LoadLibraryA(DeveloperSetupCSPdll_str);
        }
    }
    __forceinline void load_DeveloperToolsProxyStub() noexcept {
        if (f_LoadLibraryA) {
            char DeveloperToolsProxyStubdll_str[] = "DeveloperTools.ProxyStub.dll";
            DeveloperToolsProxyStubdll = f_LoadLibraryA(DeveloperToolsProxyStubdll_str);
        }
    }
    __forceinline void load_DeveloperToolsMgr() noexcept {
        if (f_LoadLibraryA) {
            char DeveloperToolsMgrdll_str[] = "DeveloperToolsMgr.dll";
            DeveloperToolsMgrdll = f_LoadLibraryA(DeveloperToolsMgrdll_str);
        }
    }
    __forceinline void load_devenum() noexcept {
        if (f_LoadLibraryA) {
            char devenumdll_str[] = "devenum.dll";
            devenumdll = f_LoadLibraryA(devenumdll_str);
        }
    }
    __forceinline void load_deviceaccess() noexcept {
        if (f_LoadLibraryA) {
            char deviceaccessdll_str[] = "deviceaccess.dll";
            deviceaccessdll = f_LoadLibraryA(deviceaccessdll_str);
        }
    }
    __forceinline void load_deviceassociation() noexcept {
        if (f_LoadLibraryA) {
            char deviceassociationdll_str[] = "deviceassociation.dll";
            deviceassociationdll = f_LoadLibraryA(deviceassociationdll_str);
        }
    }
    __forceinline void load_DeviceCenter() noexcept {
        if (f_LoadLibraryA) {
            char DeviceCenterdll_str[] = "DeviceCenter.dll";
            DeviceCenterdll = f_LoadLibraryA(DeviceCenterdll_str);
        }
    }
    __forceinline void load_DeviceCompanionAppInstall() noexcept {
        if (f_LoadLibraryA) {
            char DeviceCompanionAppInstalldll_str[] = "DeviceCompanionAppInstall.dll";
            DeviceCompanionAppInstalldll = f_LoadLibraryA(DeviceCompanionAppInstalldll_str);
        }
    }
    __forceinline void load_DeviceCredential() noexcept {
        if (f_LoadLibraryA) {
            char DeviceCredentialdll_str[] = "DeviceCredential.dll";
            DeviceCredentialdll = f_LoadLibraryA(DeviceCredentialdll_str);
        }
    }
    __forceinline void load_DeviceDirectoryClient() noexcept {
        if (f_LoadLibraryA) {
            char DeviceDirectoryClientdll_str[] = "DeviceDirectoryClient.dll";
            DeviceDirectoryClientdll = f_LoadLibraryA(DeviceDirectoryClientdll_str);
        }
    }
    __forceinline void load_DeviceDisplayStatusManager() noexcept {
        if (f_LoadLibraryA) {
            char DeviceDisplayStatusManagerdll_str[] = "DeviceDisplayStatusManager.dll";
            DeviceDisplayStatusManagerdll = f_LoadLibraryA(DeviceDisplayStatusManagerdll_str);
        }
    }
    __forceinline void load_DeviceDriverRetrievalClient() noexcept {
        if (f_LoadLibraryA) {
            char DeviceDriverRetrievalClientdll_str[] = "DeviceDriverRetrievalClient.dll";
            DeviceDriverRetrievalClientdll = f_LoadLibraryA(DeviceDriverRetrievalClientdll_str);
        }
    }
    __forceinline void load_DeviceElementSource() noexcept {
        if (f_LoadLibraryA) {
            char DeviceElementSourcedll_str[] = "DeviceElementSource.dll";
            DeviceElementSourcedll = f_LoadLibraryA(DeviceElementSourcedll_str);
        }
    }
    __forceinline void load_DeviceFlowsDataModel() noexcept {
        if (f_LoadLibraryA) {
            char DeviceFlowsDataModeldll_str[] = "DeviceFlows.DataModel.dll";
            DeviceFlowsDataModeldll = f_LoadLibraryA(DeviceFlowsDataModeldll_str);
        }
    }
    __forceinline void load_DeviceMetadataRetrievalClient() noexcept {
        if (f_LoadLibraryA) {
            char DeviceMetadataRetrievalClientdll_str[] = "DeviceMetadataRetrievalClient.dll";
            DeviceMetadataRetrievalClientdll = f_LoadLibraryA(DeviceMetadataRetrievalClientdll_str);
        }
    }
    __forceinline void load_devicengccredprov() noexcept {
        if (f_LoadLibraryA) {
            char devicengccredprovdll_str[] = "devicengccredprov.dll";
            devicengccredprovdll = f_LoadLibraryA(devicengccredprovdll_str);
        }
    }
    __forceinline void load_DevicePairing() noexcept {
        if (f_LoadLibraryA) {
            char DevicePairingdll_str[] = "DevicePairing.dll";
            DevicePairingdll = f_LoadLibraryA(DevicePairingdll_str);
        }
    }
    __forceinline void load_DevicePairingExperienceMEM() noexcept {
        if (f_LoadLibraryA) {
            char DevicePairingExperienceMEMdll_str[] = "DevicePairingExperienceMEM.dll";
            DevicePairingExperienceMEMdll = f_LoadLibraryA(DevicePairingExperienceMEMdll_str);
        }
    }
    __forceinline void load_DevicePairingFolder() noexcept {
        if (f_LoadLibraryA) {
            char DevicePairingFolderdll_str[] = "DevicePairingFolder.dll";
            DevicePairingFolderdll = f_LoadLibraryA(DevicePairingFolderdll_str);
        }
    }
    __forceinline void load_DevicePairingProxy() noexcept {
        if (f_LoadLibraryA) {
            char DevicePairingProxydll_str[] = "DevicePairingProxy.dll";
            DevicePairingProxydll = f_LoadLibraryA(DevicePairingProxydll_str);
        }
    }
    __forceinline void load_DeviceReactivation() noexcept {
        if (f_LoadLibraryA) {
            char DeviceReactivationdll_str[] = "DeviceReactivation.dll";
            DeviceReactivationdll = f_LoadLibraryA(DeviceReactivationdll_str);
        }
    }
    __forceinline void load_deviceregistration() noexcept {
        if (f_LoadLibraryA) {
            char deviceregistrationdll_str[] = "deviceregistration.dll";
            deviceregistrationdll = f_LoadLibraryA(deviceregistrationdll_str);
        }
    }
    __forceinline void load_DeviceSetupManager() noexcept {
        if (f_LoadLibraryA) {
            char DeviceSetupManagerdll_str[] = "DeviceSetupManager.dll";
            DeviceSetupManagerdll = f_LoadLibraryA(DeviceSetupManagerdll_str);
        }
    }
    __forceinline void load_DeviceSetupManagerAPI() noexcept {
        if (f_LoadLibraryA) {
            char DeviceSetupManagerAPIdll_str[] = "DeviceSetupManagerAPI.dll";
            DeviceSetupManagerAPIdll = f_LoadLibraryA(DeviceSetupManagerAPIdll_str);
        }
    }
    __forceinline void load_DeviceSetupStatusProvider() noexcept {
        if (f_LoadLibraryA) {
            char DeviceSetupStatusProviderdll_str[] = "DeviceSetupStatusProvider.dll";
            DeviceSetupStatusProviderdll = f_LoadLibraryA(DeviceSetupStatusProviderdll_str);
        }
    }
    __forceinline void load_DevicesFlowBroker() noexcept {
        if (f_LoadLibraryA) {
            char DevicesFlowBrokerdll_str[] = "DevicesFlowBroker.dll";
            DevicesFlowBrokerdll = f_LoadLibraryA(DevicesFlowBrokerdll_str);
        }
    }
    __forceinline void load_DeviceSoftwareInstallationClient() noexcept {
        if (f_LoadLibraryA) {
            char DeviceSoftwareInstallationClientdll_str[] = "DeviceSoftwareInstallationClient.dll";
            DeviceSoftwareInstallationClientdll = f_LoadLibraryA(DeviceSoftwareInstallationClientdll_str);
        }
    }
    __forceinline void load_DeviceUpdateAgent() noexcept {
        if (f_LoadLibraryA) {
            char DeviceUpdateAgentdll_str[] = "DeviceUpdateAgent.dll";
            DeviceUpdateAgentdll = f_LoadLibraryA(DeviceUpdateAgentdll_str);
        }
    }
    __forceinline void load_DeviceUpdateCenterCsp() noexcept {
        if (f_LoadLibraryA) {
            char DeviceUpdateCenterCspdll_str[] = "DeviceUpdateCenterCsp.dll";
            DeviceUpdateCenterCspdll = f_LoadLibraryA(DeviceUpdateCenterCspdll_str);
        }
    }
    __forceinline void load_DeviceUxRes() noexcept {
        if (f_LoadLibraryA) {
            char DeviceUxResdll_str[] = "DeviceUxRes.dll";
            DeviceUxResdll = f_LoadLibraryA(DeviceUxResdll_str);
        }
    }
    __forceinline void load_devinv() noexcept {
        if (f_LoadLibraryA) {
            char devinvdll_str[] = "devinv.dll";
            devinvdll = f_LoadLibraryA(devinvdll_str);
        }
    }
    __forceinline void load_devmgr() noexcept {
        if (f_LoadLibraryA) {
            char devmgrdll_str[] = "devmgr.dll";
            devmgrdll = f_LoadLibraryA(devmgrdll_str);
        }
    }
    __forceinline void load_devobj() noexcept {
        if (f_LoadLibraryA) {
            char devobjdll_str[] = "devobj.dll";
            devobjdll = f_LoadLibraryA(devobjdll_str);
        }
    }
    __forceinline void load_DevPropMgr() noexcept {
        if (f_LoadLibraryA) {
            char DevPropMgrdll_str[] = "DevPropMgr.dll";
            DevPropMgrdll = f_LoadLibraryA(DevPropMgrdll_str);
        }
    }
    __forceinline void load_DevQueryBroker() noexcept {
        if (f_LoadLibraryA) {
            char DevQueryBrokerdll_str[] = "DevQueryBroker.dll";
            DevQueryBrokerdll = f_LoadLibraryA(DevQueryBrokerdll_str);
        }
    }
    __forceinline void load_devrtl() noexcept {
        if (f_LoadLibraryA) {
            char devrtldll_str[] = "devrtl.dll";
            devrtldll = f_LoadLibraryA(devrtldll_str);
        }
    }
    __forceinline void load_dfdts() noexcept {
        if (f_LoadLibraryA) {
            char dfdtsdll_str[] = "dfdts.dll";
            dfdtsdll = f_LoadLibraryA(dfdtsdll_str);
        }
    }
    __forceinline void load_dfscli() noexcept {
        if (f_LoadLibraryA) {
            char dfsclidll_str[] = "dfscli.dll";
            dfsclidll = f_LoadLibraryA(dfsclidll_str);
        }
    }
    __forceinline void load_dfshim() noexcept {
        if (f_LoadLibraryA) {
            char dfshimdll_str[] = "dfshim.dll";
            dfshimdll = f_LoadLibraryA(dfshimdll_str);
        }
    }
    __forceinline void load_DfsShlEx() noexcept {
        if (f_LoadLibraryA) {
            char DfsShlExdll_str[] = "DfsShlEx.dll";
            DfsShlExdll = f_LoadLibraryA(DfsShlExdll_str);
        }
    }
    __forceinline void load_dggpext() noexcept {
        if (f_LoadLibraryA) {
            char dggpextdll_str[] = "dggpext.dll";
            dggpextdll = f_LoadLibraryA(dggpextdll_str);
        }
    }
    __forceinline void load_dhcpcmonitor() noexcept {
        if (f_LoadLibraryA) {
            char dhcpcmonitordll_str[] = "dhcpcmonitor.dll";
            dhcpcmonitordll = f_LoadLibraryA(dhcpcmonitordll_str);
        }
    }
    __forceinline void load_dhcpcore() noexcept {
        if (f_LoadLibraryA) {
            char dhcpcoredll_str[] = "dhcpcore.dll";
            dhcpcoredll = f_LoadLibraryA(dhcpcoredll_str);
        }
    }
    __forceinline void load_dhcpcore6() noexcept {
        if (f_LoadLibraryA) {
            char dhcpcore6dll_str[] = "dhcpcore6.dll";
            dhcpcore6dll = f_LoadLibraryA(dhcpcore6dll_str);
        }
    }
    __forceinline void load_dhcpcsvc() noexcept {
        if (f_LoadLibraryA) {
            char dhcpcsvcdll_str[] = "dhcpcsvc.dll";
            dhcpcsvcdll = f_LoadLibraryA(dhcpcsvcdll_str);
        }
    }
    __forceinline void load_dhcpcsvc6() noexcept {
        if (f_LoadLibraryA) {
            char dhcpcsvc6dll_str[] = "dhcpcsvc6.dll";
            dhcpcsvc6dll = f_LoadLibraryA(dhcpcsvc6dll_str);
        }
    }
    __forceinline void load_dhcpsapi() noexcept {
        if (f_LoadLibraryA) {
            char dhcpsapidll_str[] = "dhcpsapi.dll";
            dhcpsapidll = f_LoadLibraryA(dhcpsapidll_str);
        }
    }
    __forceinline void load_DHolographicDisplay() noexcept {
        if (f_LoadLibraryA) {
            char DHolographicDisplaydll_str[] = "DHolographicDisplay.dll";
            DHolographicDisplaydll = f_LoadLibraryA(DHolographicDisplaydll_str);
        }
    }
    __forceinline void load_DiagCpl() noexcept {
        if (f_LoadLibraryA) {
            char DiagCpldll_str[] = "DiagCpl.dll";
            DiagCpldll = f_LoadLibraryA(DiagCpldll_str);
        }
    }
    __forceinline void load_diagnosticdataquery() noexcept {
        if (f_LoadLibraryA) {
            char diagnosticdataquerydll_str[] = "diagnosticdataquery.dll";
            diagnosticdataquerydll = f_LoadLibraryA(diagnosticdataquerydll_str);
        }
    }
    __forceinline void load_DiagnosticDataSettings() noexcept {
        if (f_LoadLibraryA) {
            char DiagnosticDataSettingsdll_str[] = "DiagnosticDataSettings.dll";
            DiagnosticDataSettingsdll = f_LoadLibraryA(DiagnosticDataSettingsdll_str);
        }
    }
    __forceinline void load_DiagnosticInvoker() noexcept {
        if (f_LoadLibraryA) {
            char DiagnosticInvokerdll_str[] = "DiagnosticInvoker.dll";
            DiagnosticInvokerdll = f_LoadLibraryA(DiagnosticInvokerdll_str);
        }
    }
    __forceinline void load_DiagnosticLogCSP() noexcept {
        if (f_LoadLibraryA) {
            char DiagnosticLogCSPdll_str[] = "DiagnosticLogCSP.dll";
            DiagnosticLogCSPdll = f_LoadLibraryA(DiagnosticLogCSPdll_str);
        }
    }
    __forceinline void load_diagperf() noexcept {
        if (f_LoadLibraryA) {
            char diagperfdll_str[] = "diagperf.dll";
            diagperfdll = f_LoadLibraryA(diagperfdll_str);
        }
    }
    __forceinline void load_DiagSvc() noexcept {
        if (f_LoadLibraryA) {
            char DiagSvcdll_str[] = "DiagSvc.dll";
            DiagSvcdll = f_LoadLibraryA(DiagSvcdll_str);
        }
    }
    __forceinline void load_diagtrack() noexcept {
        if (f_LoadLibraryA) {
            char diagtrackdll_str[] = "diagtrack.dll";
            diagtrackdll = f_LoadLibraryA(diagtrackdll_str);
        }
    }
    __forceinline void load_dialclient() noexcept {
        if (f_LoadLibraryA) {
            char dialclientdll_str[] = "dialclient.dll";
            dialclientdll = f_LoadLibraryA(dialclientdll_str);
        }
    }
    __forceinline void load_DialogBlockerProc() noexcept {
        if (f_LoadLibraryA) {
            char DialogBlockerProcdll_str[] = "DialogBlockerProc.dll";
            DialogBlockerProcdll = f_LoadLibraryA(DialogBlockerProcdll_str);
        }
    }
    __forceinline void load_DialogBlockingManager() noexcept {
        if (f_LoadLibraryA) {
            char DialogBlockingManagerdll_str[] = "DialogBlockingManager.dll";
            DialogBlockingManagerdll = f_LoadLibraryA(DialogBlockingManagerdll_str);
        }
    }
    __forceinline void load_DialogBlockingService() noexcept {
        if (f_LoadLibraryA) {
            char DialogBlockingServicedll_str[] = "DialogBlockingService.dll";
            DialogBlockingServicedll = f_LoadLibraryA(DialogBlockingServicedll_str);
        }
    }
    __forceinline void load_dialserver() noexcept {
        if (f_LoadLibraryA) {
            char dialserverdll_str[] = "dialserver.dll";
            dialserverdll = f_LoadLibraryA(dialserverdll_str);
        }
    }
    __forceinline void load_DictationManager() noexcept {
        if (f_LoadLibraryA) {
            char DictationManagerdll_str[] = "DictationManager.dll";
            DictationManagerdll = f_LoadLibraryA(DictationManagerdll_str);
        }
    }
    __forceinline void load_difxapi() noexcept {
        if (f_LoadLibraryA) {
            char difxapidll_str[] = "difxapi.dll";
            difxapidll = f_LoadLibraryA(difxapidll_str);
        }
    }
    __forceinline void load_dimsjob() noexcept {
        if (f_LoadLibraryA) {
            char dimsjobdll_str[] = "dimsjob.dll";
            dimsjobdll = f_LoadLibraryA(dimsjobdll_str);
        }
    }
    __forceinline void load_dimsroam() noexcept {
        if (f_LoadLibraryA) {
            char dimsroamdll_str[] = "dimsroam.dll";
            dimsroamdll = f_LoadLibraryA(dimsroamdll_str);
        }
    }
    __forceinline void load_dinput() noexcept {
        if (f_LoadLibraryA) {
            char dinputdll_str[] = "dinput.dll";
            dinputdll = f_LoadLibraryA(dinputdll_str);
        }
    }
    __forceinline void load_dinput8() noexcept {
        if (f_LoadLibraryA) {
            char dinput8dll_str[] = "dinput8.dll";
            dinput8dll = f_LoadLibraryA(dinput8dll_str);
        }
    }
    __forceinline void load_Direct2DDesktop() noexcept {
        if (f_LoadLibraryA) {
            char Direct2DDesktopdll_str[] = "Direct2DDesktop.dll";
            Direct2DDesktopdll = f_LoadLibraryA(Direct2DDesktopdll_str);
        }
    }
    __forceinline void load_directmanipulation() noexcept {
        if (f_LoadLibraryA) {
            char directmanipulationdll_str[] = "directmanipulation.dll";
            directmanipulationdll = f_LoadLibraryA(directmanipulationdll_str);
        }
    }
    __forceinline void load_DirectMLDebug() noexcept {
        if (f_LoadLibraryA) {
            char DirectMLDebugdll_str[] = "DirectML.Debug.dll";
            DirectMLDebugdll = f_LoadLibraryA(DirectMLDebugdll_str);
        }
    }
    __forceinline void load_directml() noexcept {
        if (f_LoadLibraryA) {
            char directmldll_str[] = "directml.dll";
            directmldll = f_LoadLibraryA(directmldll_str);
        }
    }
    __forceinline void load_directxdatabasehelper() noexcept {
        if (f_LoadLibraryA) {
            char directxdatabasehelperdll_str[] = "directxdatabasehelper.dll";
            directxdatabasehelperdll = f_LoadLibraryA(directxdatabasehelperdll_str);
        }
    }
    __forceinline void load_discan() noexcept {
        if (f_LoadLibraryA) {
            char discandll_str[] = "discan.dll";
            discandll = f_LoadLibraryA(discandll_str);
        }
    }
    __forceinline void load_DismApi() noexcept {
        if (f_LoadLibraryA) {
            char DismApidll_str[] = "DismApi.dll";
            DismApidll = f_LoadLibraryA(DismApidll_str);
        }
    }
    __forceinline void load_DispBrokerDesktop() noexcept {
        if (f_LoadLibraryA) {
            char DispBrokerDesktopdll_str[] = "DispBroker.Desktop.dll";
            DispBrokerDesktopdll = f_LoadLibraryA(DispBrokerDesktopdll_str);
        }
    }
    __forceinline void load_DispBroker() noexcept {
        if (f_LoadLibraryA) {
            char DispBrokerdll_str[] = "DispBroker.dll";
            DispBrokerdll = f_LoadLibraryA(DispBrokerdll_str);
        }
    }
    __forceinline void load_dispex() noexcept {
        if (f_LoadLibraryA) {
            char dispexdll_str[] = "dispex.dll";
            dispexdll = f_LoadLibraryA(dispexdll_str);
        }
    }
    __forceinline void load_Display() noexcept {
        if (f_LoadLibraryA) {
            char Displaydll_str[] = "Display.dll";
            Displaydll = f_LoadLibraryA(Displaydll_str);
        }
    }
    __forceinline void load_DisplayManager() noexcept {
        if (f_LoadLibraryA) {
            char DisplayManagerdll_str[] = "DisplayManager.dll";
            DisplayManagerdll = f_LoadLibraryA(DisplayManagerdll_str);
        }
    }
    __forceinline void load_dlnashext() noexcept {
        if (f_LoadLibraryA) {
            char dlnashextdll_str[] = "dlnashext.dll";
            dlnashextdll = f_LoadLibraryA(dlnashextdll_str);
        }
    }
    __forceinline void load_DMAlertListenerProxyStub() noexcept {
        if (f_LoadLibraryA) {
            char DMAlertListenerProxyStubdll_str[] = "DMAlertListener.ProxyStub.dll";
            DMAlertListenerProxyStubdll = f_LoadLibraryA(DMAlertListenerProxyStubdll_str);
        }
    }
    __forceinline void load_DmApiSetExtImplDesktop() noexcept {
        if (f_LoadLibraryA) {
            char DmApiSetExtImplDesktopdll_str[] = "DmApiSetExtImplDesktop.dll";
            DmApiSetExtImplDesktopdll = f_LoadLibraryA(DmApiSetExtImplDesktopdll_str);
        }
    }
    __forceinline void load_DMAppsRes() noexcept {
        if (f_LoadLibraryA) {
            char DMAppsResdll_str[] = "DMAppsRes.dll";
            DMAppsResdll = f_LoadLibraryA(DMAppsResdll_str);
        }
    }
    __forceinline void load_dmcfgutils() noexcept {
        if (f_LoadLibraryA) {
            char dmcfgutilsdll_str[] = "dmcfgutils.dll";
            dmcfgutilsdll = f_LoadLibraryA(dmcfgutilsdll_str);
        }
    }
    __forceinline void load_dmcmnutils() noexcept {
        if (f_LoadLibraryA) {
            char dmcmnutilsdll_str[] = "dmcmnutils.dll";
            dmcmnutilsdll = f_LoadLibraryA(dmcmnutilsdll_str);
        }
    }
    __forceinline void load_dmcommandlineutils() noexcept {
        if (f_LoadLibraryA) {
            char dmcommandlineutilsdll_str[] = "dmcommandlineutils.dll";
            dmcommandlineutilsdll = f_LoadLibraryA(dmcommandlineutilsdll_str);
        }
    }
    __forceinline void load_dmcsps() noexcept {
        if (f_LoadLibraryA) {
            char dmcspsdll_str[] = "dmcsps.dll";
            dmcspsdll = f_LoadLibraryA(dmcspsdll_str);
        }
    }
    __forceinline void load_dmdlgs() noexcept {
        if (f_LoadLibraryA) {
            char dmdlgsdll_str[] = "dmdlgs.dll";
            dmdlgsdll = f_LoadLibraryA(dmdlgsdll_str);
        }
    }
    __forceinline void load_dmdskmgr() noexcept {
        if (f_LoadLibraryA) {
            char dmdskmgrdll_str[] = "dmdskmgr.dll";
            dmdskmgrdll = f_LoadLibraryA(dmdskmgrdll_str);
        }
    }
    __forceinline void load_dmdskres() noexcept {
        if (f_LoadLibraryA) {
            char dmdskresdll_str[] = "dmdskres.dll";
            dmdskresdll = f_LoadLibraryA(dmdskresdll_str);
        }
    }
    __forceinline void load_dmdskres2() noexcept {
        if (f_LoadLibraryA) {
            char dmdskres2dll_str[] = "dmdskres2.dll";
            dmdskres2dll = f_LoadLibraryA(dmdskres2dll_str);
        }
    }
    __forceinline void load_dmenrollengine() noexcept {
        if (f_LoadLibraryA) {
            char dmenrollenginedll_str[] = "dmenrollengine.dll";
            dmenrollenginedll = f_LoadLibraryA(dmenrollenginedll_str);
        }
    }
    __forceinline void load_dmenterprisediagnostics() noexcept {
        if (f_LoadLibraryA) {
            char dmenterprisediagnosticsdll_str[] = "dmenterprisediagnostics.dll";
            dmenterprisediagnosticsdll = f_LoadLibraryA(dmenterprisediagnosticsdll_str);
        }
    }
    __forceinline void load_dmintf() noexcept {
        if (f_LoadLibraryA) {
            char dmintfdll_str[] = "dmintf.dll";
            dmintfdll = f_LoadLibraryA(dmintfdll_str);
        }
    }
    __forceinline void load_dmiso8601utils() noexcept {
        if (f_LoadLibraryA) {
            char dmiso8601utilsdll_str[] = "dmiso8601utils.dll";
            dmiso8601utilsdll = f_LoadLibraryA(dmiso8601utilsdll_str);
        }
    }
    __forceinline void load_dmloader() noexcept {
        if (f_LoadLibraryA) {
            char dmloaderdll_str[] = "dmloader.dll";
            dmloaderdll = f_LoadLibraryA(dmloaderdll_str);
        }
    }
    __forceinline void load_dmocx() noexcept {
        if (f_LoadLibraryA) {
            char dmocxdll_str[] = "dmocx.dll";
            dmocxdll = f_LoadLibraryA(dmocxdll_str);
        }
    }
    __forceinline void load_dmoleaututils() noexcept {
        if (f_LoadLibraryA) {
            char dmoleaututilsdll_str[] = "dmoleaututils.dll";
            dmoleaututilsdll = f_LoadLibraryA(dmoleaututilsdll_str);
        }
    }
    __forceinline void load_dmprocessxmlfiltered() noexcept {
        if (f_LoadLibraryA) {
            char dmprocessxmlfiltereddll_str[] = "dmprocessxmlfiltered.dll";
            dmprocessxmlfiltereddll = f_LoadLibraryA(dmprocessxmlfiltereddll_str);
        }
    }
    __forceinline void load_dmpushproxy() noexcept {
        if (f_LoadLibraryA) {
            char dmpushproxydll_str[] = "dmpushproxy.dll";
            dmpushproxydll = f_LoadLibraryA(dmpushproxydll_str);
        }
    }
    __forceinline void load_DMPushRouterCore() noexcept {
        if (f_LoadLibraryA) {
            char DMPushRouterCoredll_str[] = "DMPushRouterCore.dll";
            DMPushRouterCoredll = f_LoadLibraryA(DMPushRouterCoredll_str);
        }
    }
    __forceinline void load_DMRCDecoder() noexcept {
        if (f_LoadLibraryA) {
            char DMRCDecoderdll_str[] = "DMRCDecoder.dll";
            DMRCDecoderdll = f_LoadLibraryA(DMRCDecoderdll_str);
        }
    }
    __forceinline void load_DMRServer() noexcept {
        if (f_LoadLibraryA) {
            char DMRServerdll_str[] = "DMRServer.dll";
            DMRServerdll = f_LoadLibraryA(DMRServerdll_str);
        }
    }
    __forceinline void load_dmsynth() noexcept {
        if (f_LoadLibraryA) {
            char dmsynthdll_str[] = "dmsynth.dll";
            dmsynthdll = f_LoadLibraryA(dmsynthdll_str);
        }
    }
    __forceinline void load_dmusic() noexcept {
        if (f_LoadLibraryA) {
            char dmusicdll_str[] = "dmusic.dll";
            dmusicdll = f_LoadLibraryA(dmusicdll_str);
        }
    }
    __forceinline void load_dmutil() noexcept {
        if (f_LoadLibraryA) {
            char dmutildll_str[] = "dmutil.dll";
            dmutildll = f_LoadLibraryA(dmutildll_str);
        }
    }
    __forceinline void load_dmvdsitf() noexcept {
        if (f_LoadLibraryA) {
            char dmvdsitfdll_str[] = "dmvdsitf.dll";
            dmvdsitfdll = f_LoadLibraryA(dmvdsitfdll_str);
        }
    }
    __forceinline void load_dmwappushsvc() noexcept {
        if (f_LoadLibraryA) {
            char dmwappushsvcdll_str[] = "dmwappushsvc.dll";
            dmwappushsvcdll = f_LoadLibraryA(dmwappushsvcdll_str);
        }
    }
    __forceinline void load_dmwmicsp() noexcept {
        if (f_LoadLibraryA) {
            char dmwmicspdll_str[] = "dmwmicsp.dll";
            dmwmicspdll = f_LoadLibraryA(dmwmicspdll_str);
        }
    }
    __forceinline void load_dmxmlhelputils() noexcept {
        if (f_LoadLibraryA) {
            char dmxmlhelputilsdll_str[] = "dmxmlhelputils.dll";
            dmxmlhelputilsdll = f_LoadLibraryA(dmxmlhelputilsdll_str);
        }
    }
    __forceinline void load_dnsapi() noexcept {
        if (f_LoadLibraryA) {
            char dnsapidll_str[] = "dnsapi.dll";
            dnsapidll = f_LoadLibraryA(dnsapidll_str);
        }
    }
    __forceinline void load_dnscmmc() noexcept {
        if (f_LoadLibraryA) {
            char dnscmmcdll_str[] = "dnscmmc.dll";
            dnscmmcdll = f_LoadLibraryA(dnscmmcdll_str);
        }
    }
    __forceinline void load_dnsext() noexcept {
        if (f_LoadLibraryA) {
            char dnsextdll_str[] = "dnsext.dll";
            dnsextdll = f_LoadLibraryA(dnsextdll_str);
        }
    }
    __forceinline void load_dnshc() noexcept {
        if (f_LoadLibraryA) {
            char dnshcdll_str[] = "dnshc.dll";
            dnshcdll = f_LoadLibraryA(dnshcdll_str);
        }
    }
    __forceinline void load_dnsrslvr() noexcept {
        if (f_LoadLibraryA) {
            char dnsrslvrdll_str[] = "dnsrslvr.dll";
            dnsrslvrdll = f_LoadLibraryA(dnsrslvrdll_str);
        }
    }
    __forceinline void load_DockingVirtualInput() noexcept {
        if (f_LoadLibraryA) {
            char DockingVirtualInputdll_str[] = "Docking.VirtualInput.dll";
            DockingVirtualInputdll = f_LoadLibraryA(DockingVirtualInputdll_str);
        }
    }
    __forceinline void load_DockInterfaceProxyStub() noexcept {
        if (f_LoadLibraryA) {
            char DockInterfaceProxyStubdll_str[] = "DockInterface.ProxyStub.dll";
            DockInterfaceProxyStubdll = f_LoadLibraryA(DockInterfaceProxyStubdll_str);
        }
    }
    __forceinline void load_doclient() noexcept {
        if (f_LoadLibraryA) {
            char doclientdll_str[] = "doclient.dll";
            doclientdll = f_LoadLibraryA(doclientdll_str);
        }
    }
    __forceinline void load_docprop() noexcept {
        if (f_LoadLibraryA) {
            char docpropdll_str[] = "docprop.dll";
            docpropdll = f_LoadLibraryA(docpropdll_str);
        }
    }
    __forceinline void load_DocumentPerformanceEvents() noexcept {
        if (f_LoadLibraryA) {
            char DocumentPerformanceEventsdll_str[] = "DocumentPerformanceEvents.dll";
            DocumentPerformanceEventsdll = f_LoadLibraryA(DocumentPerformanceEventsdll_str);
        }
    }
    __forceinline void load_DolbyDecMFT() noexcept {
        if (f_LoadLibraryA) {
            char DolbyDecMFTdll_str[] = "DolbyDecMFT.dll";
            DolbyDecMFTdll = f_LoadLibraryA(DolbyDecMFTdll_str);
        }
    }
    __forceinline void load_domgmt() noexcept {
        if (f_LoadLibraryA) {
            char domgmtdll_str[] = "domgmt.dll";
            domgmtdll = f_LoadLibraryA(domgmtdll_str);
        }
    }
    __forceinline void load_domiprov() noexcept {
        if (f_LoadLibraryA) {
            char domiprovdll_str[] = "domiprov.dll";
            domiprovdll = f_LoadLibraryA(domiprovdll_str);
        }
    }
    __forceinline void load_dosettings() noexcept {
        if (f_LoadLibraryA) {
            char dosettingsdll_str[] = "dosettings.dll";
            dosettingsdll = f_LoadLibraryA(dosettingsdll_str);
        }
    }
    __forceinline void load_dosvc() noexcept {
        if (f_LoadLibraryA) {
            char dosvcdll_str[] = "dosvc.dll";
            dosvcdll = f_LoadLibraryA(dosvcdll_str);
        }
    }
    __forceinline void load_dot3api() noexcept {
        if (f_LoadLibraryA) {
            char dot3apidll_str[] = "dot3api.dll";
            dot3apidll = f_LoadLibraryA(dot3apidll_str);
        }
    }
    __forceinline void load_dot3cfg() noexcept {
        if (f_LoadLibraryA) {
            char dot3cfgdll_str[] = "dot3cfg.dll";
            dot3cfgdll = f_LoadLibraryA(dot3cfgdll_str);
        }
    }
    __forceinline void load_Dot3Conn() noexcept {
        if (f_LoadLibraryA) {
            char Dot3Conndll_str[] = "Dot3Conn.dll";
            Dot3Conndll = f_LoadLibraryA(Dot3Conndll_str);
        }
    }
    __forceinline void load_dot3dlg() noexcept {
        if (f_LoadLibraryA) {
            char dot3dlgdll_str[] = "dot3dlg.dll";
            dot3dlgdll = f_LoadLibraryA(dot3dlgdll_str);
        }
    }
    __forceinline void load_dot3gpclnt() noexcept {
        if (f_LoadLibraryA) {
            char dot3gpclntdll_str[] = "dot3gpclnt.dll";
            dot3gpclntdll = f_LoadLibraryA(dot3gpclntdll_str);
        }
    }
    __forceinline void load_dot3gpui() noexcept {
        if (f_LoadLibraryA) {
            char dot3gpuidll_str[] = "dot3gpui.dll";
            dot3gpuidll = f_LoadLibraryA(dot3gpuidll_str);
        }
    }
    __forceinline void load_dot3hc() noexcept {
        if (f_LoadLibraryA) {
            char dot3hcdll_str[] = "dot3hc.dll";
            dot3hcdll = f_LoadLibraryA(dot3hcdll_str);
        }
    }
    __forceinline void load_dot3mm() noexcept {
        if (f_LoadLibraryA) {
            char dot3mmdll_str[] = "dot3mm.dll";
            dot3mmdll = f_LoadLibraryA(dot3mmdll_str);
        }
    }
    __forceinline void load_dot3msm() noexcept {
        if (f_LoadLibraryA) {
            char dot3msmdll_str[] = "dot3msm.dll";
            dot3msmdll = f_LoadLibraryA(dot3msmdll_str);
        }
    }
    __forceinline void load_dot3svc() noexcept {
        if (f_LoadLibraryA) {
            char dot3svcdll_str[] = "dot3svc.dll";
            dot3svcdll = f_LoadLibraryA(dot3svcdll_str);
        }
    }
    __forceinline void load_dot3ui() noexcept {
        if (f_LoadLibraryA) {
            char dot3uidll_str[] = "dot3ui.dll";
            dot3uidll = f_LoadLibraryA(dot3uidll_str);
        }
    }
    __forceinline void load_dpapi() noexcept {
        if (f_LoadLibraryA) {
            char dpapidll_str[] = "dpapi.dll";
            dpapidll = f_LoadLibraryA(dpapidll_str);
        }
    }
    __forceinline void load_dpapiprovider() noexcept {
        if (f_LoadLibraryA) {
            char dpapiproviderdll_str[] = "dpapiprovider.dll";
            dpapiproviderdll = f_LoadLibraryA(dpapiproviderdll_str);
        }
    }
    __forceinline void load_dpapisrv() noexcept {
        if (f_LoadLibraryA) {
            char dpapisrvdll_str[] = "dpapisrv.dll";
            dpapisrvdll = f_LoadLibraryA(dpapisrvdll_str);
        }
    }
    __forceinline void load_dplcsp() noexcept {
        if (f_LoadLibraryA) {
            char dplcspdll_str[] = "dplcsp.dll";
            dplcspdll = f_LoadLibraryA(dplcspdll_str);
        }
    }
    __forceinline void load_dpnaddr() noexcept {
        if (f_LoadLibraryA) {
            char dpnaddrdll_str[] = "dpnaddr.dll";
            dpnaddrdll = f_LoadLibraryA(dpnaddrdll_str);
        }
    }
    __forceinline void load_dpnathlp() noexcept {
        if (f_LoadLibraryA) {
            char dpnathlpdll_str[] = "dpnathlp.dll";
            dpnathlpdll = f_LoadLibraryA(dpnathlpdll_str);
        }
    }
    __forceinline void load_dpnet() noexcept {
        if (f_LoadLibraryA) {
            char dpnetdll_str[] = "dpnet.dll";
            dpnetdll = f_LoadLibraryA(dpnetdll_str);
        }
    }
    __forceinline void load_dpnhpast() noexcept {
        if (f_LoadLibraryA) {
            char dpnhpastdll_str[] = "dpnhpast.dll";
            dpnhpastdll = f_LoadLibraryA(dpnhpastdll_str);
        }
    }
    __forceinline void load_dpnhupnp() noexcept {
        if (f_LoadLibraryA) {
            char dpnhupnpdll_str[] = "dpnhupnp.dll";
            dpnhupnpdll = f_LoadLibraryA(dpnhupnpdll_str);
        }
    }
    __forceinline void load_dpnlobby() noexcept {
        if (f_LoadLibraryA) {
            char dpnlobbydll_str[] = "dpnlobby.dll";
            dpnlobbydll = f_LoadLibraryA(dpnlobbydll_str);
        }
    }
    __forceinline void load_dps() noexcept {
        if (f_LoadLibraryA) {
            char dpsdll_str[] = "dps.dll";
            dpsdll = f_LoadLibraryA(dpsdll_str);
        }
    }
    __forceinline void load_dpx() noexcept {
        if (f_LoadLibraryA) {
            char dpxdll_str[] = "dpx.dll";
            dpxdll = f_LoadLibraryA(dpxdll_str);
        }
    }
    __forceinline void load_DragDropExperienceCommon() noexcept {
        if (f_LoadLibraryA) {
            char DragDropExperienceCommondll_str[] = "DragDropExperienceCommon.dll";
            DragDropExperienceCommondll = f_LoadLibraryA(DragDropExperienceCommondll_str);
        }
    }
    __forceinline void load_DragDropExperienceDataExchangeDelegated() noexcept {
        if (f_LoadLibraryA) {
            char DragDropExperienceDataExchangeDelegateddll_str[] = "DragDropExperienceDataExchangeDelegated.dll";
            DragDropExperienceDataExchangeDelegateddll = f_LoadLibraryA(DragDropExperienceDataExchangeDelegateddll_str);
        }
    }
    __forceinline void load_drprov() noexcept {
        if (f_LoadLibraryA) {
            char drprovdll_str[] = "drprov.dll";
            drprovdll = f_LoadLibraryA(drprovdll_str);
        }
    }
    __forceinline void load_drt() noexcept {
        if (f_LoadLibraryA) {
            char drtdll_str[] = "drt.dll";
            drtdll = f_LoadLibraryA(drtdll_str);
        }
    }
    __forceinline void load_drtprov() noexcept {
        if (f_LoadLibraryA) {
            char drtprovdll_str[] = "drtprov.dll";
            drtprovdll = f_LoadLibraryA(drtprovdll_str);
        }
    }
    __forceinline void load_drttransport() noexcept {
        if (f_LoadLibraryA) {
            char drttransportdll_str[] = "drttransport.dll";
            drttransportdll = f_LoadLibraryA(drttransportdll_str);
        }
    }
    __forceinline void load_drvsetup() noexcept {
        if (f_LoadLibraryA) {
            char drvsetupdll_str[] = "drvsetup.dll";
            drvsetupdll = f_LoadLibraryA(drvsetupdll_str);
        }
    }
    __forceinline void load_drvstore() noexcept {
        if (f_LoadLibraryA) {
            char drvstoredll_str[] = "drvstore.dll";
            drvstoredll = f_LoadLibraryA(drvstoredll_str);
        }
    }
    __forceinline void load_dsauth() noexcept {
        if (f_LoadLibraryA) {
            char dsauthdll_str[] = "dsauth.dll";
            dsauthdll = f_LoadLibraryA(dsauthdll_str);
        }
    }
    __forceinline void load_DscCore() noexcept {
        if (f_LoadLibraryA) {
            char DscCoredll_str[] = "DscCore.dll";
            DscCoredll = f_LoadLibraryA(DscCoredll_str);
        }
    }
    __forceinline void load_DscCoreConfProv() noexcept {
        if (f_LoadLibraryA) {
            char DscCoreConfProvdll_str[] = "DscCoreConfProv.dll";
            DscCoreConfProvdll = f_LoadLibraryA(DscCoreConfProvdll_str);
        }
    }
    __forceinline void load_dsclient() noexcept {
        if (f_LoadLibraryA) {
            char dsclientdll_str[] = "dsclient.dll";
            dsclientdll = f_LoadLibraryA(dsclientdll_str);
        }
    }
    __forceinline void load_dscproxy() noexcept {
        if (f_LoadLibraryA) {
            char dscproxydll_str[] = "dscproxy.dll";
            dscproxydll = f_LoadLibraryA(dscproxydll_str);
        }
    }
    __forceinline void load_DscTimer() noexcept {
        if (f_LoadLibraryA) {
            char DscTimerdll_str[] = "DscTimer.dll";
            DscTimerdll = f_LoadLibraryA(DscTimerdll_str);
        }
    }
    __forceinline void load_dsdmo() noexcept {
        if (f_LoadLibraryA) {
            char dsdmodll_str[] = "dsdmo.dll";
            dsdmodll = f_LoadLibraryA(dsdmodll_str);
        }
    }
    __forceinline void load_dskquota() noexcept {
        if (f_LoadLibraryA) {
            char dskquotadll_str[] = "dskquota.dll";
            dskquotadll = f_LoadLibraryA(dskquotadll_str);
        }
    }
    __forceinline void load_dskquoui() noexcept {
        if (f_LoadLibraryA) {
            char dskquouidll_str[] = "dskquoui.dll";
            dskquouidll = f_LoadLibraryA(dskquouidll_str);
        }
    }
    __forceinline void load_dsound() noexcept {
        if (f_LoadLibraryA) {
            char dsounddll_str[] = "dsound.dll";
            dsounddll = f_LoadLibraryA(dsounddll_str);
        }
    }
    __forceinline void load_dsparse() noexcept {
        if (f_LoadLibraryA) {
            char dsparsedll_str[] = "dsparse.dll";
            dsparsedll = f_LoadLibraryA(dsparsedll_str);
        }
    }
    __forceinline void load_dsprop() noexcept {
        if (f_LoadLibraryA) {
            char dspropdll_str[] = "dsprop.dll";
            dspropdll = f_LoadLibraryA(dspropdll_str);
        }
    }
    __forceinline void load_dsquery() noexcept {
        if (f_LoadLibraryA) {
            char dsquerydll_str[] = "dsquery.dll";
            dsquerydll = f_LoadLibraryA(dsquerydll_str);
        }
    }
    __forceinline void load_dsreg() noexcept {
        if (f_LoadLibraryA) {
            char dsregdll_str[] = "dsreg.dll";
            dsregdll = f_LoadLibraryA(dsregdll_str);
        }
    }
    __forceinline void load_dsregtask() noexcept {
        if (f_LoadLibraryA) {
            char dsregtaskdll_str[] = "dsregtask.dll";
            dsregtaskdll = f_LoadLibraryA(dsregtaskdll_str);
        }
    }
    __forceinline void load_dsrole() noexcept {
        if (f_LoadLibraryA) {
            char dsroledll_str[] = "dsrole.dll";
            dsroledll = f_LoadLibraryA(dsroledll_str);
        }
    }
    __forceinline void load_dssec() noexcept {
        if (f_LoadLibraryA) {
            char dssecdll_str[] = "dssec.dll";
            dssecdll = f_LoadLibraryA(dssecdll_str);
        }
    }
    __forceinline void load_dssenh() noexcept {
        if (f_LoadLibraryA) {
            char dssenhdll_str[] = "dssenh.dll";
            dssenhdll = f_LoadLibraryA(dssenhdll_str);
        }
    }
    __forceinline void load_dssvc() noexcept {
        if (f_LoadLibraryA) {
            char dssvcdll_str[] = "dssvc.dll";
            dssvcdll = f_LoadLibraryA(dssvcdll_str);
        }
    }
    __forceinline void load_Dsui() noexcept {
        if (f_LoadLibraryA) {
            char Dsuidll_str[] = "Dsui.dll";
            Dsuidll = f_LoadLibraryA(Dsuidll_str);
        }
    }
    __forceinline void load_dsuiext() noexcept {
        if (f_LoadLibraryA) {
            char dsuiextdll_str[] = "dsuiext.dll";
            dsuiextdll = f_LoadLibraryA(dsuiextdll_str);
        }
    }
    __forceinline void load_dswave() noexcept {
        if (f_LoadLibraryA) {
            char dswavedll_str[] = "dswave.dll";
            dswavedll = f_LoadLibraryA(dswavedll_str);
        }
    }
    __forceinline void load_dtsh() noexcept {
        if (f_LoadLibraryA) {
            char dtshdll_str[] = "dtsh.dll";
            dtshdll = f_LoadLibraryA(dtshdll_str);
        }
    }
    __forceinline void load_DuCsps() noexcept {
        if (f_LoadLibraryA) {
            char DuCspsdll_str[] = "DuCsps.dll";
            DuCspsdll = f_LoadLibraryA(DuCspsdll_str);
        }
    }
    __forceinline void load_dui70() noexcept {
        if (f_LoadLibraryA) {
            char dui70dll_str[] = "dui70.dll";
            dui70dll = f_LoadLibraryA(dui70dll_str);
        }
    }
    __forceinline void load_duser() noexcept {
        if (f_LoadLibraryA) {
            char duserdll_str[] = "duser.dll";
            duserdll = f_LoadLibraryA(duserdll_str);
        }
    }
    __forceinline void load_dusmapi() noexcept {
        if (f_LoadLibraryA) {
            char dusmapidll_str[] = "dusmapi.dll";
            dusmapidll = f_LoadLibraryA(dusmapidll_str);
        }
    }
    __forceinline void load_dusmsvc() noexcept {
        if (f_LoadLibraryA) {
            char dusmsvcdll_str[] = "dusmsvc.dll";
            dusmsvcdll = f_LoadLibraryA(dusmsvcdll_str);
        }
    }
    __forceinline void load_dwmapi() noexcept {
        if (f_LoadLibraryA) {
            char dwmapidll_str[] = "dwmapi.dll";
            dwmapidll = f_LoadLibraryA(dwmapidll_str);
        }
    }
    __forceinline void load_dwmcore() noexcept {
        if (f_LoadLibraryA) {
            char dwmcoredll_str[] = "dwmcore.dll";
            dwmcoredll = f_LoadLibraryA(dwmcoredll_str);
        }
    }
    __forceinline void load_dwmghost() noexcept {
        if (f_LoadLibraryA) {
            char dwmghostdll_str[] = "dwmghost.dll";
            dwmghostdll = f_LoadLibraryA(dwmghostdll_str);
        }
    }
    __forceinline void load_dwminit() noexcept {
        if (f_LoadLibraryA) {
            char dwminitdll_str[] = "dwminit.dll";
            dwminitdll = f_LoadLibraryA(dwminitdll_str);
        }
    }
    __forceinline void load_dwmredir() noexcept {
        if (f_LoadLibraryA) {
            char dwmredirdll_str[] = "dwmredir.dll";
            dwmredirdll = f_LoadLibraryA(dwmredirdll_str);
        }
    }
    __forceinline void load_dwmscene() noexcept {
        if (f_LoadLibraryA) {
            char dwmscenedll_str[] = "dwmscene.dll";
            dwmscenedll = f_LoadLibraryA(dwmscenedll_str);
        }
    }
    __forceinline void load_DWrite() noexcept {
        if (f_LoadLibraryA) {
            char DWritedll_str[] = "DWrite.dll";
            DWritedll = f_LoadLibraryA(DWritedll_str);
        }
    }
    __forceinline void load_DXCaptureReplay() noexcept {
        if (f_LoadLibraryA) {
            char DXCaptureReplaydll_str[] = "DXCaptureReplay.dll";
            DXCaptureReplaydll = f_LoadLibraryA(DXCaptureReplaydll_str);
        }
    }
    __forceinline void load_DXCore() noexcept {
        if (f_LoadLibraryA) {
            char DXCoredll_str[] = "DXCore.dll";
            DXCoredll = f_LoadLibraryA(DXCoredll_str);
        }
    }
    __forceinline void load_dxdiagn() noexcept {
        if (f_LoadLibraryA) {
            char dxdiagndll_str[] = "dxdiagn.dll";
            dxdiagndll = f_LoadLibraryA(dxdiagndll_str);
        }
    }
    __forceinline void load_dxgi() noexcept {
        if (f_LoadLibraryA) {
            char dxgidll_str[] = "dxgi.dll";
            dxgidll = f_LoadLibraryA(dxgidll_str);
        }
    }
    __forceinline void load_DXGIDebug() noexcept {
        if (f_LoadLibraryA) {
            char DXGIDebugdll_str[] = "DXGIDebug.dll";
            DXGIDebugdll = f_LoadLibraryA(DXGIDebugdll_str);
        }
    }
    __forceinline void load_dxgwdi() noexcept {
        if (f_LoadLibraryA) {
            char dxgwdidll_str[] = "dxgwdi.dll";
            dxgwdidll = f_LoadLibraryA(dxgwdidll_str);
        }
    }
    __forceinline void load_dxilconv() noexcept {
        if (f_LoadLibraryA) {
            char dxilconvdll_str[] = "dxilconv.dll";
            dxilconvdll = f_LoadLibraryA(dxilconvdll_str);
        }
    }
    __forceinline void load_DXP() noexcept {
        if (f_LoadLibraryA) {
            char DXPdll_str[] = "DXP.dll";
            DXPdll = f_LoadLibraryA(DXPdll_str);
        }
    }
    __forceinline void load_dxpps() noexcept {
        if (f_LoadLibraryA) {
            char dxppsdll_str[] = "dxpps.dll";
            dxppsdll = f_LoadLibraryA(dxppsdll_str);
        }
    }
    __forceinline void load_DxpTaskSync() noexcept {
        if (f_LoadLibraryA) {
            char DxpTaskSyncdll_str[] = "DxpTaskSync.dll";
            DxpTaskSyncdll = f_LoadLibraryA(DxpTaskSyncdll_str);
        }
    }
    __forceinline void load_dxtmsft() noexcept {
        if (f_LoadLibraryA) {
            char dxtmsftdll_str[] = "dxtmsft.dll";
            dxtmsftdll = f_LoadLibraryA(dxtmsftdll_str);
        }
    }
    __forceinline void load_DXToolsMonitor() noexcept {
        if (f_LoadLibraryA) {
            char DXToolsMonitordll_str[] = "DXToolsMonitor.dll";
            DXToolsMonitordll = f_LoadLibraryA(DXToolsMonitordll_str);
        }
    }
    __forceinline void load_DXToolsOfflineAnalysis() noexcept {
        if (f_LoadLibraryA) {
            char DXToolsOfflineAnalysisdll_str[] = "DXToolsOfflineAnalysis.dll";
            DXToolsOfflineAnalysisdll = f_LoadLibraryA(DXToolsOfflineAnalysisdll_str);
        }
    }
    __forceinline void load_DxToolsReportGenerator() noexcept {
        if (f_LoadLibraryA) {
            char DxToolsReportGeneratordll_str[] = "DxToolsReportGenerator.dll";
            DxToolsReportGeneratordll = f_LoadLibraryA(DxToolsReportGeneratordll_str);
        }
    }
    __forceinline void load_DXToolsReporting() noexcept {
        if (f_LoadLibraryA) {
            char DXToolsReportingdll_str[] = "DXToolsReporting.dll";
            DXToolsReportingdll = f_LoadLibraryA(DXToolsReportingdll_str);
        }
    }
    __forceinline void load_dxtrans() noexcept {
        if (f_LoadLibraryA) {
            char dxtransdll_str[] = "dxtrans.dll";
            dxtransdll = f_LoadLibraryA(dxtransdll_str);
        }
    }
    __forceinline void load_dxva2() noexcept {
        if (f_LoadLibraryA) {
            char dxva2dll_str[] = "dxva2.dll";
            dxva2dll = f_LoadLibraryA(dxva2dll_str);
        }
    }
    __forceinline void load_dynamoapi() noexcept {
        if (f_LoadLibraryA) {
            char dynamoapidll_str[] = "dynamoapi.dll";
            dynamoapidll = f_LoadLibraryA(dynamoapidll_str);
        }
    }
    __forceinline void load_EAMProgressHandler() noexcept {
        if (f_LoadLibraryA) {
            char EAMProgressHandlerdll_str[] = "EAMProgressHandler.dll";
            EAMProgressHandlerdll = f_LoadLibraryA(EAMProgressHandlerdll_str);
        }
    }
    __forceinline void load_eapp3hst() noexcept {
        if (f_LoadLibraryA) {
            char eapp3hstdll_str[] = "eapp3hst.dll";
            eapp3hstdll = f_LoadLibraryA(eapp3hstdll_str);
        }
    }
    __forceinline void load_eappcfg() noexcept {
        if (f_LoadLibraryA) {
            char eappcfgdll_str[] = "eappcfg.dll";
            eappcfgdll = f_LoadLibraryA(eappcfgdll_str);
        }
    }
    __forceinline void load_eappcfgui() noexcept {
        if (f_LoadLibraryA) {
            char eappcfguidll_str[] = "eappcfgui.dll";
            eappcfguidll = f_LoadLibraryA(eappcfguidll_str);
        }
    }
    __forceinline void load_eappgnui() noexcept {
        if (f_LoadLibraryA) {
            char eappgnuidll_str[] = "eappgnui.dll";
            eappgnuidll = f_LoadLibraryA(eappgnuidll_str);
        }
    }
    __forceinline void load_eapphost() noexcept {
        if (f_LoadLibraryA) {
            char eapphostdll_str[] = "eapphost.dll";
            eapphostdll = f_LoadLibraryA(eapphostdll_str);
        }
    }
    __forceinline void load_eappprxy() noexcept {
        if (f_LoadLibraryA) {
            char eappprxydll_str[] = "eappprxy.dll";
            eappprxydll = f_LoadLibraryA(eappprxydll_str);
        }
    }
    __forceinline void load_eapprovp() noexcept {
        if (f_LoadLibraryA) {
            char eapprovpdll_str[] = "eapprovp.dll";
            eapprovpdll = f_LoadLibraryA(eapprovpdll_str);
        }
    }
    __forceinline void load_eapputil() noexcept {
        if (f_LoadLibraryA) {
            char eapputildll_str[] = "eapputil.dll";
            eapputildll = f_LoadLibraryA(eapputildll_str);
        }
    }
    __forceinline void load_eapsimextdesktop() noexcept {
        if (f_LoadLibraryA) {
            char eapsimextdesktopdll_str[] = "eapsimextdesktop.dll";
            eapsimextdesktopdll = f_LoadLibraryA(eapsimextdesktopdll_str);
        }
    }
    __forceinline void load_eapsvc() noexcept {
        if (f_LoadLibraryA) {
            char eapsvcdll_str[] = "eapsvc.dll";
            eapsvcdll = f_LoadLibraryA(eapsvcdll_str);
        }
    }
    __forceinline void load_EapTeapAuth() noexcept {
        if (f_LoadLibraryA) {
            char EapTeapAuthdll_str[] = "EapTeapAuth.dll";
            EapTeapAuthdll = f_LoadLibraryA(EapTeapAuthdll_str);
        }
    }
    __forceinline void load_EapTeapConfig() noexcept {
        if (f_LoadLibraryA) {
            char EapTeapConfigdll_str[] = "EapTeapConfig.dll";
            EapTeapConfigdll = f_LoadLibraryA(EapTeapConfigdll_str);
        }
    }
    __forceinline void load_EapTeapExt() noexcept {
        if (f_LoadLibraryA) {
            char EapTeapExtdll_str[] = "EapTeapExt.dll";
            EapTeapExtdll = f_LoadLibraryA(EapTeapExtdll_str);
        }
    }
    __forceinline void load_easconsent() noexcept {
        if (f_LoadLibraryA) {
            char easconsentdll_str[] = "easconsent.dll";
            easconsentdll = f_LoadLibraryA(easconsentdll_str);
        }
    }
    __forceinline void load_easinvokerproxystub() noexcept {
        if (f_LoadLibraryA) {
            char easinvokerproxystubdll_str[] = "easinvoker.proxystub.dll";
            easinvokerproxystubdll = f_LoadLibraryA(easinvokerproxystubdll_str);
        }
    }
    __forceinline void load_EasPolicyManagerBrokerPS() noexcept {
        if (f_LoadLibraryA) {
            char EasPolicyManagerBrokerPSdll_str[] = "EasPolicyManagerBrokerPS.dll";
            EasPolicyManagerBrokerPSdll = f_LoadLibraryA(EasPolicyManagerBrokerPSdll_str);
        }
    }
    __forceinline void load_easwrt() noexcept {
        if (f_LoadLibraryA) {
            char easwrtdll_str[] = "easwrt.dll";
            easwrtdll = f_LoadLibraryA(easwrtdll_str);
        }
    }
    __forceinline void load_edgeangle() noexcept {
        if (f_LoadLibraryA) {
            char edgeangledll_str[] = "edgeangle.dll";
            edgeangledll = f_LoadLibraryA(edgeangledll_str);
        }
    }
    __forceinline void load_EdgeContent() noexcept {
        if (f_LoadLibraryA) {
            char EdgeContentdll_str[] = "EdgeContent.dll";
            EdgeContentdll = f_LoadLibraryA(EdgeContentdll_str);
        }
    }
    __forceinline void load_edgehtml() noexcept {
        if (f_LoadLibraryA) {
            char edgehtmldll_str[] = "edgehtml.dll";
            edgehtmldll = f_LoadLibraryA(edgehtmldll_str);
        }
    }
    __forceinline void load_edgeIso() noexcept {
        if (f_LoadLibraryA) {
            char edgeIsodll_str[] = "edgeIso.dll";
            edgeIsodll = f_LoadLibraryA(edgeIsodll_str);
        }
    }
    __forceinline void load_EdgeManager() noexcept {
        if (f_LoadLibraryA) {
            char EdgeManagerdll_str[] = "EdgeManager.dll";
            EdgeManagerdll = f_LoadLibraryA(EdgeManagerdll_str);
        }
    }
    __forceinline void load_EdgeResetPlugin() noexcept {
        if (f_LoadLibraryA) {
            char EdgeResetPlugindll_str[] = "EdgeResetPlugin.dll";
            EdgeResetPlugindll = f_LoadLibraryA(EdgeResetPlugindll_str);
        }
    }
    __forceinline void load_EditBufferTestHook() noexcept {
        if (f_LoadLibraryA) {
            char EditBufferTestHookdll_str[] = "EditBufferTestHook.dll";
            EditBufferTestHookdll = f_LoadLibraryA(EditBufferTestHookdll_str);
        }
    }
    __forceinline void load_EditionUpgradeHelper() noexcept {
        if (f_LoadLibraryA) {
            char EditionUpgradeHelperdll_str[] = "EditionUpgradeHelper.dll";
            EditionUpgradeHelperdll = f_LoadLibraryA(EditionUpgradeHelperdll_str);
        }
    }
    __forceinline void load_EditionUpgradeManagerObj() noexcept {
        if (f_LoadLibraryA) {
            char EditionUpgradeManagerObjdll_str[] = "EditionUpgradeManagerObj.dll";
            EditionUpgradeManagerObjdll = f_LoadLibraryA(EditionUpgradeManagerObjdll_str);
        }
    }
    __forceinline void load_edpauditapi() noexcept {
        if (f_LoadLibraryA) {
            char edpauditapidll_str[] = "edpauditapi.dll";
            edpauditapidll = f_LoadLibraryA(edpauditapidll_str);
        }
    }
    __forceinline void load_edpcsp() noexcept {
        if (f_LoadLibraryA) {
            char edpcspdll_str[] = "edpcsp.dll";
            edpcspdll = f_LoadLibraryA(edpcspdll_str);
        }
    }
    __forceinline void load_edptask() noexcept {
        if (f_LoadLibraryA) {
            char edptaskdll_str[] = "edptask.dll";
            edptaskdll = f_LoadLibraryA(edptaskdll_str);
        }
    }
    __forceinline void load_edputil() noexcept {
        if (f_LoadLibraryA) {
            char edputildll_str[] = "edputil.dll";
            edputildll = f_LoadLibraryA(edputildll_str);
        }
    }
    __forceinline void load_eeprov() noexcept {
        if (f_LoadLibraryA) {
            char eeprovdll_str[] = "eeprov.dll";
            eeprovdll = f_LoadLibraryA(eeprovdll_str);
        }
    }
    __forceinline void load_eeutil() noexcept {
        if (f_LoadLibraryA) {
            char eeutildll_str[] = "eeutil.dll";
            eeutildll = f_LoadLibraryA(eeutildll_str);
        }
    }
    __forceinline void load_efsadu() noexcept {
        if (f_LoadLibraryA) {
            char efsadudll_str[] = "efsadu.dll";
            efsadudll = f_LoadLibraryA(efsadudll_str);
        }
    }
    __forceinline void load_efscore() noexcept {
        if (f_LoadLibraryA) {
            char efscoredll_str[] = "efscore.dll";
            efscoredll = f_LoadLibraryA(efscoredll_str);
        }
    }
    __forceinline void load_efsext() noexcept {
        if (f_LoadLibraryA) {
            char efsextdll_str[] = "efsext.dll";
            efsextdll = f_LoadLibraryA(efsextdll_str);
        }
    }
    __forceinline void load_efslsaext() noexcept {
        if (f_LoadLibraryA) {
            char efslsaextdll_str[] = "efslsaext.dll";
            efslsaextdll = f_LoadLibraryA(efslsaextdll_str);
        }
    }
    __forceinline void load_efssvc() noexcept {
        if (f_LoadLibraryA) {
            char efssvcdll_str[] = "efssvc.dll";
            efssvcdll = f_LoadLibraryA(efssvcdll_str);
        }
    }
    __forceinline void load_efsutil() noexcept {
        if (f_LoadLibraryA) {
            char efsutildll_str[] = "efsutil.dll";
            efsutildll = f_LoadLibraryA(efsutildll_str);
        }
    }
    __forceinline void load_efswrt() noexcept {
        if (f_LoadLibraryA) {
            char efswrtdll_str[] = "efswrt.dll";
            efswrtdll = f_LoadLibraryA(efswrtdll_str);
        }
    }
    __forceinline void load_EhStorAPI() noexcept {
        if (f_LoadLibraryA) {
            char EhStorAPIdll_str[] = "EhStorAPI.dll";
            EhStorAPIdll = f_LoadLibraryA(EhStorAPIdll_str);
        }
    }
    __forceinline void load_EhStorPwdMgr() noexcept {
        if (f_LoadLibraryA) {
            char EhStorPwdMgrdll_str[] = "EhStorPwdMgr.dll";
            EhStorPwdMgrdll = f_LoadLibraryA(EhStorPwdMgrdll_str);
        }
    }
    __forceinline void load_EhStorShell() noexcept {
        if (f_LoadLibraryA) {
            char EhStorShelldll_str[] = "EhStorShell.dll";
            EhStorShelldll = f_LoadLibraryA(EhStorShelldll_str);
        }
    }
    __forceinline void load_els() noexcept {
        if (f_LoadLibraryA) {
            char elsdll_str[] = "els.dll";
            elsdll = f_LoadLibraryA(elsdll_str);
        }
    }
    __forceinline void load_ELSCore() noexcept {
        if (f_LoadLibraryA) {
            char ELSCoredll_str[] = "ELSCore.dll";
            ELSCoredll = f_LoadLibraryA(ELSCoredll_str);
        }
    }
    __forceinline void load_elshyph() noexcept {
        if (f_LoadLibraryA) {
            char elshyphdll_str[] = "elshyph.dll";
            elshyphdll = f_LoadLibraryA(elshyphdll_str);
        }
    }
    __forceinline void load_elslad() noexcept {
        if (f_LoadLibraryA) {
            char elsladdll_str[] = "elslad.dll";
            elsladdll = f_LoadLibraryA(elsladdll_str);
        }
    }
    __forceinline void load_elsTrans() noexcept {
        if (f_LoadLibraryA) {
            char elsTransdll_str[] = "elsTrans.dll";
            elsTransdll = f_LoadLibraryA(elsTransdll_str);
        }
    }
    __forceinline void load_EmailApis() noexcept {
        if (f_LoadLibraryA) {
            char EmailApisdll_str[] = "EmailApis.dll";
            EmailApisdll = f_LoadLibraryA(EmailApisdll_str);
        }
    }
    __forceinline void load_embeddedmodesvc() noexcept {
        if (f_LoadLibraryA) {
            char embeddedmodesvcdll_str[] = "embeddedmodesvc.dll";
            embeddedmodesvcdll = f_LoadLibraryA(embeddedmodesvcdll_str);
        }
    }
    __forceinline void load_embeddedmodesvcapi() noexcept {
        if (f_LoadLibraryA) {
            char embeddedmodesvcapidll_str[] = "embeddedmodesvcapi.dll";
            embeddedmodesvcapidll = f_LoadLibraryA(embeddedmodesvcapidll_str);
        }
    }
    __forceinline void load_EmojiDS() noexcept {
        if (f_LoadLibraryA) {
            char EmojiDSdll_str[] = "EmojiDS.dll";
            EmojiDSdll = f_LoadLibraryA(EmojiDSdll_str);
        }
    }
    __forceinline void load_encapi() noexcept {
        if (f_LoadLibraryA) {
            char encapidll_str[] = "encapi.dll";
            encapidll = f_LoadLibraryA(encapidll_str);
        }
    }
    __forceinline void load_energy() noexcept {
        if (f_LoadLibraryA) {
            char energydll_str[] = "energy.dll";
            energydll = f_LoadLibraryA(energydll_str);
        }
    }
    __forceinline void load_energyprov() noexcept {
        if (f_LoadLibraryA) {
            char energyprovdll_str[] = "energyprov.dll";
            energyprovdll = f_LoadLibraryA(energyprovdll_str);
        }
    }
    __forceinline void load_energytask() noexcept {
        if (f_LoadLibraryA) {
            char energytaskdll_str[] = "energytask.dll";
            energytaskdll = f_LoadLibraryA(energytaskdll_str);
        }
    }
    __forceinline void load_enrollmentapi() noexcept {
        if (f_LoadLibraryA) {
            char enrollmentapidll_str[] = "enrollmentapi.dll";
            enrollmentapidll = f_LoadLibraryA(enrollmentapidll_str);
        }
    }
    __forceinline void load_EnterpriseAPNCsp() noexcept {
        if (f_LoadLibraryA) {
            char EnterpriseAPNCspdll_str[] = "EnterpriseAPNCsp.dll";
            EnterpriseAPNCspdll = f_LoadLibraryA(EnterpriseAPNCspdll_str);
        }
    }
    __forceinline void load_EnterpriseAppMgmtClient() noexcept {
        if (f_LoadLibraryA) {
            char EnterpriseAppMgmtClientdll_str[] = "EnterpriseAppMgmtClient.dll";
            EnterpriseAppMgmtClientdll = f_LoadLibraryA(EnterpriseAppMgmtClientdll_str);
        }
    }
    __forceinline void load_EnterpriseAppMgmtSvc() noexcept {
        if (f_LoadLibraryA) {
            char EnterpriseAppMgmtSvcdll_str[] = "EnterpriseAppMgmtSvc.dll";
            EnterpriseAppMgmtSvcdll = f_LoadLibraryA(EnterpriseAppMgmtSvcdll_str);
        }
    }
    __forceinline void load_EnterpriseAppVMgmtCSP() noexcept {
        if (f_LoadLibraryA) {
            char EnterpriseAppVMgmtCSPdll_str[] = "EnterpriseAppVMgmtCSP.dll";
            EnterpriseAppVMgmtCSPdll = f_LoadLibraryA(EnterpriseAppVMgmtCSPdll_str);
        }
    }
    __forceinline void load_enterprisecsps() noexcept {
        if (f_LoadLibraryA) {
            char enterprisecspsdll_str[] = "enterprisecsps.dll";
            enterprisecspsdll = f_LoadLibraryA(enterprisecspsdll_str);
        }
    }
    __forceinline void load_EnterpriseDesktopAppMgmtCSP() noexcept {
        if (f_LoadLibraryA) {
            char EnterpriseDesktopAppMgmtCSPdll_str[] = "EnterpriseDesktopAppMgmtCSP.dll";
            EnterpriseDesktopAppMgmtCSPdll = f_LoadLibraryA(EnterpriseDesktopAppMgmtCSPdll_str);
        }
    }
    __forceinline void load_enterpriseetw() noexcept {
        if (f_LoadLibraryA) {
            char enterpriseetwdll_str[] = "enterpriseetw.dll";
            enterpriseetwdll = f_LoadLibraryA(enterpriseetwdll_str);
        }
    }
    __forceinline void load_EnterpriseModernAppMgmtCSP() noexcept {
        if (f_LoadLibraryA) {
            char EnterpriseModernAppMgmtCSPdll_str[] = "EnterpriseModernAppMgmtCSP.dll";
            EnterpriseModernAppMgmtCSPdll = f_LoadLibraryA(EnterpriseModernAppMgmtCSPdll_str);
        }
    }
    __forceinline void load_enterpriseresourcemanager() noexcept {
        if (f_LoadLibraryA) {
            char enterpriseresourcemanagerdll_str[] = "enterpriseresourcemanager.dll";
            enterpriseresourcemanagerdll = f_LoadLibraryA(enterpriseresourcemanagerdll_str);
        }
    }
    __forceinline void load_eqossnap() noexcept {
        if (f_LoadLibraryA) {
            char eqossnapdll_str[] = "eqossnap.dll";
            eqossnapdll = f_LoadLibraryA(eqossnapdll_str);
        }
    }
    __forceinline void load_ErrorDetails() noexcept {
        if (f_LoadLibraryA) {
            char ErrorDetailsdll_str[] = "ErrorDetails.dll";
            ErrorDetailsdll = f_LoadLibraryA(ErrorDetailsdll_str);
        }
    }
    __forceinline void load_ErrorDetailsCore() noexcept {
        if (f_LoadLibraryA) {
            char ErrorDetailsCoredll_str[] = "ErrorDetailsCore.dll";
            ErrorDetailsCoredll = f_LoadLibraryA(ErrorDetailsCoredll_str);
        }
    }
    __forceinline void load_es() noexcept {
        if (f_LoadLibraryA) {
            char esdll_str[] = "es.dll";
            esdll = f_LoadLibraryA(esdll_str);
        }
    }
    __forceinline void load_EsclProtocol() noexcept {
        if (f_LoadLibraryA) {
            char EsclProtocoldll_str[] = "EsclProtocol.dll";
            EsclProtocoldll = f_LoadLibraryA(EsclProtocoldll_str);
        }
    }
    __forceinline void load_EsclScan() noexcept {
        if (f_LoadLibraryA) {
            char EsclScandll_str[] = "EsclScan.dll";
            EsclScandll = f_LoadLibraryA(EsclScandll_str);
        }
    }
    __forceinline void load_EsclWiaDriver() noexcept {
        if (f_LoadLibraryA) {
            char EsclWiaDriverdll_str[] = "EsclWiaDriver.dll";
            EsclWiaDriverdll = f_LoadLibraryA(EsclWiaDriverdll_str);
        }
    }
    __forceinline void load_EsdSip() noexcept {
        if (f_LoadLibraryA) {
            char EsdSipdll_str[] = "EsdSip.dll";
            EsdSipdll = f_LoadLibraryA(EsdSipdll_str);
        }
    }
    __forceinline void load_esent() noexcept {
        if (f_LoadLibraryA) {
            char esentdll_str[] = "esent.dll";
            esentdll = f_LoadLibraryA(esentdll_str);
        }
    }
    __forceinline void load_esentprf() noexcept {
        if (f_LoadLibraryA) {
            char esentprfdll_str[] = "esentprf.dll";
            esentprfdll = f_LoadLibraryA(esentprfdll_str);
        }
    }
    __forceinline void load_esevss() noexcept {
        if (f_LoadLibraryA) {
            char esevssdll_str[] = "esevss.dll";
            esevssdll = f_LoadLibraryA(esevssdll_str);
        }
    }
    __forceinline void load_eShims() noexcept {
        if (f_LoadLibraryA) {
            char eShimsdll_str[] = "eShims.dll";
            eShimsdll = f_LoadLibraryA(eShimsdll_str);
        }
    }
    __forceinline void load_EthernetMediaManager() noexcept {
        if (f_LoadLibraryA) {
            char EthernetMediaManagerdll_str[] = "EthernetMediaManager.dll";
            EthernetMediaManagerdll = f_LoadLibraryA(EthernetMediaManagerdll_str);
        }
    }
    __forceinline void load_ETWCoreUIComponentsResources() noexcept {
        if (f_LoadLibraryA) {
            char ETWCoreUIComponentsResourcesdll_str[] = "ETWCoreUIComponentsResources.dll";
            ETWCoreUIComponentsResourcesdll = f_LoadLibraryA(ETWCoreUIComponentsResourcesdll_str);
        }
    }
    __forceinline void load_ETWESEProviderResources() noexcept {
        if (f_LoadLibraryA) {
            char ETWESEProviderResourcesdll_str[] = "ETWESEProviderResources.dll";
            ETWESEProviderResourcesdll = f_LoadLibraryA(ETWESEProviderResourcesdll_str);
        }
    }
    __forceinline void load_EtwRundown() noexcept {
        if (f_LoadLibraryA) {
            char EtwRundowndll_str[] = "EtwRundown.dll";
            EtwRundowndll = f_LoadLibraryA(EtwRundowndll_str);
        }
    }
    __forceinline void load_eUICCsCSP() noexcept {
        if (f_LoadLibraryA) {
            char eUICCsCSPdll_str[] = "eUICCsCSP.dll";
            eUICCsCSPdll = f_LoadLibraryA(eUICCsCSPdll_str);
        }
    }
    __forceinline void load_EventAggregation() noexcept {
        if (f_LoadLibraryA) {
            char EventAggregationdll_str[] = "EventAggregation.dll";
            EventAggregationdll = f_LoadLibraryA(EventAggregationdll_str);
        }
    }
    __forceinline void load_eventcls() noexcept {
        if (f_LoadLibraryA) {
            char eventclsdll_str[] = "eventcls.dll";
            eventclsdll = f_LoadLibraryA(eventclsdll_str);
        }
    }
    __forceinline void load_evr() noexcept {
        if (f_LoadLibraryA) {
            char evrdll_str[] = "evr.dll";
            evrdll = f_LoadLibraryA(evrdll_str);
        }
    }
    __forceinline void load_ExecModelClient() noexcept {
        if (f_LoadLibraryA) {
            char ExecModelClientdll_str[] = "ExecModelClient.dll";
            ExecModelClientdll = f_LoadLibraryA(ExecModelClientdll_str);
        }
    }
    __forceinline void load_execmodelproxy() noexcept {
        if (f_LoadLibraryA) {
            char execmodelproxydll_str[] = "execmodelproxy.dll";
            execmodelproxydll = f_LoadLibraryA(execmodelproxydll_str);
        }
    }
    __forceinline void load_ExplorerFrame() noexcept {
        if (f_LoadLibraryA) {
            char ExplorerFramedll_str[] = "ExplorerFrame.dll";
            ExplorerFramedll = f_LoadLibraryA(ExplorerFramedll_str);
        }
    }
    __forceinline void load_ExSMime() noexcept {
        if (f_LoadLibraryA) {
            char ExSMimedll_str[] = "ExSMime.dll";
            ExSMimedll = f_LoadLibraryA(ExSMimedll_str);
        }
    }
    __forceinline void load_ExtrasXmlParser() noexcept {
        if (f_LoadLibraryA) {
            char ExtrasXmlParserdll_str[] = "ExtrasXmlParser.dll";
            ExtrasXmlParserdll = f_LoadLibraryA(ExtrasXmlParserdll_str);
        }
    }
    __forceinline void load_f1db7d81_95be_4911_935a_8ab71629112a_HyperV_IsolatedVM() noexcept {
        if (f_LoadLibraryA) {
            char f1db7d81_95be_4911_935a_8ab71629112a_HyperV_IsolatedVMdll_str[] = "f1db7d81-95be-4911-935a-8ab71629112a_HyperV-IsolatedVM.dll";
            f1db7d81_95be_4911_935a_8ab71629112a_HyperV_IsolatedVMdll = f_LoadLibraryA(f1db7d81_95be_4911_935a_8ab71629112a_HyperV_IsolatedVMdll_str);
        }
    }
    __forceinline void load_f3ahvoas() noexcept {
        if (f_LoadLibraryA) {
            char f3ahvoasdll_str[] = "f3ahvoas.dll";
            f3ahvoasdll = f_LoadLibraryA(f3ahvoasdll_str);
        }
    }
    __forceinline void load_f989b52d_f928_44a3_9bf1_bf0c1da6a0d6_HyperV_DeviceVirtualization() noexcept {
        if (f_LoadLibraryA) {
            char f989b52d_f928_44a3_9bf1_bf0c1da6a0d6_HyperV_DeviceVirtualizationdll_str[] = "f989b52d-f928-44a3-9bf1-bf0c1da6a0d6_HyperV-DeviceVirtualization.dll";
            f989b52d_f928_44a3_9bf1_bf0c1da6a0d6_HyperV_DeviceVirtualizationdll = f_LoadLibraryA(f989b52d_f928_44a3_9bf1_bf0c1da6a0d6_HyperV_DeviceVirtualizationdll_str);
        }
    }
    __forceinline void load_facecredentialprovider() noexcept {
        if (f_LoadLibraryA) {
            char facecredentialproviderdll_str[] = "facecredentialprovider.dll";
            facecredentialproviderdll = f_LoadLibraryA(facecredentialproviderdll_str);
        }
    }
    __forceinline void load_Facilitator() noexcept {
        if (f_LoadLibraryA) {
            char Facilitatordll_str[] = "Facilitator.dll";
            Facilitatordll = f_LoadLibraryA(Facilitatordll_str);
        }
    }
    __forceinline void load_FamilyAuthentication() noexcept {
        if (f_LoadLibraryA) {
            char FamilyAuthenticationdll_str[] = "Family.Authentication.dll";
            FamilyAuthenticationdll = f_LoadLibraryA(FamilyAuthenticationdll_str);
        }
    }
    __forceinline void load_FamilyCache() noexcept {
        if (f_LoadLibraryA) {
            char FamilyCachedll_str[] = "Family.Cache.dll";
            FamilyCachedll = f_LoadLibraryA(FamilyCachedll_str);
        }
    }
    __forceinline void load_FamilyClient() noexcept {
        if (f_LoadLibraryA) {
            char FamilyClientdll_str[] = "Family.Client.dll";
            FamilyClientdll = f_LoadLibraryA(FamilyClientdll_str);
        }
    }
    __forceinline void load_FamilySyncEngine() noexcept {
        if (f_LoadLibraryA) {
            char FamilySyncEnginedll_str[] = "Family.SyncEngine.dll";
            FamilySyncEnginedll = f_LoadLibraryA(FamilySyncEnginedll_str);
        }
    }
    __forceinline void load_FamilySafetyExt() noexcept {
        if (f_LoadLibraryA) {
            char FamilySafetyExtdll_str[] = "FamilySafetyExt.dll";
            FamilySafetyExtdll = f_LoadLibraryA(FamilySafetyExtdll_str);
        }
    }
    __forceinline void load_Faultrep() noexcept {
        if (f_LoadLibraryA) {
            char Faultrepdll_str[] = "Faultrep.dll";
            Faultrepdll = f_LoadLibraryA(Faultrepdll_str);
        }
    }
    __forceinline void load_FaxPrinterInstaller() noexcept {
        if (f_LoadLibraryA) {
            char FaxPrinterInstallerdll_str[] = "FaxPrinterInstaller.dll";
            FaxPrinterInstallerdll = f_LoadLibraryA(FaxPrinterInstallerdll_str);
        }
    }
    __forceinline void load_fcon() noexcept {
        if (f_LoadLibraryA) {
            char fcondll_str[] = "fcon.dll";
            fcondll = f_LoadLibraryA(fcondll_str);
        }
    }
    __forceinline void load_fdBth() noexcept {
        if (f_LoadLibraryA) {
            char fdBthdll_str[] = "fdBth.dll";
            fdBthdll = f_LoadLibraryA(fdBthdll_str);
        }
    }
    __forceinline void load_fdBthProxy() noexcept {
        if (f_LoadLibraryA) {
            char fdBthProxydll_str[] = "fdBthProxy.dll";
            fdBthProxydll = f_LoadLibraryA(fdBthProxydll_str);
        }
    }
    __forceinline void load_FdDevQuery() noexcept {
        if (f_LoadLibraryA) {
            char FdDevQuerydll_str[] = "FdDevQuery.dll";
            FdDevQuerydll = f_LoadLibraryA(FdDevQuerydll_str);
        }
    }
    __forceinline void load_fde() noexcept {
        if (f_LoadLibraryA) {
            char fdedll_str[] = "fde.dll";
            fdedll = f_LoadLibraryA(fdedll_str);
        }
    }
    __forceinline void load_fdeploy() noexcept {
        if (f_LoadLibraryA) {
            char fdeploydll_str[] = "fdeploy.dll";
            fdeploydll = f_LoadLibraryA(fdeploydll_str);
        }
    }
    __forceinline void load_fdPHost() noexcept {
        if (f_LoadLibraryA) {
            char fdPHostdll_str[] = "fdPHost.dll";
            fdPHostdll = f_LoadLibraryA(fdPHostdll_str);
        }
    }
    __forceinline void load_fdPnp() noexcept {
        if (f_LoadLibraryA) {
            char fdPnpdll_str[] = "fdPnp.dll";
            fdPnpdll = f_LoadLibraryA(fdPnpdll_str);
        }
    }
    __forceinline void load_fdprint() noexcept {
        if (f_LoadLibraryA) {
            char fdprintdll_str[] = "fdprint.dll";
            fdprintdll = f_LoadLibraryA(fdprintdll_str);
        }
    }
    __forceinline void load_fdProxy() noexcept {
        if (f_LoadLibraryA) {
            char fdProxydll_str[] = "fdProxy.dll";
            fdProxydll = f_LoadLibraryA(fdProxydll_str);
        }
    }
    __forceinline void load_FDResPub() noexcept {
        if (f_LoadLibraryA) {
            char FDResPubdll_str[] = "FDResPub.dll";
            FDResPubdll = f_LoadLibraryA(FDResPubdll_str);
        }
    }
    __forceinline void load_fdSSDP() noexcept {
        if (f_LoadLibraryA) {
            char fdSSDPdll_str[] = "fdSSDP.dll";
            fdSSDPdll = f_LoadLibraryA(fdSSDPdll_str);
        }
    }
    __forceinline void load_fdWCN() noexcept {
        if (f_LoadLibraryA) {
            char fdWCNdll_str[] = "fdWCN.dll";
            fdWCNdll = f_LoadLibraryA(fdWCNdll_str);
        }
    }
    __forceinline void load_fdWNet() noexcept {
        if (f_LoadLibraryA) {
            char fdWNetdll_str[] = "fdWNet.dll";
            fdWNetdll = f_LoadLibraryA(fdWNetdll_str);
        }
    }
    __forceinline void load_fdWSD() noexcept {
        if (f_LoadLibraryA) {
            char fdWSDdll_str[] = "fdWSD.dll";
            fdWSDdll = f_LoadLibraryA(fdWSDdll_str);
        }
    }
    __forceinline void load_feclient() noexcept {
        if (f_LoadLibraryA) {
            char feclientdll_str[] = "feclient.dll";
            feclientdll = f_LoadLibraryA(feclientdll_str);
        }
    }
    __forceinline void load_ffbroker() noexcept {
        if (f_LoadLibraryA) {
            char ffbrokerdll_str[] = "ffbroker.dll";
            ffbrokerdll = f_LoadLibraryA(ffbrokerdll_str);
        }
    }
    __forceinline void load_fhcat() noexcept {
        if (f_LoadLibraryA) {
            char fhcatdll_str[] = "fhcat.dll";
            fhcatdll = f_LoadLibraryA(fhcatdll_str);
        }
    }
    __forceinline void load_fhcfg() noexcept {
        if (f_LoadLibraryA) {
            char fhcfgdll_str[] = "fhcfg.dll";
            fhcfgdll = f_LoadLibraryA(fhcfgdll_str);
        }
    }
    __forceinline void load_fhcleanup() noexcept {
        if (f_LoadLibraryA) {
            char fhcleanupdll_str[] = "fhcleanup.dll";
            fhcleanupdll = f_LoadLibraryA(fhcleanupdll_str);
        }
    }
    __forceinline void load_fhcpl() noexcept {
        if (f_LoadLibraryA) {
            char fhcpldll_str[] = "fhcpl.dll";
            fhcpldll = f_LoadLibraryA(fhcpldll_str);
        }
    }
    __forceinline void load_fhengine() noexcept {
        if (f_LoadLibraryA) {
            char fhenginedll_str[] = "fhengine.dll";
            fhenginedll = f_LoadLibraryA(fhenginedll_str);
        }
    }
    __forceinline void load_fhevents() noexcept {
        if (f_LoadLibraryA) {
            char fheventsdll_str[] = "fhevents.dll";
            fheventsdll = f_LoadLibraryA(fheventsdll_str);
        }
    }
    __forceinline void load_fhsettingsprovider() noexcept {
        if (f_LoadLibraryA) {
            char fhsettingsproviderdll_str[] = "fhsettingsprovider.dll";
            fhsettingsproviderdll = f_LoadLibraryA(fhsettingsproviderdll_str);
        }
    }
    __forceinline void load_fhshl() noexcept {
        if (f_LoadLibraryA) {
            char fhshldll_str[] = "fhshl.dll";
            fhshldll = f_LoadLibraryA(fhshldll_str);
        }
    }
    __forceinline void load_fhsrchapi() noexcept {
        if (f_LoadLibraryA) {
            char fhsrchapidll_str[] = "fhsrchapi.dll";
            fhsrchapidll = f_LoadLibraryA(fhsrchapidll_str);
        }
    }
    __forceinline void load_fhsrchph() noexcept {
        if (f_LoadLibraryA) {
            char fhsrchphdll_str[] = "fhsrchph.dll";
            fhsrchphdll = f_LoadLibraryA(fhsrchphdll_str);
        }
    }
    __forceinline void load_fhsvc() noexcept {
        if (f_LoadLibraryA) {
            char fhsvcdll_str[] = "fhsvc.dll";
            fhsvcdll = f_LoadLibraryA(fhsvcdll_str);
        }
    }
    __forceinline void load_fhsvcctl() noexcept {
        if (f_LoadLibraryA) {
            char fhsvcctldll_str[] = "fhsvcctl.dll";
            fhsvcctldll = f_LoadLibraryA(fhsvcctldll_str);
        }
    }
    __forceinline void load_fhtask() noexcept {
        if (f_LoadLibraryA) {
            char fhtaskdll_str[] = "fhtask.dll";
            fhtaskdll = f_LoadLibraryA(fhtaskdll_str);
        }
    }
    __forceinline void load_fhuxadapter() noexcept {
        if (f_LoadLibraryA) {
            char fhuxadapterdll_str[] = "fhuxadapter.dll";
            fhuxadapterdll = f_LoadLibraryA(fhuxadapterdll_str);
        }
    }
    __forceinline void load_fhuxapi() noexcept {
        if (f_LoadLibraryA) {
            char fhuxapidll_str[] = "fhuxapi.dll";
            fhuxapidll = f_LoadLibraryA(fhuxapidll_str);
        }
    }
    __forceinline void load_fhuxcommon() noexcept {
        if (f_LoadLibraryA) {
            char fhuxcommondll_str[] = "fhuxcommon.dll";
            fhuxcommondll = f_LoadLibraryA(fhuxcommondll_str);
        }
    }
    __forceinline void load_fhuxgraphics() noexcept {
        if (f_LoadLibraryA) {
            char fhuxgraphicsdll_str[] = "fhuxgraphics.dll";
            fhuxgraphicsdll = f_LoadLibraryA(fhuxgraphicsdll_str);
        }
    }
    __forceinline void load_fhuxpresentation() noexcept {
        if (f_LoadLibraryA) {
            char fhuxpresentationdll_str[] = "fhuxpresentation.dll";
            fhuxpresentationdll = f_LoadLibraryA(fhuxpresentationdll_str);
        }
    }
    __forceinline void load_fidocredprov() noexcept {
        if (f_LoadLibraryA) {
            char fidocredprovdll_str[] = "fidocredprov.dll";
            fidocredprovdll = f_LoadLibraryA(fidocredprovdll_str);
        }
    }
    __forceinline void load_FileAppxStreamingDataSource() noexcept {
        if (f_LoadLibraryA) {
            char FileAppxStreamingDataSourcedll_str[] = "FileAppxStreamingDataSource.dll";
            FileAppxStreamingDataSourcedll = f_LoadLibraryA(FileAppxStreamingDataSourcedll_str);
        }
    }
    __forceinline void load_filemgmt() noexcept {
        if (f_LoadLibraryA) {
            char filemgmtdll_str[] = "filemgmt.dll";
            filemgmtdll = f_LoadLibraryA(filemgmtdll_str);
        }
    }
    __forceinline void load_FilterDS() noexcept {
        if (f_LoadLibraryA) {
            char FilterDSdll_str[] = "FilterDS.dll";
            FilterDSdll = f_LoadLibraryA(FilterDSdll_str);
        }
    }
    __forceinline void load_findnetprinters() noexcept {
        if (f_LoadLibraryA) {
            char findnetprintersdll_str[] = "findnetprinters.dll";
            findnetprintersdll = f_LoadLibraryA(findnetprintersdll_str);
        }
    }
    __forceinline void load_fingerprintcredential() noexcept {
        if (f_LoadLibraryA) {
            char fingerprintcredentialdll_str[] = "fingerprintcredential.dll";
            fingerprintcredentialdll = f_LoadLibraryA(fingerprintcredentialdll_str);
        }
    }
    __forceinline void load_FirewallAPI() noexcept {
        if (f_LoadLibraryA) {
            char FirewallAPIdll_str[] = "FirewallAPI.dll";
            FirewallAPIdll = f_LoadLibraryA(FirewallAPIdll_str);
        }
    }
    __forceinline void load_FirewallControlPanel() noexcept {
        if (f_LoadLibraryA) {
            char FirewallControlPaneldll_str[] = "FirewallControlPanel.dll";
            FirewallControlPaneldll = f_LoadLibraryA(FirewallControlPaneldll_str);
        }
    }
    __forceinline void load_FirewallUX() noexcept {
        if (f_LoadLibraryA) {
            char FirewallUXdll_str[] = "FirewallUX.dll";
            FirewallUXdll = f_LoadLibraryA(FirewallUXdll_str);
        }
    }
    __forceinline void load_FirmwareAttestationServerProxyStub() noexcept {
        if (f_LoadLibraryA) {
            char FirmwareAttestationServerProxyStubdll_str[] = "FirmwareAttestationServerProxyStub.dll";
            FirmwareAttestationServerProxyStubdll = f_LoadLibraryA(FirmwareAttestationServerProxyStubdll_str);
        }
    }
    __forceinline void load_FlightSettings() noexcept {
        if (f_LoadLibraryA) {
            char FlightSettingsdll_str[] = "FlightSettings.dll";
            FlightSettingsdll = f_LoadLibraryA(FlightSettingsdll_str);
        }
    }
    __forceinline void load_fltLib() noexcept {
        if (f_LoadLibraryA) {
            char fltLibdll_str[] = "fltLib.dll";
            fltLibdll = f_LoadLibraryA(fltLibdll_str);
        }
    }
    __forceinline void load_FluencyDS() noexcept {
        if (f_LoadLibraryA) {
            char FluencyDSdll_str[] = "FluencyDS.dll";
            FluencyDSdll = f_LoadLibraryA(FluencyDSdll_str);
        }
    }
    __forceinline void load_fmapi() noexcept {
        if (f_LoadLibraryA) {
            char fmapidll_str[] = "fmapi.dll";
            fmapidll = f_LoadLibraryA(fmapidll_str);
        }
    }
    __forceinline void load_fmifs() noexcept {
        if (f_LoadLibraryA) {
            char fmifsdll_str[] = "fmifs.dll";
            fmifsdll = f_LoadLibraryA(fmifsdll_str);
        }
    }
    __forceinline void load_fms() noexcept {
        if (f_LoadLibraryA) {
            char fmsdll_str[] = "fms.dll";
            fmsdll = f_LoadLibraryA(fmsdll_str);
        }
    }
    __forceinline void load_FntCache() noexcept {
        if (f_LoadLibraryA) {
            char FntCachedll_str[] = "FntCache.dll";
            FntCachedll = f_LoadLibraryA(FntCachedll_str);
        }
    }
    __forceinline void load_fontext() noexcept {
        if (f_LoadLibraryA) {
            char fontextdll_str[] = "fontext.dll";
            fontextdll = f_LoadLibraryA(fontextdll_str);
        }
    }
    __forceinline void load_FontGlyphAnimator() noexcept {
        if (f_LoadLibraryA) {
            char FontGlyphAnimatordll_str[] = "FontGlyphAnimator.dll";
            FontGlyphAnimatordll = f_LoadLibraryA(FontGlyphAnimatordll_str);
        }
    }
    __forceinline void load_fontgroupsoverride() noexcept {
        if (f_LoadLibraryA) {
            char fontgroupsoverridedll_str[] = "fontgroupsoverride.dll";
            fontgroupsoverridedll = f_LoadLibraryA(fontgroupsoverridedll_str);
        }
    }
    __forceinline void load_FontProvider() noexcept {
        if (f_LoadLibraryA) {
            char FontProviderdll_str[] = "FontProvider.dll";
            FontProviderdll = f_LoadLibraryA(FontProviderdll_str);
        }
    }
    __forceinline void load_fontsub() noexcept {
        if (f_LoadLibraryA) {
            char fontsubdll_str[] = "fontsub.dll";
            fontsubdll = f_LoadLibraryA(fontsubdll_str);
        }
    }
    __forceinline void load_fphc() noexcept {
        if (f_LoadLibraryA) {
            char fphcdll_str[] = "fphc.dll";
            fphcdll = f_LoadLibraryA(fphcdll_str);
        }
    }
    __forceinline void load_framedyn() noexcept {
        if (f_LoadLibraryA) {
            char framedyndll_str[] = "framedyn.dll";
            framedyndll = f_LoadLibraryA(framedyndll_str);
        }
    }
    __forceinline void load_framedynos() noexcept {
        if (f_LoadLibraryA) {
            char framedynosdll_str[] = "framedynos.dll";
            framedynosdll = f_LoadLibraryA(framedynosdll_str);
        }
    }
    __forceinline void load_FrameServer() noexcept {
        if (f_LoadLibraryA) {
            char FrameServerdll_str[] = "FrameServer.dll";
            FrameServerdll = f_LoadLibraryA(FrameServerdll_str);
        }
    }
    __forceinline void load_FrameServerClient() noexcept {
        if (f_LoadLibraryA) {
            char FrameServerClientdll_str[] = "FrameServerClient.dll";
            FrameServerClientdll = f_LoadLibraryA(FrameServerClientdll_str);
        }
    }
    __forceinline void load_FrameServerMonitor() noexcept {
        if (f_LoadLibraryA) {
            char FrameServerMonitordll_str[] = "FrameServerMonitor.dll";
            FrameServerMonitordll = f_LoadLibraryA(FrameServerMonitordll_str);
        }
    }
    __forceinline void load_FrameServerMonitorClient() noexcept {
        if (f_LoadLibraryA) {
            char FrameServerMonitorClientdll_str[] = "FrameServerMonitorClient.dll";
            FrameServerMonitorClientdll = f_LoadLibraryA(FrameServerMonitorClientdll_str);
        }
    }
    __forceinline void load_frprov() noexcept {
        if (f_LoadLibraryA) {
            char frprovdll_str[] = "frprov.dll";
            frprovdll = f_LoadLibraryA(frprovdll_str);
        }
    }
    __forceinline void load_FsNVSDeviceSource() noexcept {
        if (f_LoadLibraryA) {
            char FsNVSDeviceSourcedll_str[] = "FsNVSDeviceSource.dll";
            FsNVSDeviceSourcedll = f_LoadLibraryA(FsNVSDeviceSourcedll_str);
        }
    }
    __forceinline void load_fsutilext() noexcept {
        if (f_LoadLibraryA) {
            char fsutilextdll_str[] = "fsutilext.dll";
            fsutilextdll = f_LoadLibraryA(fsutilextdll_str);
        }
    }
    __forceinline void load_fthsvc() noexcept {
        if (f_LoadLibraryA) {
            char fthsvcdll_str[] = "fthsvc.dll";
            fthsvcdll = f_LoadLibraryA(fthsvcdll_str);
        }
    }
    __forceinline void load_fundisc() noexcept {
        if (f_LoadLibraryA) {
            char fundiscdll_str[] = "fundisc.dll";
            fundiscdll = f_LoadLibraryA(fundiscdll_str);
        }
    }
    __forceinline void load_fveapi() noexcept {
        if (f_LoadLibraryA) {
            char fveapidll_str[] = "fveapi.dll";
            fveapidll = f_LoadLibraryA(fveapidll_str);
        }
    }
    __forceinline void load_fveapibase() noexcept {
        if (f_LoadLibraryA) {
            char fveapibasedll_str[] = "fveapibase.dll";
            fveapibasedll = f_LoadLibraryA(fveapibasedll_str);
        }
    }
    __forceinline void load_fvecerts() noexcept {
        if (f_LoadLibraryA) {
            char fvecertsdll_str[] = "fvecerts.dll";
            fvecertsdll = f_LoadLibraryA(fvecertsdll_str);
        }
    }
    __forceinline void load_fvecpl() noexcept {
        if (f_LoadLibraryA) {
            char fvecpldll_str[] = "fvecpl.dll";
            fvecpldll = f_LoadLibraryA(fvecpldll_str);
        }
    }
    __forceinline void load_fveskybackup() noexcept {
        if (f_LoadLibraryA) {
            char fveskybackupdll_str[] = "fveskybackup.dll";
            fveskybackupdll = f_LoadLibraryA(fveskybackupdll_str);
        }
    }
    __forceinline void load_fveui() noexcept {
        if (f_LoadLibraryA) {
            char fveuidll_str[] = "fveui.dll";
            fveuidll = f_LoadLibraryA(fveuidll_str);
        }
    }
    __forceinline void load_fvewiz() noexcept {
        if (f_LoadLibraryA) {
            char fvewizdll_str[] = "fvewiz.dll";
            fvewizdll = f_LoadLibraryA(fvewizdll_str);
        }
    }
    __forceinline void load_FvSDK_x64() noexcept {
        if (f_LoadLibraryA) {
            char FvSDK_x64dll_str[] = "FvSDK_x64.dll";
            FvSDK_x64dll = f_LoadLibraryA(FvSDK_x64dll_str);
        }
    }
    __forceinline void load_fwbase() noexcept {
        if (f_LoadLibraryA) {
            char fwbasedll_str[] = "fwbase.dll";
            fwbasedll = f_LoadLibraryA(fwbasedll_str);
        }
    }
    __forceinline void load_fwcfg() noexcept {
        if (f_LoadLibraryA) {
            char fwcfgdll_str[] = "fwcfg.dll";
            fwcfgdll = f_LoadLibraryA(fwcfgdll_str);
        }
    }
    __forceinline void load_fwmdmcsp() noexcept {
        if (f_LoadLibraryA) {
            char fwmdmcspdll_str[] = "fwmdmcsp.dll";
            fwmdmcspdll = f_LoadLibraryA(fwmdmcspdll_str);
        }
    }
    __forceinline void load_fwpolicyiomgr() noexcept {
        if (f_LoadLibraryA) {
            char fwpolicyiomgrdll_str[] = "fwpolicyiomgr.dll";
            fwpolicyiomgrdll = f_LoadLibraryA(fwpolicyiomgrdll_str);
        }
    }
    __forceinline void load_FwRemoteSvr() noexcept {
        if (f_LoadLibraryA) {
            char FwRemoteSvrdll_str[] = "FwRemoteSvr.dll";
            FwRemoteSvrdll = f_LoadLibraryA(FwRemoteSvrdll_str);
        }
    }
    __forceinline void load_GameBarPresenceWriterproxy() noexcept {
        if (f_LoadLibraryA) {
            char GameBarPresenceWriterproxydll_str[] = "GameBarPresenceWriter.proxy.dll";
            GameBarPresenceWriterproxydll = f_LoadLibraryA(GameBarPresenceWriterproxydll_str);
        }
    }
    __forceinline void load_GameChatOverlayExt() noexcept {
        if (f_LoadLibraryA) {
            char GameChatOverlayExtdll_str[] = "GameChatOverlayExt.dll";
            GameChatOverlayExtdll = f_LoadLibraryA(GameChatOverlayExtdll_str);
        }
    }
    __forceinline void load_GameChatTranscription() noexcept {
        if (f_LoadLibraryA) {
            char GameChatTranscriptiondll_str[] = "GameChatTranscription.dll";
            GameChatTranscriptiondll = f_LoadLibraryA(GameChatTranscriptiondll_str);
        }
    }
    __forceinline void load_GameInput() noexcept {
        if (f_LoadLibraryA) {
            char GameInputdll_str[] = "GameInput.dll";
            GameInputdll = f_LoadLibraryA(GameInputdll_str);
        }
    }
    __forceinline void load_GameInputInbox() noexcept {
        if (f_LoadLibraryA) {
            char GameInputInboxdll_str[] = "GameInputInbox.dll";
            GameInputInboxdll = f_LoadLibraryA(GameInputInboxdll_str);
        }
    }
    __forceinline void load_gamemode() noexcept {
        if (f_LoadLibraryA) {
            char gamemodedll_str[] = "gamemode.dll";
            gamemodedll = f_LoadLibraryA(gamemodedll_str);
        }
    }
    __forceinline void load_GamePanelExternalHook() noexcept {
        if (f_LoadLibraryA) {
            char GamePanelExternalHookdll_str[] = "GamePanelExternalHook.dll";
            GamePanelExternalHookdll = f_LoadLibraryA(GamePanelExternalHookdll_str);
        }
    }
    __forceinline void load_gamestreamingext() noexcept {
        if (f_LoadLibraryA) {
            char gamestreamingextdll_str[] = "gamestreamingext.dll";
            gamestreamingextdll = f_LoadLibraryA(gamestreamingextdll_str);
        }
    }
    __forceinline void load_gameux() noexcept {
        if (f_LoadLibraryA) {
            char gameuxdll_str[] = "gameux.dll";
            gameuxdll = f_LoadLibraryA(gameuxdll_str);
        }
    }
    __forceinline void load_gamingtcui() noexcept {
        if (f_LoadLibraryA) {
            char gamingtcuidll_str[] = "gamingtcui.dll";
            gamingtcuidll = f_LoadLibraryA(gamingtcuidll_str);
        }
    }
    __forceinline void load_gcdef() noexcept {
        if (f_LoadLibraryA) {
            char gcdefdll_str[] = "gcdef.dll";
            gcdefdll = f_LoadLibraryA(gcdefdll_str);
        }
    }
    __forceinline void load_gdi32() noexcept {
        if (f_LoadLibraryA) {
            char gdi32dll_str[] = "gdi32.dll";
            gdi32dll = f_LoadLibraryA(gdi32dll_str);
        }
    }
    __forceinline void load_gdi32full() noexcept {
        if (f_LoadLibraryA) {
            char gdi32fulldll_str[] = "gdi32full.dll";
            gdi32fulldll = f_LoadLibraryA(gdi32fulldll_str);
        }
    }
    __forceinline void load_GdiPlus() noexcept {
        if (f_LoadLibraryA) {
            char GdiPlusdll_str[] = "GdiPlus.dll";
            GdiPlusdll = f_LoadLibraryA(GdiPlusdll_str);
        }
    }
    __forceinline void load_generaltel() noexcept {
        if (f_LoadLibraryA) {
            char generalteldll_str[] = "generaltel.dll";
            generalteldll = f_LoadLibraryA(generalteldll_str);
        }
    }
    __forceinline void load_Geocommon() noexcept {
        if (f_LoadLibraryA) {
            char Geocommondll_str[] = "Geocommon.dll";
            Geocommondll = f_LoadLibraryA(Geocommondll_str);
        }
    }
    __forceinline void load_Geolocation() noexcept {
        if (f_LoadLibraryA) {
            char Geolocationdll_str[] = "Geolocation.dll";
            Geolocationdll = f_LoadLibraryA(Geolocationdll_str);
        }
    }
    __forceinline void load_getuname() noexcept {
        if (f_LoadLibraryA) {
            char getunamedll_str[] = "getuname.dll";
            getunamedll = f_LoadLibraryA(getunamedll_str);
        }
    }
    __forceinline void load_glmf32() noexcept {
        if (f_LoadLibraryA) {
            char glmf32dll_str[] = "glmf32.dll";
            glmf32dll = f_LoadLibraryA(glmf32dll_str);
        }
    }
    __forceinline void load_globinputhost() noexcept {
        if (f_LoadLibraryA) {
            char globinputhostdll_str[] = "globinputhost.dll";
            globinputhostdll = f_LoadLibraryA(globinputhostdll_str);
        }
    }
    __forceinline void load_glu32() noexcept {
        if (f_LoadLibraryA) {
            char glu32dll_str[] = "glu32.dll";
            glu32dll = f_LoadLibraryA(glu32dll_str);
        }
    }
    __forceinline void load_gmsaclient() noexcept {
        if (f_LoadLibraryA) {
            char gmsaclientdll_str[] = "gmsaclient.dll";
            gmsaclientdll = f_LoadLibraryA(gmsaclientdll_str);
        }
    }
    __forceinline void load_gpapi() noexcept {
        if (f_LoadLibraryA) {
            char gpapidll_str[] = "gpapi.dll";
            gpapidll = f_LoadLibraryA(gpapidll_str);
        }
    }
    __forceinline void load_GPCSEWrapperCsp() noexcept {
        if (f_LoadLibraryA) {
            char GPCSEWrapperCspdll_str[] = "GPCSEWrapperCsp.dll";
            GPCSEWrapperCspdll = f_LoadLibraryA(GPCSEWrapperCspdll_str);
        }
    }
    __forceinline void load_gpedit() noexcept {
        if (f_LoadLibraryA) {
            char gpeditdll_str[] = "gpedit.dll";
            gpeditdll = f_LoadLibraryA(gpeditdll_str);
        }
    }
    __forceinline void load_gpprefcl() noexcept {
        if (f_LoadLibraryA) {
            char gpprefcldll_str[] = "gpprefcl.dll";
            gpprefcldll = f_LoadLibraryA(gpprefcldll_str);
        }
    }
    __forceinline void load_gpprnext() noexcept {
        if (f_LoadLibraryA) {
            char gpprnextdll_str[] = "gpprnext.dll";
            gpprnextdll = f_LoadLibraryA(gpprnextdll_str);
        }
    }
    __forceinline void load_gpscript() noexcept {
        if (f_LoadLibraryA) {
            char gpscriptdll_str[] = "gpscript.dll";
            gpscriptdll = f_LoadLibraryA(gpscriptdll_str);
        }
    }
    __forceinline void load_gpsvc() noexcept {
        if (f_LoadLibraryA) {
            char gpsvcdll_str[] = "gpsvc.dll";
            gpsvcdll = f_LoadLibraryA(gpsvcdll_str);
        }
    }
    __forceinline void load_gptext() noexcept {
        if (f_LoadLibraryA) {
            char gptextdll_str[] = "gptext.dll";
            gptextdll = f_LoadLibraryA(gptextdll_str);
        }
    }
    __forceinline void load_gpupvdev() noexcept {
        if (f_LoadLibraryA) {
            char gpupvdevdll_str[] = "gpupvdev.dll";
            gpupvdevdll = f_LoadLibraryA(gpupvdevdll_str);
        }
    }
    __forceinline void load_GraphicsCapture() noexcept {
        if (f_LoadLibraryA) {
            char GraphicsCapturedll_str[] = "GraphicsCapture.dll";
            GraphicsCapturedll = f_LoadLibraryA(GraphicsCapturedll_str);
        }
    }
    __forceinline void load_GraphicsPerfSvc() noexcept {
        if (f_LoadLibraryA) {
            char GraphicsPerfSvcdll_str[] = "GraphicsPerfSvc.dll";
            GraphicsPerfSvcdll = f_LoadLibraryA(GraphicsPerfSvcdll_str);
        }
    }
    __forceinline void load_Groupinghc() noexcept {
        if (f_LoadLibraryA) {
            char Groupinghcdll_str[] = "Groupinghc.dll";
            Groupinghcdll = f_LoadLibraryA(Groupinghcdll_str);
        }
    }
    __forceinline void load_hal() noexcept {
        if (f_LoadLibraryA) {
            char haldll_str[] = "hal.dll";
            haldll = f_LoadLibraryA(haldll_str);
        }
    }
    __forceinline void load_HalExtIntcLpioDMA() noexcept {
        if (f_LoadLibraryA) {
            char HalExtIntcLpioDMAdll_str[] = "HalExtIntcLpioDMA.dll";
            HalExtIntcLpioDMAdll = f_LoadLibraryA(HalExtIntcLpioDMAdll_str);
        }
    }
    __forceinline void load_HalExtIntcPseDMA() noexcept {
        if (f_LoadLibraryA) {
            char HalExtIntcPseDMAdll_str[] = "HalExtIntcPseDMA.dll";
            HalExtIntcPseDMAdll = f_LoadLibraryA(HalExtIntcPseDMAdll_str);
        }
    }
    __forceinline void load_HalExtPL080() noexcept {
        if (f_LoadLibraryA) {
            char HalExtPL080dll_str[] = "HalExtPL080.dll";
            HalExtPL080dll = f_LoadLibraryA(HalExtPL080dll_str);
        }
    }
    __forceinline void load_HanjaDS() noexcept {
        if (f_LoadLibraryA) {
            char HanjaDSdll_str[] = "HanjaDS.dll";
            HanjaDSdll = f_LoadLibraryA(HanjaDSdll_str);
        }
    }
    __forceinline void load_hascsp() noexcept {
        if (f_LoadLibraryA) {
            char hascspdll_str[] = "hascsp.dll";
            hascspdll = f_LoadLibraryA(hascspdll_str);
        }
    }
    __forceinline void load_HashtagDS() noexcept {
        if (f_LoadLibraryA) {
            char HashtagDSdll_str[] = "HashtagDS.dll";
            HashtagDSdll = f_LoadLibraryA(HashtagDSdll_str);
        }
    }
    __forceinline void load_hbaapi() noexcept {
        if (f_LoadLibraryA) {
            char hbaapidll_str[] = "hbaapi.dll";
            hbaapidll = f_LoadLibraryA(hbaapidll_str);
        }
    }
    __forceinline void load_hcproviders() noexcept {
        if (f_LoadLibraryA) {
            char hcprovidersdll_str[] = "hcproviders.dll";
            hcprovidersdll = f_LoadLibraryA(hcprovidersdll_str);
        }
    }
    __forceinline void load_HdcpHandler() noexcept {
        if (f_LoadLibraryA) {
            char HdcpHandlerdll_str[] = "HdcpHandler.dll";
            HdcpHandlerdll = f_LoadLibraryA(HdcpHandlerdll_str);
        }
    }
    __forceinline void load_HeatCore() noexcept {
        if (f_LoadLibraryA) {
            char HeatCoredll_str[] = "HeatCore.dll";
            HeatCoredll = f_LoadLibraryA(HeatCoredll_str);
        }
    }
    __forceinline void load_HelpPaneProxy() noexcept {
        if (f_LoadLibraryA) {
            char HelpPaneProxydll_str[] = "HelpPaneProxy.dll";
            HelpPaneProxydll = f_LoadLibraryA(HelpPaneProxydll_str);
        }
    }
    __forceinline void load_hgattest() noexcept {
        if (f_LoadLibraryA) {
            char hgattestdll_str[] = "hgattest.dll";
            hgattestdll = f_LoadLibraryA(hgattestdll_str);
        }
    }
    __forceinline void load_hgclientservice() noexcept {
        if (f_LoadLibraryA) {
            char hgclientservicedll_str[] = "hgclientservice.dll";
            hgclientservicedll = f_LoadLibraryA(hgclientservicedll_str);
        }
    }
    __forceinline void load_hgclientserviceps() noexcept {
        if (f_LoadLibraryA) {
            char hgclientservicepsdll_str[] = "hgclientserviceps.dll";
            hgclientservicepsdll = f_LoadLibraryA(hgclientservicepsdll_str);
        }
    }
    __forceinline void load_hgcpl() noexcept {
        if (f_LoadLibraryA) {
            char hgcpldll_str[] = "hgcpl.dll";
            hgcpldll = f_LoadLibraryA(hgcpldll_str);
        }
    }
    __forceinline void load_hgsclientplugin() noexcept {
        if (f_LoadLibraryA) {
            char hgsclientplugindll_str[] = "hgsclientplugin.dll";
            hgsclientplugindll = f_LoadLibraryA(hgsclientplugindll_str);
        }
    }
    __forceinline void load_HgsClientWmi() noexcept {
        if (f_LoadLibraryA) {
            char HgsClientWmidll_str[] = "HgsClientWmi.dll";
            HgsClientWmidll = f_LoadLibraryA(HgsClientWmidll_str);
        }
    }
    __forceinline void load_hhsetup() noexcept {
        if (f_LoadLibraryA) {
            char hhsetupdll_str[] = "hhsetup.dll";
            hhsetupdll = f_LoadLibraryA(hhsetupdll_str);
        }
    }
    __forceinline void load_hid() noexcept {
        if (f_LoadLibraryA) {
            char hiddll_str[] = "hid.dll";
            hiddll = f_LoadLibraryA(hiddll_str);
        }
    }
    __forceinline void load_HidCfu() noexcept {
        if (f_LoadLibraryA) {
            char HidCfudll_str[] = "HidCfu.dll";
            HidCfudll = f_LoadLibraryA(HidCfudll_str);
        }
    }
    __forceinline void load_hidserv() noexcept {
        if (f_LoadLibraryA) {
            char hidservdll_str[] = "hidserv.dll";
            hidservdll = f_LoadLibraryA(hidservdll_str);
        }
    }
    __forceinline void load_hlink() noexcept {
        if (f_LoadLibraryA) {
            char hlinkdll_str[] = "hlink.dll";
            hlinkdll = f_LoadLibraryA(hlinkdll_str);
        }
    }
    __forceinline void load_hmkd() noexcept {
        if (f_LoadLibraryA) {
            char hmkddll_str[] = "hmkd.dll";
            hmkddll = f_LoadLibraryA(hmkddll_str);
        }
    }
    __forceinline void load_hnetcfg() noexcept {
        if (f_LoadLibraryA) {
            char hnetcfgdll_str[] = "hnetcfg.dll";
            hnetcfgdll = f_LoadLibraryA(hnetcfgdll_str);
        }
    }
    __forceinline void load_HNetCfgClient() noexcept {
        if (f_LoadLibraryA) {
            char HNetCfgClientdll_str[] = "HNetCfgClient.dll";
            HNetCfgClientdll = f_LoadLibraryA(HNetCfgClientdll_str);
        }
    }
    __forceinline void load_hnetmon() noexcept {
        if (f_LoadLibraryA) {
            char hnetmondll_str[] = "hnetmon.dll";
            hnetmondll = f_LoadLibraryA(hnetmondll_str);
        }
    }
    __forceinline void load_hnsproxy() noexcept {
        if (f_LoadLibraryA) {
            char hnsproxydll_str[] = "hnsproxy.dll";
            hnsproxydll = f_LoadLibraryA(hnsproxydll_str);
        }
    }
    __forceinline void load_HologramCompositor() noexcept {
        if (f_LoadLibraryA) {
            char HologramCompositordll_str[] = "HologramCompositor.dll";
            HologramCompositordll = f_LoadLibraryA(HologramCompositordll_str);
        }
    }
    __forceinline void load_HologramWorld() noexcept {
        if (f_LoadLibraryA) {
            char HologramWorlddll_str[] = "HologramWorld.dll";
            HologramWorlddll = f_LoadLibraryA(HologramWorlddll_str);
        }
    }
    __forceinline void load_HolographicExtensions() noexcept {
        if (f_LoadLibraryA) {
            char HolographicExtensionsdll_str[] = "HolographicExtensions.dll";
            HolographicExtensionsdll = f_LoadLibraryA(HolographicExtensionsdll_str);
        }
    }
    __forceinline void load_HolographicRuntimes() noexcept {
        if (f_LoadLibraryA) {
            char HolographicRuntimesdll_str[] = "HolographicRuntimes.dll";
            HolographicRuntimesdll = f_LoadLibraryA(HolographicRuntimesdll_str);
        }
    }
    __forceinline void load_HoloShellRuntime() noexcept {
        if (f_LoadLibraryA) {
            char HoloShellRuntimedll_str[] = "HoloShellRuntime.dll";
            HoloShellRuntimedll = f_LoadLibraryA(HoloShellRuntimedll_str);
        }
    }
    __forceinline void load_HoloSHExtensions() noexcept {
        if (f_LoadLibraryA) {
            char HoloSHExtensionsdll_str[] = "HoloSHExtensions.dll";
            HoloSHExtensionsdll = f_LoadLibraryA(HoloSHExtensionsdll_str);
        }
    }
    __forceinline void load_HoloSIPCShell() noexcept {
        if (f_LoadLibraryA) {
            char HoloSIPCShelldll_str[] = "HoloSI.PCShell.dll";
            HoloSIPCShelldll = f_LoadLibraryA(HoloSIPCShelldll_str);
        }
    }
    __forceinline void load_HostGuardianServiceClientResources() noexcept {
        if (f_LoadLibraryA) {
            char HostGuardianServiceClientResourcesdll_str[] = "HostGuardianServiceClientResources.dll";
            HostGuardianServiceClientResourcesdll = f_LoadLibraryA(HostGuardianServiceClientResourcesdll_str);
        }
    }
    __forceinline void load_HostNetSvc() noexcept {
        if (f_LoadLibraryA) {
            char HostNetSvcdll_str[] = "HostNetSvc.dll";
            HostNetSvcdll = f_LoadLibraryA(HostNetSvcdll_str);
        }
    }
    __forceinline void load_hotplug() noexcept {
        if (f_LoadLibraryA) {
            char hotplugdll_str[] = "hotplug.dll";
            hotplugdll = f_LoadLibraryA(hotplugdll_str);
        }
    }
    __forceinline void load_HrtfApo() noexcept {
        if (f_LoadLibraryA) {
            char HrtfApodll_str[] = "HrtfApo.dll";
            HrtfApodll = f_LoadLibraryA(HrtfApodll_str);
        }
    }
    __forceinline void load_HrtfDspCpu() noexcept {
        if (f_LoadLibraryA) {
            char HrtfDspCpudll_str[] = "HrtfDspCpu.dll";
            HrtfDspCpudll = f_LoadLibraryA(HrtfDspCpudll_str);
        }
    }
    __forceinline void load_hspapi() noexcept {
        if (f_LoadLibraryA) {
            char hspapidll_str[] = "hspapi.dll";
            hspapidll = f_LoadLibraryA(hspapidll_str);
        }
    }
    __forceinline void load_hspfw() noexcept {
        if (f_LoadLibraryA) {
            char hspfwdll_str[] = "hspfw.dll";
            hspfwdll = f_LoadLibraryA(hspfwdll_str);
        }
    }
    __forceinline void load_httpapi() noexcept {
        if (f_LoadLibraryA) {
            char httpapidll_str[] = "httpapi.dll";
            httpapidll = f_LoadLibraryA(httpapidll_str);
        }
    }
    __forceinline void load_httpprxc() noexcept {
        if (f_LoadLibraryA) {
            char httpprxcdll_str[] = "httpprxc.dll";
            httpprxcdll = f_LoadLibraryA(httpprxcdll_str);
        }
    }
    __forceinline void load_httpprxm() noexcept {
        if (f_LoadLibraryA) {
            char httpprxmdll_str[] = "httpprxm.dll";
            httpprxmdll = f_LoadLibraryA(httpprxmdll_str);
        }
    }
    __forceinline void load_httpprxp() noexcept {
        if (f_LoadLibraryA) {
            char httpprxpdll_str[] = "httpprxp.dll";
            httpprxpdll = f_LoadLibraryA(httpprxpdll_str);
        }
    }
    __forceinline void load_HttpsDataSource() noexcept {
        if (f_LoadLibraryA) {
            char HttpsDataSourcedll_str[] = "HttpsDataSource.dll";
            HttpsDataSourcedll = f_LoadLibraryA(HttpsDataSourcedll_str);
        }
    }
    __forceinline void load_htui() noexcept {
        if (f_LoadLibraryA) {
            char htuidll_str[] = "htui.dll";
            htuidll = f_LoadLibraryA(htuidll_str);
        }
    }
    __forceinline void load_hvhostsvc() noexcept {
        if (f_LoadLibraryA) {
            char hvhostsvcdll_str[] = "hvhostsvc.dll";
            hvhostsvcdll = f_LoadLibraryA(hvhostsvcdll_str);
        }
    }
    __forceinline void load_hvloader() noexcept {
        if (f_LoadLibraryA) {
            char hvloaderdll_str[] = "hvloader.dll";
            hvloaderdll = f_LoadLibraryA(hvloaderdll_str);
        }
    }
    __forceinline void load_hvsigpext() noexcept {
        if (f_LoadLibraryA) {
            char hvsigpextdll_str[] = "hvsigpext.dll";
            hvsigpextdll = f_LoadLibraryA(hvsigpextdll_str);
        }
    }
    __forceinline void load_HvsiManagementApi() noexcept {
        if (f_LoadLibraryA) {
            char HvsiManagementApidll_str[] = "HvsiManagementApi.dll";
            HvsiManagementApidll = f_LoadLibraryA(HvsiManagementApidll_str);
        }
    }
    __forceinline void load_HvSocket() noexcept {
        if (f_LoadLibraryA) {
            char HvSocketdll_str[] = "HvSocket.dll";
            HvSocketdll = f_LoadLibraryA(HvSocketdll_str);
        }
    }
    __forceinline void load_hwreqchk() noexcept {
        if (f_LoadLibraryA) {
            char hwreqchkdll_str[] = "hwreqchk.dll";
            hwreqchkdll = f_LoadLibraryA(hwreqchkdll_str);
        }
    }
    __forceinline void load_Hydrogen() noexcept {
        if (f_LoadLibraryA) {
            char Hydrogendll_str[] = "Hydrogen.dll";
            Hydrogendll = f_LoadLibraryA(Hydrogendll_str);
        }
    }
    __forceinline void load_HyperVSysprepProvider() noexcept {
        if (f_LoadLibraryA) {
            char HyperVSysprepProviderdll_str[] = "HyperVSysprepProvider.dll";
            HyperVSysprepProviderdll = f_LoadLibraryA(HyperVSysprepProviderdll_str);
        }
    }
    __forceinline void load_IA2ComProxy() noexcept {
        if (f_LoadLibraryA) {
            char IA2ComProxydll_str[] = "IA2ComProxy.dll";
            IA2ComProxydll = f_LoadLibraryA(IA2ComProxydll_str);
        }
    }
    __forceinline void load_ias() noexcept {
        if (f_LoadLibraryA) {
            char iasdll_str[] = "ias.dll";
            iasdll = f_LoadLibraryA(iasdll_str);
        }
    }
    __forceinline void load_iasacct() noexcept {
        if (f_LoadLibraryA) {
            char iasacctdll_str[] = "iasacct.dll";
            iasacctdll = f_LoadLibraryA(iasacctdll_str);
        }
    }
    __forceinline void load_iasads() noexcept {
        if (f_LoadLibraryA) {
            char iasadsdll_str[] = "iasads.dll";
            iasadsdll = f_LoadLibraryA(iasadsdll_str);
        }
    }
    __forceinline void load_iasdatastore() noexcept {
        if (f_LoadLibraryA) {
            char iasdatastoredll_str[] = "iasdatastore.dll";
            iasdatastoredll = f_LoadLibraryA(iasdatastoredll_str);
        }
    }
    __forceinline void load_iashlpr() noexcept {
        if (f_LoadLibraryA) {
            char iashlprdll_str[] = "iashlpr.dll";
            iashlprdll = f_LoadLibraryA(iashlprdll_str);
        }
    }
    __forceinline void load_IasMigPlugin() noexcept {
        if (f_LoadLibraryA) {
            char IasMigPlugindll_str[] = "IasMigPlugin.dll";
            IasMigPlugindll = f_LoadLibraryA(IasMigPlugindll_str);
        }
    }
    __forceinline void load_iasnap() noexcept {
        if (f_LoadLibraryA) {
            char iasnapdll_str[] = "iasnap.dll";
            iasnapdll = f_LoadLibraryA(iasnapdll_str);
        }
    }
    __forceinline void load_iaspolcy() noexcept {
        if (f_LoadLibraryA) {
            char iaspolcydll_str[] = "iaspolcy.dll";
            iaspolcydll = f_LoadLibraryA(iaspolcydll_str);
        }
    }
    __forceinline void load_iasrad() noexcept {
        if (f_LoadLibraryA) {
            char iasraddll_str[] = "iasrad.dll";
            iasraddll = f_LoadLibraryA(iasraddll_str);
        }
    }
    __forceinline void load_iasrecst() noexcept {
        if (f_LoadLibraryA) {
            char iasrecstdll_str[] = "iasrecst.dll";
            iasrecstdll = f_LoadLibraryA(iasrecstdll_str);
        }
    }
    __forceinline void load_iassam() noexcept {
        if (f_LoadLibraryA) {
            char iassamdll_str[] = "iassam.dll";
            iassamdll = f_LoadLibraryA(iassamdll_str);
        }
    }
    __forceinline void load_iassdo() noexcept {
        if (f_LoadLibraryA) {
            char iassdodll_str[] = "iassdo.dll";
            iassdodll = f_LoadLibraryA(iassdodll_str);
        }
    }
    __forceinline void load_iassvcs() noexcept {
        if (f_LoadLibraryA) {
            char iassvcsdll_str[] = "iassvcs.dll";
            iassvcsdll = f_LoadLibraryA(iassvcsdll_str);
        }
    }
    __forceinline void load_icfupgd() noexcept {
        if (f_LoadLibraryA) {
            char icfupgddll_str[] = "icfupgd.dll";
            icfupgddll = f_LoadLibraryA(icfupgddll_str);
        }
    }
    __forceinline void load_icm32() noexcept {
        if (f_LoadLibraryA) {
            char icm32dll_str[] = "icm32.dll";
            icm32dll = f_LoadLibraryA(icm32dll_str);
        }
    }
    __forceinline void load_icmp() noexcept {
        if (f_LoadLibraryA) {
            char icmpdll_str[] = "icmp.dll";
            icmpdll = f_LoadLibraryA(icmpdll_str);
        }
    }
    __forceinline void load_icmui() noexcept {
        if (f_LoadLibraryA) {
            char icmuidll_str[] = "icmui.dll";
            icmuidll = f_LoadLibraryA(icmuidll_str);
        }
    }
    __forceinline void load_IconCodecService() noexcept {
        if (f_LoadLibraryA) {
            char IconCodecServicedll_str[] = "IconCodecService.dll";
            IconCodecServicedll = f_LoadLibraryA(IconCodecServicedll_str);
        }
    }
    __forceinline void load_icsigd() noexcept {
        if (f_LoadLibraryA) {
            char icsigddll_str[] = "icsigd.dll";
            icsigddll = f_LoadLibraryA(icsigddll_str);
        }
    }
    __forceinline void load_icsvc() noexcept {
        if (f_LoadLibraryA) {
            char icsvcdll_str[] = "icsvc.dll";
            icsvcdll = f_LoadLibraryA(icsvcdll_str);
        }
    }
    __forceinline void load_icsvcext() noexcept {
        if (f_LoadLibraryA) {
            char icsvcextdll_str[] = "icsvcext.dll";
            icsvcextdll = f_LoadLibraryA(icsvcextdll_str);
        }
    }
    __forceinline void load_icsvcvss() noexcept {
        if (f_LoadLibraryA) {
            char icsvcvssdll_str[] = "icsvcvss.dll";
            icsvcvssdll = f_LoadLibraryA(icsvcvssdll_str);
        }
    }
    __forceinline void load_icu() noexcept {
        if (f_LoadLibraryA) {
            char icudll_str[] = "icu.dll";
            icudll = f_LoadLibraryA(icudll_str);
        }
    }
    __forceinline void load_icuin() noexcept {
        if (f_LoadLibraryA) {
            char icuindll_str[] = "icuin.dll";
            icuindll = f_LoadLibraryA(icuindll_str);
        }
    }
    __forceinline void load_icuuc() noexcept {
        if (f_LoadLibraryA) {
            char icuucdll_str[] = "icuuc.dll";
            icuucdll = f_LoadLibraryA(icuucdll_str);
        }
    }
    __forceinline void load_IdCtrls() noexcept {
        if (f_LoadLibraryA) {
            char IdCtrlsdll_str[] = "IdCtrls.dll";
            IdCtrlsdll = f_LoadLibraryA(IdCtrlsdll_str);
        }
    }
    __forceinline void load_IDStore() noexcept {
        if (f_LoadLibraryA) {
            char IDStoredll_str[] = "IDStore.dll";
            IDStoredll = f_LoadLibraryA(IDStoredll_str);
        }
    }
    __forceinline void load_IEAdvpack() noexcept {
        if (f_LoadLibraryA) {
            char IEAdvpackdll_str[] = "IEAdvpack.dll";
            IEAdvpackdll = f_LoadLibraryA(IEAdvpackdll_str);
        }
    }
    __forceinline void load_ieapfltr() noexcept {
        if (f_LoadLibraryA) {
            char ieapfltrdll_str[] = "ieapfltr.dll";
            ieapfltrdll = f_LoadLibraryA(ieapfltrdll_str);
        }
    }
    __forceinline void load_iedkcs32() noexcept {
        if (f_LoadLibraryA) {
            char iedkcs32dll_str[] = "iedkcs32.dll";
            iedkcs32dll = f_LoadLibraryA(iedkcs32dll_str);
        }
    }
    __forceinline void load_ieframe() noexcept {
        if (f_LoadLibraryA) {
            char ieframedll_str[] = "ieframe.dll";
            ieframedll = f_LoadLibraryA(ieframedll_str);
        }
    }
    __forceinline void load_iemigplugin() noexcept {
        if (f_LoadLibraryA) {
            char iemigplugindll_str[] = "iemigplugin.dll";
            iemigplugindll = f_LoadLibraryA(iemigplugindll_str);
        }
    }
    __forceinline void load_iepeers() noexcept {
        if (f_LoadLibraryA) {
            char iepeersdll_str[] = "iepeers.dll";
            iepeersdll = f_LoadLibraryA(iepeersdll_str);
        }
    }
    __forceinline void load_ieproxy() noexcept {
        if (f_LoadLibraryA) {
            char ieproxydll_str[] = "ieproxy.dll";
            ieproxydll = f_LoadLibraryA(ieproxydll_str);
        }
    }
    __forceinline void load_IEProxyDesktop() noexcept {
        if (f_LoadLibraryA) {
            char IEProxyDesktopdll_str[] = "IEProxyDesktop.dll";
            IEProxyDesktopdll = f_LoadLibraryA(IEProxyDesktopdll_str);
        }
    }
    __forceinline void load_iernonce() noexcept {
        if (f_LoadLibraryA) {
            char iernoncedll_str[] = "iernonce.dll";
            iernoncedll = f_LoadLibraryA(iernoncedll_str);
        }
    }
    __forceinline void load_iertutil() noexcept {
        if (f_LoadLibraryA) {
            char iertutildll_str[] = "iertutil.dll";
            iertutildll = f_LoadLibraryA(iertutildll_str);
        }
    }
    __forceinline void load_iesetup() noexcept {
        if (f_LoadLibraryA) {
            char iesetupdll_str[] = "iesetup.dll";
            iesetupdll = f_LoadLibraryA(iesetupdll_str);
        }
    }
    __forceinline void load_iesysprep() noexcept {
        if (f_LoadLibraryA) {
            char iesysprepdll_str[] = "iesysprep.dll";
            iesysprepdll = f_LoadLibraryA(iesysprepdll_str);
        }
    }
    __forceinline void load_ieui() noexcept {
        if (f_LoadLibraryA) {
            char ieuidll_str[] = "ieui.dll";
            ieuidll = f_LoadLibraryA(ieuidll_str);
        }
    }
    __forceinline void load_ifmon() noexcept {
        if (f_LoadLibraryA) {
            char ifmondll_str[] = "ifmon.dll";
            ifmondll = f_LoadLibraryA(ifmondll_str);
        }
    }
    __forceinline void load_ifsutil() noexcept {
        if (f_LoadLibraryA) {
            char ifsutildll_str[] = "ifsutil.dll";
            ifsutildll = f_LoadLibraryA(ifsutildll_str);
        }
    }
    __forceinline void load_ifsutilx() noexcept {
        if (f_LoadLibraryA) {
            char ifsutilxdll_str[] = "ifsutilx.dll";
            ifsutilxdll = f_LoadLibraryA(ifsutilxdll_str);
        }
    }
    __forceinline void load_igdDiag() noexcept {
        if (f_LoadLibraryA) {
            char igdDiagdll_str[] = "igdDiag.dll";
            igdDiagdll = f_LoadLibraryA(igdDiagdll_str);
        }
    }
    __forceinline void load_IHDS() noexcept {
        if (f_LoadLibraryA) {
            char IHDSdll_str[] = "IHDS.dll";
            IHDSdll = f_LoadLibraryA(IHDSdll_str);
        }
    }
    __forceinline void load_iisrstap() noexcept {
        if (f_LoadLibraryA) {
            char iisrstapdll_str[] = "iisrstap.dll";
            iisrstapdll = f_LoadLibraryA(iisrstapdll_str);
        }
    }
    __forceinline void load_iisRtl() noexcept {
        if (f_LoadLibraryA) {
            char iisRtldll_str[] = "iisRtl.dll";
            iisRtldll = f_LoadLibraryA(iisRtldll_str);
        }
    }
    __forceinline void load_imagehlp() noexcept {
        if (f_LoadLibraryA) {
            char imagehlpdll_str[] = "imagehlp.dll";
            imagehlpdll = f_LoadLibraryA(imagehlpdll_str);
        }
    }
    __forceinline void load_imageres() noexcept {
        if (f_LoadLibraryA) {
            char imageresdll_str[] = "imageres.dll";
            imageresdll = f_LoadLibraryA(imageresdll_str);
        }
    }
    __forceinline void load_imagesp1() noexcept {
        if (f_LoadLibraryA) {
            char imagesp1dll_str[] = "imagesp1.dll";
            imagesp1dll = f_LoadLibraryA(imagesp1dll_str);
        }
    }
    __forceinline void load_imapi() noexcept {
        if (f_LoadLibraryA) {
            char imapidll_str[] = "imapi.dll";
            imapidll = f_LoadLibraryA(imapidll_str);
        }
    }
    __forceinline void load_imapi2() noexcept {
        if (f_LoadLibraryA) {
            char imapi2dll_str[] = "imapi2.dll";
            imapi2dll = f_LoadLibraryA(imapi2dll_str);
        }
    }
    __forceinline void load_imapi2fs() noexcept {
        if (f_LoadLibraryA) {
            char imapi2fsdll_str[] = "imapi2fs.dll";
            imapi2fsdll = f_LoadLibraryA(imapi2fsdll_str);
        }
    }
    __forceinline void load_ime_textinputhelpers() noexcept {
        if (f_LoadLibraryA) {
            char ime_textinputhelpersdll_str[] = "ime_textinputhelpers.dll";
            ime_textinputhelpersdll = f_LoadLibraryA(ime_textinputhelpersdll_str);
        }
    }
    __forceinline void load_imgutil() noexcept {
        if (f_LoadLibraryA) {
            char imgutildll_str[] = "imgutil.dll";
            imgutildll = f_LoadLibraryA(imgutildll_str);
        }
    }
    __forceinline void load_imm32() noexcept {
        if (f_LoadLibraryA) {
            char imm32dll_str[] = "imm32.dll";
            imm32dll = f_LoadLibraryA(imm32dll_str);
        }
    }
    __forceinline void load_ImplatSetup() noexcept {
        if (f_LoadLibraryA) {
            char ImplatSetupdll_str[] = "ImplatSetup.dll";
            ImplatSetupdll = f_LoadLibraryA(ImplatSetupdll_str);
        }
    }
    __forceinline void load_IndexedDbLegacy() noexcept {
        if (f_LoadLibraryA) {
            char IndexedDbLegacydll_str[] = "IndexedDbLegacy.dll";
            IndexedDbLegacydll = f_LoadLibraryA(IndexedDbLegacydll_str);
        }
    }
    __forceinline void load_inetcomm() noexcept {
        if (f_LoadLibraryA) {
            char inetcommdll_str[] = "inetcomm.dll";
            inetcommdll = f_LoadLibraryA(inetcommdll_str);
        }
    }
    __forceinline void load_inetmib1() noexcept {
        if (f_LoadLibraryA) {
            char inetmib1dll_str[] = "inetmib1.dll";
            inetmib1dll = f_LoadLibraryA(inetmib1dll_str);
        }
    }
    __forceinline void load_INETRES() noexcept {
        if (f_LoadLibraryA) {
            char INETRESdll_str[] = "INETRES.dll";
            INETRESdll = f_LoadLibraryA(INETRESdll_str);
        }
    }
    __forceinline void load_InkEd() noexcept {
        if (f_LoadLibraryA) {
            char InkEddll_str[] = "InkEd.dll";
            InkEddll = f_LoadLibraryA(InkEddll_str);
        }
    }
    __forceinline void load_InkObjCore() noexcept {
        if (f_LoadLibraryA) {
            char InkObjCoredll_str[] = "InkObjCore.dll";
            InkObjCoredll = f_LoadLibraryA(InkObjCoredll_str);
        }
    }
    __forceinline void load_InprocLogger() noexcept {
        if (f_LoadLibraryA) {
            char InprocLoggerdll_str[] = "InprocLogger.dll";
            InprocLoggerdll = f_LoadLibraryA(InprocLoggerdll_str);
        }
    }
    __forceinline void load_input() noexcept {
        if (f_LoadLibraryA) {
            char inputdll_str[] = "input.dll";
            inputdll = f_LoadLibraryA(inputdll_str);
        }
    }
    __forceinline void load_InputCloudStore() noexcept {
        if (f_LoadLibraryA) {
            char InputCloudStoredll_str[] = "InputCloudStore.dll";
            InputCloudStoredll = f_LoadLibraryA(InputCloudStoredll_str);
        }
    }
    __forceinline void load_InputController() noexcept {
        if (f_LoadLibraryA) {
            char InputControllerdll_str[] = "InputController.dll";
            InputControllerdll = f_LoadLibraryA(InputControllerdll_str);
        }
    }
    __forceinline void load_InputHost() noexcept {
        if (f_LoadLibraryA) {
            char InputHostdll_str[] = "InputHost.dll";
            InputHostdll = f_LoadLibraryA(InputHostdll_str);
        }
    }
    __forceinline void load_InputInjectionBroker() noexcept {
        if (f_LoadLibraryA) {
            char InputInjectionBrokerdll_str[] = "InputInjectionBroker.dll";
            InputInjectionBrokerdll = f_LoadLibraryA(InputInjectionBrokerdll_str);
        }
    }
    __forceinline void load_InputLocaleManager() noexcept {
        if (f_LoadLibraryA) {
            char InputLocaleManagerdll_str[] = "InputLocaleManager.dll";
            InputLocaleManagerdll = f_LoadLibraryA(InputLocaleManagerdll_str);
        }
    }
    __forceinline void load_InputService() noexcept {
        if (f_LoadLibraryA) {
            char InputServicedll_str[] = "InputService.dll";
            InputServicedll = f_LoadLibraryA(InputServicedll_str);
        }
    }
    __forceinline void load_InputSwitch() noexcept {
        if (f_LoadLibraryA) {
            char InputSwitchdll_str[] = "InputSwitch.dll";
            InputSwitchdll = f_LoadLibraryA(InputSwitchdll_str);
        }
    }
    __forceinline void load_InputViewExperience() noexcept {
        if (f_LoadLibraryA) {
            char InputViewExperiencedll_str[] = "InputViewExperience.dll";
            InputViewExperiencedll = f_LoadLibraryA(InputViewExperiencedll_str);
        }
    }
    __forceinline void load_inseng() noexcept {
        if (f_LoadLibraryA) {
            char insengdll_str[] = "inseng.dll";
            insengdll = f_LoadLibraryA(insengdll_str);
        }
    }
    __forceinline void load_InstallService() noexcept {
        if (f_LoadLibraryA) {
            char InstallServicedll_str[] = "InstallService.dll";
            InstallServicedll = f_LoadLibraryA(InstallServicedll_str);
        }
    }
    __forceinline void load_InstallServiceTasks() noexcept {
        if (f_LoadLibraryA) {
            char InstallServiceTasksdll_str[] = "InstallServiceTasks.dll";
            InstallServiceTasksdll = f_LoadLibraryA(InstallServiceTasksdll_str);
        }
    }
    __forceinline void load_IntelIHVRouter08() noexcept {
        if (f_LoadLibraryA) {
            char IntelIHVRouter08dll_str[] = "IntelIHVRouter08.dll";
            IntelIHVRouter08dll = f_LoadLibraryA(IntelIHVRouter08dll_str);
        }
    }
    __forceinline void load_IntelligentPwdlessTask() noexcept {
        if (f_LoadLibraryA) {
            char IntelligentPwdlessTaskdll_str[] = "IntelligentPwdlessTask.dll";
            IntelligentPwdlessTaskdll = f_LoadLibraryA(IntelligentPwdlessTaskdll_str);
        }
    }
    __forceinline void load_intel_gfx_api_x64() noexcept {
        if (f_LoadLibraryA) {
            char intel_gfx_api_x64dll_str[] = "intel_gfx_api-x64.dll";
            intel_gfx_api_x64dll = f_LoadLibraryA(intel_gfx_api_x64dll_str);
        }
    }
    __forceinline void load_internetmail() noexcept {
        if (f_LoadLibraryA) {
            char internetmaildll_str[] = "internetmail.dll";
            internetmaildll = f_LoadLibraryA(internetmaildll_str);
        }
    }
    __forceinline void load_InternetMailCsp() noexcept {
        if (f_LoadLibraryA) {
            char InternetMailCspdll_str[] = "InternetMailCsp.dll";
            InternetMailCspdll = f_LoadLibraryA(InternetMailCspdll_str);
        }
    }
    __forceinline void load_invagent() noexcept {
        if (f_LoadLibraryA) {
            char invagentdll_str[] = "invagent.dll";
            invagentdll = f_LoadLibraryA(invagentdll_str);
        }
    }
    __forceinline void load_InventorySvc() noexcept {
        if (f_LoadLibraryA) {
            char InventorySvcdll_str[] = "InventorySvc.dll";
            InventorySvcdll = f_LoadLibraryA(InventorySvcdll_str);
        }
    }
    __forceinline void load_iologmsg() noexcept {
        if (f_LoadLibraryA) {
            char iologmsgdll_str[] = "iologmsg.dll";
            iologmsgdll = f_LoadLibraryA(iologmsgdll_str);
        }
    }
    __forceinline void load_IoTAssignedAccessLockFramework() noexcept {
        if (f_LoadLibraryA) {
            char IoTAssignedAccessLockFrameworkdll_str[] = "IoTAssignedAccessLockFramework.dll";
            IoTAssignedAccessLockFrameworkdll = f_LoadLibraryA(IoTAssignedAccessLockFrameworkdll_str);
        }
    }
    __forceinline void load_IPELoggingDictationHelper() noexcept {
        if (f_LoadLibraryA) {
            char IPELoggingDictationHelperdll_str[] = "IPELoggingDictationHelper.dll";
            IPELoggingDictationHelperdll = f_LoadLibraryA(IPELoggingDictationHelperdll_str);
        }
    }
    __forceinline void load_iphlpsvc() noexcept {
        if (f_LoadLibraryA) {
            char iphlpsvcdll_str[] = "iphlpsvc.dll";
            iphlpsvcdll = f_LoadLibraryA(iphlpsvcdll_str);
        }
    }
    __forceinline void load_ipnathlp() noexcept {
        if (f_LoadLibraryA) {
            char ipnathlpdll_str[] = "ipnathlp.dll";
            ipnathlpdll = f_LoadLibraryA(ipnathlpdll_str);
        }
    }
    __forceinline void load_IpNatHlpClient() noexcept {
        if (f_LoadLibraryA) {
            char IpNatHlpClientdll_str[] = "IpNatHlpClient.dll";
            IpNatHlpClientdll = f_LoadLibraryA(IpNatHlpClientdll_str);
        }
    }
    __forceinline void load_IppCommon() noexcept {
        if (f_LoadLibraryA) {
            char IppCommondll_str[] = "IppCommon.dll";
            IppCommondll = f_LoadLibraryA(IppCommondll_str);
        }
    }
    __forceinline void load_IppCommonProxy() noexcept {
        if (f_LoadLibraryA) {
            char IppCommonProxydll_str[] = "IppCommonProxy.dll";
            IppCommonProxydll = f_LoadLibraryA(IppCommonProxydll_str);
        }
    }
    __forceinline void load_iprtprio() noexcept {
        if (f_LoadLibraryA) {
            char iprtpriodll_str[] = "iprtprio.dll";
            iprtpriodll = f_LoadLibraryA(iprtpriodll_str);
        }
    }
    __forceinline void load_iprtrmgr() noexcept {
        if (f_LoadLibraryA) {
            char iprtrmgrdll_str[] = "iprtrmgr.dll";
            iprtrmgrdll = f_LoadLibraryA(iprtrmgrdll_str);
        }
    }
    __forceinline void load_ipsecsnp() noexcept {
        if (f_LoadLibraryA) {
            char ipsecsnpdll_str[] = "ipsecsnp.dll";
            ipsecsnpdll = f_LoadLibraryA(ipsecsnpdll_str);
        }
    }
    __forceinline void load_ipsmsnap() noexcept {
        if (f_LoadLibraryA) {
            char ipsmsnapdll_str[] = "ipsmsnap.dll";
            ipsmsnapdll = f_LoadLibraryA(ipsmsnapdll_str);
        }
    }
    __forceinline void load_ipxlatcfg() noexcept {
        if (f_LoadLibraryA) {
            char ipxlatcfgdll_str[] = "ipxlatcfg.dll";
            ipxlatcfgdll = f_LoadLibraryA(ipxlatcfgdll_str);
        }
    }
    __forceinline void load_iri() noexcept {
        if (f_LoadLibraryA) {
            char iridll_str[] = "iri.dll";
            iridll = f_LoadLibraryA(iridll_str);
        }
    }
    __forceinline void load_iscsicpl() noexcept {
        if (f_LoadLibraryA) {
            char iscsicpldll_str[] = "iscsicpl.dll";
            iscsicpldll = f_LoadLibraryA(iscsicpldll_str);
        }
    }
    __forceinline void load_iscsidsc() noexcept {
        if (f_LoadLibraryA) {
            char iscsidscdll_str[] = "iscsidsc.dll";
            iscsidscdll = f_LoadLibraryA(iscsidscdll_str);
        }
    }
    __forceinline void load_iscsied() noexcept {
        if (f_LoadLibraryA) {
            char iscsieddll_str[] = "iscsied.dll";
            iscsieddll = f_LoadLibraryA(iscsieddll_str);
        }
    }
    __forceinline void load_iscsiexe() noexcept {
        if (f_LoadLibraryA) {
            char iscsiexedll_str[] = "iscsiexe.dll";
            iscsiexedll = f_LoadLibraryA(iscsiexedll_str);
        }
    }
    __forceinline void load_iscsilog() noexcept {
        if (f_LoadLibraryA) {
            char iscsilogdll_str[] = "iscsilog.dll";
            iscsilogdll = f_LoadLibraryA(iscsilogdll_str);
        }
    }
    __forceinline void load_iscsium() noexcept {
        if (f_LoadLibraryA) {
            char iscsiumdll_str[] = "iscsium.dll";
            iscsiumdll = f_LoadLibraryA(iscsiumdll_str);
        }
    }
    __forceinline void load_iscsiwmi() noexcept {
        if (f_LoadLibraryA) {
            char iscsiwmidll_str[] = "iscsiwmi.dll";
            iscsiwmidll = f_LoadLibraryA(iscsiwmidll_str);
        }
    }
    __forceinline void load_iscsiwmiv2() noexcept {
        if (f_LoadLibraryA) {
            char iscsiwmiv2dll_str[] = "iscsiwmiv2.dll";
            iscsiwmiv2dll = f_LoadLibraryA(iscsiwmiv2dll_str);
        }
    }
    __forceinline void load_ISM() noexcept {
        if (f_LoadLibraryA) {
            char ISMdll_str[] = "ISM.dll";
            ISMdll = f_LoadLibraryA(ISMdll_str);
        }
    }
    __forceinline void load_itircl() noexcept {
        if (f_LoadLibraryA) {
            char itircldll_str[] = "itircl.dll";
            itircldll = f_LoadLibraryA(itircldll_str);
        }
    }
    __forceinline void load_itss() noexcept {
        if (f_LoadLibraryA) {
            char itssdll_str[] = "itss.dll";
            itssdll = f_LoadLibraryA(itssdll_str);
        }
    }
    __forceinline void load_iuilp() noexcept {
        if (f_LoadLibraryA) {
            char iuilpdll_str[] = "iuilp.dll";
            iuilpdll = f_LoadLibraryA(iuilpdll_str);
        }
    }
    __forceinline void load_iumbase() noexcept {
        if (f_LoadLibraryA) {
            char iumbasedll_str[] = "iumbase.dll";
            iumbasedll = f_LoadLibraryA(iumbasedll_str);
        }
    }
    __forceinline void load_iumcrypt() noexcept {
        if (f_LoadLibraryA) {
            char iumcryptdll_str[] = "iumcrypt.dll";
            iumcryptdll = f_LoadLibraryA(iumcryptdll_str);
        }
    }
    __forceinline void load_iumdll() noexcept {
        if (f_LoadLibraryA) {
            char iumdlldll_str[] = "iumdll.dll";
            iumdlldll = f_LoadLibraryA(iumdlldll_str);
        }
    }
    __forceinline void load_IumSdk() noexcept {
        if (f_LoadLibraryA) {
            char IumSdkdll_str[] = "IumSdk.dll";
            IumSdkdll = f_LoadLibraryA(IumSdkdll_str);
        }
    }
    __forceinline void load_iyuv_32() noexcept {
        if (f_LoadLibraryA) {
            char iyuv_32dll_str[] = "iyuv_32.dll";
            iyuv_32dll = f_LoadLibraryA(iyuv_32dll_str);
        }
    }
    __forceinline void load_JavaScriptCollectionAgent() noexcept {
        if (f_LoadLibraryA) {
            char JavaScriptCollectionAgentdll_str[] = "JavaScriptCollectionAgent.dll";
            JavaScriptCollectionAgentdll = f_LoadLibraryA(JavaScriptCollectionAgentdll_str);
        }
    }
    __forceinline void load_JHI64() noexcept {
        if (f_LoadLibraryA) {
            char JHI64dll_str[] = "JHI64.dll";
            JHI64dll = f_LoadLibraryA(JHI64dll_str);
        }
    }
    __forceinline void load_joinproviderol() noexcept {
        if (f_LoadLibraryA) {
            char joinprovideroldll_str[] = "joinproviderol.dll";
            joinprovideroldll = f_LoadLibraryA(joinprovideroldll_str);
        }
    }
    __forceinline void load_joinutil() noexcept {
        if (f_LoadLibraryA) {
            char joinutildll_str[] = "joinutil.dll";
            joinutildll = f_LoadLibraryA(joinutildll_str);
        }
    }
    __forceinline void load_JpMapControl() noexcept {
        if (f_LoadLibraryA) {
            char JpMapControldll_str[] = "JpMapControl.dll";
            JpMapControldll = f_LoadLibraryA(JpMapControldll_str);
        }
    }
    __forceinline void load_jpndecoder() noexcept {
        if (f_LoadLibraryA) {
            char jpndecoderdll_str[] = "jpndecoder.dll";
            jpndecoderdll = f_LoadLibraryA(jpndecoderdll_str);
        }
    }
    __forceinline void load_jpninputrouter() noexcept {
        if (f_LoadLibraryA) {
            char jpninputrouterdll_str[] = "jpninputrouter.dll";
            jpninputrouterdll = f_LoadLibraryA(jpninputrouterdll_str);
        }
    }
    __forceinline void load_jpnranker() noexcept {
        if (f_LoadLibraryA) {
            char jpnrankerdll_str[] = "jpnranker.dll";
            jpnrankerdll = f_LoadLibraryA(jpnrankerdll_str);
        }
    }
    __forceinline void load_JpnServiceDS() noexcept {
        if (f_LoadLibraryA) {
            char JpnServiceDSdll_str[] = "JpnServiceDS.dll";
            JpnServiceDSdll = f_LoadLibraryA(JpnServiceDSdll_str);
        }
    }
    __forceinline void load_jscript() noexcept {
        if (f_LoadLibraryA) {
            char jscriptdll_str[] = "jscript.dll";
            jscriptdll = f_LoadLibraryA(jscriptdll_str);
        }
    }
    __forceinline void load_jscript9() noexcept {
        if (f_LoadLibraryA) {
            char jscript9dll_str[] = "jscript9.dll";
            jscript9dll = f_LoadLibraryA(jscript9dll_str);
        }
    }
    __forceinline void load_jscript9diag() noexcept {
        if (f_LoadLibraryA) {
            char jscript9diagdll_str[] = "jscript9diag.dll";
            jscript9diagdll = f_LoadLibraryA(jscript9diagdll_str);
        }
    }
    __forceinline void load_jscript9Legacy() noexcept {
        if (f_LoadLibraryA) {
            char jscript9Legacydll_str[] = "jscript9Legacy.dll";
            jscript9Legacydll = f_LoadLibraryA(jscript9Legacydll_str);
        }
    }
    __forceinline void load_jsproxy() noexcept {
        if (f_LoadLibraryA) {
            char jsproxydll_str[] = "jsproxy.dll";
            jsproxydll = f_LoadLibraryA(jsproxydll_str);
        }
    }
    __forceinline void load_kbd101() noexcept {
        if (f_LoadLibraryA) {
            char kbd101dll_str[] = "kbd101.dll";
            kbd101dll = f_LoadLibraryA(kbd101dll_str);
        }
    }
    __forceinline void load_kbd101a() noexcept {
        if (f_LoadLibraryA) {
            char kbd101adll_str[] = "kbd101a.dll";
            kbd101adll = f_LoadLibraryA(kbd101adll_str);
        }
    }
    __forceinline void load_kbd101b() noexcept {
        if (f_LoadLibraryA) {
            char kbd101bdll_str[] = "kbd101b.dll";
            kbd101bdll = f_LoadLibraryA(kbd101bdll_str);
        }
    }
    __forceinline void load_kbd101c() noexcept {
        if (f_LoadLibraryA) {
            char kbd101cdll_str[] = "kbd101c.dll";
            kbd101cdll = f_LoadLibraryA(kbd101cdll_str);
        }
    }
    __forceinline void load_kbd103() noexcept {
        if (f_LoadLibraryA) {
            char kbd103dll_str[] = "kbd103.dll";
            kbd103dll = f_LoadLibraryA(kbd103dll_str);
        }
    }
    __forceinline void load_kbd106() noexcept {
        if (f_LoadLibraryA) {
            char kbd106dll_str[] = "kbd106.dll";
            kbd106dll = f_LoadLibraryA(kbd106dll_str);
        }
    }
    __forceinline void load_kbd106n() noexcept {
        if (f_LoadLibraryA) {
            char kbd106ndll_str[] = "kbd106n.dll";
            kbd106ndll = f_LoadLibraryA(kbd106ndll_str);
        }
    }
    __forceinline void load_kbdarmph() noexcept {
        if (f_LoadLibraryA) {
            char kbdarmphdll_str[] = "kbdarmph.dll";
            kbdarmphdll = f_LoadLibraryA(kbdarmphdll_str);
        }
    }
    __forceinline void load_kbdarmty() noexcept {
        if (f_LoadLibraryA) {
            char kbdarmtydll_str[] = "kbdarmty.dll";
            kbdarmtydll = f_LoadLibraryA(kbdarmtydll_str);
        }
    }
    __forceinline void load_kbdax2() noexcept {
        if (f_LoadLibraryA) {
            char kbdax2dll_str[] = "kbdax2.dll";
            kbdax2dll = f_LoadLibraryA(kbdax2dll_str);
        }
    }
    __forceinline void load_kbdfar() noexcept {
        if (f_LoadLibraryA) {
            char kbdfardll_str[] = "kbdfar.dll";
            kbdfardll = f_LoadLibraryA(kbdfardll_str);
        }
    }
    __forceinline void load_kbdgeoer() noexcept {
        if (f_LoadLibraryA) {
            char kbdgeoerdll_str[] = "kbdgeoer.dll";
            kbdgeoerdll = f_LoadLibraryA(kbdgeoerdll_str);
        }
    }
    __forceinline void load_kbdgeome() noexcept {
        if (f_LoadLibraryA) {
            char kbdgeomedll_str[] = "kbdgeome.dll";
            kbdgeomedll = f_LoadLibraryA(kbdgeomedll_str);
        }
    }
    __forceinline void load_kbdgeooa() noexcept {
        if (f_LoadLibraryA) {
            char kbdgeooadll_str[] = "kbdgeooa.dll";
            kbdgeooadll = f_LoadLibraryA(kbdgeooadll_str);
        }
    }
    __forceinline void load_kbdgeoqw() noexcept {
        if (f_LoadLibraryA) {
            char kbdgeoqwdll_str[] = "kbdgeoqw.dll";
            kbdgeoqwdll = f_LoadLibraryA(kbdgeoqwdll_str);
        }
    }
    __forceinline void load_kbdhebl3() noexcept {
        if (f_LoadLibraryA) {
            char kbdhebl3dll_str[] = "kbdhebl3.dll";
            kbdhebl3dll = f_LoadLibraryA(kbdhebl3dll_str);
        }
    }
    __forceinline void load_kbdibm02() noexcept {
        if (f_LoadLibraryA) {
            char kbdibm02dll_str[] = "kbdibm02.dll";
            kbdibm02dll = f_LoadLibraryA(kbdibm02dll_str);
        }
    }
    __forceinline void load_kbdlisub() noexcept {
        if (f_LoadLibraryA) {
            char kbdlisubdll_str[] = "kbdlisub.dll";
            kbdlisubdll = f_LoadLibraryA(kbdlisubdll_str);
        }
    }
    __forceinline void load_kbdlisus() noexcept {
        if (f_LoadLibraryA) {
            char kbdlisusdll_str[] = "kbdlisus.dll";
            kbdlisusdll = f_LoadLibraryA(kbdlisusdll_str);
        }
    }
    __forceinline void load_kbdlk41a() noexcept {
        if (f_LoadLibraryA) {
            char kbdlk41adll_str[] = "kbdlk41a.dll";
            kbdlk41adll = f_LoadLibraryA(kbdlk41adll_str);
        }
    }
    __forceinline void load_kbdnec() noexcept {
        if (f_LoadLibraryA) {
            char kbdnecdll_str[] = "kbdnec.dll";
            kbdnecdll = f_LoadLibraryA(kbdnecdll_str);
        }
    }
    __forceinline void load_kbdnec95() noexcept {
        if (f_LoadLibraryA) {
            char kbdnec95dll_str[] = "kbdnec95.dll";
            kbdnec95dll = f_LoadLibraryA(kbdnec95dll_str);
        }
    }
    __forceinline void load_kbdnecat() noexcept {
        if (f_LoadLibraryA) {
            char kbdnecatdll_str[] = "kbdnecat.dll";
            kbdnecatdll = f_LoadLibraryA(kbdnecatdll_str);
        }
    }
    __forceinline void load_kbdnecnt() noexcept {
        if (f_LoadLibraryA) {
            char kbdnecntdll_str[] = "kbdnecnt.dll";
            kbdnecntdll = f_LoadLibraryA(kbdnecntdll_str);
        }
    }
    __forceinline void load_kbdnko() noexcept {
        if (f_LoadLibraryA) {
            char kbdnkodll_str[] = "kbdnko.dll";
            kbdnkodll = f_LoadLibraryA(kbdnkodll_str);
        }
    }
    __forceinline void load_kbdphags() noexcept {
        if (f_LoadLibraryA) {
            char kbdphagsdll_str[] = "kbdphags.dll";
            kbdphagsdll = f_LoadLibraryA(kbdphagsdll_str);
        }
    }
    __forceinline void load_kd() noexcept {
        if (f_LoadLibraryA) {
            char kddll_str[] = "kd.dll";
            kddll = f_LoadLibraryA(kddll_str);
        }
    }
    __forceinline void load_kdcom() noexcept {
        if (f_LoadLibraryA) {
            char kdcomdll_str[] = "kdcom.dll";
            kdcomdll = f_LoadLibraryA(kdcomdll_str);
        }
    }
    __forceinline void load_kdcpw() noexcept {
        if (f_LoadLibraryA) {
            char kdcpwdll_str[] = "kdcpw.dll";
            kdcpwdll = f_LoadLibraryA(kdcpwdll_str);
        }
    }
    __forceinline void load_kdhvcom() noexcept {
        if (f_LoadLibraryA) {
            char kdhvcomdll_str[] = "kdhvcom.dll";
            kdhvcomdll = f_LoadLibraryA(kdhvcomdll_str);
        }
    }
    __forceinline void load_kdnet() noexcept {
        if (f_LoadLibraryA) {
            char kdnetdll_str[] = "kdnet.dll";
            kdnetdll = f_LoadLibraryA(kdnetdll_str);
        }
    }
    __forceinline void load_kdnet_uart16550() noexcept {
        if (f_LoadLibraryA) {
            char kdnet_uart16550dll_str[] = "kdnet_uart16550.dll";
            kdnet_uart16550dll = f_LoadLibraryA(kdnet_uart16550dll_str);
        }
    }
    __forceinline void load_KdsCli() noexcept {
        if (f_LoadLibraryA) {
            char KdsClidll_str[] = "KdsCli.dll";
            KdsClidll = f_LoadLibraryA(KdsClidll_str);
        }
    }
    __forceinline void load_kdstub() noexcept {
        if (f_LoadLibraryA) {
            char kdstubdll_str[] = "kdstub.dll";
            kdstubdll = f_LoadLibraryA(kdstubdll_str);
        }
    }
    __forceinline void load_kdusb() noexcept {
        if (f_LoadLibraryA) {
            char kdusbdll_str[] = "kdusb.dll";
            kdusbdll = f_LoadLibraryA(kdusbdll_str);
        }
    }
    __forceinline void load_kd_02_10df() noexcept {
        if (f_LoadLibraryA) {
            char kd_02_10dfdll_str[] = "kd_02_10df.dll";
            kd_02_10dfdll = f_LoadLibraryA(kd_02_10dfdll_str);
        }
    }
    __forceinline void load_kd_02_10ec() noexcept {
        if (f_LoadLibraryA) {
            char kd_02_10ecdll_str[] = "kd_02_10ec.dll";
            kd_02_10ecdll = f_LoadLibraryA(kd_02_10ecdll_str);
        }
    }
    __forceinline void load_kd_02_1137() noexcept {
        if (f_LoadLibraryA) {
            char kd_02_1137dll_str[] = "kd_02_1137.dll";
            kd_02_1137dll = f_LoadLibraryA(kd_02_1137dll_str);
        }
    }
    __forceinline void load_kd_02_14e4() noexcept {
        if (f_LoadLibraryA) {
            char kd_02_14e4dll_str[] = "kd_02_14e4.dll";
            kd_02_14e4dll = f_LoadLibraryA(kd_02_14e4dll_str);
        }
    }
    __forceinline void load_kd_02_15b3() noexcept {
        if (f_LoadLibraryA) {
            char kd_02_15b3dll_str[] = "kd_02_15b3.dll";
            kd_02_15b3dll = f_LoadLibraryA(kd_02_15b3dll_str);
        }
    }
    __forceinline void load_kd_02_1969() noexcept {
        if (f_LoadLibraryA) {
            char kd_02_1969dll_str[] = "kd_02_1969.dll";
            kd_02_1969dll = f_LoadLibraryA(kd_02_1969dll_str);
        }
    }
    __forceinline void load_kd_02_19a2() noexcept {
        if (f_LoadLibraryA) {
            char kd_02_19a2dll_str[] = "kd_02_19a2.dll";
            kd_02_19a2dll = f_LoadLibraryA(kd_02_19a2dll_str);
        }
    }
    __forceinline void load_kd_02_1af4() noexcept {
        if (f_LoadLibraryA) {
            char kd_02_1af4dll_str[] = "kd_02_1af4.dll";
            kd_02_1af4dll = f_LoadLibraryA(kd_02_1af4dll_str);
        }
    }
    __forceinline void load_kd_02_8086() noexcept {
        if (f_LoadLibraryA) {
            char kd_02_8086dll_str[] = "kd_02_8086.dll";
            kd_02_8086dll = f_LoadLibraryA(kd_02_8086dll_str);
        }
    }
    __forceinline void load_kd_07_1415() noexcept {
        if (f_LoadLibraryA) {
            char kd_07_1415dll_str[] = "kd_07_1415.dll";
            kd_07_1415dll = f_LoadLibraryA(kd_07_1415dll_str);
        }
    }
    __forceinline void load_kd_0C_8086() noexcept {
        if (f_LoadLibraryA) {
            char kd_0C_8086dll_str[] = "kd_0C_8086.dll";
            kd_0C_8086dll = f_LoadLibraryA(kd_0C_8086dll_str);
        }
    }
    __forceinline void load_keepaliveprovider() noexcept {
        if (f_LoadLibraryA) {
            char keepaliveproviderdll_str[] = "keepaliveprovider.dll";
            keepaliveproviderdll = f_LoadLibraryA(keepaliveproviderdll_str);
        }
    }
    __forceinline void load_KerbClientShared() noexcept {
        if (f_LoadLibraryA) {
            char KerbClientShareddll_str[] = "KerbClientShared.dll";
            KerbClientShareddll = f_LoadLibraryA(KerbClientShareddll_str);
        }
    }
    __forceinline void load_kerberos() noexcept {
        if (f_LoadLibraryA) {
            char kerberosdll_str[] = "kerberos.dll";
            kerberosdll = f_LoadLibraryA(kerberosdll_str);
        }
    }
    __forceinline void load_kernelappcore() noexcept {
        if (f_LoadLibraryA) {
            char kernelappcoredll_str[] = "kernel.appcore.dll";
            kernelappcoredll = f_LoadLibraryA(kernelappcoredll_str);
        }
    }
    __forceinline void load_KernelBase() noexcept {
        if (f_LoadLibraryA) {
            char KernelBasedll_str[] = "KernelBase.dll";
            KernelBasedll = f_LoadLibraryA(KernelBasedll_str);
        }
    }
    __forceinline void load_KeyboardFilterCore() noexcept {
        if (f_LoadLibraryA) {
            char KeyboardFilterCoredll_str[] = "KeyboardFilterCore.dll";
            KeyboardFilterCoredll = f_LoadLibraryA(KeyboardFilterCoredll_str);
        }
    }
    __forceinline void load_KeyboardFilterManager() noexcept {
        if (f_LoadLibraryA) {
            char KeyboardFilterManagerdll_str[] = "KeyboardFilterManager.dll";
            KeyboardFilterManagerdll = f_LoadLibraryA(KeyboardFilterManagerdll_str);
        }
    }
    __forceinline void load_KeyboardFilterShim() noexcept {
        if (f_LoadLibraryA) {
            char KeyboardFilterShimdll_str[] = "KeyboardFilterShim.dll";
            KeyboardFilterShimdll = f_LoadLibraryA(KeyboardFilterShimdll_str);
        }
    }
    __forceinline void load_KeyboardFilterSvc() noexcept {
        if (f_LoadLibraryA) {
            char KeyboardFilterSvcdll_str[] = "KeyboardFilterSvc.dll";
            KeyboardFilterSvcdll = f_LoadLibraryA(KeyboardFilterSvcdll_str);
        }
    }
    __forceinline void load_KeyCredMgr() noexcept {
        if (f_LoadLibraryA) {
            char KeyCredMgrdll_str[] = "KeyCredMgr.dll";
            KeyCredMgrdll = f_LoadLibraryA(KeyCredMgrdll_str);
        }
    }
    __forceinline void load_keyiso() noexcept {
        if (f_LoadLibraryA) {
            char keyisodll_str[] = "keyiso.dll";
            keyisodll = f_LoadLibraryA(keyisodll_str);
        }
    }
    __forceinline void load_keymgr() noexcept {
        if (f_LoadLibraryA) {
            char keymgrdll_str[] = "keymgr.dll";
            keymgrdll = f_LoadLibraryA(keymgrdll_str);
        }
    }
    __forceinline void load_KeywordDetectorMsftSidAdapter() noexcept {
        if (f_LoadLibraryA) {
            char KeywordDetectorMsftSidAdapterdll_str[] = "KeywordDetectorMsftSidAdapter.dll";
            KeywordDetectorMsftSidAdapterdll = f_LoadLibraryA(KeywordDetectorMsftSidAdapterdll_str);
        }
    }
    __forceinline void load_KnobsCore() noexcept {
        if (f_LoadLibraryA) {
            char KnobsCoredll_str[] = "KnobsCore.dll";
            KnobsCoredll = f_LoadLibraryA(KnobsCoredll_str);
        }
    }
    __forceinline void load_KnobsCsp() noexcept {
        if (f_LoadLibraryA) {
            char KnobsCspdll_str[] = "KnobsCsp.dll";
            KnobsCspdll = f_LoadLibraryA(KnobsCspdll_str);
        }
    }
    __forceinline void load_ksuser() noexcept {
        if (f_LoadLibraryA) {
            char ksuserdll_str[] = "ksuser.dll";
            ksuserdll = f_LoadLibraryA(ksuserdll_str);
        }
    }
    __forceinline void load_ktmw32() noexcept {
        if (f_LoadLibraryA) {
            char ktmw32dll_str[] = "ktmw32.dll";
            ktmw32dll = f_LoadLibraryA(ktmw32dll_str);
        }
    }
    __forceinline void load_l2gpstore() noexcept {
        if (f_LoadLibraryA) {
            char l2gpstoredll_str[] = "l2gpstore.dll";
            l2gpstoredll = f_LoadLibraryA(l2gpstoredll_str);
        }
    }
    __forceinline void load_l2nacp() noexcept {
        if (f_LoadLibraryA) {
            char l2nacpdll_str[] = "l2nacp.dll";
            l2nacpdll = f_LoadLibraryA(l2nacpdll_str);
        }
    }
    __forceinline void load_L2SecHC() noexcept {
        if (f_LoadLibraryA) {
            char L2SecHCdll_str[] = "L2SecHC.dll";
            L2SecHCdll = f_LoadLibraryA(L2SecHCdll_str);
        }
    }
    __forceinline void load_LangCleanupSysprepAction() noexcept {
        if (f_LoadLibraryA) {
            char LangCleanupSysprepActiondll_str[] = "LangCleanupSysprepAction.dll";
            LangCleanupSysprepActiondll = f_LoadLibraryA(LangCleanupSysprepActiondll_str);
        }
    }
    __forceinline void load_LanguageComponentsInstaller() noexcept {
        if (f_LoadLibraryA) {
            char LanguageComponentsInstallerdll_str[] = "LanguageComponentsInstaller.dll";
            LanguageComponentsInstallerdll = f_LoadLibraryA(LanguageComponentsInstallerdll_str);
        }
    }
    __forceinline void load_LanguageOverlayServer() noexcept {
        if (f_LoadLibraryA) {
            char LanguageOverlayServerdll_str[] = "LanguageOverlayServer.dll";
            LanguageOverlayServerdll = f_LoadLibraryA(LanguageOverlayServerdll_str);
        }
    }
    __forceinline void load_LanguageOverlayUtil() noexcept {
        if (f_LoadLibraryA) {
            char LanguageOverlayUtildll_str[] = "LanguageOverlayUtil.dll";
            LanguageOverlayUtildll = f_LoadLibraryA(LanguageOverlayUtildll_str);
        }
    }
    __forceinline void load_LanguagePackDiskCleanup() noexcept {
        if (f_LoadLibraryA) {
            char LanguagePackDiskCleanupdll_str[] = "LanguagePackDiskCleanup.dll";
            LanguagePackDiskCleanupdll = f_LoadLibraryA(LanguagePackDiskCleanupdll_str);
        }
    }
    __forceinline void load_LanguagePackManagementCSP() noexcept {
        if (f_LoadLibraryA) {
            char LanguagePackManagementCSPdll_str[] = "LanguagePackManagementCSP.dll";
            LanguagePackManagementCSPdll = f_LoadLibraryA(LanguagePackManagementCSPdll_str);
        }
    }
    __forceinline void load_laps() noexcept {
        if (f_LoadLibraryA) {
            char lapsdll_str[] = "laps.dll";
            lapsdll = f_LoadLibraryA(lapsdll_str);
        }
    }
    __forceinline void load_lapscsp() noexcept {
        if (f_LoadLibraryA) {
            char lapscspdll_str[] = "lapscsp.dll";
            lapscspdll = f_LoadLibraryA(lapscspdll_str);
        }
    }
    __forceinline void load_LegacyNetUX() noexcept {
        if (f_LoadLibraryA) {
            char LegacyNetUXdll_str[] = "LegacyNetUX.dll";
            LegacyNetUXdll = f_LoadLibraryA(LegacyNetUXdll_str);
        }
    }
    __forceinline void load_LegacySystemSettings() noexcept {
        if (f_LoadLibraryA) {
            char LegacySystemSettingsdll_str[] = "LegacySystemSettings.dll";
            LegacySystemSettingsdll = f_LoadLibraryA(LegacySystemSettingsdll_str);
        }
    }
    __forceinline void load_lfsvc() noexcept {
        if (f_LoadLibraryA) {
            char lfsvcdll_str[] = "lfsvc.dll";
            lfsvcdll = f_LoadLibraryA(lfsvcdll_str);
        }
    }
    __forceinline void load_libcrypto() noexcept {
        if (f_LoadLibraryA) {
            char libcryptodll_str[] = "libcrypto.dll";
            libcryptodll = f_LoadLibraryA(libcryptodll_str);
        }
    }
    __forceinline void load_libmfxhw64() noexcept {
        if (f_LoadLibraryA) {
            char libmfxhw64dll_str[] = "libmfxhw64.dll";
            libmfxhw64dll = f_LoadLibraryA(libmfxhw64dll_str);
        }
    }
    __forceinline void load_libomp140x86_64() noexcept {
        if (f_LoadLibraryA) {
            char libomp140x86_64dll_str[] = "libomp140.x86_64.dll";
            libomp140x86_64dll = f_LoadLibraryA(libomp140x86_64dll_str);
        }
    }
    __forceinline void load_libomp140dx86_64() noexcept {
        if (f_LoadLibraryA) {
            char libomp140dx86_64dll_str[] = "libomp140d.x86_64.dll";
            libomp140dx86_64dll = f_LoadLibraryA(libomp140dx86_64dll_str);
        }
    }
    __forceinline void load_LicenseManager() noexcept {
        if (f_LoadLibraryA) {
            char LicenseManagerdll_str[] = "LicenseManager.dll";
            LicenseManagerdll = f_LoadLibraryA(LicenseManagerdll_str);
        }
    }
    __forceinline void load_LicenseManagerApi() noexcept {
        if (f_LoadLibraryA) {
            char LicenseManagerApidll_str[] = "LicenseManagerApi.dll";
            LicenseManagerApidll = f_LoadLibraryA(LicenseManagerApidll_str);
        }
    }
    __forceinline void load_LicenseManagerSvc() noexcept {
        if (f_LoadLibraryA) {
            char LicenseManagerSvcdll_str[] = "LicenseManagerSvc.dll";
            LicenseManagerSvcdll = f_LoadLibraryA(LicenseManagerSvcdll_str);
        }
    }
    __forceinline void load_licenseprotection() noexcept {
        if (f_LoadLibraryA) {
            char licenseprotectiondll_str[] = "licenseprotection.dll";
            licenseprotectiondll = f_LoadLibraryA(licenseprotectiondll_str);
        }
    }
    __forceinline void load_LicensingCSP() noexcept {
        if (f_LoadLibraryA) {
            char LicensingCSPdll_str[] = "LicensingCSP.dll";
            LicensingCSPdll = f_LoadLibraryA(LicensingCSPdll_str);
        }
    }
    __forceinline void load_LicensingDiagSpp() noexcept {
        if (f_LoadLibraryA) {
            char LicensingDiagSppdll_str[] = "LicensingDiagSpp.dll";
            LicensingDiagSppdll = f_LoadLibraryA(LicensingDiagSppdll_str);
        }
    }
    __forceinline void load_LicensingWinRT() noexcept {
        if (f_LoadLibraryA) {
            char LicensingWinRTdll_str[] = "LicensingWinRT.dll";
            LicensingWinRTdll = f_LoadLibraryA(LicensingWinRTdll_str);
        }
    }
    __forceinline void load_licmgr10() noexcept {
        if (f_LoadLibraryA) {
            char licmgr10dll_str[] = "licmgr10.dll";
            licmgr10dll = f_LoadLibraryA(licmgr10dll_str);
        }
    }
    __forceinline void load_linkinfo() noexcept {
        if (f_LoadLibraryA) {
            char linkinfodll_str[] = "linkinfo.dll";
            linkinfodll = f_LoadLibraryA(linkinfodll_str);
        }
    }
    __forceinline void load_lltdapi() noexcept {
        if (f_LoadLibraryA) {
            char lltdapidll_str[] = "lltdapi.dll";
            lltdapidll = f_LoadLibraryA(lltdapidll_str);
        }
    }
    __forceinline void load_lltdres() noexcept {
        if (f_LoadLibraryA) {
            char lltdresdll_str[] = "lltdres.dll";
            lltdresdll = f_LoadLibraryA(lltdresdll_str);
        }
    }
    __forceinline void load_lltdsvc() noexcept {
        if (f_LoadLibraryA) {
            char lltdsvcdll_str[] = "lltdsvc.dll";
            lltdsvcdll = f_LoadLibraryA(lltdsvcdll_str);
        }
    }
    __forceinline void load_lmhsvc() noexcept {
        if (f_LoadLibraryA) {
            char lmhsvcdll_str[] = "lmhsvc.dll";
            lmhsvcdll = f_LoadLibraryA(lmhsvcdll_str);
        }
    }
    __forceinline void load_loadperf() noexcept {
        if (f_LoadLibraryA) {
            char loadperfdll_str[] = "loadperf.dll";
            loadperfdll = f_LoadLibraryA(loadperfdll_str);
        }
    }
    __forceinline void load_localsec() noexcept {
        if (f_LoadLibraryA) {
            char localsecdll_str[] = "localsec.dll";
            localsecdll = f_LoadLibraryA(localsecdll_str);
        }
    }
    __forceinline void load_localspl() noexcept {
        if (f_LoadLibraryA) {
            char localspldll_str[] = "localspl.dll";
            localspldll = f_LoadLibraryA(localspldll_str);
        }
    }
    __forceinline void load_localui() noexcept {
        if (f_LoadLibraryA) {
            char localuidll_str[] = "localui.dll";
            localuidll = f_LoadLibraryA(localuidll_str);
        }
    }
    __forceinline void load_LocationApi() noexcept {
        if (f_LoadLibraryA) {
            char LocationApidll_str[] = "LocationApi.dll";
            LocationApidll = f_LoadLibraryA(LocationApidll_str);
        }
    }
    __forceinline void load_LocationFramework() noexcept {
        if (f_LoadLibraryA) {
            char LocationFrameworkdll_str[] = "LocationFramework.dll";
            LocationFrameworkdll = f_LoadLibraryA(LocationFrameworkdll_str);
        }
    }
    __forceinline void load_LocationFrameworkInternalPS() noexcept {
        if (f_LoadLibraryA) {
            char LocationFrameworkInternalPSdll_str[] = "LocationFrameworkInternalPS.dll";
            LocationFrameworkInternalPSdll = f_LoadLibraryA(LocationFrameworkInternalPSdll_str);
        }
    }
    __forceinline void load_LocationFrameworkPS() noexcept {
        if (f_LoadLibraryA) {
            char LocationFrameworkPSdll_str[] = "LocationFrameworkPS.dll";
            LocationFrameworkPSdll = f_LoadLibraryA(LocationFrameworkPSdll_str);
        }
    }
    __forceinline void load_LocationWinPalMisc() noexcept {
        if (f_LoadLibraryA) {
            char LocationWinPalMiscdll_str[] = "LocationWinPalMisc.dll";
            LocationWinPalMiscdll = f_LoadLibraryA(LocationWinPalMiscdll_str);
        }
    }
    __forceinline void load_LockAppBroker() noexcept {
        if (f_LoadLibraryA) {
            char LockAppBrokerdll_str[] = "LockAppBroker.dll";
            LockAppBrokerdll = f_LoadLibraryA(LockAppBrokerdll_str);
        }
    }
    __forceinline void load_LockController() noexcept {
        if (f_LoadLibraryA) {
            char LockControllerdll_str[] = "LockController.dll";
            LockControllerdll = f_LoadLibraryA(LockControllerdll_str);
        }
    }
    __forceinline void load_LockHostingFramework() noexcept {
        if (f_LoadLibraryA) {
            char LockHostingFrameworkdll_str[] = "LockHostingFramework.dll";
            LockHostingFrameworkdll = f_LoadLibraryA(LockHostingFrameworkdll_str);
        }
    }
    __forceinline void load_LockScreenContent() noexcept {
        if (f_LoadLibraryA) {
            char LockScreenContentdll_str[] = "LockScreenContent.dll";
            LockScreenContentdll = f_LoadLibraryA(LockScreenContentdll_str);
        }
    }
    __forceinline void load_LockScreenContentHost() noexcept {
        if (f_LoadLibraryA) {
            char LockScreenContentHostdll_str[] = "LockScreenContentHost.dll";
            LockScreenContentHostdll = f_LoadLibraryA(LockScreenContentHostdll_str);
        }
    }
    __forceinline void load_LockScreenData() noexcept {
        if (f_LoadLibraryA) {
            char LockScreenDatadll_str[] = "LockScreenData.dll";
            LockScreenDatadll = f_LoadLibraryA(LockScreenDatadll_str);
        }
    }
    __forceinline void load_loghours() noexcept {
        if (f_LoadLibraryA) {
            char loghoursdll_str[] = "loghours.dll";
            loghoursdll = f_LoadLibraryA(loghoursdll_str);
        }
    }
    __forceinline void load_logoncli() noexcept {
        if (f_LoadLibraryA) {
            char logonclidll_str[] = "logoncli.dll";
            logonclidll = f_LoadLibraryA(logonclidll_str);
        }
    }
    __forceinline void load_LogonController() noexcept {
        if (f_LoadLibraryA) {
            char LogonControllerdll_str[] = "LogonController.dll";
            LogonControllerdll = f_LoadLibraryA(LogonControllerdll_str);
        }
    }
    __forceinline void load_lpasvc() noexcept {
        if (f_LoadLibraryA) {
            char lpasvcdll_str[] = "lpasvc.dll";
            lpasvcdll = f_LoadLibraryA(lpasvcdll_str);
        }
    }
    __forceinline void load_lpk() noexcept {
        if (f_LoadLibraryA) {
            char lpkdll_str[] = "lpk.dll";
            lpkdll = f_LoadLibraryA(lpkdll_str);
        }
    }
    __forceinline void load_lpksetupproxyserv() noexcept {
        if (f_LoadLibraryA) {
            char lpksetupproxyservdll_str[] = "lpksetupproxyserv.dll";
            lpksetupproxyservdll = f_LoadLibraryA(lpksetupproxyservdll_str);
        }
    }
    __forceinline void load_lsaadt() noexcept {
        if (f_LoadLibraryA) {
            char lsaadtdll_str[] = "lsaadt.dll";
            lsaadtdll = f_LoadLibraryA(lsaadtdll_str);
        }
    }
    __forceinline void load_lsasrv() noexcept {
        if (f_LoadLibraryA) {
            char lsasrvdll_str[] = "lsasrv.dll";
            lsasrvdll = f_LoadLibraryA(lsasrvdll_str);
        }
    }
    __forceinline void load_LSCSHostPolicy() noexcept {
        if (f_LoadLibraryA) {
            char LSCSHostPolicydll_str[] = "LSCSHostPolicy.dll";
            LSCSHostPolicydll = f_LoadLibraryA(LSCSHostPolicydll_str);
        }
    }
    __forceinline void load_lsm() noexcept {
        if (f_LoadLibraryA) {
            char lsmdll_str[] = "lsm.dll";
            lsmdll = f_LoadLibraryA(lsmdll_str);
        }
    }
    __forceinline void load_lsmproxy() noexcept {
        if (f_LoadLibraryA) {
            char lsmproxydll_str[] = "lsmproxy.dll";
            lsmproxydll = f_LoadLibraryA(lsmproxydll_str);
        }
    }
    __forceinline void load_lstelemetry() noexcept {
        if (f_LoadLibraryA) {
            char lstelemetrydll_str[] = "lstelemetry.dll";
            lstelemetrydll = f_LoadLibraryA(lstelemetrydll_str);
        }
    }
    __forceinline void load_luiapi() noexcept {
        if (f_LoadLibraryA) {
            char luiapidll_str[] = "luiapi.dll";
            luiapidll = f_LoadLibraryA(luiapidll_str);
        }
    }
    __forceinline void load_lxutil() noexcept {
        if (f_LoadLibraryA) {
            char lxutildll_str[] = "lxutil.dll";
            lxutildll = f_LoadLibraryA(lxutildll_str);
        }
    }
    __forceinline void load_lz32() noexcept {
        if (f_LoadLibraryA) {
            char lz32dll_str[] = "lz32.dll";
            lz32dll = f_LoadLibraryA(lz32dll_str);
        }
    }
    __forceinline void load_Magnification() noexcept {
        if (f_LoadLibraryA) {
            char Magnificationdll_str[] = "Magnification.dll";
            Magnificationdll = f_LoadLibraryA(Magnificationdll_str);
        }
    }
    __forceinline void load_MaintenanceUI() noexcept {
        if (f_LoadLibraryA) {
            char MaintenanceUIdll_str[] = "MaintenanceUI.dll";
            MaintenanceUIdll = f_LoadLibraryA(MaintenanceUIdll_str);
        }
    }
    __forceinline void load_ManageCI() noexcept {
        if (f_LoadLibraryA) {
            char ManageCIdll_str[] = "ManageCI.dll";
            ManageCIdll = f_LoadLibraryA(ManageCIdll_str);
        }
    }
    __forceinline void load_MapConfiguration() noexcept {
        if (f_LoadLibraryA) {
            char MapConfigurationdll_str[] = "MapConfiguration.dll";
            MapConfigurationdll = f_LoadLibraryA(MapConfigurationdll_str);
        }
    }
    __forceinline void load_MapControlCore() noexcept {
        if (f_LoadLibraryA) {
            char MapControlCoredll_str[] = "MapControlCore.dll";
            MapControlCoredll = f_LoadLibraryA(MapControlCoredll_str);
        }
    }
    __forceinline void load_MapControlStringsRes() noexcept {
        if (f_LoadLibraryA) {
            char MapControlStringsResdll_str[] = "MapControlStringsRes.dll";
            MapControlStringsResdll = f_LoadLibraryA(MapControlStringsResdll_str);
        }
    }
    __forceinline void load_MapGeocoder() noexcept {
        if (f_LoadLibraryA) {
            char MapGeocoderdll_str[] = "MapGeocoder.dll";
            MapGeocoderdll = f_LoadLibraryA(MapGeocoderdll_str);
        }
    }
    __forceinline void load_mapi32() noexcept {
        if (f_LoadLibraryA) {
            char mapi32dll_str[] = "mapi32.dll";
            mapi32dll = f_LoadLibraryA(mapi32dll_str);
        }
    }
    __forceinline void load_mapistub() noexcept {
        if (f_LoadLibraryA) {
            char mapistubdll_str[] = "mapistub.dll";
            mapistubdll = f_LoadLibraryA(mapistubdll_str);
        }
    }
    __forceinline void load_MapRouter() noexcept {
        if (f_LoadLibraryA) {
            char MapRouterdll_str[] = "MapRouter.dll";
            MapRouterdll = f_LoadLibraryA(MapRouterdll_str);
        }
    }
    __forceinline void load_MapsBtSvc() noexcept {
        if (f_LoadLibraryA) {
            char MapsBtSvcdll_str[] = "MapsBtSvc.dll";
            MapsBtSvcdll = f_LoadLibraryA(MapsBtSvcdll_str);
        }
    }
    __forceinline void load_MapsBtSvcProxy() noexcept {
        if (f_LoadLibraryA) {
            char MapsBtSvcProxydll_str[] = "MapsBtSvcProxy.dll";
            MapsBtSvcProxydll = f_LoadLibraryA(MapsBtSvcProxydll_str);
        }
    }
    __forceinline void load_MapsCSP() noexcept {
        if (f_LoadLibraryA) {
            char MapsCSPdll_str[] = "MapsCSP.dll";
            MapsCSPdll = f_LoadLibraryA(MapsCSPdll_str);
        }
    }
    __forceinline void load_MapsStore() noexcept {
        if (f_LoadLibraryA) {
            char MapsStoredll_str[] = "MapsStore.dll";
            MapsStoredll = f_LoadLibraryA(MapsStoredll_str);
        }
    }
    __forceinline void load_mapstoasttask() noexcept {
        if (f_LoadLibraryA) {
            char mapstoasttaskdll_str[] = "mapstoasttask.dll";
            mapstoasttaskdll = f_LoadLibraryA(mapstoasttaskdll_str);
        }
    }
    __forceinline void load_mapsupdatetask() noexcept {
        if (f_LoadLibraryA) {
            char mapsupdatetaskdll_str[] = "mapsupdatetask.dll";
            mapsupdatetaskdll = f_LoadLibraryA(mapsupdatetaskdll_str);
        }
    }
    __forceinline void load_MbaeApi() noexcept {
        if (f_LoadLibraryA) {
            char MbaeApidll_str[] = "MbaeApi.dll";
            MbaeApidll = f_LoadLibraryA(MbaeApidll_str);
        }
    }
    __forceinline void load_MbaeApiPublic() noexcept {
        if (f_LoadLibraryA) {
            char MbaeApiPublicdll_str[] = "MbaeApiPublic.dll";
            MbaeApiPublicdll = f_LoadLibraryA(MbaeApiPublicdll_str);
        }
    }
    __forceinline void load_MBMediaManager() noexcept {
        if (f_LoadLibraryA) {
            char MBMediaManagerdll_str[] = "MBMediaManager.dll";
            MBMediaManagerdll = f_LoadLibraryA(MBMediaManagerdll_str);
        }
    }
    __forceinline void load_mbsmsapi() noexcept {
        if (f_LoadLibraryA) {
            char mbsmsapidll_str[] = "mbsmsapi.dll";
            mbsmsapidll = f_LoadLibraryA(mbsmsapidll_str);
        }
    }
    __forceinline void load_mbussdapi() noexcept {
        if (f_LoadLibraryA) {
            char mbussdapidll_str[] = "mbussdapi.dll";
            mbussdapidll = f_LoadLibraryA(mbussdapidll_str);
        }
    }
    __forceinline void load_MCCSEngineShared() noexcept {
        if (f_LoadLibraryA) {
            char MCCSEngineShareddll_str[] = "MCCSEngineShared.dll";
            MCCSEngineShareddll = f_LoadLibraryA(MCCSEngineShareddll_str);
        }
    }
    __forceinline void load_MCCSPal() noexcept {
        if (f_LoadLibraryA) {
            char MCCSPaldll_str[] = "MCCSPal.dll";
            MCCSPaldll = f_LoadLibraryA(MCCSPaldll_str);
        }
    }
    __forceinline void load_mciavi32() noexcept {
        if (f_LoadLibraryA) {
            char mciavi32dll_str[] = "mciavi32.dll";
            mciavi32dll = f_LoadLibraryA(mciavi32dll_str);
        }
    }
    __forceinline void load_mcicda() noexcept {
        if (f_LoadLibraryA) {
            char mcicdadll_str[] = "mcicda.dll";
            mcicdadll = f_LoadLibraryA(mcicdadll_str);
        }
    }
    __forceinline void load_mciqtz32() noexcept {
        if (f_LoadLibraryA) {
            char mciqtz32dll_str[] = "mciqtz32.dll";
            mciqtz32dll = f_LoadLibraryA(mciqtz32dll_str);
        }
    }
    __forceinline void load_mciseq() noexcept {
        if (f_LoadLibraryA) {
            char mciseqdll_str[] = "mciseq.dll";
            mciseqdll = f_LoadLibraryA(mciseqdll_str);
        }
    }
    __forceinline void load_mciwave() noexcept {
        if (f_LoadLibraryA) {
            char mciwavedll_str[] = "mciwave.dll";
            mciwavedll = f_LoadLibraryA(mciwavedll_str);
        }
    }
    __forceinline void load_McpManagementProxy() noexcept {
        if (f_LoadLibraryA) {
            char McpManagementProxydll_str[] = "McpManagementProxy.dll";
            McpManagementProxydll = f_LoadLibraryA(McpManagementProxydll_str);
        }
    }
    __forceinline void load_McpManagementService() noexcept {
        if (f_LoadLibraryA) {
            char McpManagementServicedll_str[] = "McpManagementService.dll";
            McpManagementServicedll = f_LoadLibraryA(McpManagementServicedll_str);
        }
    }
    __forceinline void load_MCRecvSrc() noexcept {
        if (f_LoadLibraryA) {
            char MCRecvSrcdll_str[] = "MCRecvSrc.dll";
            MCRecvSrcdll = f_LoadLibraryA(MCRecvSrcdll_str);
        }
    }
    __forceinline void load_mcupdate_AuthenticAMD() noexcept {
        if (f_LoadLibraryA) {
            char mcupdate_AuthenticAMDdll_str[] = "mcupdate_AuthenticAMD.dll";
            mcupdate_AuthenticAMDdll = f_LoadLibraryA(mcupdate_AuthenticAMDdll_str);
        }
    }
    __forceinline void load_mcupdate_GenuineIntel() noexcept {
        if (f_LoadLibraryA) {
            char mcupdate_GenuineInteldll_str[] = "mcupdate_GenuineIntel.dll";
            mcupdate_GenuineInteldll = f_LoadLibraryA(mcupdate_GenuineInteldll_str);
        }
    }
    __forceinline void load_MdmCommon() noexcept {
        if (f_LoadLibraryA) {
            char MdmCommondll_str[] = "MdmCommon.dll";
            MdmCommondll = f_LoadLibraryA(MdmCommondll_str);
        }
    }
    __forceinline void load_MdmDiagnostics() noexcept {
        if (f_LoadLibraryA) {
            char MdmDiagnosticsdll_str[] = "MdmDiagnostics.dll";
            MdmDiagnosticsdll = f_LoadLibraryA(MdmDiagnosticsdll_str);
        }
    }
    __forceinline void load_mdminst() noexcept {
        if (f_LoadLibraryA) {
            char mdminstdll_str[] = "mdminst.dll";
            mdminstdll = f_LoadLibraryA(mdminstdll_str);
        }
    }
    __forceinline void load_mdmlocalmanagement() noexcept {
        if (f_LoadLibraryA) {
            char mdmlocalmanagementdll_str[] = "mdmlocalmanagement.dll";
            mdmlocalmanagementdll = f_LoadLibraryA(mdmlocalmanagementdll_str);
        }
    }
    __forceinline void load_mdmmigrator() noexcept {
        if (f_LoadLibraryA) {
            char mdmmigratordll_str[] = "mdmmigrator.dll";
            mdmmigratordll = f_LoadLibraryA(mdmmigratordll_str);
        }
    }
    __forceinline void load_mdmpostprocessevaluator() noexcept {
        if (f_LoadLibraryA) {
            char mdmpostprocessevaluatordll_str[] = "mdmpostprocessevaluator.dll";
            mdmpostprocessevaluatordll = f_LoadLibraryA(mdmpostprocessevaluatordll_str);
        }
    }
    __forceinline void load_mdmregistration() noexcept {
        if (f_LoadLibraryA) {
            char mdmregistrationdll_str[] = "mdmregistration.dll";
            mdmregistrationdll = f_LoadLibraryA(mdmregistrationdll_str);
        }
    }
    __forceinline void load_MediaFoundationDefaultPerceptionProvider() noexcept {
        if (f_LoadLibraryA) {
            char MediaFoundationDefaultPerceptionProviderdll_str[] = "MediaFoundation.DefaultPerceptionProvider.dll";
            MediaFoundationDefaultPerceptionProviderdll = f_LoadLibraryA(MediaFoundationDefaultPerceptionProviderdll_str);
        }
    }
    __forceinline void load_MediaFoundationAggregator() noexcept {
        if (f_LoadLibraryA) {
            char MediaFoundationAggregatordll_str[] = "MediaFoundationAggregator.dll";
            MediaFoundationAggregatordll = f_LoadLibraryA(MediaFoundationAggregatordll_str);
        }
    }
    __forceinline void load_MemoryDiagnostic() noexcept {
        if (f_LoadLibraryA) {
            char MemoryDiagnosticdll_str[] = "MemoryDiagnostic.dll";
            MemoryDiagnosticdll = f_LoadLibraryA(MemoryDiagnosticdll_str);
        }
    }
    __forceinline void load_MessagingDataModel2() noexcept {
        if (f_LoadLibraryA) {
            char MessagingDataModel2dll_str[] = "MessagingDataModel2.dll";
            MessagingDataModel2dll = f_LoadLibraryA(MessagingDataModel2dll_str);
        }
    }
    __forceinline void load_MessagingService() noexcept {
        if (f_LoadLibraryA) {
            char MessagingServicedll_str[] = "MessagingService.dll";
            MessagingServicedll = f_LoadLibraryA(MessagingServicedll_str);
        }
    }
    __forceinline void load_mf() noexcept {
        if (f_LoadLibraryA) {
            char mfdll_str[] = "mf.dll";
            mfdll = f_LoadLibraryA(mfdll_str);
        }
    }
    __forceinline void load_mf3216() noexcept {
        if (f_LoadLibraryA) {
            char mf3216dll_str[] = "mf3216.dll";
            mf3216dll = f_LoadLibraryA(mf3216dll_str);
        }
    }
    __forceinline void load_mfAACEnc() noexcept {
        if (f_LoadLibraryA) {
            char mfAACEncdll_str[] = "mfAACEnc.dll";
            mfAACEncdll = f_LoadLibraryA(mfAACEncdll_str);
        }
    }
    __forceinline void load_mfasfsrcsnk() noexcept {
        if (f_LoadLibraryA) {
            char mfasfsrcsnkdll_str[] = "mfasfsrcsnk.dll";
            mfasfsrcsnkdll = f_LoadLibraryA(mfasfsrcsnkdll_str);
        }
    }
    __forceinline void load_mfaudiocnv() noexcept {
        if (f_LoadLibraryA) {
            char mfaudiocnvdll_str[] = "mfaudiocnv.dll";
            mfaudiocnvdll = f_LoadLibraryA(mfaudiocnvdll_str);
        }
    }
    __forceinline void load_mfc100() noexcept {
        if (f_LoadLibraryA) {
            char mfc100dll_str[] = "mfc100.dll";
            mfc100dll = f_LoadLibraryA(mfc100dll_str);
        }
    }
    __forceinline void load_mfc100chs() noexcept {
        if (f_LoadLibraryA) {
            char mfc100chsdll_str[] = "mfc100chs.dll";
            mfc100chsdll = f_LoadLibraryA(mfc100chsdll_str);
        }
    }
    __forceinline void load_mfc100cht() noexcept {
        if (f_LoadLibraryA) {
            char mfc100chtdll_str[] = "mfc100cht.dll";
            mfc100chtdll = f_LoadLibraryA(mfc100chtdll_str);
        }
    }
    __forceinline void load_mfc100deu() noexcept {
        if (f_LoadLibraryA) {
            char mfc100deudll_str[] = "mfc100deu.dll";
            mfc100deudll = f_LoadLibraryA(mfc100deudll_str);
        }
    }
    __forceinline void load_mfc100enu() noexcept {
        if (f_LoadLibraryA) {
            char mfc100enudll_str[] = "mfc100enu.dll";
            mfc100enudll = f_LoadLibraryA(mfc100enudll_str);
        }
    }
    __forceinline void load_mfc100esn() noexcept {
        if (f_LoadLibraryA) {
            char mfc100esndll_str[] = "mfc100esn.dll";
            mfc100esndll = f_LoadLibraryA(mfc100esndll_str);
        }
    }
    __forceinline void load_mfc100fra() noexcept {
        if (f_LoadLibraryA) {
            char mfc100fradll_str[] = "mfc100fra.dll";
            mfc100fradll = f_LoadLibraryA(mfc100fradll_str);
        }
    }
    __forceinline void load_mfc100ita() noexcept {
        if (f_LoadLibraryA) {
            char mfc100itadll_str[] = "mfc100ita.dll";
            mfc100itadll = f_LoadLibraryA(mfc100itadll_str);
        }
    }
    __forceinline void load_mfc100jpn() noexcept {
        if (f_LoadLibraryA) {
            char mfc100jpndll_str[] = "mfc100jpn.dll";
            mfc100jpndll = f_LoadLibraryA(mfc100jpndll_str);
        }
    }
    __forceinline void load_mfc100kor() noexcept {
        if (f_LoadLibraryA) {
            char mfc100kordll_str[] = "mfc100kor.dll";
            mfc100kordll = f_LoadLibraryA(mfc100kordll_str);
        }
    }
    __forceinline void load_mfc100rus() noexcept {
        if (f_LoadLibraryA) {
            char mfc100rusdll_str[] = "mfc100rus.dll";
            mfc100rusdll = f_LoadLibraryA(mfc100rusdll_str);
        }
    }
    __forceinline void load_mfc100u() noexcept {
        if (f_LoadLibraryA) {
            char mfc100udll_str[] = "mfc100u.dll";
            mfc100udll = f_LoadLibraryA(mfc100udll_str);
        }
    }
    __forceinline void load_mfc110() noexcept {
        if (f_LoadLibraryA) {
            char mfc110dll_str[] = "mfc110.dll";
            mfc110dll = f_LoadLibraryA(mfc110dll_str);
        }
    }
    __forceinline void load_mfc110chs() noexcept {
        if (f_LoadLibraryA) {
            char mfc110chsdll_str[] = "mfc110chs.dll";
            mfc110chsdll = f_LoadLibraryA(mfc110chsdll_str);
        }
    }
    __forceinline void load_mfc110cht() noexcept {
        if (f_LoadLibraryA) {
            char mfc110chtdll_str[] = "mfc110cht.dll";
            mfc110chtdll = f_LoadLibraryA(mfc110chtdll_str);
        }
    }
    __forceinline void load_mfc110deu() noexcept {
        if (f_LoadLibraryA) {
            char mfc110deudll_str[] = "mfc110deu.dll";
            mfc110deudll = f_LoadLibraryA(mfc110deudll_str);
        }
    }
    __forceinline void load_mfc110enu() noexcept {
        if (f_LoadLibraryA) {
            char mfc110enudll_str[] = "mfc110enu.dll";
            mfc110enudll = f_LoadLibraryA(mfc110enudll_str);
        }
    }
    __forceinline void load_mfc110esn() noexcept {
        if (f_LoadLibraryA) {
            char mfc110esndll_str[] = "mfc110esn.dll";
            mfc110esndll = f_LoadLibraryA(mfc110esndll_str);
        }
    }
    __forceinline void load_mfc110fra() noexcept {
        if (f_LoadLibraryA) {
            char mfc110fradll_str[] = "mfc110fra.dll";
            mfc110fradll = f_LoadLibraryA(mfc110fradll_str);
        }
    }
    __forceinline void load_mfc110ita() noexcept {
        if (f_LoadLibraryA) {
            char mfc110itadll_str[] = "mfc110ita.dll";
            mfc110itadll = f_LoadLibraryA(mfc110itadll_str);
        }
    }
    __forceinline void load_mfc110jpn() noexcept {
        if (f_LoadLibraryA) {
            char mfc110jpndll_str[] = "mfc110jpn.dll";
            mfc110jpndll = f_LoadLibraryA(mfc110jpndll_str);
        }
    }
    __forceinline void load_mfc110kor() noexcept {
        if (f_LoadLibraryA) {
            char mfc110kordll_str[] = "mfc110kor.dll";
            mfc110kordll = f_LoadLibraryA(mfc110kordll_str);
        }
    }
    __forceinline void load_mfc110rus() noexcept {
        if (f_LoadLibraryA) {
            char mfc110rusdll_str[] = "mfc110rus.dll";
            mfc110rusdll = f_LoadLibraryA(mfc110rusdll_str);
        }
    }
    __forceinline void load_mfc110u() noexcept {
        if (f_LoadLibraryA) {
            char mfc110udll_str[] = "mfc110u.dll";
            mfc110udll = f_LoadLibraryA(mfc110udll_str);
        }
    }
    __forceinline void load_mfc120() noexcept {
        if (f_LoadLibraryA) {
            char mfc120dll_str[] = "mfc120.dll";
            mfc120dll = f_LoadLibraryA(mfc120dll_str);
        }
    }
    __forceinline void load_mfc120chs() noexcept {
        if (f_LoadLibraryA) {
            char mfc120chsdll_str[] = "mfc120chs.dll";
            mfc120chsdll = f_LoadLibraryA(mfc120chsdll_str);
        }
    }
    __forceinline void load_mfc120cht() noexcept {
        if (f_LoadLibraryA) {
            char mfc120chtdll_str[] = "mfc120cht.dll";
            mfc120chtdll = f_LoadLibraryA(mfc120chtdll_str);
        }
    }
    __forceinline void load_mfc120deu() noexcept {
        if (f_LoadLibraryA) {
            char mfc120deudll_str[] = "mfc120deu.dll";
            mfc120deudll = f_LoadLibraryA(mfc120deudll_str);
        }
    }
    __forceinline void load_mfc120enu() noexcept {
        if (f_LoadLibraryA) {
            char mfc120enudll_str[] = "mfc120enu.dll";
            mfc120enudll = f_LoadLibraryA(mfc120enudll_str);
        }
    }
    __forceinline void load_mfc120esn() noexcept {
        if (f_LoadLibraryA) {
            char mfc120esndll_str[] = "mfc120esn.dll";
            mfc120esndll = f_LoadLibraryA(mfc120esndll_str);
        }
    }
    __forceinline void load_mfc120fra() noexcept {
        if (f_LoadLibraryA) {
            char mfc120fradll_str[] = "mfc120fra.dll";
            mfc120fradll = f_LoadLibraryA(mfc120fradll_str);
        }
    }
    __forceinline void load_mfc120ita() noexcept {
        if (f_LoadLibraryA) {
            char mfc120itadll_str[] = "mfc120ita.dll";
            mfc120itadll = f_LoadLibraryA(mfc120itadll_str);
        }
    }
    __forceinline void load_mfc120jpn() noexcept {
        if (f_LoadLibraryA) {
            char mfc120jpndll_str[] = "mfc120jpn.dll";
            mfc120jpndll = f_LoadLibraryA(mfc120jpndll_str);
        }
    }
    __forceinline void load_mfc120kor() noexcept {
        if (f_LoadLibraryA) {
            char mfc120kordll_str[] = "mfc120kor.dll";
            mfc120kordll = f_LoadLibraryA(mfc120kordll_str);
        }
    }
    __forceinline void load_mfc120rus() noexcept {
        if (f_LoadLibraryA) {
            char mfc120rusdll_str[] = "mfc120rus.dll";
            mfc120rusdll = f_LoadLibraryA(mfc120rusdll_str);
        }
    }
    __forceinline void load_mfc120u() noexcept {
        if (f_LoadLibraryA) {
            char mfc120udll_str[] = "mfc120u.dll";
            mfc120udll = f_LoadLibraryA(mfc120udll_str);
        }
    }
    __forceinline void load_mfc140() noexcept {
        if (f_LoadLibraryA) {
            char mfc140dll_str[] = "mfc140.dll";
            mfc140dll = f_LoadLibraryA(mfc140dll_str);
        }
    }
    __forceinline void load_mfc140chs() noexcept {
        if (f_LoadLibraryA) {
            char mfc140chsdll_str[] = "mfc140chs.dll";
            mfc140chsdll = f_LoadLibraryA(mfc140chsdll_str);
        }
    }
    __forceinline void load_mfc140cht() noexcept {
        if (f_LoadLibraryA) {
            char mfc140chtdll_str[] = "mfc140cht.dll";
            mfc140chtdll = f_LoadLibraryA(mfc140chtdll_str);
        }
    }
    __forceinline void load_mfc140d() noexcept {
        if (f_LoadLibraryA) {
            char mfc140ddll_str[] = "mfc140d.dll";
            mfc140ddll = f_LoadLibraryA(mfc140ddll_str);
        }
    }
    __forceinline void load_mfc140deu() noexcept {
        if (f_LoadLibraryA) {
            char mfc140deudll_str[] = "mfc140deu.dll";
            mfc140deudll = f_LoadLibraryA(mfc140deudll_str);
        }
    }
    __forceinline void load_mfc140enu() noexcept {
        if (f_LoadLibraryA) {
            char mfc140enudll_str[] = "mfc140enu.dll";
            mfc140enudll = f_LoadLibraryA(mfc140enudll_str);
        }
    }
    __forceinline void load_mfc140esn() noexcept {
        if (f_LoadLibraryA) {
            char mfc140esndll_str[] = "mfc140esn.dll";
            mfc140esndll = f_LoadLibraryA(mfc140esndll_str);
        }
    }
    __forceinline void load_mfc140fra() noexcept {
        if (f_LoadLibraryA) {
            char mfc140fradll_str[] = "mfc140fra.dll";
            mfc140fradll = f_LoadLibraryA(mfc140fradll_str);
        }
    }
    __forceinline void load_mfc140ita() noexcept {
        if (f_LoadLibraryA) {
            char mfc140itadll_str[] = "mfc140ita.dll";
            mfc140itadll = f_LoadLibraryA(mfc140itadll_str);
        }
    }
    __forceinline void load_mfc140jpn() noexcept {
        if (f_LoadLibraryA) {
            char mfc140jpndll_str[] = "mfc140jpn.dll";
            mfc140jpndll = f_LoadLibraryA(mfc140jpndll_str);
        }
    }
    __forceinline void load_mfc140kor() noexcept {
        if (f_LoadLibraryA) {
            char mfc140kordll_str[] = "mfc140kor.dll";
            mfc140kordll = f_LoadLibraryA(mfc140kordll_str);
        }
    }
    __forceinline void load_mfc140rus() noexcept {
        if (f_LoadLibraryA) {
            char mfc140rusdll_str[] = "mfc140rus.dll";
            mfc140rusdll = f_LoadLibraryA(mfc140rusdll_str);
        }
    }
    __forceinline void load_mfc140u() noexcept {
        if (f_LoadLibraryA) {
            char mfc140udll_str[] = "mfc140u.dll";
            mfc140udll = f_LoadLibraryA(mfc140udll_str);
        }
    }
    __forceinline void load_mfc140ud() noexcept {
        if (f_LoadLibraryA) {
            char mfc140uddll_str[] = "mfc140ud.dll";
            mfc140uddll = f_LoadLibraryA(mfc140uddll_str);
        }
    }
    __forceinline void load_mfc42() noexcept {
        if (f_LoadLibraryA) {
            char mfc42dll_str[] = "mfc42.dll";
            mfc42dll = f_LoadLibraryA(mfc42dll_str);
        }
    }
    __forceinline void load_mfc42u() noexcept {
        if (f_LoadLibraryA) {
            char mfc42udll_str[] = "mfc42u.dll";
            mfc42udll = f_LoadLibraryA(mfc42udll_str);
        }
    }
    __forceinline void load_MFCaptureEngine() noexcept {
        if (f_LoadLibraryA) {
            char MFCaptureEnginedll_str[] = "MFCaptureEngine.dll";
            MFCaptureEnginedll = f_LoadLibraryA(MFCaptureEnginedll_str);
        }
    }
    __forceinline void load_mfcm100() noexcept {
        if (f_LoadLibraryA) {
            char mfcm100dll_str[] = "mfcm100.dll";
            mfcm100dll = f_LoadLibraryA(mfcm100dll_str);
        }
    }
    __forceinline void load_mfcm100u() noexcept {
        if (f_LoadLibraryA) {
            char mfcm100udll_str[] = "mfcm100u.dll";
            mfcm100udll = f_LoadLibraryA(mfcm100udll_str);
        }
    }
    __forceinline void load_mfcm110() noexcept {
        if (f_LoadLibraryA) {
            char mfcm110dll_str[] = "mfcm110.dll";
            mfcm110dll = f_LoadLibraryA(mfcm110dll_str);
        }
    }
    __forceinline void load_mfcm110u() noexcept {
        if (f_LoadLibraryA) {
            char mfcm110udll_str[] = "mfcm110u.dll";
            mfcm110udll = f_LoadLibraryA(mfcm110udll_str);
        }
    }
    __forceinline void load_mfcm120() noexcept {
        if (f_LoadLibraryA) {
            char mfcm120dll_str[] = "mfcm120.dll";
            mfcm120dll = f_LoadLibraryA(mfcm120dll_str);
        }
    }
    __forceinline void load_mfcm120u() noexcept {
        if (f_LoadLibraryA) {
            char mfcm120udll_str[] = "mfcm120u.dll";
            mfcm120udll = f_LoadLibraryA(mfcm120udll_str);
        }
    }
    __forceinline void load_mfcm140() noexcept {
        if (f_LoadLibraryA) {
            char mfcm140dll_str[] = "mfcm140.dll";
            mfcm140dll = f_LoadLibraryA(mfcm140dll_str);
        }
    }
    __forceinline void load_mfcm140d() noexcept {
        if (f_LoadLibraryA) {
            char mfcm140ddll_str[] = "mfcm140d.dll";
            mfcm140ddll = f_LoadLibraryA(mfcm140ddll_str);
        }
    }
    __forceinline void load_mfcm140u() noexcept {
        if (f_LoadLibraryA) {
            char mfcm140udll_str[] = "mfcm140u.dll";
            mfcm140udll = f_LoadLibraryA(mfcm140udll_str);
        }
    }
    __forceinline void load_mfcm140ud() noexcept {
        if (f_LoadLibraryA) {
            char mfcm140uddll_str[] = "mfcm140ud.dll";
            mfcm140uddll = f_LoadLibraryA(mfcm140uddll_str);
        }
    }
    __forceinline void load_mfcore() noexcept {
        if (f_LoadLibraryA) {
            char mfcoredll_str[] = "mfcore.dll";
            mfcoredll = f_LoadLibraryA(mfcoredll_str);
        }
    }
    __forceinline void load_mfcsubs() noexcept {
        if (f_LoadLibraryA) {
            char mfcsubsdll_str[] = "mfcsubs.dll";
            mfcsubsdll = f_LoadLibraryA(mfcsubsdll_str);
        }
    }
    __forceinline void load_mfds() noexcept {
        if (f_LoadLibraryA) {
            char mfdsdll_str[] = "mfds.dll";
            mfdsdll = f_LoadLibraryA(mfdsdll_str);
        }
    }
    __forceinline void load_mfdvdec() noexcept {
        if (f_LoadLibraryA) {
            char mfdvdecdll_str[] = "mfdvdec.dll";
            mfdvdecdll = f_LoadLibraryA(mfdvdecdll_str);
        }
    }
    __forceinline void load_mferror() noexcept {
        if (f_LoadLibraryA) {
            char mferrordll_str[] = "mferror.dll";
            mferrordll = f_LoadLibraryA(mferrordll_str);
        }
    }
    __forceinline void load_mfh263enc() noexcept {
        if (f_LoadLibraryA) {
            char mfh263encdll_str[] = "mfh263enc.dll";
            mfh263encdll = f_LoadLibraryA(mfh263encdll_str);
        }
    }
    __forceinline void load_mfh264enc() noexcept {
        if (f_LoadLibraryA) {
            char mfh264encdll_str[] = "mfh264enc.dll";
            mfh264encdll = f_LoadLibraryA(mfh264encdll_str);
        }
    }
    __forceinline void load_mfksproxy() noexcept {
        if (f_LoadLibraryA) {
            char mfksproxydll_str[] = "mfksproxy.dll";
            mfksproxydll = f_LoadLibraryA(mfksproxydll_str);
        }
    }
    __forceinline void load_MFMediaEngine() noexcept {
        if (f_LoadLibraryA) {
            char MFMediaEnginedll_str[] = "MFMediaEngine.dll";
            MFMediaEnginedll = f_LoadLibraryA(MFMediaEnginedll_str);
        }
    }
    __forceinline void load_mfmjpegdec() noexcept {
        if (f_LoadLibraryA) {
            char mfmjpegdecdll_str[] = "mfmjpegdec.dll";
            mfmjpegdecdll = f_LoadLibraryA(mfmjpegdecdll_str);
        }
    }
    __forceinline void load_mfmkvsrcsnk() noexcept {
        if (f_LoadLibraryA) {
            char mfmkvsrcsnkdll_str[] = "mfmkvsrcsnk.dll";
            mfmkvsrcsnkdll = f_LoadLibraryA(mfmkvsrcsnkdll_str);
        }
    }
    __forceinline void load_mfmp4srcsnk() noexcept {
        if (f_LoadLibraryA) {
            char mfmp4srcsnkdll_str[] = "mfmp4srcsnk.dll";
            mfmp4srcsnkdll = f_LoadLibraryA(mfmp4srcsnkdll_str);
        }
    }
    __forceinline void load_mfmpeg2srcsnk() noexcept {
        if (f_LoadLibraryA) {
            char mfmpeg2srcsnkdll_str[] = "mfmpeg2srcsnk.dll";
            mfmpeg2srcsnkdll = f_LoadLibraryA(mfmpeg2srcsnkdll_str);
        }
    }
    __forceinline void load_mfnetcore() noexcept {
        if (f_LoadLibraryA) {
            char mfnetcoredll_str[] = "mfnetcore.dll";
            mfnetcoredll = f_LoadLibraryA(mfnetcoredll_str);
        }
    }
    __forceinline void load_mfnetsrc() noexcept {
        if (f_LoadLibraryA) {
            char mfnetsrcdll_str[] = "mfnetsrc.dll";
            mfnetsrcdll = f_LoadLibraryA(mfnetsrcdll_str);
        }
    }
    __forceinline void load_mfperfhelper() noexcept {
        if (f_LoadLibraryA) {
            char mfperfhelperdll_str[] = "mfperfhelper.dll";
            mfperfhelperdll = f_LoadLibraryA(mfperfhelperdll_str);
        }
    }
    __forceinline void load_mfplat() noexcept {
        if (f_LoadLibraryA) {
            char mfplatdll_str[] = "mfplat.dll";
            mfplatdll = f_LoadLibraryA(mfplatdll_str);
        }
    }
    __forceinline void load_MFPlay() noexcept {
        if (f_LoadLibraryA) {
            char MFPlaydll_str[] = "MFPlay.dll";
            MFPlaydll = f_LoadLibraryA(MFPlaydll_str);
        }
    }
    __forceinline void load_mfps() noexcept {
        if (f_LoadLibraryA) {
            char mfpsdll_str[] = "mfps.dll";
            mfpsdll = f_LoadLibraryA(mfpsdll_str);
        }
    }
    __forceinline void load_mfreadwrite() noexcept {
        if (f_LoadLibraryA) {
            char mfreadwritedll_str[] = "mfreadwrite.dll";
            mfreadwritedll = f_LoadLibraryA(mfreadwritedll_str);
        }
    }
    __forceinline void load_mfsensorgroup() noexcept {
        if (f_LoadLibraryA) {
            char mfsensorgroupdll_str[] = "mfsensorgroup.dll";
            mfsensorgroupdll = f_LoadLibraryA(mfsensorgroupdll_str);
        }
    }
    __forceinline void load_mfsrcsnk() noexcept {
        if (f_LoadLibraryA) {
            char mfsrcsnkdll_str[] = "mfsrcsnk.dll";
            mfsrcsnkdll = f_LoadLibraryA(mfsrcsnkdll_str);
        }
    }
    __forceinline void load_mfsvr() noexcept {
        if (f_LoadLibraryA) {
            char mfsvrdll_str[] = "mfsvr.dll";
            mfsvrdll = f_LoadLibraryA(mfsvrdll_str);
        }
    }
    __forceinline void load_mftranscode() noexcept {
        if (f_LoadLibraryA) {
            char mftranscodedll_str[] = "mftranscode.dll";
            mftranscodedll = f_LoadLibraryA(mftranscodedll_str);
        }
    }
    __forceinline void load_mfvdsp() noexcept {
        if (f_LoadLibraryA) {
            char mfvdspdll_str[] = "mfvdsp.dll";
            mfvdspdll = f_LoadLibraryA(mfvdspdll_str);
        }
    }
    __forceinline void load_mfvfw() noexcept {
        if (f_LoadLibraryA) {
            char mfvfwdll_str[] = "mfvfw.dll";
            mfvfwdll = f_LoadLibraryA(mfvfwdll_str);
        }
    }
    __forceinline void load_mfxplugin64_hw() noexcept {
        if (f_LoadLibraryA) {
            char mfxplugin64_hwdll_str[] = "mfxplugin64_hw.dll";
            mfxplugin64_hwdll = f_LoadLibraryA(mfxplugin64_hwdll_str);
        }
    }
    __forceinline void load_mfx_mft_encrypt_64() noexcept {
        if (f_LoadLibraryA) {
            char mfx_mft_encrypt_64dll_str[] = "mfx_mft_encrypt_64.dll";
            mfx_mft_encrypt_64dll = f_LoadLibraryA(mfx_mft_encrypt_64dll_str);
        }
    }
    __forceinline void load_mfx_mft_h264ve_64() noexcept {
        if (f_LoadLibraryA) {
            char mfx_mft_h264ve_64dll_str[] = "mfx_mft_h264ve_64.dll";
            mfx_mft_h264ve_64dll = f_LoadLibraryA(mfx_mft_h264ve_64dll_str);
        }
    }
    __forceinline void load_mfx_mft_h265ve_64() noexcept {
        if (f_LoadLibraryA) {
            char mfx_mft_h265ve_64dll_str[] = "mfx_mft_h265ve_64.dll";
            mfx_mft_h265ve_64dll = f_LoadLibraryA(mfx_mft_h265ve_64dll_str);
        }
    }
    __forceinline void load_mfx_mft_mjpgvd_64() noexcept {
        if (f_LoadLibraryA) {
            char mfx_mft_mjpgvd_64dll_str[] = "mfx_mft_mjpgvd_64.dll";
            mfx_mft_mjpgvd_64dll = f_LoadLibraryA(mfx_mft_mjpgvd_64dll_str);
        }
    }
    __forceinline void load_mfx_mft_vp9ve_64() noexcept {
        if (f_LoadLibraryA) {
            char mfx_mft_vp9ve_64dll_str[] = "mfx_mft_vp9ve_64.dll";
            mfx_mft_vp9ve_64dll = f_LoadLibraryA(mfx_mft_vp9ve_64dll_str);
        }
    }
    __forceinline void load_mgmtapi() noexcept {
        if (f_LoadLibraryA) {
            char mgmtapidll_str[] = "mgmtapi.dll";
            mgmtapidll = f_LoadLibraryA(mgmtapidll_str);
        }
    }
    __forceinline void load_mgmtrefreshcredprov() noexcept {
        if (f_LoadLibraryA) {
            char mgmtrefreshcredprovdll_str[] = "mgmtrefreshcredprov.dll";
            mgmtrefreshcredprovdll = f_LoadLibraryA(mgmtrefreshcredprovdll_str);
        }
    }
    __forceinline void load_mi() noexcept {
        if (f_LoadLibraryA) {
            char midll_str[] = "mi.dll";
            midll = f_LoadLibraryA(midll_str);
        }
    }
    __forceinline void load_mibincodec() noexcept {
        if (f_LoadLibraryA) {
            char mibincodecdll_str[] = "mibincodec.dll";
            mibincodecdll = f_LoadLibraryA(mibincodecdll_str);
        }
    }
    __forceinline void load_Microsoft_Windows_AppModelExecEvents() noexcept {
        if (f_LoadLibraryA) {
            char Microsoft_Windows_AppModelExecEventsdll_str[] = "Microsoft-Windows-AppModelExecEvents.dll";
            Microsoft_Windows_AppModelExecEventsdll = f_LoadLibraryA(Microsoft_Windows_AppModelExecEventsdll_str);
        }
    }
    __forceinline void load_microsoft_windows_battery_events() noexcept {
        if (f_LoadLibraryA) {
            char microsoft_windows_battery_eventsdll_str[] = "microsoft-windows-battery-events.dll";
            microsoft_windows_battery_eventsdll = f_LoadLibraryA(microsoft_windows_battery_eventsdll_str);
        }
    }
    __forceinline void load_microsoft_windows_hal_events() noexcept {
        if (f_LoadLibraryA) {
            char microsoft_windows_hal_eventsdll_str[] = "microsoft-windows-hal-events.dll";
            microsoft_windows_hal_eventsdll = f_LoadLibraryA(microsoft_windows_hal_eventsdll_str);
        }
    }
    __forceinline void load_Microsoft_Windows_Internal_Shell_NearShareExperience() noexcept {
        if (f_LoadLibraryA) {
            char Microsoft_Windows_Internal_Shell_NearShareExperiencedll_str[] = "Microsoft-Windows-Internal-Shell-NearShareExperience.dll";
            Microsoft_Windows_Internal_Shell_NearShareExperiencedll = f_LoadLibraryA(Microsoft_Windows_Internal_Shell_NearShareExperiencedll_str);
        }
    }
    __forceinline void load_microsoft_windows_kernel_cc_events() noexcept {
        if (f_LoadLibraryA) {
            char microsoft_windows_kernel_cc_eventsdll_str[] = "microsoft-windows-kernel-cc-events.dll";
            microsoft_windows_kernel_cc_eventsdll = f_LoadLibraryA(microsoft_windows_kernel_cc_eventsdll_str);
        }
    }
    __forceinline void load_microsoft_windows_kernel_pnp_events() noexcept {
        if (f_LoadLibraryA) {
            char microsoft_windows_kernel_pnp_eventsdll_str[] = "microsoft-windows-kernel-pnp-events.dll";
            microsoft_windows_kernel_pnp_eventsdll = f_LoadLibraryA(microsoft_windows_kernel_pnp_eventsdll_str);
        }
    }
    __forceinline void load_microsoft_windows_kernel_power_events() noexcept {
        if (f_LoadLibraryA) {
            char microsoft_windows_kernel_power_eventsdll_str[] = "microsoft-windows-kernel-power-events.dll";
            microsoft_windows_kernel_power_eventsdll = f_LoadLibraryA(microsoft_windows_kernel_power_eventsdll_str);
        }
    }
    __forceinline void load_microsoft_windows_kernel_processor_power_events() noexcept {
        if (f_LoadLibraryA) {
            char microsoft_windows_kernel_processor_power_eventsdll_str[] = "microsoft-windows-kernel-processor-power-events.dll";
            microsoft_windows_kernel_processor_power_eventsdll = f_LoadLibraryA(microsoft_windows_kernel_processor_power_eventsdll_str);
        }
    }
    __forceinline void load_Microsoft_Windows_MapControls() noexcept {
        if (f_LoadLibraryA) {
            char Microsoft_Windows_MapControlsdll_str[] = "Microsoft-Windows-MapControls.dll";
            Microsoft_Windows_MapControlsdll = f_LoadLibraryA(Microsoft_Windows_MapControlsdll_str);
        }
    }
    __forceinline void load_Microsoft_Windows_MosHost() noexcept {
        if (f_LoadLibraryA) {
            char Microsoft_Windows_MosHostdll_str[] = "Microsoft-Windows-MosHost.dll";
            Microsoft_Windows_MosHostdll = f_LoadLibraryA(Microsoft_Windows_MosHostdll_str);
        }
    }
    __forceinline void load_microsoft_windows_pdc() noexcept {
        if (f_LoadLibraryA) {
            char microsoft_windows_pdcdll_str[] = "microsoft-windows-pdc.dll";
            microsoft_windows_pdcdll = f_LoadLibraryA(microsoft_windows_pdcdll_str);
        }
    }
    __forceinline void load_microsoft_windows_power_cad_events() noexcept {
        if (f_LoadLibraryA) {
            char microsoft_windows_power_cad_eventsdll_str[] = "microsoft-windows-power-cad-events.dll";
            microsoft_windows_power_cad_eventsdll = f_LoadLibraryA(microsoft_windows_power_cad_eventsdll_str);
        }
    }
    __forceinline void load_microsoft_windows_processor_aggregator_events() noexcept {
        if (f_LoadLibraryA) {
            char microsoft_windows_processor_aggregator_eventsdll_str[] = "microsoft-windows-processor-aggregator-events.dll";
            microsoft_windows_processor_aggregator_eventsdll = f_LoadLibraryA(microsoft_windows_processor_aggregator_eventsdll_str);
        }
    }
    __forceinline void load_microsoft_windows_sleepstudy_events() noexcept {
        if (f_LoadLibraryA) {
            char microsoft_windows_sleepstudy_eventsdll_str[] = "microsoft-windows-sleepstudy-events.dll";
            microsoft_windows_sleepstudy_eventsdll = f_LoadLibraryA(microsoft_windows_sleepstudy_eventsdll_str);
        }
    }
    __forceinline void load_microsoft_windows_storage_tiering_events() noexcept {
        if (f_LoadLibraryA) {
            char microsoft_windows_storage_tiering_eventsdll_str[] = "microsoft-windows-storage-tiering-events.dll";
            microsoft_windows_storage_tiering_eventsdll = f_LoadLibraryA(microsoft_windows_storage_tiering_eventsdll_str);
        }
    }
    __forceinline void load_microsoft_windows_system_events() noexcept {
        if (f_LoadLibraryA) {
            char microsoft_windows_system_eventsdll_str[] = "microsoft-windows-system-events.dll";
            microsoft_windows_system_eventsdll = f_LoadLibraryA(microsoft_windows_system_eventsdll_str);
        }
    }
    __forceinline void load_Microsoft_WindowsPhone_SEManagementProvider() noexcept {
        if (f_LoadLibraryA) {
            char Microsoft_WindowsPhone_SEManagementProviderdll_str[] = "Microsoft-WindowsPhone-SEManagementProvider.dll";
            Microsoft_WindowsPhone_SEManagementProviderdll = f_LoadLibraryA(Microsoft_WindowsPhone_SEManagementProviderdll_str);
        }
    }
    __forceinline void load_MicrosoftBluetoothAudio() noexcept {
        if (f_LoadLibraryA) {
            char MicrosoftBluetoothAudiodll_str[] = "Microsoft.Bluetooth.Audio.dll";
            MicrosoftBluetoothAudiodll = f_LoadLibraryA(MicrosoftBluetoothAudiodll_str);
        }
    }
    __forceinline void load_MicrosoftBluetoothProxy() noexcept {
        if (f_LoadLibraryA) {
            char MicrosoftBluetoothProxydll_str[] = "Microsoft.Bluetooth.Proxy.dll";
            MicrosoftBluetoothProxydll = f_LoadLibraryA(MicrosoftBluetoothProxydll_str);
        }
    }
    __forceinline void load_MicrosoftBluetoothService() noexcept {
        if (f_LoadLibraryA) {
            char MicrosoftBluetoothServicedll_str[] = "Microsoft.Bluetooth.Service.dll";
            MicrosoftBluetoothServicedll = f_LoadLibraryA(MicrosoftBluetoothServicedll_str);
        }
    }
    __forceinline void load_MicrosoftBluetoothUserService() noexcept {
        if (f_LoadLibraryA) {
            char MicrosoftBluetoothUserServicedll_str[] = "Microsoft.Bluetooth.UserService.dll";
            MicrosoftBluetoothUserServicedll = f_LoadLibraryA(MicrosoftBluetoothUserServicedll_str);
        }
    }
    __forceinline void load_MicrosoftGraphicsDisplayDisplayEnhancementService() noexcept {
        if (f_LoadLibraryA) {
            char MicrosoftGraphicsDisplayDisplayEnhancementServicedll_str[] = "Microsoft.Graphics.Display.DisplayEnhancementService.dll";
            MicrosoftGraphicsDisplayDisplayEnhancementServicedll = f_LoadLibraryA(MicrosoftGraphicsDisplayDisplayEnhancementServicedll_str);
        }
    }
    __forceinline void load_MicrosoftInternalFrameworkUdkSystem() noexcept {
        if (f_LoadLibraryA) {
            char MicrosoftInternalFrameworkUdkSystemdll_str[] = "Microsoft.Internal.FrameworkUdk.System.dll";
            MicrosoftInternalFrameworkUdkSystemdll = f_LoadLibraryA(MicrosoftInternalFrameworkUdkSystemdll_str);
        }
    }
    __forceinline void load_MicrosoftLocalUserImageProvider() noexcept {
        if (f_LoadLibraryA) {
            char MicrosoftLocalUserImageProviderdll_str[] = "Microsoft.LocalUserImageProvider.dll";
            MicrosoftLocalUserImageProviderdll = f_LoadLibraryA(MicrosoftLocalUserImageProviderdll_str);
        }
    }
    __forceinline void load_MicrosoftManagementInfrastructureNativeUnmanaged() noexcept {
        if (f_LoadLibraryA) {
            char MicrosoftManagementInfrastructureNativeUnmanageddll_str[] = "Microsoft.Management.Infrastructure.Native.Unmanaged.dll";
            MicrosoftManagementInfrastructureNativeUnmanageddll = f_LoadLibraryA(MicrosoftManagementInfrastructureNativeUnmanageddll_str);
        }
    }
    __forceinline void load_MicrosoftUevAgentDriverEvents() noexcept {
        if (f_LoadLibraryA) {
            char MicrosoftUevAgentDriverEventsdll_str[] = "Microsoft.Uev.AgentDriverEvents.dll";
            MicrosoftUevAgentDriverEventsdll = f_LoadLibraryA(MicrosoftUevAgentDriverEventsdll_str);
        }
    }
    __forceinline void load_MicrosoftUevAppAgent() noexcept {
        if (f_LoadLibraryA) {
            char MicrosoftUevAppAgentdll_str[] = "Microsoft.Uev.AppAgent.dll";
            MicrosoftUevAppAgentdll = f_LoadLibraryA(MicrosoftUevAppAgentdll_str);
        }
    }
    __forceinline void load_MicrosoftUevCabUtil() noexcept {
        if (f_LoadLibraryA) {
            char MicrosoftUevCabUtildll_str[] = "Microsoft.Uev.CabUtil.dll";
            MicrosoftUevCabUtildll = f_LoadLibraryA(MicrosoftUevCabUtildll_str);
        }
    }
    __forceinline void load_MicrosoftUevCmUtil() noexcept {
        if (f_LoadLibraryA) {
            char MicrosoftUevCmUtildll_str[] = "Microsoft.Uev.CmUtil.dll";
            MicrosoftUevCmUtildll = f_LoadLibraryA(MicrosoftUevCmUtildll_str);
        }
    }
    __forceinline void load_MicrosoftUevCommon() noexcept {
        if (f_LoadLibraryA) {
            char MicrosoftUevCommondll_str[] = "Microsoft.Uev.Common.dll";
            MicrosoftUevCommondll = f_LoadLibraryA(MicrosoftUevCommondll_str);
        }
    }
    __forceinline void load_MicrosoftUevCommonWinRT() noexcept {
        if (f_LoadLibraryA) {
            char MicrosoftUevCommonWinRTdll_str[] = "Microsoft.Uev.Common.WinRT.dll";
            MicrosoftUevCommonWinRTdll = f_LoadLibraryA(MicrosoftUevCommonWinRTdll_str);
        }
    }
    __forceinline void load_MicrosoftUevCommonBridge() noexcept {
        if (f_LoadLibraryA) {
            char MicrosoftUevCommonBridgedll_str[] = "Microsoft.Uev.CommonBridge.dll";
            MicrosoftUevCommonBridgedll = f_LoadLibraryA(MicrosoftUevCommonBridgedll_str);
        }
    }
    __forceinline void load_MicrosoftUevConfigWrapper() noexcept {
        if (f_LoadLibraryA) {
            char MicrosoftUevConfigWrapperdll_str[] = "Microsoft.Uev.ConfigWrapper.dll";
            MicrosoftUevConfigWrapperdll = f_LoadLibraryA(MicrosoftUevConfigWrapperdll_str);
        }
    }
    __forceinline void load_MicrosoftUevEventLogMessages() noexcept {
        if (f_LoadLibraryA) {
            char MicrosoftUevEventLogMessagesdll_str[] = "Microsoft.Uev.EventLogMessages.dll";
            MicrosoftUevEventLogMessagesdll = f_LoadLibraryA(MicrosoftUevEventLogMessagesdll_str);
        }
    }
    __forceinline void load_MicrosoftUevLocalSyncProvider() noexcept {
        if (f_LoadLibraryA) {
            char MicrosoftUevLocalSyncProviderdll_str[] = "Microsoft.Uev.LocalSyncProvider.dll";
            MicrosoftUevLocalSyncProviderdll = f_LoadLibraryA(MicrosoftUevLocalSyncProviderdll_str);
        }
    }
    __forceinline void load_MicrosoftUevManagedEventLogging() noexcept {
        if (f_LoadLibraryA) {
            char MicrosoftUevManagedEventLoggingdll_str[] = "Microsoft.Uev.ManagedEventLogging.dll";
            MicrosoftUevManagedEventLoggingdll = f_LoadLibraryA(MicrosoftUevManagedEventLoggingdll_str);
        }
    }
    __forceinline void load_MicrosoftUevManagement() noexcept {
        if (f_LoadLibraryA) {
            char MicrosoftUevManagementdll_str[] = "Microsoft.Uev.Management.dll";
            MicrosoftUevManagementdll = f_LoadLibraryA(MicrosoftUevManagementdll_str);
        }
    }
    __forceinline void load_MicrosoftUevManagementWmiAccess() noexcept {
        if (f_LoadLibraryA) {
            char MicrosoftUevManagementWmiAccessdll_str[] = "Microsoft.Uev.Management.WmiAccess.dll";
            MicrosoftUevManagementWmiAccessdll = f_LoadLibraryA(MicrosoftUevManagementWmiAccessdll_str);
        }
    }
    __forceinline void load_MicrosoftUevModernAppAgent() noexcept {
        if (f_LoadLibraryA) {
            char MicrosoftUevModernAppAgentdll_str[] = "Microsoft.Uev.ModernAppAgent.dll";
            MicrosoftUevModernAppAgentdll = f_LoadLibraryA(MicrosoftUevModernAppAgentdll_str);
        }
    }
    __forceinline void load_MicrosoftUevModernAppCore() noexcept {
        if (f_LoadLibraryA) {
            char MicrosoftUevModernAppCoredll_str[] = "Microsoft.Uev.ModernAppCore.dll";
            MicrosoftUevModernAppCoredll = f_LoadLibraryA(MicrosoftUevModernAppCoredll_str);
        }
    }
    __forceinline void load_MicrosoftUevModernAppDataWinRT() noexcept {
        if (f_LoadLibraryA) {
            char MicrosoftUevModernAppDataWinRTdll_str[] = "Microsoft.Uev.ModernAppData.WinRT.dll";
            MicrosoftUevModernAppDataWinRTdll = f_LoadLibraryA(MicrosoftUevModernAppDataWinRTdll_str);
        }
    }
    __forceinline void load_MicrosoftUevModernSync() noexcept {
        if (f_LoadLibraryA) {
            char MicrosoftUevModernSyncdll_str[] = "Microsoft.Uev.ModernSync.dll";
            MicrosoftUevModernSyncdll = f_LoadLibraryA(MicrosoftUevModernSyncdll_str);
        }
    }
    __forceinline void load_MicrosoftUevMonitorSyncProvider() noexcept {
        if (f_LoadLibraryA) {
            char MicrosoftUevMonitorSyncProviderdll_str[] = "Microsoft.Uev.MonitorSyncProvider.dll";
            MicrosoftUevMonitorSyncProviderdll = f_LoadLibraryA(MicrosoftUevMonitorSyncProviderdll_str);
        }
    }
    __forceinline void load_MicrosoftUevOffice2010CustomActions() noexcept {
        if (f_LoadLibraryA) {
            char MicrosoftUevOffice2010CustomActionsdll_str[] = "Microsoft.Uev.Office2010CustomActions.dll";
            MicrosoftUevOffice2010CustomActionsdll = f_LoadLibraryA(MicrosoftUevOffice2010CustomActionsdll_str);
        }
    }
    __forceinline void load_MicrosoftUevOffice2013CustomActions() noexcept {
        if (f_LoadLibraryA) {
            char MicrosoftUevOffice2013CustomActionsdll_str[] = "Microsoft.Uev.Office2013CustomActions.dll";
            MicrosoftUevOffice2013CustomActionsdll = f_LoadLibraryA(MicrosoftUevOffice2013CustomActionsdll_str);
        }
    }
    __forceinline void load_MicrosoftUevPrinterCustomActions() noexcept {
        if (f_LoadLibraryA) {
            char MicrosoftUevPrinterCustomActionsdll_str[] = "Microsoft.Uev.PrinterCustomActions.dll";
            MicrosoftUevPrinterCustomActionsdll = f_LoadLibraryA(MicrosoftUevPrinterCustomActionsdll_str);
        }
    }
    __forceinline void load_MicrosoftUevSmbSyncProvider() noexcept {
        if (f_LoadLibraryA) {
            char MicrosoftUevSmbSyncProviderdll_str[] = "Microsoft.Uev.SmbSyncProvider.dll";
            MicrosoftUevSmbSyncProviderdll = f_LoadLibraryA(MicrosoftUevSmbSyncProviderdll_str);
        }
    }
    __forceinline void load_MicrosoftUevSyncCommon() noexcept {
        if (f_LoadLibraryA) {
            char MicrosoftUevSyncCommondll_str[] = "Microsoft.Uev.SyncCommon.dll";
            MicrosoftUevSyncCommondll = f_LoadLibraryA(MicrosoftUevSyncCommondll_str);
        }
    }
    __forceinline void load_MicrosoftUevSyncConditions() noexcept {
        if (f_LoadLibraryA) {
            char MicrosoftUevSyncConditionsdll_str[] = "Microsoft.Uev.SyncConditions.dll";
            MicrosoftUevSyncConditionsdll = f_LoadLibraryA(MicrosoftUevSyncConditionsdll_str);
        }
    }
    __forceinline void load_MicrosoftWindowsStorageCore() noexcept {
        if (f_LoadLibraryA) {
            char MicrosoftWindowsStorageCoredll_str[] = "Microsoft.Windows.Storage.Core.dll";
            MicrosoftWindowsStorageCoredll = f_LoadLibraryA(MicrosoftWindowsStorageCoredll_str);
        }
    }
    __forceinline void load_MicrosoftWindowsStorageStorageBusCache() noexcept {
        if (f_LoadLibraryA) {
            char MicrosoftWindowsStorageStorageBusCachedll_str[] = "Microsoft.Windows.Storage.StorageBusCache.dll";
            MicrosoftWindowsStorageStorageBusCachedll = f_LoadLibraryA(MicrosoftWindowsStorageStorageBusCachedll_str);
        }
    }
    __forceinline void load_MicrosoftAccountTokenProviderCore() noexcept {
        if (f_LoadLibraryA) {
            char MicrosoftAccountTokenProviderCoredll_str[] = "MicrosoftAccount.TokenProvider.Core.dll";
            MicrosoftAccountTokenProviderCoredll = f_LoadLibraryA(MicrosoftAccountTokenProviderCoredll_str);
        }
    }
    __forceinline void load_MicrosoftAccountCloudAP() noexcept {
        if (f_LoadLibraryA) {
            char MicrosoftAccountCloudAPdll_str[] = "MicrosoftAccountCloudAP.dll";
            MicrosoftAccountCloudAPdll = f_LoadLibraryA(MicrosoftAccountCloudAPdll_str);
        }
    }
    __forceinline void load_MicrosoftAccountExtension() noexcept {
        if (f_LoadLibraryA) {
            char MicrosoftAccountExtensiondll_str[] = "MicrosoftAccountExtension.dll";
            MicrosoftAccountExtensiondll = f_LoadLibraryA(MicrosoftAccountExtensiondll_str);
        }
    }
    __forceinline void load_MicrosoftAccountTokenProvider() noexcept {
        if (f_LoadLibraryA) {
            char MicrosoftAccountTokenProviderdll_str[] = "MicrosoftAccountTokenProvider.dll";
            MicrosoftAccountTokenProviderdll = f_LoadLibraryA(MicrosoftAccountTokenProviderdll_str);
        }
    }
    __forceinline void load_MicrosoftAccountWAMExtension() noexcept {
        if (f_LoadLibraryA) {
            char MicrosoftAccountWAMExtensiondll_str[] = "MicrosoftAccountWAMExtension.dll";
            MicrosoftAccountWAMExtensiondll = f_LoadLibraryA(MicrosoftAccountWAMExtensiondll_str);
        }
    }
    __forceinline void load_midimap() noexcept {
        if (f_LoadLibraryA) {
            char midimapdll_str[] = "midimap.dll";
            midimapdll = f_LoadLibraryA(midimapdll_str);
        }
    }
    __forceinline void load_migisol() noexcept {
        if (f_LoadLibraryA) {
            char migisoldll_str[] = "migisol.dll";
            migisoldll = f_LoadLibraryA(migisoldll_str);
        }
    }
    __forceinline void load_miguiresource() noexcept {
        if (f_LoadLibraryA) {
            char miguiresourcedll_str[] = "miguiresource.dll";
            miguiresourcedll = f_LoadLibraryA(miguiresourcedll_str);
        }
    }
    __forceinline void load_mimefilt() noexcept {
        if (f_LoadLibraryA) {
            char mimefiltdll_str[] = "mimefilt.dll";
            mimefiltdll = f_LoadLibraryA(mimefiltdll_str);
        }
    }
    __forceinline void load_mimofcodec() noexcept {
        if (f_LoadLibraryA) {
            char mimofcodecdll_str[] = "mimofcodec.dll";
            mimofcodecdll = f_LoadLibraryA(mimofcodecdll_str);
        }
    }
    __forceinline void load_MinstoreEvents() noexcept {
        if (f_LoadLibraryA) {
            char MinstoreEventsdll_str[] = "MinstoreEvents.dll";
            MinstoreEventsdll = f_LoadLibraryA(MinstoreEventsdll_str);
        }
    }
    __forceinline void load_MiracastInputMgr() noexcept {
        if (f_LoadLibraryA) {
            char MiracastInputMgrdll_str[] = "MiracastInputMgr.dll";
            MiracastInputMgrdll = f_LoadLibraryA(MiracastInputMgrdll_str);
        }
    }
    __forceinline void load_MiracastReceiver() noexcept {
        if (f_LoadLibraryA) {
            char MiracastReceiverdll_str[] = "MiracastReceiver.dll";
            MiracastReceiverdll = f_LoadLibraryA(MiracastReceiverdll_str);
        }
    }
    __forceinline void load_MiracastReceiverExt() noexcept {
        if (f_LoadLibraryA) {
            char MiracastReceiverExtdll_str[] = "MiracastReceiverExt.dll";
            MiracastReceiverExtdll = f_LoadLibraryA(MiracastReceiverExtdll_str);
        }
    }
    __forceinline void load_MirrorDrvCompat() noexcept {
        if (f_LoadLibraryA) {
            char MirrorDrvCompatdll_str[] = "MirrorDrvCompat.dll";
            MirrorDrvCompatdll = f_LoadLibraryA(MirrorDrvCompatdll_str);
        }
    }
    __forceinline void load_mispace() noexcept {
        if (f_LoadLibraryA) {
            char mispacedll_str[] = "mispace.dll";
            mispacedll = f_LoadLibraryA(mispacedll_str);
        }
    }
    __forceinline void load_MitigationClient() noexcept {
        if (f_LoadLibraryA) {
            char MitigationClientdll_str[] = "MitigationClient.dll";
            MitigationClientdll = f_LoadLibraryA(MitigationClientdll_str);
        }
    }
    __forceinline void load_MitigationConfiguration() noexcept {
        if (f_LoadLibraryA) {
            char MitigationConfigurationdll_str[] = "MitigationConfiguration.dll";
            MitigationConfigurationdll = f_LoadLibraryA(MitigationConfigurationdll_str);
        }
    }
    __forceinline void load_miutils() noexcept {
        if (f_LoadLibraryA) {
            char miutilsdll_str[] = "miutils.dll";
            miutilsdll = f_LoadLibraryA(miutilsdll_str);
        }
    }
    __forceinline void load_MixedRealityBroker() noexcept {
        if (f_LoadLibraryA) {
            char MixedRealityBrokerdll_str[] = "MixedReality.Broker.dll";
            MixedRealityBrokerdll = f_LoadLibraryA(MixedRealityBrokerdll_str);
        }
    }
    __forceinline void load_MixedRealityCapturePipeline() noexcept {
        if (f_LoadLibraryA) {
            char MixedRealityCapturePipelinedll_str[] = "MixedRealityCapture.Pipeline.dll";
            MixedRealityCapturePipelinedll = f_LoadLibraryA(MixedRealityCapturePipelinedll_str);
        }
    }
    __forceinline void load_MixedRealityCaptureProxyStub() noexcept {
        if (f_LoadLibraryA) {
            char MixedRealityCaptureProxyStubdll_str[] = "MixedRealityCapture.ProxyStub.dll";
            MixedRealityCaptureProxyStubdll = f_LoadLibraryA(MixedRealityCaptureProxyStubdll_str);
        }
    }
    __forceinline void load_MixedRealityRuntime() noexcept {
        if (f_LoadLibraryA) {
            char MixedRealityRuntimedll_str[] = "MixedRealityRuntime.dll";
            MixedRealityRuntimedll = f_LoadLibraryA(MixedRealityRuntimedll_str);
        }
    }
    __forceinline void load_mlang() noexcept {
        if (f_LoadLibraryA) {
            char mlangdll_str[] = "mlang.dll";
            mlangdll = f_LoadLibraryA(mlangdll_str);
        }
    }
    __forceinline void load_mmcbase() noexcept {
        if (f_LoadLibraryA) {
            char mmcbasedll_str[] = "mmcbase.dll";
            mmcbasedll = f_LoadLibraryA(mmcbasedll_str);
        }
    }
    __forceinline void load_mmcndmgr() noexcept {
        if (f_LoadLibraryA) {
            char mmcndmgrdll_str[] = "mmcndmgr.dll";
            mmcndmgrdll = f_LoadLibraryA(mmcndmgrdll_str);
        }
    }
    __forceinline void load_mmcshext() noexcept {
        if (f_LoadLibraryA) {
            char mmcshextdll_str[] = "mmcshext.dll";
            mmcshextdll = f_LoadLibraryA(mmcshextdll_str);
        }
    }
    __forceinline void load_MMDevAPI() noexcept {
        if (f_LoadLibraryA) {
            char MMDevAPIdll_str[] = "MMDevAPI.dll";
            MMDevAPIdll = f_LoadLibraryA(MMDevAPIdll_str);
        }
    }
    __forceinline void load_mmgaclient() noexcept {
        if (f_LoadLibraryA) {
            char mmgaclientdll_str[] = "mmgaclient.dll";
            mmgaclientdll = f_LoadLibraryA(mmgaclientdll_str);
        }
    }
    __forceinline void load_mmgaproxystub() noexcept {
        if (f_LoadLibraryA) {
            char mmgaproxystubdll_str[] = "mmgaproxystub.dll";
            mmgaproxystubdll = f_LoadLibraryA(mmgaproxystubdll_str);
        }
    }
    __forceinline void load_mmres() noexcept {
        if (f_LoadLibraryA) {
            char mmresdll_str[] = "mmres.dll";
            mmresdll = f_LoadLibraryA(mmresdll_str);
        }
    }
    __forceinline void load_mobilenetworking() noexcept {
        if (f_LoadLibraryA) {
            char mobilenetworkingdll_str[] = "mobilenetworking.dll";
            mobilenetworkingdll = f_LoadLibraryA(mobilenetworkingdll_str);
        }
    }
    __forceinline void load_modemui() noexcept {
        if (f_LoadLibraryA) {
            char modemuidll_str[] = "modemui.dll";
            modemuidll = f_LoadLibraryA(modemuidll_str);
        }
    }
    __forceinline void load_modernexecserver() noexcept {
        if (f_LoadLibraryA) {
            char modernexecserverdll_str[] = "modernexecserver.dll";
            modernexecserverdll = f_LoadLibraryA(modernexecserverdll_str);
        }
    }
    __forceinline void load_moricons() noexcept {
        if (f_LoadLibraryA) {
            char moriconsdll_str[] = "moricons.dll";
            moriconsdll = f_LoadLibraryA(moriconsdll_str);
        }
    }
    __forceinline void load_moshost() noexcept {
        if (f_LoadLibraryA) {
            char moshostdll_str[] = "moshost.dll";
            moshostdll = f_LoadLibraryA(moshostdll_str);
        }
    }
    __forceinline void load_MosHostClient() noexcept {
        if (f_LoadLibraryA) {
            char MosHostClientdll_str[] = "MosHostClient.dll";
            MosHostClientdll = f_LoadLibraryA(MosHostClientdll_str);
        }
    }
    __forceinline void load_moshostcore() noexcept {
        if (f_LoadLibraryA) {
            char moshostcoredll_str[] = "moshostcore.dll";
            moshostcoredll = f_LoadLibraryA(moshostcoredll_str);
        }
    }
    __forceinline void load_MosStorage() noexcept {
        if (f_LoadLibraryA) {
            char MosStoragedll_str[] = "MosStorage.dll";
            MosStoragedll = f_LoadLibraryA(MosStoragedll_str);
        }
    }
    __forceinline void load_mpeval() noexcept {
        if (f_LoadLibraryA) {
            char mpevaldll_str[] = "mpeval.dll";
            mpevaldll = f_LoadLibraryA(mpevaldll_str);
        }
    }
    __forceinline void load_mpr() noexcept {
        if (f_LoadLibraryA) {
            char mprdll_str[] = "mpr.dll";
            mprdll = f_LoadLibraryA(mprdll_str);
        }
    }
    __forceinline void load_mprapi() noexcept {
        if (f_LoadLibraryA) {
            char mprapidll_str[] = "mprapi.dll";
            mprapidll = f_LoadLibraryA(mprapidll_str);
        }
    }
    __forceinline void load_mprddm() noexcept {
        if (f_LoadLibraryA) {
            char mprddmdll_str[] = "mprddm.dll";
            mprddmdll = f_LoadLibraryA(mprddmdll_str);
        }
    }
    __forceinline void load_mprdim() noexcept {
        if (f_LoadLibraryA) {
            char mprdimdll_str[] = "mprdim.dll";
            mprdimdll = f_LoadLibraryA(mprdimdll_str);
        }
    }
    __forceinline void load_mprext() noexcept {
        if (f_LoadLibraryA) {
            char mprextdll_str[] = "mprext.dll";
            mprextdll = f_LoadLibraryA(mprextdll_str);
        }
    }
    __forceinline void load_mprmsg() noexcept {
        if (f_LoadLibraryA) {
            char mprmsgdll_str[] = "mprmsg.dll";
            mprmsgdll = f_LoadLibraryA(mprmsgdll_str);
        }
    }
    __forceinline void load_MPSSVC() noexcept {
        if (f_LoadLibraryA) {
            char MPSSVCdll_str[] = "MPSSVC.dll";
            MPSSVCdll = f_LoadLibraryA(MPSSVCdll_str);
        }
    }
    __forceinline void load_mpunits() noexcept {
        if (f_LoadLibraryA) {
            char mpunitsdll_str[] = "mpunits.dll";
            mpunitsdll = f_LoadLibraryA(mpunitsdll_str);
        }
    }
    __forceinline void load_MrmCoreR() noexcept {
        if (f_LoadLibraryA) {
            char MrmCoreRdll_str[] = "MrmCoreR.dll";
            MrmCoreRdll = f_LoadLibraryA(MrmCoreRdll_str);
        }
    }
    __forceinline void load_MrmDeploy() noexcept {
        if (f_LoadLibraryA) {
            char MrmDeploydll_str[] = "MrmDeploy.dll";
            MrmDeploydll = f_LoadLibraryA(MrmDeploydll_str);
        }
    }
    __forceinline void load_MrmIndexer() noexcept {
        if (f_LoadLibraryA) {
            char MrmIndexerdll_str[] = "MrmIndexer.dll";
            MrmIndexerdll = f_LoadLibraryA(MrmIndexerdll_str);
        }
    }
    __forceinline void load_mrt100() noexcept {
        if (f_LoadLibraryA) {
            char mrt100dll_str[] = "mrt100.dll";
            mrt100dll = f_LoadLibraryA(mrt100dll_str);
        }
    }
    __forceinline void load_mrt_map() noexcept {
        if (f_LoadLibraryA) {
            char mrt_mapdll_str[] = "mrt_map.dll";
            mrt_mapdll = f_LoadLibraryA(mrt_mapdll_str);
        }
    }
    __forceinline void load_ms3dthumbnailprovider() noexcept {
        if (f_LoadLibraryA) {
            char ms3dthumbnailproviderdll_str[] = "ms3dthumbnailprovider.dll";
            ms3dthumbnailproviderdll = f_LoadLibraryA(ms3dthumbnailproviderdll_str);
        }
    }
    __forceinline void load_msaatext() noexcept {
        if (f_LoadLibraryA) {
            char msaatextdll_str[] = "msaatext.dll";
            msaatextdll = f_LoadLibraryA(msaatextdll_str);
        }
    }
    __forceinline void load_msacm32() noexcept {
        if (f_LoadLibraryA) {
            char msacm32dll_str[] = "msacm32.dll";
            msacm32dll = f_LoadLibraryA(msacm32dll_str);
        }
    }
    __forceinline void load_msafd() noexcept {
        if (f_LoadLibraryA) {
            char msafddll_str[] = "msafd.dll";
            msafddll = f_LoadLibraryA(msafddll_str);
        }
    }
    __forceinline void load_MSAJApi() noexcept {
        if (f_LoadLibraryA) {
            char MSAJApidll_str[] = "MSAJApi.dll";
            MSAJApidll = f_LoadLibraryA(MSAJApidll_str);
        }
    }
    __forceinline void load_MSAlacDecoder() noexcept {
        if (f_LoadLibraryA) {
            char MSAlacDecoderdll_str[] = "MSAlacDecoder.dll";
            MSAlacDecoderdll = f_LoadLibraryA(MSAlacDecoderdll_str);
        }
    }
    __forceinline void load_MSAlacEncoder() noexcept {
        if (f_LoadLibraryA) {
            char MSAlacEncoderdll_str[] = "MSAlacEncoder.dll";
            MSAlacEncoderdll = f_LoadLibraryA(MSAlacEncoderdll_str);
        }
    }
    __forceinline void load_MSAMRNBDecoder() noexcept {
        if (f_LoadLibraryA) {
            char MSAMRNBDecoderdll_str[] = "MSAMRNBDecoder.dll";
            MSAMRNBDecoderdll = f_LoadLibraryA(MSAMRNBDecoderdll_str);
        }
    }
    __forceinline void load_MSAMRNBEncoder() noexcept {
        if (f_LoadLibraryA) {
            char MSAMRNBEncoderdll_str[] = "MSAMRNBEncoder.dll";
            MSAMRNBEncoderdll = f_LoadLibraryA(MSAMRNBEncoderdll_str);
        }
    }
    __forceinline void load_MSAMRNBSink() noexcept {
        if (f_LoadLibraryA) {
            char MSAMRNBSinkdll_str[] = "MSAMRNBSink.dll";
            MSAMRNBSinkdll = f_LoadLibraryA(MSAMRNBSinkdll_str);
        }
    }
    __forceinline void load_MSAMRNBSource() noexcept {
        if (f_LoadLibraryA) {
            char MSAMRNBSourcedll_str[] = "MSAMRNBSource.dll";
            MSAMRNBSourcedll = f_LoadLibraryA(MSAMRNBSourcedll_str);
        }
    }
    __forceinline void load_MsApoFxProxy() noexcept {
        if (f_LoadLibraryA) {
            char MsApoFxProxydll_str[] = "MsApoFxProxy.dll";
            MsApoFxProxydll = f_LoadLibraryA(MsApoFxProxydll_str);
        }
    }
    __forceinline void load_MSAProfileNotificationHandler() noexcept {
        if (f_LoadLibraryA) {
            char MSAProfileNotificationHandlerdll_str[] = "MSAProfileNotificationHandler.dll";
            MSAProfileNotificationHandlerdll = f_LoadLibraryA(MSAProfileNotificationHandlerdll_str);
        }
    }
    __forceinline void load_msasn1() noexcept {
        if (f_LoadLibraryA) {
            char msasn1dll_str[] = "msasn1.dll";
            msasn1dll = f_LoadLibraryA(msasn1dll_str);
        }
    }
    __forceinline void load_MSAudDecMFT() noexcept {
        if (f_LoadLibraryA) {
            char MSAudDecMFTdll_str[] = "MSAudDecMFT.dll";
            MSAudDecMFTdll = f_LoadLibraryA(MSAudDecMFTdll_str);
        }
    }
    __forceinline void load_msaudite() noexcept {
        if (f_LoadLibraryA) {
            char msauditedll_str[] = "msaudite.dll";
            msauditedll = f_LoadLibraryA(msauditedll_str);
        }
    }
    __forceinline void load_msauserext() noexcept {
        if (f_LoadLibraryA) {
            char msauserextdll_str[] = "msauserext.dll";
            msauserextdll = f_LoadLibraryA(msauserextdll_str);
        }
    }
    __forceinline void load_mscandui() noexcept {
        if (f_LoadLibraryA) {
            char mscanduidll_str[] = "mscandui.dll";
            mscanduidll = f_LoadLibraryA(mscanduidll_str);
        }
    }
    __forceinline void load_mscat32() noexcept {
        if (f_LoadLibraryA) {
            char mscat32dll_str[] = "mscat32.dll";
            mscat32dll = f_LoadLibraryA(mscat32dll_str);
        }
    }
    __forceinline void load_msclmd() noexcept {
        if (f_LoadLibraryA) {
            char msclmddll_str[] = "msclmd.dll";
            msclmddll = f_LoadLibraryA(msclmddll_str);
        }
    }
    __forceinline void load_mscms() noexcept {
        if (f_LoadLibraryA) {
            char mscmsdll_str[] = "mscms.dll";
            mscmsdll = f_LoadLibraryA(mscmsdll_str);
        }
    }
    __forceinline void load_mscoree() noexcept {
        if (f_LoadLibraryA) {
            char mscoreedll_str[] = "mscoree.dll";
            mscoreedll = f_LoadLibraryA(mscoreedll_str);
        }
    }
    __forceinline void load_mscorier() noexcept {
        if (f_LoadLibraryA) {
            char mscorierdll_str[] = "mscorier.dll";
            mscorierdll = f_LoadLibraryA(mscorierdll_str);
        }
    }
    __forceinline void load_mscories() noexcept {
        if (f_LoadLibraryA) {
            char mscoriesdll_str[] = "mscories.dll";
            mscoriesdll = f_LoadLibraryA(mscoriesdll_str);
        }
    }
    __forceinline void load_msctf() noexcept {
        if (f_LoadLibraryA) {
            char msctfdll_str[] = "msctf.dll";
            msctfdll = f_LoadLibraryA(msctfdll_str);
        }
    }
    __forceinline void load_MsCtfMonitor() noexcept {
        if (f_LoadLibraryA) {
            char MsCtfMonitordll_str[] = "MsCtfMonitor.dll";
            MsCtfMonitordll = f_LoadLibraryA(MsCtfMonitordll_str);
        }
    }
    __forceinline void load_msctfp() noexcept {
        if (f_LoadLibraryA) {
            char msctfpdll_str[] = "msctfp.dll";
            msctfpdll = f_LoadLibraryA(msctfpdll_str);
        }
    }
    __forceinline void load_msctfui() noexcept {
        if (f_LoadLibraryA) {
            char msctfuidll_str[] = "msctfui.dll";
            msctfuidll = f_LoadLibraryA(msctfuidll_str);
        }
    }
    __forceinline void load_msctfuimanager() noexcept {
        if (f_LoadLibraryA) {
            char msctfuimanagerdll_str[] = "msctfuimanager.dll";
            msctfuimanagerdll = f_LoadLibraryA(msctfuimanagerdll_str);
        }
    }
    __forceinline void load_msdadiag() noexcept {
        if (f_LoadLibraryA) {
            char msdadiagdll_str[] = "msdadiag.dll";
            msdadiagdll = f_LoadLibraryA(msdadiagdll_str);
        }
    }
    __forceinline void load_msdart() noexcept {
        if (f_LoadLibraryA) {
            char msdartdll_str[] = "msdart.dll";
            msdartdll = f_LoadLibraryA(msdartdll_str);
        }
    }
    __forceinline void load_msdelta() noexcept {
        if (f_LoadLibraryA) {
            char msdeltadll_str[] = "msdelta.dll";
            msdeltadll = f_LoadLibraryA(msdeltadll_str);
        }
    }
    __forceinline void load_msdmo() noexcept {
        if (f_LoadLibraryA) {
            char msdmodll_str[] = "msdmo.dll";
            msdmodll = f_LoadLibraryA(msdmodll_str);
        }
    }
    __forceinline void load_msdrm() noexcept {
        if (f_LoadLibraryA) {
            char msdrmdll_str[] = "msdrm.dll";
            msdrmdll = f_LoadLibraryA(msdrmdll_str);
        }
    }
    __forceinline void load_msdtckrm() noexcept {
        if (f_LoadLibraryA) {
            char msdtckrmdll_str[] = "msdtckrm.dll";
            msdtckrmdll = f_LoadLibraryA(msdtckrmdll_str);
        }
    }
    __forceinline void load_msdtclog() noexcept {
        if (f_LoadLibraryA) {
            char msdtclogdll_str[] = "msdtclog.dll";
            msdtclogdll = f_LoadLibraryA(msdtclogdll_str);
        }
    }
    __forceinline void load_msdtcprx() noexcept {
        if (f_LoadLibraryA) {
            char msdtcprxdll_str[] = "msdtcprx.dll";
            msdtcprxdll = f_LoadLibraryA(msdtcprxdll_str);
        }
    }
    __forceinline void load_msdtcspoffln() noexcept {
        if (f_LoadLibraryA) {
            char msdtcspofflndll_str[] = "msdtcspoffln.dll";
            msdtcspofflndll = f_LoadLibraryA(msdtcspofflndll_str);
        }
    }
    __forceinline void load_msdtctm() noexcept {
        if (f_LoadLibraryA) {
            char msdtctmdll_str[] = "msdtctm.dll";
            msdtctmdll = f_LoadLibraryA(msdtctmdll_str);
        }
    }
    __forceinline void load_msdtcuiu() noexcept {
        if (f_LoadLibraryA) {
            char msdtcuiudll_str[] = "msdtcuiu.dll";
            msdtcuiudll = f_LoadLibraryA(msdtcuiudll_str);
        }
    }
    __forceinline void load_msdtcVSp1res() noexcept {
        if (f_LoadLibraryA) {
            char msdtcVSp1resdll_str[] = "msdtcVSp1res.dll";
            msdtcVSp1resdll = f_LoadLibraryA(msdtcVSp1resdll_str);
        }
    }
    __forceinline void load_msfeeds() noexcept {
        if (f_LoadLibraryA) {
            char msfeedsdll_str[] = "msfeeds.dll";
            msfeedsdll = f_LoadLibraryA(msfeedsdll_str);
        }
    }
    __forceinline void load_msfeedsbs() noexcept {
        if (f_LoadLibraryA) {
            char msfeedsbsdll_str[] = "msfeedsbs.dll";
            msfeedsbsdll = f_LoadLibraryA(msfeedsbsdll_str);
        }
    }
    __forceinline void load_MSFlacDecoder() noexcept {
        if (f_LoadLibraryA) {
            char MSFlacDecoderdll_str[] = "MSFlacDecoder.dll";
            MSFlacDecoderdll = f_LoadLibraryA(MSFlacDecoderdll_str);
        }
    }
    __forceinline void load_MSFlacEncoder() noexcept {
        if (f_LoadLibraryA) {
            char MSFlacEncoderdll_str[] = "MSFlacEncoder.dll";
            MSFlacEncoderdll = f_LoadLibraryA(MSFlacEncoderdll_str);
        }
    }
    __forceinline void load_msftedit() noexcept {
        if (f_LoadLibraryA) {
            char msfteditdll_str[] = "msftedit.dll";
            msfteditdll = f_LoadLibraryA(msfteditdll_str);
        }
    }
    __forceinline void load_MsftOemDllIgneous() noexcept {
        if (f_LoadLibraryA) {
            char MsftOemDllIgneousdll_str[] = "MsftOemDllIgneous.dll";
            MsftOemDllIgneousdll = f_LoadLibraryA(MsftOemDllIgneousdll_str);
        }
    }
    __forceinline void load_MSHEIF() noexcept {
        if (f_LoadLibraryA) {
            char MSHEIFdll_str[] = "MSHEIF.dll";
            MSHEIFdll = f_LoadLibraryA(MSHEIFdll_str);
        }
    }
    __forceinline void load_mshtml() noexcept {
        if (f_LoadLibraryA) {
            char mshtmldll_str[] = "mshtml.dll";
            mshtmldll = f_LoadLibraryA(mshtmldll_str);
        }
    }
    __forceinline void load_MshtmlDac() noexcept {
        if (f_LoadLibraryA) {
            char MshtmlDacdll_str[] = "MshtmlDac.dll";
            MshtmlDacdll = f_LoadLibraryA(MshtmlDacdll_str);
        }
    }
    __forceinline void load_mshtmled() noexcept {
        if (f_LoadLibraryA) {
            char mshtmleddll_str[] = "mshtmled.dll";
            mshtmleddll = f_LoadLibraryA(mshtmleddll_str);
        }
    }
    __forceinline void load_mshtmler() noexcept {
        if (f_LoadLibraryA) {
            char mshtmlerdll_str[] = "mshtmler.dll";
            mshtmlerdll = f_LoadLibraryA(mshtmlerdll_str);
        }
    }
    __forceinline void load_msi() noexcept {
        if (f_LoadLibraryA) {
            char msidll_str[] = "msi.dll";
            msidll = f_LoadLibraryA(msidll_str);
        }
    }
    __forceinline void load_MsiCofire() noexcept {
        if (f_LoadLibraryA) {
            char MsiCofiredll_str[] = "MsiCofire.dll";
            MsiCofiredll = f_LoadLibraryA(MsiCofiredll_str);
        }
    }
    __forceinline void load_msidcrl40() noexcept {
        if (f_LoadLibraryA) {
            char msidcrl40dll_str[] = "msidcrl40.dll";
            msidcrl40dll = f_LoadLibraryA(msidcrl40dll_str);
        }
    }
    __forceinline void load_msident() noexcept {
        if (f_LoadLibraryA) {
            char msidentdll_str[] = "msident.dll";
            msidentdll = f_LoadLibraryA(msidentdll_str);
        }
    }
    __forceinline void load_msidle() noexcept {
        if (f_LoadLibraryA) {
            char msidledll_str[] = "msidle.dll";
            msidledll = f_LoadLibraryA(msidledll_str);
        }
    }
    __forceinline void load_msidntld() noexcept {
        if (f_LoadLibraryA) {
            char msidntlddll_str[] = "msidntld.dll";
            msidntlddll = f_LoadLibraryA(msidntlddll_str);
        }
    }
    __forceinline void load_msieftp() noexcept {
        if (f_LoadLibraryA) {
            char msieftpdll_str[] = "msieftp.dll";
            msieftpdll = f_LoadLibraryA(msieftpdll_str);
        }
    }
    __forceinline void load_msihnd() noexcept {
        if (f_LoadLibraryA) {
            char msihnddll_str[] = "msihnd.dll";
            msihnddll = f_LoadLibraryA(msihnddll_str);
        }
    }
    __forceinline void load_msiltcfg() noexcept {
        if (f_LoadLibraryA) {
            char msiltcfgdll_str[] = "msiltcfg.dll";
            msiltcfgdll = f_LoadLibraryA(msiltcfgdll_str);
        }
    }
    __forceinline void load_msimg32() noexcept {
        if (f_LoadLibraryA) {
            char msimg32dll_str[] = "msimg32.dll";
            msimg32dll = f_LoadLibraryA(msimg32dll_str);
        }
    }
    __forceinline void load_msimsg() noexcept {
        if (f_LoadLibraryA) {
            char msimsgdll_str[] = "msimsg.dll";
            msimsgdll = f_LoadLibraryA(msimsgdll_str);
        }
    }
    __forceinline void load_msimtf() noexcept {
        if (f_LoadLibraryA) {
            char msimtfdll_str[] = "msimtf.dll";
            msimtfdll = f_LoadLibraryA(msimtfdll_str);
        }
    }
    __forceinline void load_msisip() noexcept {
        if (f_LoadLibraryA) {
            char msisipdll_str[] = "msisip.dll";
            msisipdll = f_LoadLibraryA(msisipdll_str);
        }
    }
    __forceinline void load_msIso() noexcept {
        if (f_LoadLibraryA) {
            char msIsodll_str[] = "msIso.dll";
            msIsodll = f_LoadLibraryA(msIsodll_str);
        }
    }
    __forceinline void load_msiwer() noexcept {
        if (f_LoadLibraryA) {
            char msiwerdll_str[] = "msiwer.dll";
            msiwerdll = f_LoadLibraryA(msiwerdll_str);
        }
    }
    __forceinline void load_MsixDataSourceExtensionPS() noexcept {
        if (f_LoadLibraryA) {
            char MsixDataSourceExtensionPSdll_str[] = "MsixDataSourceExtensionPS.dll";
            MsixDataSourceExtensionPSdll = f_LoadLibraryA(MsixDataSourceExtensionPSdll_str);
        }
    }
    __forceinline void load_mskeyprotcli() noexcept {
        if (f_LoadLibraryA) {
            char mskeyprotclidll_str[] = "mskeyprotcli.dll";
            mskeyprotclidll = f_LoadLibraryA(mskeyprotclidll_str);
        }
    }
    __forceinline void load_mskeyprotect() noexcept {
        if (f_LoadLibraryA) {
            char mskeyprotectdll_str[] = "mskeyprotect.dll";
            mskeyprotectdll = f_LoadLibraryA(mskeyprotectdll_str);
        }
    }
    __forceinline void load_msls31() noexcept {
        if (f_LoadLibraryA) {
            char msls31dll_str[] = "msls31.dll";
            msls31dll = f_LoadLibraryA(msls31dll_str);
        }
    }
    __forceinline void load_msmpeg2adec() noexcept {
        if (f_LoadLibraryA) {
            char msmpeg2adecdll_str[] = "msmpeg2adec.dll";
            msmpeg2adecdll = f_LoadLibraryA(msmpeg2adecdll_str);
        }
    }
    __forceinline void load_msmpeg2vdec() noexcept {
        if (f_LoadLibraryA) {
            char msmpeg2vdecdll_str[] = "msmpeg2vdec.dll";
            msmpeg2vdecdll = f_LoadLibraryA(msmpeg2vdecdll_str);
        }
    }
    __forceinline void load_msobjs() noexcept {
        if (f_LoadLibraryA) {
            char msobjsdll_str[] = "msobjs.dll";
            msobjsdll = f_LoadLibraryA(msobjsdll_str);
        }
    }
    __forceinline void load_msoert2() noexcept {
        if (f_LoadLibraryA) {
            char msoert2dll_str[] = "msoert2.dll";
            msoert2dll = f_LoadLibraryA(msoert2dll_str);
        }
    }
    __forceinline void load_MSOpusDecoder() noexcept {
        if (f_LoadLibraryA) {
            char MSOpusDecoderdll_str[] = "MSOpusDecoder.dll";
            MSOpusDecoderdll = f_LoadLibraryA(MSOpusDecoderdll_str);
        }
    }
    __forceinline void load_mspatcha() noexcept {
        if (f_LoadLibraryA) {
            char mspatchadll_str[] = "mspatcha.dll";
            mspatchadll = f_LoadLibraryA(mspatchadll_str);
        }
    }
    __forceinline void load_mspatchc() noexcept {
        if (f_LoadLibraryA) {
            char mspatchcdll_str[] = "mspatchc.dll";
            mspatchcdll = f_LoadLibraryA(mspatchcdll_str);
        }
    }
    __forceinline void load_MSPhotography() noexcept {
        if (f_LoadLibraryA) {
            char MSPhotographydll_str[] = "MSPhotography.dll";
            MSPhotographydll = f_LoadLibraryA(MSPhotographydll_str);
        }
    }
    __forceinline void load_msports() noexcept {
        if (f_LoadLibraryA) {
            char msportsdll_str[] = "msports.dll";
            msportsdll = f_LoadLibraryA(msportsdll_str);
        }
    }
    __forceinline void load_msprivs() noexcept {
        if (f_LoadLibraryA) {
            char msprivsdll_str[] = "msprivs.dll";
            msprivsdll = f_LoadLibraryA(msprivsdll_str);
        }
    }
    __forceinline void load_msrahc() noexcept {
        if (f_LoadLibraryA) {
            char msrahcdll_str[] = "msrahc.dll";
            msrahcdll = f_LoadLibraryA(msrahcdll_str);
        }
    }
    __forceinline void load_msrating() noexcept {
        if (f_LoadLibraryA) {
            char msratingdll_str[] = "msrating.dll";
            msratingdll = f_LoadLibraryA(msratingdll_str);
        }
    }
    __forceinline void load_MSRAWImage() noexcept {
        if (f_LoadLibraryA) {
            char MSRAWImagedll_str[] = "MSRAWImage.dll";
            MSRAWImagedll = f_LoadLibraryA(MSRAWImagedll_str);
        }
    }
    __forceinline void load_MsRdpWebAccess() noexcept {
        if (f_LoadLibraryA) {
            char MsRdpWebAccessdll_str[] = "MsRdpWebAccess.dll";
            MsRdpWebAccessdll = f_LoadLibraryA(MsRdpWebAccessdll_str);
        }
    }
    __forceinline void load_msrle32() noexcept {
        if (f_LoadLibraryA) {
            char msrle32dll_str[] = "msrle32.dll";
            msrle32dll = f_LoadLibraryA(msrle32dll_str);
        }
    }
    __forceinline void load_msscntrs() noexcept {
        if (f_LoadLibraryA) {
            char msscntrsdll_str[] = "msscntrs.dll";
            msscntrsdll = f_LoadLibraryA(msscntrsdll_str);
        }
    }
    __forceinline void load_mssecuser() noexcept {
        if (f_LoadLibraryA) {
            char mssecuserdll_str[] = "mssecuser.dll";
            mssecuserdll = f_LoadLibraryA(mssecuserdll_str);
        }
    }
    __forceinline void load_mssecwfpu() noexcept {
        if (f_LoadLibraryA) {
            char mssecwfpudll_str[] = "mssecwfpu.dll";
            mssecwfpudll = f_LoadLibraryA(mssecwfpudll_str);
        }
    }
    __forceinline void load_mssign32() noexcept {
        if (f_LoadLibraryA) {
            char mssign32dll_str[] = "mssign32.dll";
            mssign32dll = f_LoadLibraryA(mssign32dll_str);
        }
    }
    __forceinline void load_mssip32() noexcept {
        if (f_LoadLibraryA) {
            char mssip32dll_str[] = "mssip32.dll";
            mssip32dll = f_LoadLibraryA(mssip32dll_str);
        }
    }
    __forceinline void load_mssitlb() noexcept {
        if (f_LoadLibraryA) {
            char mssitlbdll_str[] = "mssitlb.dll";
            mssitlbdll = f_LoadLibraryA(mssitlbdll_str);
        }
    }
    __forceinline void load_MsSpellCheckingFacility() noexcept {
        if (f_LoadLibraryA) {
            char MsSpellCheckingFacilitydll_str[] = "MsSpellCheckingFacility.dll";
            MsSpellCheckingFacilitydll = f_LoadLibraryA(MsSpellCheckingFacilitydll_str);
        }
    }
    __forceinline void load_mssph() noexcept {
        if (f_LoadLibraryA) {
            char mssphdll_str[] = "mssph.dll";
            mssphdll = f_LoadLibraryA(mssphdll_str);
        }
    }
    __forceinline void load_mssprxy() noexcept {
        if (f_LoadLibraryA) {
            char mssprxydll_str[] = "mssprxy.dll";
            mssprxydll = f_LoadLibraryA(mssprxydll_str);
        }
    }
    __forceinline void load_mssrch() noexcept {
        if (f_LoadLibraryA) {
            char mssrchdll_str[] = "mssrch.dll";
            mssrchdll = f_LoadLibraryA(mssrchdll_str);
        }
    }
    __forceinline void load_mssvp() noexcept {
        if (f_LoadLibraryA) {
            char mssvpdll_str[] = "mssvp.dll";
            mssvpdll = f_LoadLibraryA(mssvpdll_str);
        }
    }
    __forceinline void load_mstask() noexcept {
        if (f_LoadLibraryA) {
            char mstaskdll_str[] = "mstask.dll";
            mstaskdll = f_LoadLibraryA(mstaskdll_str);
        }
    }
    __forceinline void load_msTextPrediction() noexcept {
        if (f_LoadLibraryA) {
            char msTextPredictiondll_str[] = "msTextPrediction.dll";
            msTextPredictiondll = f_LoadLibraryA(msTextPredictiondll_str);
        }
    }
    __forceinline void load_mstscax() noexcept {
        if (f_LoadLibraryA) {
            char mstscaxdll_str[] = "mstscax.dll";
            mstscaxdll = f_LoadLibraryA(mstscaxdll_str);
        }
    }
    __forceinline void load_msutb() noexcept {
        if (f_LoadLibraryA) {
            char msutbdll_str[] = "msutb.dll";
            msutbdll = f_LoadLibraryA(msutbdll_str);
        }
    }
    __forceinline void load_msv1_0() noexcept {
        if (f_LoadLibraryA) {
            char msv1_0dll_str[] = "msv1_0.dll";
            msv1_0dll = f_LoadLibraryA(msv1_0dll_str);
        }
    }
    __forceinline void load_msvcirt() noexcept {
        if (f_LoadLibraryA) {
            char msvcirtdll_str[] = "msvcirt.dll";
            msvcirtdll = f_LoadLibraryA(msvcirtdll_str);
        }
    }
    __forceinline void load_msvcp100() noexcept {
        if (f_LoadLibraryA) {
            char msvcp100dll_str[] = "msvcp100.dll";
            msvcp100dll = f_LoadLibraryA(msvcp100dll_str);
        }
    }
    __forceinline void load_msvcp110() noexcept {
        if (f_LoadLibraryA) {
            char msvcp110dll_str[] = "msvcp110.dll";
            msvcp110dll = f_LoadLibraryA(msvcp110dll_str);
        }
    }
    __forceinline void load_msvcp110_win() noexcept {
        if (f_LoadLibraryA) {
            char msvcp110_windll_str[] = "msvcp110_win.dll";
            msvcp110_windll = f_LoadLibraryA(msvcp110_windll_str);
        }
    }
    __forceinline void load_msvcp120() noexcept {
        if (f_LoadLibraryA) {
            char msvcp120dll_str[] = "msvcp120.dll";
            msvcp120dll = f_LoadLibraryA(msvcp120dll_str);
        }
    }
    __forceinline void load_msvcp120_clr0400() noexcept {
        if (f_LoadLibraryA) {
            char msvcp120_clr0400dll_str[] = "msvcp120_clr0400.dll";
            msvcp120_clr0400dll = f_LoadLibraryA(msvcp120_clr0400dll_str);
        }
    }
    __forceinline void load_msvcp140() noexcept {
        if (f_LoadLibraryA) {
            char msvcp140dll_str[] = "msvcp140.dll";
            msvcp140dll = f_LoadLibraryA(msvcp140dll_str);
        }
    }
    __forceinline void load_msvcp140d() noexcept {
        if (f_LoadLibraryA) {
            char msvcp140ddll_str[] = "msvcp140d.dll";
            msvcp140ddll = f_LoadLibraryA(msvcp140ddll_str);
        }
    }
    __forceinline void load_msvcp140d_atomic_wait() noexcept {
        if (f_LoadLibraryA) {
            char msvcp140d_atomic_waitdll_str[] = "msvcp140d_atomic_wait.dll";
            msvcp140d_atomic_waitdll = f_LoadLibraryA(msvcp140d_atomic_waitdll_str);
        }
    }
    __forceinline void load_msvcp140d_codecvt_ids() noexcept {
        if (f_LoadLibraryA) {
            char msvcp140d_codecvt_idsdll_str[] = "msvcp140d_codecvt_ids.dll";
            msvcp140d_codecvt_idsdll = f_LoadLibraryA(msvcp140d_codecvt_idsdll_str);
        }
    }
    __forceinline void load_msvcp140_1() noexcept {
        if (f_LoadLibraryA) {
            char msvcp140_1dll_str[] = "msvcp140_1.dll";
            msvcp140_1dll = f_LoadLibraryA(msvcp140_1dll_str);
        }
    }
    __forceinline void load_msvcp140_1d() noexcept {
        if (f_LoadLibraryA) {
            char msvcp140_1ddll_str[] = "msvcp140_1d.dll";
            msvcp140_1ddll = f_LoadLibraryA(msvcp140_1ddll_str);
        }
    }
    __forceinline void load_msvcp140_2() noexcept {
        if (f_LoadLibraryA) {
            char msvcp140_2dll_str[] = "msvcp140_2.dll";
            msvcp140_2dll = f_LoadLibraryA(msvcp140_2dll_str);
        }
    }
    __forceinline void load_msvcp140_2d() noexcept {
        if (f_LoadLibraryA) {
            char msvcp140_2ddll_str[] = "msvcp140_2d.dll";
            msvcp140_2ddll = f_LoadLibraryA(msvcp140_2ddll_str);
        }
    }
    __forceinline void load_msvcp140_atomic_wait() noexcept {
        if (f_LoadLibraryA) {
            char msvcp140_atomic_waitdll_str[] = "msvcp140_atomic_wait.dll";
            msvcp140_atomic_waitdll = f_LoadLibraryA(msvcp140_atomic_waitdll_str);
        }
    }
    __forceinline void load_msvcp140_clr0400() noexcept {
        if (f_LoadLibraryA) {
            char msvcp140_clr0400dll_str[] = "msvcp140_clr0400.dll";
            msvcp140_clr0400dll = f_LoadLibraryA(msvcp140_clr0400dll_str);
        }
    }
    __forceinline void load_msvcp140_codecvt_ids() noexcept {
        if (f_LoadLibraryA) {
            char msvcp140_codecvt_idsdll_str[] = "msvcp140_codecvt_ids.dll";
            msvcp140_codecvt_idsdll = f_LoadLibraryA(msvcp140_codecvt_idsdll_str);
        }
    }
    __forceinline void load_msvcp60() noexcept {
        if (f_LoadLibraryA) {
            char msvcp60dll_str[] = "msvcp60.dll";
            msvcp60dll = f_LoadLibraryA(msvcp60dll_str);
        }
    }
    __forceinline void load_msvcp_win() noexcept {
        if (f_LoadLibraryA) {
            char msvcp_windll_str[] = "msvcp_win.dll";
            msvcp_windll = f_LoadLibraryA(msvcp_windll_str);
        }
    }
    __forceinline void load_msvcr100() noexcept {
        if (f_LoadLibraryA) {
            char msvcr100dll_str[] = "msvcr100.dll";
            msvcr100dll = f_LoadLibraryA(msvcr100dll_str);
        }
    }
    __forceinline void load_msvcr100_clr0400() noexcept {
        if (f_LoadLibraryA) {
            char msvcr100_clr0400dll_str[] = "msvcr100_clr0400.dll";
            msvcr100_clr0400dll = f_LoadLibraryA(msvcr100_clr0400dll_str);
        }
    }
    __forceinline void load_msvcr110() noexcept {
        if (f_LoadLibraryA) {
            char msvcr110dll_str[] = "msvcr110.dll";
            msvcr110dll = f_LoadLibraryA(msvcr110dll_str);
        }
    }
    __forceinline void load_msvcr120() noexcept {
        if (f_LoadLibraryA) {
            char msvcr120dll_str[] = "msvcr120.dll";
            msvcr120dll = f_LoadLibraryA(msvcr120dll_str);
        }
    }
    __forceinline void load_msvcr120_clr0400() noexcept {
        if (f_LoadLibraryA) {
            char msvcr120_clr0400dll_str[] = "msvcr120_clr0400.dll";
            msvcr120_clr0400dll = f_LoadLibraryA(msvcr120_clr0400dll_str);
        }
    }
    __forceinline void load_msvcrt() noexcept {
        if (f_LoadLibraryA) {
            char msvcrtdll_str[] = "msvcrt.dll";
            msvcrtdll = f_LoadLibraryA(msvcrtdll_str);
        }
    }
    __forceinline void load_msvfw32() noexcept {
        if (f_LoadLibraryA) {
            char msvfw32dll_str[] = "msvfw32.dll";
            msvfw32dll = f_LoadLibraryA(msvfw32dll_str);
        }
    }
    __forceinline void load_msvidc32() noexcept {
        if (f_LoadLibraryA) {
            char msvidc32dll_str[] = "msvidc32.dll";
            msvidc32dll = f_LoadLibraryA(msvidc32dll_str);
        }
    }
    __forceinline void load_MSVidCtl() noexcept {
        if (f_LoadLibraryA) {
            char MSVidCtldll_str[] = "MSVidCtl.dll";
            MSVidCtldll = f_LoadLibraryA(MSVidCtldll_str);
        }
    }
    __forceinline void load_MSVideoDSP() noexcept {
        if (f_LoadLibraryA) {
            char MSVideoDSPdll_str[] = "MSVideoDSP.dll";
            MSVideoDSPdll = f_LoadLibraryA(MSVideoDSPdll_str);
        }
    }
    __forceinline void load_MSVP9DEC() noexcept {
        if (f_LoadLibraryA) {
            char MSVP9DECdll_str[] = "MSVP9DEC.dll";
            MSVP9DECdll = f_LoadLibraryA(MSVP9DECdll_str);
        }
    }
    __forceinline void load_msvproc() noexcept {
        if (f_LoadLibraryA) {
            char msvprocdll_str[] = "msvproc.dll";
            msvprocdll = f_LoadLibraryA(msvprocdll_str);
        }
    }
    __forceinline void load_MSVPXENC() noexcept {
        if (f_LoadLibraryA) {
            char MSVPXENCdll_str[] = "MSVPXENC.dll";
            MSVPXENCdll = f_LoadLibraryA(MSVPXENCdll_str);
        }
    }
    __forceinline void load_MSWB7() noexcept {
        if (f_LoadLibraryA) {
            char MSWB7dll_str[] = "MSWB7.dll";
            MSWB7dll = f_LoadLibraryA(MSWB7dll_str);
        }
    }
    __forceinline void load_MSWebp() noexcept {
        if (f_LoadLibraryA) {
            char MSWebpdll_str[] = "MSWebp.dll";
            MSWebpdll = f_LoadLibraryA(MSWebpdll_str);
        }
    }
    __forceinline void load_mswmdm() noexcept {
        if (f_LoadLibraryA) {
            char mswmdmdll_str[] = "mswmdm.dll";
            mswmdmdll = f_LoadLibraryA(mswmdmdll_str);
        }
    }
    __forceinline void load_mswsock() noexcept {
        if (f_LoadLibraryA) {
            char mswsockdll_str[] = "mswsock.dll";
            mswsockdll = f_LoadLibraryA(mswsockdll_str);
        }
    }
    __forceinline void load_msxml3() noexcept {
        if (f_LoadLibraryA) {
            char msxml3dll_str[] = "msxml3.dll";
            msxml3dll = f_LoadLibraryA(msxml3dll_str);
        }
    }
    __forceinline void load_msxml3r() noexcept {
        if (f_LoadLibraryA) {
            char msxml3rdll_str[] = "msxml3r.dll";
            msxml3rdll = f_LoadLibraryA(msxml3rdll_str);
        }
    }
    __forceinline void load_msxml6() noexcept {
        if (f_LoadLibraryA) {
            char msxml6dll_str[] = "msxml6.dll";
            msxml6dll = f_LoadLibraryA(msxml6dll_str);
        }
    }
    __forceinline void load_msxml6r() noexcept {
        if (f_LoadLibraryA) {
            char msxml6rdll_str[] = "msxml6r.dll";
            msxml6rdll = f_LoadLibraryA(msxml6rdll_str);
        }
    }
    __forceinline void load_msyuv() noexcept {
        if (f_LoadLibraryA) {
            char msyuvdll_str[] = "msyuv.dll";
            msyuvdll = f_LoadLibraryA(msyuvdll_str);
        }
    }
    __forceinline void load_MtcModel() noexcept {
        if (f_LoadLibraryA) {
            char MtcModeldll_str[] = "MtcModel.dll";
            MtcModeldll = f_LoadLibraryA(MtcModeldll_str);
        }
    }
    __forceinline void load_MTF() noexcept {
        if (f_LoadLibraryA) {
            char MTFdll_str[] = "MTF.dll";
            MTFdll = f_LoadLibraryA(MTFdll_str);
        }
    }
    __forceinline void load_MTFAppServiceDS() noexcept {
        if (f_LoadLibraryA) {
            char MTFAppServiceDSdll_str[] = "MTFAppServiceDS.dll";
            MTFAppServiceDSdll = f_LoadLibraryA(MTFAppServiceDSdll_str);
        }
    }
    __forceinline void load_MtfDecoder() noexcept {
        if (f_LoadLibraryA) {
            char MtfDecoderdll_str[] = "MtfDecoder.dll";
            MtfDecoderdll = f_LoadLibraryA(MtfDecoderdll_str);
        }
    }
    __forceinline void load_MTFFuzzyDS() noexcept {
        if (f_LoadLibraryA) {
            char MTFFuzzyDSdll_str[] = "MTFFuzzyDS.dll";
            MTFFuzzyDSdll = f_LoadLibraryA(MTFFuzzyDSdll_str);
        }
    }
    __forceinline void load_MTFServer() noexcept {
        if (f_LoadLibraryA) {
            char MTFServerdll_str[] = "MTFServer.dll";
            MTFServerdll = f_LoadLibraryA(MTFServerdll_str);
        }
    }
    __forceinline void load_MTFSpellcheckDS() noexcept {
        if (f_LoadLibraryA) {
            char MTFSpellcheckDSdll_str[] = "MTFSpellcheckDS.dll";
            MTFSpellcheckDSdll = f_LoadLibraryA(MTFSpellcheckDSdll_str);
        }
    }
    __forceinline void load_mtxclu() noexcept {
        if (f_LoadLibraryA) {
            char mtxcludll_str[] = "mtxclu.dll";
            mtxcludll = f_LoadLibraryA(mtxcludll_str);
        }
    }
    __forceinline void load_mtxdm() noexcept {
        if (f_LoadLibraryA) {
            char mtxdmdll_str[] = "mtxdm.dll";
            mtxdmdll = f_LoadLibraryA(mtxdmdll_str);
        }
    }
    __forceinline void load_mtxex() noexcept {
        if (f_LoadLibraryA) {
            char mtxexdll_str[] = "mtxex.dll";
            mtxexdll = f_LoadLibraryA(mtxexdll_str);
        }
    }
    __forceinline void load_mtxoci() noexcept {
        if (f_LoadLibraryA) {
            char mtxocidll_str[] = "mtxoci.dll";
            mtxocidll = f_LoadLibraryA(mtxocidll_str);
        }
    }
    __forceinline void load_muifontsetup() noexcept {
        if (f_LoadLibraryA) {
            char muifontsetupdll_str[] = "muifontsetup.dll";
            muifontsetupdll = f_LoadLibraryA(muifontsetupdll_str);
        }
    }
    __forceinline void load_MUILanguageCleanup() noexcept {
        if (f_LoadLibraryA) {
            char MUILanguageCleanupdll_str[] = "MUILanguageCleanup.dll";
            MUILanguageCleanupdll = f_LoadLibraryA(MUILanguageCleanupdll_str);
        }
    }
    __forceinline void load_museuxdocked() noexcept {
        if (f_LoadLibraryA) {
            char museuxdockeddll_str[] = "museuxdocked.dll";
            museuxdockeddll = f_LoadLibraryA(museuxdockeddll_str);
        }
    }
    __forceinline void load_MusUpdateHandlers() noexcept {
        if (f_LoadLibraryA) {
            char MusUpdateHandlersdll_str[] = "MusUpdateHandlers.dll";
            MusUpdateHandlersdll = f_LoadLibraryA(MusUpdateHandlersdll_str);
        }
    }
    __forceinline void load_mycomput() noexcept {
        if (f_LoadLibraryA) {
            char mycomputdll_str[] = "mycomput.dll";
            mycomputdll = f_LoadLibraryA(mycomputdll_str);
        }
    }
    __forceinline void load_mydocs() noexcept {
        if (f_LoadLibraryA) {
            char mydocsdll_str[] = "mydocs.dll";
            mydocsdll = f_LoadLibraryA(mydocsdll_str);
        }
    }
    __forceinline void load_NahimicAPO3ConfiguratorDaemonModule() noexcept {
        if (f_LoadLibraryA) {
            char NahimicAPO3ConfiguratorDaemonModuledll_str[] = "NahimicAPO3ConfiguratorDaemonModule.dll";
            NahimicAPO3ConfiguratorDaemonModuledll = f_LoadLibraryA(NahimicAPO3ConfiguratorDaemonModuledll_str);
        }
    }
    __forceinline void load_NahimicAPO4() noexcept {
        if (f_LoadLibraryA) {
            char NahimicAPO4dll_str[] = "NahimicAPO4.dll";
            NahimicAPO4dll = f_LoadLibraryA(NahimicAPO4dll_str);
        }
    }
    __forceinline void load_NahimicAPO4API() noexcept {
        if (f_LoadLibraryA) {
            char NahimicAPO4APIdll_str[] = "NahimicAPO4API.dll";
            NahimicAPO4APIdll = f_LoadLibraryA(NahimicAPO4APIdll_str);
        }
    }
    __forceinline void load_NahimicAPO4ConfiguratorDaemonModule() noexcept {
        if (f_LoadLibraryA) {
            char NahimicAPO4ConfiguratorDaemonModuledll_str[] = "NahimicAPO4ConfiguratorDaemonModule.dll";
            NahimicAPO4ConfiguratorDaemonModuledll = f_LoadLibraryA(NahimicAPO4ConfiguratorDaemonModuledll_str);
        }
    }
    __forceinline void load_NahimicAPO4ExpertAPI() noexcept {
        if (f_LoadLibraryA) {
            char NahimicAPO4ExpertAPIdll_str[] = "NahimicAPO4ExpertAPI.dll";
            NahimicAPO4ExpertAPIdll = f_LoadLibraryA(NahimicAPO4ExpertAPIdll_str);
        }
    }
    __forceinline void load_NahimicPnPAPO4ConfiguratorDaemonModule() noexcept {
        if (f_LoadLibraryA) {
            char NahimicPnPAPO4ConfiguratorDaemonModuledll_str[] = "NahimicPnPAPO4ConfiguratorDaemonModule.dll";
            NahimicPnPAPO4ConfiguratorDaemonModuledll = f_LoadLibraryA(NahimicPnPAPO4ConfiguratorDaemonModuledll_str);
        }
    }
    __forceinline void load_NahimicSharedMemory() noexcept {
        if (f_LoadLibraryA) {
            char NahimicSharedMemorydll_str[] = "NahimicSharedMemory.dll";
            NahimicSharedMemorydll = f_LoadLibraryA(NahimicSharedMemorydll_str);
        }
    }
    __forceinline void load_NapiNSP() noexcept {
        if (f_LoadLibraryA) {
            char NapiNSPdll_str[] = "NapiNSP.dll";
            NapiNSPdll = f_LoadLibraryA(NapiNSPdll_str);
        }
    }
    __forceinline void load_NaturalAuth() noexcept {
        if (f_LoadLibraryA) {
            char NaturalAuthdll_str[] = "NaturalAuth.dll";
            NaturalAuthdll = f_LoadLibraryA(NaturalAuthdll_str);
        }
    }
    __forceinline void load_NaturalAuthClient() noexcept {
        if (f_LoadLibraryA) {
            char NaturalAuthClientdll_str[] = "NaturalAuthClient.dll";
            NaturalAuthClientdll = f_LoadLibraryA(NaturalAuthClientdll_str);
        }
    }
    __forceinline void load_NaturalLanguage6() noexcept {
        if (f_LoadLibraryA) {
            char NaturalLanguage6dll_str[] = "NaturalLanguage6.dll";
            NaturalLanguage6dll = f_LoadLibraryA(NaturalLanguage6dll_str);
        }
    }
    __forceinline void load_navshutdown() noexcept {
        if (f_LoadLibraryA) {
            char navshutdowndll_str[] = "navshutdown.dll";
            navshutdowndll = f_LoadLibraryA(navshutdowndll_str);
        }
    }
    __forceinline void load_NcaApi() noexcept {
        if (f_LoadLibraryA) {
            char NcaApidll_str[] = "NcaApi.dll";
            NcaApidll = f_LoadLibraryA(NcaApidll_str);
        }
    }
    __forceinline void load_NcaSvc() noexcept {
        if (f_LoadLibraryA) {
            char NcaSvcdll_str[] = "NcaSvc.dll";
            NcaSvcdll = f_LoadLibraryA(NcaSvcdll_str);
        }
    }
    __forceinline void load_ncbservice() noexcept {
        if (f_LoadLibraryA) {
            char ncbservicedll_str[] = "ncbservice.dll";
            ncbservicedll = f_LoadLibraryA(ncbservicedll_str);
        }
    }
    __forceinline void load_NcdAutoSetup() noexcept {
        if (f_LoadLibraryA) {
            char NcdAutoSetupdll_str[] = "NcdAutoSetup.dll";
            NcdAutoSetupdll = f_LoadLibraryA(NcdAutoSetupdll_str);
        }
    }
    __forceinline void load_NcdProp() noexcept {
        if (f_LoadLibraryA) {
            char NcdPropdll_str[] = "NcdProp.dll";
            NcdPropdll = f_LoadLibraryA(NcdPropdll_str);
        }
    }
    __forceinline void load_nci() noexcept {
        if (f_LoadLibraryA) {
            char ncidll_str[] = "nci.dll";
            ncidll = f_LoadLibraryA(ncidll_str);
        }
    }
    __forceinline void load_ncobjapi() noexcept {
        if (f_LoadLibraryA) {
            char ncobjapidll_str[] = "ncobjapi.dll";
            ncobjapidll = f_LoadLibraryA(ncobjapidll_str);
        }
    }
    __forceinline void load_ncrypt() noexcept {
        if (f_LoadLibraryA) {
            char ncryptdll_str[] = "ncrypt.dll";
            ncryptdll = f_LoadLibraryA(ncryptdll_str);
        }
    }
    __forceinline void load_ncryptprov() noexcept {
        if (f_LoadLibraryA) {
            char ncryptprovdll_str[] = "ncryptprov.dll";
            ncryptprovdll = f_LoadLibraryA(ncryptprovdll_str);
        }
    }
    __forceinline void load_ncryptsslp() noexcept {
        if (f_LoadLibraryA) {
            char ncryptsslpdll_str[] = "ncryptsslp.dll";
            ncryptsslpdll = f_LoadLibraryA(ncryptsslpdll_str);
        }
    }
    __forceinline void load_ncsi() noexcept {
        if (f_LoadLibraryA) {
            char ncsidll_str[] = "ncsi.dll";
            ncsidll = f_LoadLibraryA(ncsidll_str);
        }
    }
    __forceinline void load_ncuprov() noexcept {
        if (f_LoadLibraryA) {
            char ncuprovdll_str[] = "ncuprov.dll";
            ncuprovdll = f_LoadLibraryA(ncuprovdll_str);
        }
    }
    __forceinline void load_nddeapi() noexcept {
        if (f_LoadLibraryA) {
            char nddeapidll_str[] = "nddeapi.dll";
            nddeapidll = f_LoadLibraryA(nddeapidll_str);
        }
    }
    __forceinline void load_ndfapi() noexcept {
        if (f_LoadLibraryA) {
            char ndfapidll_str[] = "ndfapi.dll";
            ndfapidll = f_LoadLibraryA(ndfapidll_str);
        }
    }
    __forceinline void load_ndfetw() noexcept {
        if (f_LoadLibraryA) {
            char ndfetwdll_str[] = "ndfetw.dll";
            ndfetwdll = f_LoadLibraryA(ndfetwdll_str);
        }
    }
    __forceinline void load_ndfhcdiscovery() noexcept {
        if (f_LoadLibraryA) {
            char ndfhcdiscoverydll_str[] = "ndfhcdiscovery.dll";
            ndfhcdiscoverydll = f_LoadLibraryA(ndfhcdiscoverydll_str);
        }
    }
    __forceinline void load_ndishc() noexcept {
        if (f_LoadLibraryA) {
            char ndishcdll_str[] = "ndishc.dll";
            ndishcdll = f_LoadLibraryA(ndishcdll_str);
        }
    }
    __forceinline void load_ndproxystub() noexcept {
        if (f_LoadLibraryA) {
            char ndproxystubdll_str[] = "ndproxystub.dll";
            ndproxystubdll = f_LoadLibraryA(ndproxystubdll_str);
        }
    }
    __forceinline void load_nduprov() noexcept {
        if (f_LoadLibraryA) {
            char nduprovdll_str[] = "nduprov.dll";
            nduprovdll = f_LoadLibraryA(nduprovdll_str);
        }
    }
    __forceinline void load_negoexts() noexcept {
        if (f_LoadLibraryA) {
            char negoextsdll_str[] = "negoexts.dll";
            negoextsdll = f_LoadLibraryA(negoextsdll_str);
        }
    }
    __forceinline void load_netapi32() noexcept {
        if (f_LoadLibraryA) {
            char netapi32dll_str[] = "netapi32.dll";
            netapi32dll = f_LoadLibraryA(netapi32dll_str);
        }
    }
    __forceinline void load_netbios() noexcept {
        if (f_LoadLibraryA) {
            char netbiosdll_str[] = "netbios.dll";
            netbiosdll = f_LoadLibraryA(netbiosdll_str);
        }
    }
    __forceinline void load_netcenter() noexcept {
        if (f_LoadLibraryA) {
            char netcenterdll_str[] = "netcenter.dll";
            netcenterdll = f_LoadLibraryA(netcenterdll_str);
        }
    }
    __forceinline void load_netcfgx() noexcept {
        if (f_LoadLibraryA) {
            char netcfgxdll_str[] = "netcfgx.dll";
            netcfgxdll = f_LoadLibraryA(netcfgxdll_str);
        }
    }
    __forceinline void load_netcorehc() noexcept {
        if (f_LoadLibraryA) {
            char netcorehcdll_str[] = "netcorehc.dll";
            netcorehcdll = f_LoadLibraryA(netcorehcdll_str);
        }
    }
    __forceinline void load_netdiagfx() noexcept {
        if (f_LoadLibraryA) {
            char netdiagfxdll_str[] = "netdiagfx.dll";
            netdiagfxdll = f_LoadLibraryA(netdiagfxdll_str);
        }
    }
    __forceinline void load_NetDriverInstall() noexcept {
        if (f_LoadLibraryA) {
            char NetDriverInstalldll_str[] = "NetDriverInstall.dll";
            NetDriverInstalldll = f_LoadLibraryA(NetDriverInstalldll_str);
        }
    }
    __forceinline void load_netevent() noexcept {
        if (f_LoadLibraryA) {
            char neteventdll_str[] = "netevent.dll";
            neteventdll = f_LoadLibraryA(neteventdll_str);
        }
    }
    __forceinline void load_netfxperf() noexcept {
        if (f_LoadLibraryA) {
            char netfxperfdll_str[] = "netfxperf.dll";
            netfxperfdll = f_LoadLibraryA(netfxperfdll_str);
        }
    }
    __forceinline void load_neth() noexcept {
        if (f_LoadLibraryA) {
            char nethdll_str[] = "neth.dll";
            nethdll = f_LoadLibraryA(nethdll_str);
        }
    }
    __forceinline void load_netid() noexcept {
        if (f_LoadLibraryA) {
            char netiddll_str[] = "netid.dll";
            netiddll = f_LoadLibraryA(netiddll_str);
        }
    }
    __forceinline void load_netiohlp() noexcept {
        if (f_LoadLibraryA) {
            char netiohlpdll_str[] = "netiohlp.dll";
            netiohlpdll = f_LoadLibraryA(netiohlpdll_str);
        }
    }
    __forceinline void load_netjoin() noexcept {
        if (f_LoadLibraryA) {
            char netjoindll_str[] = "netjoin.dll";
            netjoindll = f_LoadLibraryA(netjoindll_str);
        }
    }
    __forceinline void load_netlogon() noexcept {
        if (f_LoadLibraryA) {
            char netlogondll_str[] = "netlogon.dll";
            netlogondll = f_LoadLibraryA(netlogondll_str);
        }
    }
    __forceinline void load_netman() noexcept {
        if (f_LoadLibraryA) {
            char netmandll_str[] = "netman.dll";
            netmandll = f_LoadLibraryA(netmandll_str);
        }
    }
    __forceinline void load_NetMgmtIF() noexcept {
        if (f_LoadLibraryA) {
            char NetMgmtIFdll_str[] = "NetMgmtIF.dll";
            NetMgmtIFdll = f_LoadLibraryA(NetMgmtIFdll_str);
        }
    }
    __forceinline void load_netmsg() noexcept {
        if (f_LoadLibraryA) {
            char netmsgdll_str[] = "netmsg.dll";
            netmsgdll = f_LoadLibraryA(netmsgdll_str);
        }
    }
    __forceinline void load_netplwiz() noexcept {
        if (f_LoadLibraryA) {
            char netplwizdll_str[] = "netplwiz.dll";
            netplwizdll = f_LoadLibraryA(netplwizdll_str);
        }
    }
    __forceinline void load_netprofm() noexcept {
        if (f_LoadLibraryA) {
            char netprofmdll_str[] = "netprofm.dll";
            netprofmdll = f_LoadLibraryA(netprofmdll_str);
        }
    }
    __forceinline void load_netprofmsvc() noexcept {
        if (f_LoadLibraryA) {
            char netprofmsvcdll_str[] = "netprofmsvc.dll";
            netprofmsvcdll = f_LoadLibraryA(netprofmsvcdll_str);
        }
    }
    __forceinline void load_netprovfw() noexcept {
        if (f_LoadLibraryA) {
            char netprovfwdll_str[] = "netprovfw.dll";
            netprovfwdll = f_LoadLibraryA(netprovfwdll_str);
        }
    }
    __forceinline void load_netprovisionsp() noexcept {
        if (f_LoadLibraryA) {
            char netprovisionspdll_str[] = "netprovisionsp.dll";
            netprovisionspdll = f_LoadLibraryA(netprovisionspdll_str);
        }
    }
    __forceinline void load_NetSetupApi() noexcept {
        if (f_LoadLibraryA) {
            char NetSetupApidll_str[] = "NetSetupApi.dll";
            NetSetupApidll = f_LoadLibraryA(NetSetupApidll_str);
        }
    }
    __forceinline void load_NetSetupEngine() noexcept {
        if (f_LoadLibraryA) {
            char NetSetupEnginedll_str[] = "NetSetupEngine.dll";
            NetSetupEnginedll = f_LoadLibraryA(NetSetupEnginedll_str);
        }
    }
    __forceinline void load_NetSetupShim() noexcept {
        if (f_LoadLibraryA) {
            char NetSetupShimdll_str[] = "NetSetupShim.dll";
            NetSetupShimdll = f_LoadLibraryA(NetSetupShimdll_str);
        }
    }
    __forceinline void load_NetSetupSvc() noexcept {
        if (f_LoadLibraryA) {
            char NetSetupSvcdll_str[] = "NetSetupSvc.dll";
            NetSetupSvcdll = f_LoadLibraryA(NetSetupSvcdll_str);
        }
    }
    __forceinline void load_netshell() noexcept {
        if (f_LoadLibraryA) {
            char netshelldll_str[] = "netshell.dll";
            netshelldll = f_LoadLibraryA(netshelldll_str);
        }
    }
    __forceinline void load_nettrace() noexcept {
        if (f_LoadLibraryA) {
            char nettracedll_str[] = "nettrace.dll";
            nettracedll = f_LoadLibraryA(nettracedll_str);
        }
    }
    __forceinline void load_netutils() noexcept {
        if (f_LoadLibraryA) {
            char netutilsdll_str[] = "netutils.dll";
            netutilsdll = f_LoadLibraryA(netutilsdll_str);
        }
    }
    __forceinline void load_NetworkBindingEngineMigPlugin() noexcept {
        if (f_LoadLibraryA) {
            char NetworkBindingEngineMigPlugindll_str[] = "NetworkBindingEngineMigPlugin.dll";
            NetworkBindingEngineMigPlugindll = f_LoadLibraryA(NetworkBindingEngineMigPlugindll_str);
        }
    }
    __forceinline void load_NetworkCollectionAgent() noexcept {
        if (f_LoadLibraryA) {
            char NetworkCollectionAgentdll_str[] = "NetworkCollectionAgent.dll";
            NetworkCollectionAgentdll = f_LoadLibraryA(NetworkCollectionAgentdll_str);
        }
    }
    __forceinline void load_NetworkDesktopSettings() noexcept {
        if (f_LoadLibraryA) {
            char NetworkDesktopSettingsdll_str[] = "NetworkDesktopSettings.dll";
            NetworkDesktopSettingsdll = f_LoadLibraryA(NetworkDesktopSettingsdll_str);
        }
    }
    __forceinline void load_networkexplorer() noexcept {
        if (f_LoadLibraryA) {
            char networkexplorerdll_str[] = "networkexplorer.dll";
            networkexplorerdll = f_LoadLibraryA(networkexplorerdll_str);
        }
    }
    __forceinline void load_networkhelper() noexcept {
        if (f_LoadLibraryA) {
            char networkhelperdll_str[] = "networkhelper.dll";
            networkhelperdll = f_LoadLibraryA(networkhelperdll_str);
        }
    }
    __forceinline void load_NetworkIcon() noexcept {
        if (f_LoadLibraryA) {
            char NetworkIcondll_str[] = "NetworkIcon.dll";
            NetworkIcondll = f_LoadLibraryA(NetworkIcondll_str);
        }
    }
    __forceinline void load_networkitemfactory() noexcept {
        if (f_LoadLibraryA) {
            char networkitemfactorydll_str[] = "networkitemfactory.dll";
            networkitemfactorydll = f_LoadLibraryA(networkitemfactorydll_str);
        }
    }
    __forceinline void load_NetworkMobileSettings() noexcept {
        if (f_LoadLibraryA) {
            char NetworkMobileSettingsdll_str[] = "NetworkMobileSettings.dll";
            NetworkMobileSettingsdll = f_LoadLibraryA(NetworkMobileSettingsdll_str);
        }
    }
    __forceinline void load_NetworkProxyCsp() noexcept {
        if (f_LoadLibraryA) {
            char NetworkProxyCspdll_str[] = "NetworkProxyCsp.dll";
            NetworkProxyCspdll = f_LoadLibraryA(NetworkProxyCspdll_str);
        }
    }
    __forceinline void load_NetworkQoSPolicyCSP() noexcept {
        if (f_LoadLibraryA) {
            char NetworkQoSPolicyCSPdll_str[] = "NetworkQoSPolicyCSP.dll";
            NetworkQoSPolicyCSPdll = f_LoadLibraryA(NetworkQoSPolicyCSPdll_str);
        }
    }
    __forceinline void load_NetworkUXBroker() noexcept {
        if (f_LoadLibraryA) {
            char NetworkUXBrokerdll_str[] = "NetworkUXBroker.dll";
            NetworkUXBrokerdll = f_LoadLibraryA(NetworkUXBrokerdll_str);
        }
    }
    __forceinline void load_newdev() noexcept {
        if (f_LoadLibraryA) {
            char newdevdll_str[] = "newdev.dll";
            newdevdll = f_LoadLibraryA(newdevdll_str);
        }
    }
    __forceinline void load_NFCProvisioningPlugin() noexcept {
        if (f_LoadLibraryA) {
            char NFCProvisioningPlugindll_str[] = "NFCProvisioningPlugin.dll";
            NFCProvisioningPlugindll = f_LoadLibraryA(NFCProvisioningPlugindll_str);
        }
    }
    __forceinline void load_NfcRadioMedia() noexcept {
        if (f_LoadLibraryA) {
            char NfcRadioMediadll_str[] = "NfcRadioMedia.dll";
            NfcRadioMediadll = f_LoadLibraryA(NfcRadioMediadll_str);
        }
    }
    __forceinline void load_ngccredprov() noexcept {
        if (f_LoadLibraryA) {
            char ngccredprovdll_str[] = "ngccredprov.dll";
            ngccredprovdll = f_LoadLibraryA(ngccredprovdll_str);
        }
    }
    __forceinline void load_NgcCtnr() noexcept {
        if (f_LoadLibraryA) {
            char NgcCtnrdll_str[] = "NgcCtnr.dll";
            NgcCtnrdll = f_LoadLibraryA(NgcCtnrdll_str);
        }
    }
    __forceinline void load_NgcCtnrGidsHandler() noexcept {
        if (f_LoadLibraryA) {
            char NgcCtnrGidsHandlerdll_str[] = "NgcCtnrGidsHandler.dll";
            NgcCtnrGidsHandlerdll = f_LoadLibraryA(NgcCtnrGidsHandlerdll_str);
        }
    }
    __forceinline void load_NgcCtnrSvc() noexcept {
        if (f_LoadLibraryA) {
            char NgcCtnrSvcdll_str[] = "NgcCtnrSvc.dll";
            NgcCtnrSvcdll = f_LoadLibraryA(NgcCtnrSvcdll_str);
        }
    }
    __forceinline void load_NgcIsoCtnr() noexcept {
        if (f_LoadLibraryA) {
            char NgcIsoCtnrdll_str[] = "NgcIsoCtnr.dll";
            NgcIsoCtnrdll = f_LoadLibraryA(NgcIsoCtnrdll_str);
        }
    }
    __forceinline void load_ngckeyenum() noexcept {
        if (f_LoadLibraryA) {
            char ngckeyenumdll_str[] = "ngckeyenum.dll";
            ngckeyenumdll = f_LoadLibraryA(ngckeyenumdll_str);
        }
    }
    __forceinline void load_ngcksp() noexcept {
        if (f_LoadLibraryA) {
            char ngckspdll_str[] = "ngcksp.dll";
            ngckspdll = f_LoadLibraryA(ngckspdll_str);
        }
    }
    __forceinline void load_ngclocal() noexcept {
        if (f_LoadLibraryA) {
            char ngclocaldll_str[] = "ngclocal.dll";
            ngclocaldll = f_LoadLibraryA(ngclocaldll_str);
        }
    }
    __forceinline void load_ngcpopkeysrv() noexcept {
        if (f_LoadLibraryA) {
            char ngcpopkeysrvdll_str[] = "ngcpopkeysrv.dll";
            ngcpopkeysrvdll = f_LoadLibraryA(ngcpopkeysrvdll_str);
        }
    }
    __forceinline void load_NgcProCsp() noexcept {
        if (f_LoadLibraryA) {
            char NgcProCspdll_str[] = "NgcProCsp.dll";
            NgcProCspdll = f_LoadLibraryA(NgcProCspdll_str);
        }
    }
    __forceinline void load_ngcrecovery() noexcept {
        if (f_LoadLibraryA) {
            char ngcrecoverydll_str[] = "ngcrecovery.dll";
            ngcrecoverydll = f_LoadLibraryA(ngcrecoverydll_str);
        }
    }
    __forceinline void load_ngcsvc() noexcept {
        if (f_LoadLibraryA) {
            char ngcsvcdll_str[] = "ngcsvc.dll";
            ngcsvcdll = f_LoadLibraryA(ngcsvcdll_str);
        }
    }
    __forceinline void load_ngctasks() noexcept {
        if (f_LoadLibraryA) {
            char ngctasksdll_str[] = "ngctasks.dll";
            ngctasksdll = f_LoadLibraryA(ngctasksdll_str);
        }
    }
    __forceinline void load_ngcutils() noexcept {
        if (f_LoadLibraryA) {
            char ngcutilsdll_str[] = "ngcutils.dll";
            ngcutilsdll = f_LoadLibraryA(ngcutilsdll_str);
        }
    }
    __forceinline void load_NhNotifSys() noexcept {
        if (f_LoadLibraryA) {
            char NhNotifSysdll_str[] = "NhNotifSys.dll";
            NhNotifSysdll = f_LoadLibraryA(NhNotifSysdll_str);
        }
    }
    __forceinline void load_ninput() noexcept {
        if (f_LoadLibraryA) {
            char ninputdll_str[] = "ninput.dll";
            ninputdll = f_LoadLibraryA(ninputdll_str);
        }
    }
    __forceinline void load_nlaapi() noexcept {
        if (f_LoadLibraryA) {
            char nlaapidll_str[] = "nlaapi.dll";
            nlaapidll = f_LoadLibraryA(nlaapidll_str);
        }
    }
    __forceinline void load_nlahc() noexcept {
        if (f_LoadLibraryA) {
            char nlahcdll_str[] = "nlahc.dll";
            nlahcdll = f_LoadLibraryA(nlahcdll_str);
        }
    }
    __forceinline void load_nlansp_c() noexcept {
        if (f_LoadLibraryA) {
            char nlansp_cdll_str[] = "nlansp_c.dll";
            nlansp_cdll = f_LoadLibraryA(nlansp_cdll_str);
        }
    }
    __forceinline void load_nlhtml() noexcept {
        if (f_LoadLibraryA) {
            char nlhtmldll_str[] = "nlhtml.dll";
            nlhtmldll = f_LoadLibraryA(nlhtmldll_str);
        }
    }
    __forceinline void load_nlmgp() noexcept {
        if (f_LoadLibraryA) {
            char nlmgpdll_str[] = "nlmgp.dll";
            nlmgpdll = f_LoadLibraryA(nlmgpdll_str);
        }
    }
    __forceinline void load_nlmproxy() noexcept {
        if (f_LoadLibraryA) {
            char nlmproxydll_str[] = "nlmproxy.dll";
            nlmproxydll = f_LoadLibraryA(nlmproxydll_str);
        }
    }
    __forceinline void load_nlmsprep() noexcept {
        if (f_LoadLibraryA) {
            char nlmsprepdll_str[] = "nlmsprep.dll";
            nlmsprepdll = f_LoadLibraryA(nlmsprepdll_str);
        }
    }
    __forceinline void load_nlsbres() noexcept {
        if (f_LoadLibraryA) {
            char nlsbresdll_str[] = "nlsbres.dll";
            nlsbresdll = f_LoadLibraryA(nlsbresdll_str);
        }
    }
    __forceinline void load_NlsData0000() noexcept {
        if (f_LoadLibraryA) {
            char NlsData0000dll_str[] = "NlsData0000.dll";
            NlsData0000dll = f_LoadLibraryA(NlsData0000dll_str);
        }
    }
    __forceinline void load_NlsData0009() noexcept {
        if (f_LoadLibraryA) {
            char NlsData0009dll_str[] = "NlsData0009.dll";
            NlsData0009dll = f_LoadLibraryA(NlsData0009dll_str);
        }
    }
    __forceinline void load_Nlsdl() noexcept {
        if (f_LoadLibraryA) {
            char Nlsdldll_str[] = "Nlsdl.dll";
            Nlsdldll = f_LoadLibraryA(Nlsdldll_str);
        }
    }
    __forceinline void load_NlsLexicons0009() noexcept {
        if (f_LoadLibraryA) {
            char NlsLexicons0009dll_str[] = "NlsLexicons0009.dll";
            NlsLexicons0009dll = f_LoadLibraryA(NlsLexicons0009dll_str);
        }
    }
    __forceinline void load_NmaDirect() noexcept {
        if (f_LoadLibraryA) {
            char NmaDirectdll_str[] = "NmaDirect.dll";
            NmaDirectdll = f_LoadLibraryA(NmaDirectdll_str);
        }
    }
    __forceinline void load_noise() noexcept {
        if (f_LoadLibraryA) {
            char noisedll_str[] = "noise.dll";
            noisedll = f_LoadLibraryA(noisedll_str);
        }
    }
    __forceinline void load_nonarpinv() noexcept {
        if (f_LoadLibraryA) {
            char nonarpinvdll_str[] = "nonarpinv.dll";
            nonarpinvdll = f_LoadLibraryA(nonarpinvdll_str);
        }
    }
    __forceinline void load_normaliz() noexcept {
        if (f_LoadLibraryA) {
            char normalizdll_str[] = "normaliz.dll";
            normalizdll = f_LoadLibraryA(normalizdll_str);
        }
    }
    __forceinline void load_NotificationController() noexcept {
        if (f_LoadLibraryA) {
            char NotificationControllerdll_str[] = "NotificationController.dll";
            NotificationControllerdll = f_LoadLibraryA(NotificationControllerdll_str);
        }
    }
    __forceinline void load_NotificationControllerPS() noexcept {
        if (f_LoadLibraryA) {
            char NotificationControllerPSdll_str[] = "NotificationControllerPS.dll";
            NotificationControllerPSdll = f_LoadLibraryA(NotificationControllerPSdll_str);
        }
    }
    __forceinline void load_NotificationIntelligencePlatform() noexcept {
        if (f_LoadLibraryA) {
            char NotificationIntelligencePlatformdll_str[] = "NotificationIntelligencePlatform.dll";
            NotificationIntelligencePlatformdll = f_LoadLibraryA(NotificationIntelligencePlatformdll_str);
        }
    }
    __forceinline void load_notificationplatformcomponent() noexcept {
        if (f_LoadLibraryA) {
            char notificationplatformcomponentdll_str[] = "notificationplatformcomponent.dll";
            notificationplatformcomponentdll = f_LoadLibraryA(notificationplatformcomponentdll_str);
        }
    }
    __forceinline void load_npmproxy() noexcept {
        if (f_LoadLibraryA) {
            char npmproxydll_str[] = "npmproxy.dll";
            npmproxydll = f_LoadLibraryA(npmproxydll_str);
        }
    }
    __forceinline void load_NPSM() noexcept {
        if (f_LoadLibraryA) {
            char NPSMdll_str[] = "NPSM.dll";
            NPSMdll = f_LoadLibraryA(NPSMdll_str);
        }
    }
    __forceinline void load_NPSMDesktopProvider() noexcept {
        if (f_LoadLibraryA) {
            char NPSMDesktopProviderdll_str[] = "NPSMDesktopProvider.dll";
            NPSMDesktopProviderdll = f_LoadLibraryA(NPSMDesktopProviderdll_str);
        }
    }
    __forceinline void load_nrpsrv() noexcept {
        if (f_LoadLibraryA) {
            char nrpsrvdll_str[] = "nrpsrv.dll";
            nrpsrvdll = f_LoadLibraryA(nrpsrvdll_str);
        }
    }
    __forceinline void load_nrtapi() noexcept {
        if (f_LoadLibraryA) {
            char nrtapidll_str[] = "nrtapi.dll";
            nrtapidll = f_LoadLibraryA(nrtapidll_str);
        }
    }
    __forceinline void load_nshhttp() noexcept {
        if (f_LoadLibraryA) {
            char nshhttpdll_str[] = "nshhttp.dll";
            nshhttpdll = f_LoadLibraryA(nshhttpdll_str);
        }
    }
    __forceinline void load_nshipsec() noexcept {
        if (f_LoadLibraryA) {
            char nshipsecdll_str[] = "nshipsec.dll";
            nshipsecdll = f_LoadLibraryA(nshipsecdll_str);
        }
    }
    __forceinline void load_nshwfp() noexcept {
        if (f_LoadLibraryA) {
            char nshwfpdll_str[] = "nshwfp.dll";
            nshwfpdll = f_LoadLibraryA(nshwfpdll_str);
        }
    }
    __forceinline void load_nsi() noexcept {
        if (f_LoadLibraryA) {
            char nsidll_str[] = "nsi.dll";
            nsidll = f_LoadLibraryA(nsidll_str);
        }
    }
    __forceinline void load_nsisvc() noexcept {
        if (f_LoadLibraryA) {
            char nsisvcdll_str[] = "nsisvc.dll";
            nsisvcdll = f_LoadLibraryA(nsisvcdll_str);
        }
    }
    __forceinline void load_ntasn1() noexcept {
        if (f_LoadLibraryA) {
            char ntasn1dll_str[] = "ntasn1.dll";
            ntasn1dll = f_LoadLibraryA(ntasn1dll_str);
        }
    }
    __forceinline void load_ntdll() noexcept {
        if (f_LoadLibraryA) {
            char ntdlldll_str[] = "ntdll.dll";
            ntdlldll = f_LoadLibraryA(ntdlldll_str);
        }
    }
    __forceinline void load_ntdsapi() noexcept {
        if (f_LoadLibraryA) {
            char ntdsapidll_str[] = "ntdsapi.dll";
            ntdsapidll = f_LoadLibraryA(ntdsapidll_str);
        }
    }
    __forceinline void load_ntfsres() noexcept {
        if (f_LoadLibraryA) {
            char ntfsresdll_str[] = "ntfsres.dll";
            ntfsresdll = f_LoadLibraryA(ntfsresdll_str);
        }
    }
    __forceinline void load_ntlanman() noexcept {
        if (f_LoadLibraryA) {
            char ntlanmandll_str[] = "ntlanman.dll";
            ntlanmandll = f_LoadLibraryA(ntlanmandll_str);
        }
    }
    __forceinline void load_ntlanui2() noexcept {
        if (f_LoadLibraryA) {
            char ntlanui2dll_str[] = "ntlanui2.dll";
            ntlanui2dll = f_LoadLibraryA(ntlanui2dll_str);
        }
    }
    __forceinline void load_NtlmShared() noexcept {
        if (f_LoadLibraryA) {
            char NtlmShareddll_str[] = "NtlmShared.dll";
            NtlmShareddll = f_LoadLibraryA(NtlmShareddll_str);
        }
    }
    __forceinline void load_ntmarta() noexcept {
        if (f_LoadLibraryA) {
            char ntmartadll_str[] = "ntmarta.dll";
            ntmartadll = f_LoadLibraryA(ntmartadll_str);
        }
    }
    __forceinline void load_ntprint() noexcept {
        if (f_LoadLibraryA) {
            char ntprintdll_str[] = "ntprint.dll";
            ntprintdll = f_LoadLibraryA(ntprintdll_str);
        }
    }
    __forceinline void load_ntshrui() noexcept {
        if (f_LoadLibraryA) {
            char ntshruidll_str[] = "ntshrui.dll";
            ntshruidll = f_LoadLibraryA(ntshruidll_str);
        }
    }
    __forceinline void load_ntvdm64() noexcept {
        if (f_LoadLibraryA) {
            char ntvdm64dll_str[] = "ntvdm64.dll";
            ntvdm64dll = f_LoadLibraryA(ntvdm64dll_str);
        }
    }
    __forceinline void load_NvAgent() noexcept {
        if (f_LoadLibraryA) {
            char NvAgentdll_str[] = "NvAgent.dll";
            NvAgentdll = f_LoadLibraryA(NvAgentdll_str);
        }
    }
    __forceinline void load_nvapi64() noexcept {
        if (f_LoadLibraryA) {
            char nvapi64dll_str[] = "nvapi64.dll";
            nvapi64dll = f_LoadLibraryA(nvapi64dll_str);
        }
    }
    __forceinline void load_nvaudcap64v() noexcept {
        if (f_LoadLibraryA) {
            char nvaudcap64vdll_str[] = "nvaudcap64v.dll";
            nvaudcap64vdll = f_LoadLibraryA(nvaudcap64vdll_str);
        }
    }
    __forceinline void load_nvcpl() noexcept {
        if (f_LoadLibraryA) {
            char nvcpldll_str[] = "nvcpl.dll";
            nvcpldll = f_LoadLibraryA(nvcpldll_str);
        }
    }
    __forceinline void load_nvcuda() noexcept {
        if (f_LoadLibraryA) {
            char nvcudadll_str[] = "nvcuda.dll";
            nvcudadll = f_LoadLibraryA(nvcudadll_str);
        }
    }
    __forceinline void load_nvcudadebugger() noexcept {
        if (f_LoadLibraryA) {
            char nvcudadebuggerdll_str[] = "nvcudadebugger.dll";
            nvcudadebuggerdll = f_LoadLibraryA(nvcudadebuggerdll_str);
        }
    }
    __forceinline void load_nvcuvid() noexcept {
        if (f_LoadLibraryA) {
            char nvcuviddll_str[] = "nvcuvid.dll";
            nvcuviddll = f_LoadLibraryA(nvcuviddll_str);
        }
    }
    __forceinline void load_nvEncodeAPI64() noexcept {
        if (f_LoadLibraryA) {
            char nvEncodeAPI64dll_str[] = "nvEncodeAPI64.dll";
            nvEncodeAPI64dll = f_LoadLibraryA(nvEncodeAPI64dll_str);
        }
    }
    __forceinline void load_NvFBC64() noexcept {
        if (f_LoadLibraryA) {
            char NvFBC64dll_str[] = "NvFBC64.dll";
            NvFBC64dll = f_LoadLibraryA(NvFBC64dll_str);
        }
    }
    __forceinline void load_NvIFR64() noexcept {
        if (f_LoadLibraryA) {
            char NvIFR64dll_str[] = "NvIFR64.dll";
            NvIFR64dll = f_LoadLibraryA(NvIFR64dll_str);
        }
    }
    __forceinline void load_nvml() noexcept {
        if (f_LoadLibraryA) {
            char nvmldll_str[] = "nvml.dll";
            nvmldll = f_LoadLibraryA(nvmldll_str);
        }
    }
    __forceinline void load_nvofapi64() noexcept {
        if (f_LoadLibraryA) {
            char nvofapi64dll_str[] = "nvofapi64.dll";
            nvofapi64dll = f_LoadLibraryA(nvofapi64dll_str);
        }
    }
    __forceinline void load_NvRtmpStreamer64() noexcept {
        if (f_LoadLibraryA) {
            char NvRtmpStreamer64dll_str[] = "NvRtmpStreamer64.dll";
            NvRtmpStreamer64dll = f_LoadLibraryA(NvRtmpStreamer64dll_str);
        }
    }
    __forceinline void load_nvspcap64() noexcept {
        if (f_LoadLibraryA) {
            char nvspcap64dll_str[] = "nvspcap64.dll";
            nvspcap64dll = f_LoadLibraryA(nvspcap64dll_str);
        }
    }
    __forceinline void load_objsel() noexcept {
        if (f_LoadLibraryA) {
            char objseldll_str[] = "objsel.dll";
            objseldll = f_LoadLibraryA(objseldll_str);
        }
    }
    __forceinline void load_occache() noexcept {
        if (f_LoadLibraryA) {
            char occachedll_str[] = "occache.dll";
            occachedll = f_LoadLibraryA(occachedll_str);
        }
    }
    __forceinline void load_ocsetapi() noexcept {
        if (f_LoadLibraryA) {
            char ocsetapidll_str[] = "ocsetapi.dll";
            ocsetapidll = f_LoadLibraryA(ocsetapidll_str);
        }
    }
    __forceinline void load_odbc32() noexcept {
        if (f_LoadLibraryA) {
            char odbc32dll_str[] = "odbc32.dll";
            odbc32dll = f_LoadLibraryA(odbc32dll_str);
        }
    }
    __forceinline void load_odbcbcp() noexcept {
        if (f_LoadLibraryA) {
            char odbcbcpdll_str[] = "odbcbcp.dll";
            odbcbcpdll = f_LoadLibraryA(odbcbcpdll_str);
        }
    }
    __forceinline void load_odbcconf() noexcept {
        if (f_LoadLibraryA) {
            char odbcconfdll_str[] = "odbcconf.dll";
            odbcconfdll = f_LoadLibraryA(odbcconfdll_str);
        }
    }
    __forceinline void load_odbccp32() noexcept {
        if (f_LoadLibraryA) {
            char odbccp32dll_str[] = "odbccp32.dll";
            odbccp32dll = f_LoadLibraryA(odbccp32dll_str);
        }
    }
    __forceinline void load_odbccr32() noexcept {
        if (f_LoadLibraryA) {
            char odbccr32dll_str[] = "odbccr32.dll";
            odbccr32dll = f_LoadLibraryA(odbccr32dll_str);
        }
    }
    __forceinline void load_odbccu32() noexcept {
        if (f_LoadLibraryA) {
            char odbccu32dll_str[] = "odbccu32.dll";
            odbccu32dll = f_LoadLibraryA(odbccu32dll_str);
        }
    }
    __forceinline void load_odbcint() noexcept {
        if (f_LoadLibraryA) {
            char odbcintdll_str[] = "odbcint.dll";
            odbcintdll = f_LoadLibraryA(odbcintdll_str);
        }
    }
    __forceinline void load_odbctrac() noexcept {
        if (f_LoadLibraryA) {
            char odbctracdll_str[] = "odbctrac.dll";
            odbctracdll = f_LoadLibraryA(odbctracdll_str);
        }
    }
    __forceinline void load_OEMDefaultAssociations() noexcept {
        if (f_LoadLibraryA) {
            char OEMDefaultAssociationsdll_str[] = "OEMDefaultAssociations.dll";
            OEMDefaultAssociationsdll = f_LoadLibraryA(OEMDefaultAssociationsdll_str);
        }
    }
    __forceinline void load_oemlicense() noexcept {
        if (f_LoadLibraryA) {
            char oemlicensedll_str[] = "oemlicense.dll";
            oemlicensedll = f_LoadLibraryA(oemlicensedll_str);
        }
    }
    __forceinline void load_offfilt() noexcept {
        if (f_LoadLibraryA) {
            char offfiltdll_str[] = "offfilt.dll";
            offfiltdll = f_LoadLibraryA(offfiltdll_str);
        }
    }
    __forceinline void load_officecsp() noexcept {
        if (f_LoadLibraryA) {
            char officecspdll_str[] = "officecsp.dll";
            officecspdll = f_LoadLibraryA(officecspdll_str);
        }
    }
    __forceinline void load_offlinelsa() noexcept {
        if (f_LoadLibraryA) {
            char offlinelsadll_str[] = "offlinelsa.dll";
            offlinelsadll = f_LoadLibraryA(offlinelsadll_str);
        }
    }
    __forceinline void load_offlinesam() noexcept {
        if (f_LoadLibraryA) {
            char offlinesamdll_str[] = "offlinesam.dll";
            offlinesamdll = f_LoadLibraryA(offlinesamdll_str);
        }
    }
    __forceinline void load_offreg() noexcept {
        if (f_LoadLibraryA) {
            char offregdll_str[] = "offreg.dll";
            offregdll = f_LoadLibraryA(offregdll_str);
        }
    }
    __forceinline void load_ole32() noexcept {
        if (f_LoadLibraryA) {
            char ole32dll_str[] = "ole32.dll";
            ole32dll = f_LoadLibraryA(ole32dll_str);
        }
    }
    __forceinline void load_oleacc() noexcept {
        if (f_LoadLibraryA) {
            char oleaccdll_str[] = "oleacc.dll";
            oleaccdll = f_LoadLibraryA(oleaccdll_str);
        }
    }
    __forceinline void load_oleacchooks() noexcept {
        if (f_LoadLibraryA) {
            char oleacchooksdll_str[] = "oleacchooks.dll";
            oleacchooksdll = f_LoadLibraryA(oleacchooksdll_str);
        }
    }
    __forceinline void load_oleaccrc() noexcept {
        if (f_LoadLibraryA) {
            char oleaccrcdll_str[] = "oleaccrc.dll";
            oleaccrcdll = f_LoadLibraryA(oleaccrcdll_str);
        }
    }
    __forceinline void load_oleaut32() noexcept {
        if (f_LoadLibraryA) {
            char oleaut32dll_str[] = "oleaut32.dll";
            oleaut32dll = f_LoadLibraryA(oleaut32dll_str);
        }
    }
    __forceinline void load_oledlg() noexcept {
        if (f_LoadLibraryA) {
            char oledlgdll_str[] = "oledlg.dll";
            oledlgdll = f_LoadLibraryA(oledlgdll_str);
        }
    }
    __forceinline void load_oleprn() noexcept {
        if (f_LoadLibraryA) {
            char oleprndll_str[] = "oleprn.dll";
            oleprndll = f_LoadLibraryA(oleprndll_str);
        }
    }
    __forceinline void load_OmaDmAgent() noexcept {
        if (f_LoadLibraryA) {
            char OmaDmAgentdll_str[] = "OmaDmAgent.dll";
            OmaDmAgentdll = f_LoadLibraryA(OmaDmAgentdll_str);
        }
    }
    __forceinline void load_omadmapi() noexcept {
        if (f_LoadLibraryA) {
            char omadmapidll_str[] = "omadmapi.dll";
            omadmapidll = f_LoadLibraryA(omadmapidll_str);
        }
    }
    __forceinline void load_OnDemandBrokerClient() noexcept {
        if (f_LoadLibraryA) {
            char OnDemandBrokerClientdll_str[] = "OnDemandBrokerClient.dll";
            OnDemandBrokerClientdll = f_LoadLibraryA(OnDemandBrokerClientdll_str);
        }
    }
    __forceinline void load_OnDemandConnRouteHelper() noexcept {
        if (f_LoadLibraryA) {
            char OnDemandConnRouteHelperdll_str[] = "OnDemandConnRouteHelper.dll";
            OnDemandConnRouteHelperdll = f_LoadLibraryA(OnDemandConnRouteHelperdll_str);
        }
    }
    __forceinline void load_OneBackupHandler() noexcept {
        if (f_LoadLibraryA) {
            char OneBackupHandlerdll_str[] = "OneBackupHandler.dll";
            OneBackupHandlerdll = f_LoadLibraryA(OneBackupHandlerdll_str);
        }
    }
    __forceinline void load_OneCoreCommonProxyStub() noexcept {
        if (f_LoadLibraryA) {
            char OneCoreCommonProxyStubdll_str[] = "OneCoreCommonProxyStub.dll";
            OneCoreCommonProxyStubdll = f_LoadLibraryA(OneCoreCommonProxyStubdll_str);
        }
    }
    __forceinline void load_OneCoreUAPCommonProxyStub() noexcept {
        if (f_LoadLibraryA) {
            char OneCoreUAPCommonProxyStubdll_str[] = "OneCoreUAPCommonProxyStub.dll";
            OneCoreUAPCommonProxyStubdll = f_LoadLibraryA(OneCoreUAPCommonProxyStubdll_str);
        }
    }
    __forceinline void load_OneSettingsClient() noexcept {
        if (f_LoadLibraryA) {
            char OneSettingsClientdll_str[] = "OneSettingsClient.dll";
            OneSettingsClientdll = f_LoadLibraryA(OneSettingsClientdll_str);
        }
    }
    __forceinline void load_onex() noexcept {
        if (f_LoadLibraryA) {
            char onexdll_str[] = "onex.dll";
            onexdll = f_LoadLibraryA(onexdll_str);
        }
    }
    __forceinline void load_onexui() noexcept {
        if (f_LoadLibraryA) {
            char onexuidll_str[] = "onexui.dll";
            onexuidll = f_LoadLibraryA(onexuidll_str);
        }
    }
    __forceinline void load_onnxruntime() noexcept {
        if (f_LoadLibraryA) {
            char onnxruntimedll_str[] = "onnxruntime.dll";
            onnxruntimedll = f_LoadLibraryA(onnxruntimedll_str);
        }
    }
    __forceinline void load_OpcServices() noexcept {
        if (f_LoadLibraryA) {
            char OpcServicesdll_str[] = "OpcServices.dll";
            OpcServicesdll = f_LoadLibraryA(OpcServicesdll_str);
        }
    }
    __forceinline void load_OpenCL() noexcept {
        if (f_LoadLibraryA) {
            char OpenCLdll_str[] = "OpenCL.dll";
            OpenCLdll = f_LoadLibraryA(OpenCLdll_str);
        }
    }
    __forceinline void load_opengl32() noexcept {
        if (f_LoadLibraryA) {
            char opengl32dll_str[] = "opengl32.dll";
            opengl32dll = f_LoadLibraryA(opengl32dll_str);
        }
    }
    __forceinline void load_Optane() noexcept {
        if (f_LoadLibraryA) {
            char Optanedll_str[] = "Optane.dll";
            Optanedll = f_LoadLibraryA(Optanedll_str);
        }
    }
    __forceinline void load_OptaneEventLogMsg() noexcept {
        if (f_LoadLibraryA) {
            char OptaneEventLogMsgdll_str[] = "OptaneEventLogMsg.dll";
            OptaneEventLogMsgdll = f_LoadLibraryA(OptaneEventLogMsgdll_str);
        }
    }
    __forceinline void load_ortcengine() noexcept {
        if (f_LoadLibraryA) {
            char ortcenginedll_str[] = "ortcengine.dll";
            ortcenginedll = f_LoadLibraryA(ortcenginedll_str);
        }
    }
    __forceinline void load_osbaseln() noexcept {
        if (f_LoadLibraryA) {
            char osbaselndll_str[] = "osbaseln.dll";
            osbaselndll = f_LoadLibraryA(osbaselndll_str);
        }
    }
    __forceinline void load_OskSupport() noexcept {
        if (f_LoadLibraryA) {
            char OskSupportdll_str[] = "OskSupport.dll";
            OskSupportdll = f_LoadLibraryA(OskSupportdll_str);
        }
    }
    __forceinline void load_osuninst() noexcept {
        if (f_LoadLibraryA) {
            char osuninstdll_str[] = "osuninst.dll";
            osuninstdll = f_LoadLibraryA(osuninstdll_str);
        }
    }
    __forceinline void load_P2P() noexcept {
        if (f_LoadLibraryA) {
            char P2Pdll_str[] = "P2P.dll";
            P2Pdll = f_LoadLibraryA(P2Pdll_str);
        }
    }
    __forceinline void load_P2PGraph() noexcept {
        if (f_LoadLibraryA) {
            char P2PGraphdll_str[] = "P2PGraph.dll";
            P2PGraphdll = f_LoadLibraryA(P2PGraphdll_str);
        }
    }
    __forceinline void load_p2pnetsh() noexcept {
        if (f_LoadLibraryA) {
            char p2pnetshdll_str[] = "p2pnetsh.dll";
            p2pnetshdll = f_LoadLibraryA(p2pnetshdll_str);
        }
    }
    __forceinline void load_p2psvc() noexcept {
        if (f_LoadLibraryA) {
            char p2psvcdll_str[] = "p2psvc.dll";
            p2psvcdll = f_LoadLibraryA(p2psvcdll_str);
        }
    }
    __forceinline void load_p9np() noexcept {
        if (f_LoadLibraryA) {
            char p9npdll_str[] = "p9np.dll";
            p9npdll = f_LoadLibraryA(p9npdll_str);
        }
    }
    __forceinline void load_p9rdrservice() noexcept {
        if (f_LoadLibraryA) {
            char p9rdrservicedll_str[] = "p9rdrservice.dll";
            p9rdrservicedll = f_LoadLibraryA(p9rdrservicedll_str);
        }
    }
    __forceinline void load_packager() noexcept {
        if (f_LoadLibraryA) {
            char packagerdll_str[] = "packager.dll";
            packagerdll = f_LoadLibraryA(packagerdll_str);
        }
    }
    __forceinline void load_PackageStateChangeHandler() noexcept {
        if (f_LoadLibraryA) {
            char PackageStateChangeHandlerdll_str[] = "PackageStateChangeHandler.dll";
            PackageStateChangeHandlerdll = f_LoadLibraryA(PackageStateChangeHandlerdll_str);
        }
    }
    __forceinline void load_panmap() noexcept {
        if (f_LoadLibraryA) {
            char panmapdll_str[] = "panmap.dll";
            panmapdll = f_LoadLibraryA(panmapdll_str);
        }
    }
    __forceinline void load_PasswordEnrollmentManager() noexcept {
        if (f_LoadLibraryA) {
            char PasswordEnrollmentManagerdll_str[] = "PasswordEnrollmentManager.dll";
            PasswordEnrollmentManagerdll = f_LoadLibraryA(PasswordEnrollmentManagerdll_str);
        }
    }
    __forceinline void load_pautoenr() noexcept {
        if (f_LoadLibraryA) {
            char pautoenrdll_str[] = "pautoenr.dll";
            pautoenrdll = f_LoadLibraryA(pautoenrdll_str);
        }
    }
    __forceinline void load_PayloadRestrictions() noexcept {
        if (f_LoadLibraryA) {
            char PayloadRestrictionsdll_str[] = "PayloadRestrictions.dll";
            PayloadRestrictionsdll = f_LoadLibraryA(PayloadRestrictionsdll_str);
        }
    }
    __forceinline void load_PaymentMediatorServiceProxy() noexcept {
        if (f_LoadLibraryA) {
            char PaymentMediatorServiceProxydll_str[] = "PaymentMediatorServiceProxy.dll";
            PaymentMediatorServiceProxydll = f_LoadLibraryA(PaymentMediatorServiceProxydll_str);
        }
    }
    __forceinline void load_pcacli() noexcept {
        if (f_LoadLibraryA) {
            char pcaclidll_str[] = "pcacli.dll";
            pcaclidll = f_LoadLibraryA(pcaclidll_str);
        }
    }
    __forceinline void load_pcadm() noexcept {
        if (f_LoadLibraryA) {
            char pcadmdll_str[] = "pcadm.dll";
            pcadmdll = f_LoadLibraryA(pcadmdll_str);
        }
    }
    __forceinline void load_pcaevts() noexcept {
        if (f_LoadLibraryA) {
            char pcaevtsdll_str[] = "pcaevts.dll";
            pcaevtsdll = f_LoadLibraryA(pcaevtsdll_str);
        }
    }
    __forceinline void load_pcasvc() noexcept {
        if (f_LoadLibraryA) {
            char pcasvcdll_str[] = "pcasvc.dll";
            pcasvcdll = f_LoadLibraryA(pcasvcdll_str);
        }
    }
    __forceinline void load_pcaui() noexcept {
        if (f_LoadLibraryA) {
            char pcauidll_str[] = "pcaui.dll";
            pcauidll = f_LoadLibraryA(pcauidll_str);
        }
    }
    __forceinline void load_PCPKsp() noexcept {
        if (f_LoadLibraryA) {
            char PCPKspdll_str[] = "PCPKsp.dll";
            PCPKspdll = f_LoadLibraryA(PCPKspdll_str);
        }
    }
    __forceinline void load_PCShellCommonProxyStub() noexcept {
        if (f_LoadLibraryA) {
            char PCShellCommonProxyStubdll_str[] = "PCShellCommonProxyStub.dll";
            PCShellCommonProxyStubdll = f_LoadLibraryA(PCShellCommonProxyStubdll_str);
        }
    }
    __forceinline void load_pcsvDevice() noexcept {
        if (f_LoadLibraryA) {
            char pcsvDevicedll_str[] = "pcsvDevice.dll";
            pcsvDevicedll = f_LoadLibraryA(pcsvDevicedll_str);
        }
    }
    __forceinline void load_pcwum() noexcept {
        if (f_LoadLibraryA) {
            char pcwumdll_str[] = "pcwum.dll";
            pcwumdll = f_LoadLibraryA(pcwumdll_str);
        }
    }
    __forceinline void load_pcwutl() noexcept {
        if (f_LoadLibraryA) {
            char pcwutldll_str[] = "pcwutl.dll";
            pcwutldll = f_LoadLibraryA(pcwutldll_str);
        }
    }
    __forceinline void load_pdh() noexcept {
        if (f_LoadLibraryA) {
            char pdhdll_str[] = "pdh.dll";
            pdhdll = f_LoadLibraryA(pdhdll_str);
        }
    }
    __forceinline void load_pdhui() noexcept {
        if (f_LoadLibraryA) {
            char pdhuidll_str[] = "pdhui.dll";
            pdhuidll = f_LoadLibraryA(pdhuidll_str);
        }
    }
    __forceinline void load_PeerDist() noexcept {
        if (f_LoadLibraryA) {
            char PeerDistdll_str[] = "PeerDist.dll";
            PeerDistdll = f_LoadLibraryA(PeerDistdll_str);
        }
    }
    __forceinline void load_PeerDistAD() noexcept {
        if (f_LoadLibraryA) {
            char PeerDistADdll_str[] = "PeerDistAD.dll";
            PeerDistADdll = f_LoadLibraryA(PeerDistADdll_str);
        }
    }
    __forceinline void load_PeerDistCacheProvider() noexcept {
        if (f_LoadLibraryA) {
            char PeerDistCacheProviderdll_str[] = "PeerDistCacheProvider.dll";
            PeerDistCacheProviderdll = f_LoadLibraryA(PeerDistCacheProviderdll_str);
        }
    }
    __forceinline void load_PeerDistCleaner() noexcept {
        if (f_LoadLibraryA) {
            char PeerDistCleanerdll_str[] = "PeerDistCleaner.dll";
            PeerDistCleanerdll = f_LoadLibraryA(PeerDistCleanerdll_str);
        }
    }
    __forceinline void load_PeerDistHttpTrans() noexcept {
        if (f_LoadLibraryA) {
            char PeerDistHttpTransdll_str[] = "PeerDistHttpTrans.dll";
            PeerDistHttpTransdll = f_LoadLibraryA(PeerDistHttpTransdll_str);
        }
    }
    __forceinline void load_PeerDistSh() noexcept {
        if (f_LoadLibraryA) {
            char PeerDistShdll_str[] = "PeerDistSh.dll";
            PeerDistShdll = f_LoadLibraryA(PeerDistShdll_str);
        }
    }
    __forceinline void load_PeerDistSvc() noexcept {
        if (f_LoadLibraryA) {
            char PeerDistSvcdll_str[] = "PeerDistSvc.dll";
            PeerDistSvcdll = f_LoadLibraryA(PeerDistSvcdll_str);
        }
    }
    __forceinline void load_PeerDistWSDDiscoProv() noexcept {
        if (f_LoadLibraryA) {
            char PeerDistWSDDiscoProvdll_str[] = "PeerDistWSDDiscoProv.dll";
            PeerDistWSDDiscoProvdll = f_LoadLibraryA(PeerDistWSDDiscoProvdll_str);
        }
    }
    __forceinline void load_PenService() noexcept {
        if (f_LoadLibraryA) {
            char PenServicedll_str[] = "PenService.dll";
            PenServicedll = f_LoadLibraryA(PenServicedll_str);
        }
    }
    __forceinline void load_PeopleAPIs() noexcept {
        if (f_LoadLibraryA) {
            char PeopleAPIsdll_str[] = "PeopleAPIs.dll";
            PeopleAPIsdll = f_LoadLibraryA(PeopleAPIsdll_str);
        }
    }
    __forceinline void load_PeopleBand() noexcept {
        if (f_LoadLibraryA) {
            char PeopleBanddll_str[] = "PeopleBand.dll";
            PeopleBanddll = f_LoadLibraryA(PeopleBanddll_str);
        }
    }
    __forceinline void load_PerceptionDevice() noexcept {
        if (f_LoadLibraryA) {
            char PerceptionDevicedll_str[] = "PerceptionDevice.dll";
            PerceptionDevicedll = f_LoadLibraryA(PerceptionDevicedll_str);
        }
    }
    __forceinline void load_PerceptionSimulationProxyStubs() noexcept {
        if (f_LoadLibraryA) {
            char PerceptionSimulationProxyStubsdll_str[] = "PerceptionSimulation.ProxyStubs.dll";
            PerceptionSimulationProxyStubsdll = f_LoadLibraryA(PerceptionSimulationProxyStubsdll_str);
        }
    }
    __forceinline void load_PerceptionSimulationManager() noexcept {
        if (f_LoadLibraryA) {
            char PerceptionSimulationManagerdll_str[] = "PerceptionSimulationManager.dll";
            PerceptionSimulationManagerdll = f_LoadLibraryA(PerceptionSimulationManagerdll_str);
        }
    }
    __forceinline void load_perfdisk() noexcept {
        if (f_LoadLibraryA) {
            char perfdiskdll_str[] = "perfdisk.dll";
            perfdiskdll = f_LoadLibraryA(perfdiskdll_str);
        }
    }
    __forceinline void load_perfnet() noexcept {
        if (f_LoadLibraryA) {
            char perfnetdll_str[] = "perfnet.dll";
            perfnetdll = f_LoadLibraryA(perfnetdll_str);
        }
    }
    __forceinline void load_perfos() noexcept {
        if (f_LoadLibraryA) {
            char perfosdll_str[] = "perfos.dll";
            perfosdll = f_LoadLibraryA(perfosdll_str);
        }
    }
    __forceinline void load_perfproc() noexcept {
        if (f_LoadLibraryA) {
            char perfprocdll_str[] = "perfproc.dll";
            perfprocdll = f_LoadLibraryA(perfprocdll_str);
        }
    }
    __forceinline void load_perfts() noexcept {
        if (f_LoadLibraryA) {
            char perftsdll_str[] = "perfts.dll";
            perftsdll = f_LoadLibraryA(perftsdll_str);
        }
    }
    __forceinline void load_perf_gputiming() noexcept {
        if (f_LoadLibraryA) {
            char perf_gputimingdll_str[] = "perf_gputiming.dll";
            perf_gputimingdll = f_LoadLibraryA(perf_gputimingdll_str);
        }
    }
    __forceinline void load_PersonalizationCSP() noexcept {
        if (f_LoadLibraryA) {
            char PersonalizationCSPdll_str[] = "PersonalizationCSP.dll";
            PersonalizationCSPdll = f_LoadLibraryA(PersonalizationCSPdll_str);
        }
    }
    __forceinline void load_pfclient() noexcept {
        if (f_LoadLibraryA) {
            char pfclientdll_str[] = "pfclient.dll";
            pfclientdll = f_LoadLibraryA(pfclientdll_str);
        }
    }
    __forceinline void load_PhoneCallHistoryApis() noexcept {
        if (f_LoadLibraryA) {
            char PhoneCallHistoryApisdll_str[] = "PhoneCallHistoryApis.dll";
            PhoneCallHistoryApisdll = f_LoadLibraryA(PhoneCallHistoryApisdll_str);
        }
    }
    __forceinline void load_PhoneOm() noexcept {
        if (f_LoadLibraryA) {
            char PhoneOmdll_str[] = "PhoneOm.dll";
            PhoneOmdll = f_LoadLibraryA(PhoneOmdll_str);
        }
    }
    __forceinline void load_PhonePlatformAbstraction() noexcept {
        if (f_LoadLibraryA) {
            char PhonePlatformAbstractiondll_str[] = "PhonePlatformAbstraction.dll";
            PhonePlatformAbstractiondll = f_LoadLibraryA(PhonePlatformAbstractiondll_str);
        }
    }
    __forceinline void load_PhoneProviders() noexcept {
        if (f_LoadLibraryA) {
            char PhoneProvidersdll_str[] = "PhoneProviders.dll";
            PhoneProvidersdll = f_LoadLibraryA(PhoneProvidersdll_str);
        }
    }
    __forceinline void load_PhoneService() noexcept {
        if (f_LoadLibraryA) {
            char PhoneServicedll_str[] = "PhoneService.dll";
            PhoneServicedll = f_LoadLibraryA(PhoneServicedll_str);
        }
    }
    __forceinline void load_PhoneServiceRes() noexcept {
        if (f_LoadLibraryA) {
            char PhoneServiceResdll_str[] = "PhoneServiceRes.dll";
            PhoneServiceResdll = f_LoadLibraryA(PhoneServiceResdll_str);
        }
    }
    __forceinline void load_Phoneutil() noexcept {
        if (f_LoadLibraryA) {
            char Phoneutildll_str[] = "Phoneutil.dll";
            Phoneutildll = f_LoadLibraryA(Phoneutildll_str);
        }
    }
    __forceinline void load_PhoneutilRes() noexcept {
        if (f_LoadLibraryA) {
            char PhoneutilResdll_str[] = "PhoneutilRes.dll";
            PhoneutilResdll = f_LoadLibraryA(PhoneutilResdll_str);
        }
    }
    __forceinline void load_PhotoMetadataHandler() noexcept {
        if (f_LoadLibraryA) {
            char PhotoMetadataHandlerdll_str[] = "PhotoMetadataHandler.dll";
            PhotoMetadataHandlerdll = f_LoadLibraryA(PhotoMetadataHandlerdll_str);
        }
    }
    __forceinline void load_photowiz() noexcept {
        if (f_LoadLibraryA) {
            char photowizdll_str[] = "photowiz.dll";
            photowizdll = f_LoadLibraryA(photowizdll_str);
        }
    }
    __forceinline void load_PickerPlatform() noexcept {
        if (f_LoadLibraryA) {
            char PickerPlatformdll_str[] = "PickerPlatform.dll";
            PickerPlatformdll = f_LoadLibraryA(PickerPlatformdll_str);
        }
    }
    __forceinline void load_pid() noexcept {
        if (f_LoadLibraryA) {
            char piddll_str[] = "pid.dll";
            piddll = f_LoadLibraryA(piddll_str);
        }
    }
    __forceinline void load_pidgenx() noexcept {
        if (f_LoadLibraryA) {
            char pidgenxdll_str[] = "pidgenx.dll";
            pidgenxdll = f_LoadLibraryA(pidgenxdll_str);
        }
    }
    __forceinline void load_pifmgr() noexcept {
        if (f_LoadLibraryA) {
            char pifmgrdll_str[] = "pifmgr.dll";
            pifmgrdll = f_LoadLibraryA(pifmgrdll_str);
        }
    }
    __forceinline void load_PimIndexMaintenance() noexcept {
        if (f_LoadLibraryA) {
            char PimIndexMaintenancedll_str[] = "PimIndexMaintenance.dll";
            PimIndexMaintenancedll = f_LoadLibraryA(PimIndexMaintenancedll_str);
        }
    }
    __forceinline void load_PimIndexMaintenanceClient() noexcept {
        if (f_LoadLibraryA) {
            char PimIndexMaintenanceClientdll_str[] = "PimIndexMaintenanceClient.dll";
            PimIndexMaintenanceClientdll = f_LoadLibraryA(PimIndexMaintenanceClientdll_str);
        }
    }
    __forceinline void load_Pimstore() noexcept {
        if (f_LoadLibraryA) {
            char Pimstoredll_str[] = "Pimstore.dll";
            Pimstoredll = f_LoadLibraryA(Pimstoredll_str);
        }
    }
    __forceinline void load_PinEnrollmentHelper() noexcept {
        if (f_LoadLibraryA) {
            char PinEnrollmentHelperdll_str[] = "PinEnrollmentHelper.dll";
            PinEnrollmentHelperdll = f_LoadLibraryA(PinEnrollmentHelperdll_str);
        }
    }
    __forceinline void load_pkeyhelper() noexcept {
        if (f_LoadLibraryA) {
            char pkeyhelperdll_str[] = "pkeyhelper.dll";
            pkeyhelperdll = f_LoadLibraryA(pkeyhelperdll_str);
        }
    }
    __forceinline void load_PktMonApi() noexcept {
        if (f_LoadLibraryA) {
            char PktMonApidll_str[] = "PktMonApi.dll";
            PktMonApidll = f_LoadLibraryA(PktMonApidll_str);
        }
    }
    __forceinline void load_pku2u() noexcept {
        if (f_LoadLibraryA) {
            char pku2udll_str[] = "pku2u.dll";
            pku2udll = f_LoadLibraryA(pku2udll_str);
        }
    }
    __forceinline void load_pla() noexcept {
        if (f_LoadLibraryA) {
            char pladll_str[] = "pla.dll";
            pladll = f_LoadLibraryA(pladll_str);
        }
    }
    __forceinline void load_playlistfolder() noexcept {
        if (f_LoadLibraryA) {
            char playlistfolderdll_str[] = "playlistfolder.dll";
            playlistfolderdll = f_LoadLibraryA(playlistfolderdll_str);
        }
    }
    __forceinline void load_PlaySndSrv() noexcept {
        if (f_LoadLibraryA) {
            char PlaySndSrvdll_str[] = "PlaySndSrv.dll";
            PlaySndSrvdll = f_LoadLibraryA(PlaySndSrvdll_str);
        }
    }
    __forceinline void load_PlayToDevice() noexcept {
        if (f_LoadLibraryA) {
            char PlayToDevicedll_str[] = "PlayToDevice.dll";
            PlayToDevicedll = f_LoadLibraryA(PlayToDevicedll_str);
        }
    }
    __forceinline void load_PlayToManager() noexcept {
        if (f_LoadLibraryA) {
            char PlayToManagerdll_str[] = "PlayToManager.dll";
            PlayToManagerdll = f_LoadLibraryA(PlayToManagerdll_str);
        }
    }
    __forceinline void load_playtomenu() noexcept {
        if (f_LoadLibraryA) {
            char playtomenudll_str[] = "playtomenu.dll";
            playtomenudll = f_LoadLibraryA(playtomenudll_str);
        }
    }
    __forceinline void load_PlayToReceiver() noexcept {
        if (f_LoadLibraryA) {
            char PlayToReceiverdll_str[] = "PlayToReceiver.dll";
            PlayToReceiverdll = f_LoadLibraryA(PlayToReceiverdll_str);
        }
    }
    __forceinline void load_PlayToStatusProvider() noexcept {
        if (f_LoadLibraryA) {
            char PlayToStatusProviderdll_str[] = "PlayToStatusProvider.dll";
            PlayToStatusProviderdll = f_LoadLibraryA(PlayToStatusProviderdll_str);
        }
    }
    __forceinline void load_ploptin() noexcept {
        if (f_LoadLibraryA) {
            char ploptindll_str[] = "ploptin.dll";
            ploptindll = f_LoadLibraryA(ploptindll_str);
        }
    }
    __forceinline void load_pmcsnap() noexcept {
        if (f_LoadLibraryA) {
            char pmcsnapdll_str[] = "pmcsnap.dll";
            pmcsnapdll = f_LoadLibraryA(pmcsnapdll_str);
        }
    }
    __forceinline void load_pngfilt() noexcept {
        if (f_LoadLibraryA) {
            char pngfiltdll_str[] = "pngfilt.dll";
            pngfiltdll = f_LoadLibraryA(pngfiltdll_str);
        }
    }
    __forceinline void load_pnidui() noexcept {
        if (f_LoadLibraryA) {
            char pniduidll_str[] = "pnidui.dll";
            pniduidll = f_LoadLibraryA(pniduidll_str);
        }
    }
    __forceinline void load_pnpclean() noexcept {
        if (f_LoadLibraryA) {
            char pnpcleandll_str[] = "pnpclean.dll";
            pnpcleandll = f_LoadLibraryA(pnpcleandll_str);
        }
    }
    __forceinline void load_pnpdiag() noexcept {
        if (f_LoadLibraryA) {
            char pnpdiagdll_str[] = "pnpdiag.dll";
            pnpdiagdll = f_LoadLibraryA(pnpdiagdll_str);
        }
    }
    __forceinline void load_pnppolicy() noexcept {
        if (f_LoadLibraryA) {
            char pnppolicydll_str[] = "pnppolicy.dll";
            pnppolicydll = f_LoadLibraryA(pnppolicydll_str);
        }
    }
    __forceinline void load_pnpts() noexcept {
        if (f_LoadLibraryA) {
            char pnptsdll_str[] = "pnpts.dll";
            pnptsdll = f_LoadLibraryA(pnptsdll_str);
        }
    }
    __forceinline void load_pnpui() noexcept {
        if (f_LoadLibraryA) {
            char pnpuidll_str[] = "pnpui.dll";
            pnpuidll = f_LoadLibraryA(pnpuidll_str);
        }
    }
    __forceinline void load_PNPXAssoc() noexcept {
        if (f_LoadLibraryA) {
            char PNPXAssocdll_str[] = "PNPXAssoc.dll";
            PNPXAssocdll = f_LoadLibraryA(PNPXAssocdll_str);
        }
    }
    __forceinline void load_PNPXAssocPrx() noexcept {
        if (f_LoadLibraryA) {
            char PNPXAssocPrxdll_str[] = "PNPXAssocPrx.dll";
            PNPXAssocPrxdll = f_LoadLibraryA(PNPXAssocPrxdll_str);
        }
    }
    __forceinline void load_pnrpauto() noexcept {
        if (f_LoadLibraryA) {
            char pnrpautodll_str[] = "pnrpauto.dll";
            pnrpautodll = f_LoadLibraryA(pnrpautodll_str);
        }
    }
    __forceinline void load_Pnrphc() noexcept {
        if (f_LoadLibraryA) {
            char Pnrphcdll_str[] = "Pnrphc.dll";
            Pnrphcdll = f_LoadLibraryA(Pnrphcdll_str);
        }
    }
    __forceinline void load_pnrpnsp() noexcept {
        if (f_LoadLibraryA) {
            char pnrpnspdll_str[] = "pnrpnsp.dll";
            pnrpnspdll = f_LoadLibraryA(pnrpnspdll_str);
        }
    }
    __forceinline void load_pnrpsvc() noexcept {
        if (f_LoadLibraryA) {
            char pnrpsvcdll_str[] = "pnrpsvc.dll";
            pnrpsvcdll = f_LoadLibraryA(pnrpsvcdll_str);
        }
    }
    __forceinline void load_policymanager() noexcept {
        if (f_LoadLibraryA) {
            char policymanagerdll_str[] = "policymanager.dll";
            policymanagerdll = f_LoadLibraryA(policymanagerdll_str);
        }
    }
    __forceinline void load_policymanagerprecheck() noexcept {
        if (f_LoadLibraryA) {
            char policymanagerprecheckdll_str[] = "policymanagerprecheck.dll";
            policymanagerprecheckdll = f_LoadLibraryA(policymanagerprecheckdll_str);
        }
    }
    __forceinline void load_polstore() noexcept {
        if (f_LoadLibraryA) {
            char polstoredll_str[] = "polstore.dll";
            polstoredll = f_LoadLibraryA(polstoredll_str);
        }
    }
    __forceinline void load_PortableDeviceApi() noexcept {
        if (f_LoadLibraryA) {
            char PortableDeviceApidll_str[] = "PortableDeviceApi.dll";
            PortableDeviceApidll = f_LoadLibraryA(PortableDeviceApidll_str);
        }
    }
    __forceinline void load_PortableDeviceClassExtension() noexcept {
        if (f_LoadLibraryA) {
            char PortableDeviceClassExtensiondll_str[] = "PortableDeviceClassExtension.dll";
            PortableDeviceClassExtensiondll = f_LoadLibraryA(PortableDeviceClassExtensiondll_str);
        }
    }
    __forceinline void load_PortableDeviceConnectApi() noexcept {
        if (f_LoadLibraryA) {
            char PortableDeviceConnectApidll_str[] = "PortableDeviceConnectApi.dll";
            PortableDeviceConnectApidll = f_LoadLibraryA(PortableDeviceConnectApidll_str);
        }
    }
    __forceinline void load_PortableDeviceStatus() noexcept {
        if (f_LoadLibraryA) {
            char PortableDeviceStatusdll_str[] = "PortableDeviceStatus.dll";
            PortableDeviceStatusdll = f_LoadLibraryA(PortableDeviceStatusdll_str);
        }
    }
    __forceinline void load_PortableDeviceSyncProvider() noexcept {
        if (f_LoadLibraryA) {
            char PortableDeviceSyncProviderdll_str[] = "PortableDeviceSyncProvider.dll";
            PortableDeviceSyncProviderdll = f_LoadLibraryA(PortableDeviceSyncProviderdll_str);
        }
    }
    __forceinline void load_PortableDeviceTypes() noexcept {
        if (f_LoadLibraryA) {
            char PortableDeviceTypesdll_str[] = "PortableDeviceTypes.dll";
            PortableDeviceTypesdll = f_LoadLibraryA(PortableDeviceTypesdll_str);
        }
    }
    __forceinline void load_PortableDeviceWiaCompat() noexcept {
        if (f_LoadLibraryA) {
            char PortableDeviceWiaCompatdll_str[] = "PortableDeviceWiaCompat.dll";
            PortableDeviceWiaCompatdll = f_LoadLibraryA(PortableDeviceWiaCompatdll_str);
        }
    }
    __forceinline void load_posetup() noexcept {
        if (f_LoadLibraryA) {
            char posetupdll_str[] = "posetup.dll";
            posetupdll = f_LoadLibraryA(posetupdll_str);
        }
    }
    __forceinline void load_POSyncServices() noexcept {
        if (f_LoadLibraryA) {
            char POSyncServicesdll_str[] = "POSyncServices.dll";
            POSyncServicesdll = f_LoadLibraryA(POSyncServicesdll_str);
        }
    }
    __forceinline void load_pots() noexcept {
        if (f_LoadLibraryA) {
            char potsdll_str[] = "pots.dll";
            potsdll = f_LoadLibraryA(potsdll_str);
        }
    }
    __forceinline void load_powercpl() noexcept {
        if (f_LoadLibraryA) {
            char powercpldll_str[] = "powercpl.dll";
            powercpldll = f_LoadLibraryA(powercpldll_str);
        }
    }
    __forceinline void load_powrprof() noexcept {
        if (f_LoadLibraryA) {
            char powrprofdll_str[] = "powrprof.dll";
            powrprofdll = f_LoadLibraryA(powrprofdll_str);
        }
    }
    __forceinline void load_ppcsnap() noexcept {
        if (f_LoadLibraryA) {
            char ppcsnapdll_str[] = "ppcsnap.dll";
            ppcsnapdll = f_LoadLibraryA(ppcsnapdll_str);
        }
    }
    __forceinline void load_prauthproviders() noexcept {
        if (f_LoadLibraryA) {
            char prauthprovidersdll_str[] = "prauthproviders.dll";
            prauthprovidersdll = f_LoadLibraryA(prauthprovidersdll_str);
        }
    }
    __forceinline void load_PresentationCFFRasterizerNative_v0300() noexcept {
        if (f_LoadLibraryA) {
            char PresentationCFFRasterizerNative_v0300dll_str[] = "PresentationCFFRasterizerNative_v0300.dll";
            PresentationCFFRasterizerNative_v0300dll = f_LoadLibraryA(PresentationCFFRasterizerNative_v0300dll_str);
        }
    }
    __forceinline void load_PresentationHostProxy() noexcept {
        if (f_LoadLibraryA) {
            char PresentationHostProxydll_str[] = "PresentationHostProxy.dll";
            PresentationHostProxydll = f_LoadLibraryA(PresentationHostProxydll_str);
        }
    }
    __forceinline void load_PresentationNative_v0300() noexcept {
        if (f_LoadLibraryA) {
            char PresentationNative_v0300dll_str[] = "PresentationNative_v0300.dll";
            PresentationNative_v0300dll = f_LoadLibraryA(PresentationNative_v0300dll_str);
        }
    }
    __forceinline void load_prflbmsg() noexcept {
        if (f_LoadLibraryA) {
            char prflbmsgdll_str[] = "prflbmsg.dll";
            prflbmsgdll = f_LoadLibraryA(prflbmsgdll_str);
        }
    }
    __forceinline void load_PrintPrintSupportSource() noexcept {
        if (f_LoadLibraryA) {
            char PrintPrintSupportSourcedll_str[] = "Print.PrintSupport.Source.dll";
            PrintPrintSupportSourcedll = f_LoadLibraryA(PrintPrintSupportSourcedll_str);
        }
    }
    __forceinline void load_PrintWorkflowSource() noexcept {
        if (f_LoadLibraryA) {
            char PrintWorkflowSourcedll_str[] = "Print.Workflow.Source.dll";
            PrintWorkflowSourcedll = f_LoadLibraryA(PrintWorkflowSourcedll_str);
        }
    }
    __forceinline void load_PrinterCleanupTask() noexcept {
        if (f_LoadLibraryA) {
            char PrinterCleanupTaskdll_str[] = "PrinterCleanupTask.dll";
            PrinterCleanupTaskdll = f_LoadLibraryA(PrinterCleanupTaskdll_str);
        }
    }
    __forceinline void load_printfilterpipelineprxy() noexcept {
        if (f_LoadLibraryA) {
            char printfilterpipelineprxydll_str[] = "printfilterpipelineprxy.dll";
            printfilterpipelineprxydll = f_LoadLibraryA(printfilterpipelineprxydll_str);
        }
    }
    __forceinline void load_PrintIsolationProxy() noexcept {
        if (f_LoadLibraryA) {
            char PrintIsolationProxydll_str[] = "PrintIsolationProxy.dll";
            PrintIsolationProxydll = f_LoadLibraryA(PrintIsolationProxydll_str);
        }
    }
    __forceinline void load_PrintNotification() noexcept {
        if (f_LoadLibraryA) {
            char PrintNotificationdll_str[] = "PrintNotification.dll";
            PrintNotificationdll = f_LoadLibraryA(PrintNotificationdll_str);
        }
    }
    __forceinline void load_PrintPlatformConfig() noexcept {
        if (f_LoadLibraryA) {
            char PrintPlatformConfigdll_str[] = "PrintPlatformConfig.dll";
            PrintPlatformConfigdll = f_LoadLibraryA(PrintPlatformConfigdll_str);
        }
    }
    __forceinline void load_printticketvalidation() noexcept {
        if (f_LoadLibraryA) {
            char printticketvalidationdll_str[] = "printticketvalidation.dll";
            printticketvalidationdll = f_LoadLibraryA(printticketvalidationdll_str);
        }
    }
    __forceinline void load_printui() noexcept {
        if (f_LoadLibraryA) {
            char printuidll_str[] = "printui.dll";
            printuidll = f_LoadLibraryA(printuidll_str);
        }
    }
    __forceinline void load_PrintWorkflowService() noexcept {
        if (f_LoadLibraryA) {
            char PrintWorkflowServicedll_str[] = "PrintWorkflowService.dll";
            PrintWorkflowServicedll = f_LoadLibraryA(PrintWorkflowServicedll_str);
        }
    }
    __forceinline void load_PrintWSDAHost() noexcept {
        if (f_LoadLibraryA) {
            char PrintWSDAHostdll_str[] = "PrintWSDAHost.dll";
            PrintWSDAHostdll = f_LoadLibraryA(PrintWSDAHostdll_str);
        }
    }
    __forceinline void load_prm0009() noexcept {
        if (f_LoadLibraryA) {
            char prm0009dll_str[] = "prm0009.dll";
            prm0009dll = f_LoadLibraryA(prm0009dll_str);
        }
    }
    __forceinline void load_prncache() noexcept {
        if (f_LoadLibraryA) {
            char prncachedll_str[] = "prncache.dll";
            prncachedll = f_LoadLibraryA(prncachedll_str);
        }
    }
    __forceinline void load_prnfldr() noexcept {
        if (f_LoadLibraryA) {
            char prnfldrdll_str[] = "prnfldr.dll";
            prnfldrdll = f_LoadLibraryA(prnfldrdll_str);
        }
    }
    __forceinline void load_prnntfy() noexcept {
        if (f_LoadLibraryA) {
            char prnntfydll_str[] = "prnntfy.dll";
            prnntfydll = f_LoadLibraryA(prnntfydll_str);
        }
    }
    __forceinline void load_prntvpt() noexcept {
        if (f_LoadLibraryA) {
            char prntvptdll_str[] = "prntvpt.dll";
            prntvptdll = f_LoadLibraryA(prntvptdll_str);
        }
    }
    __forceinline void load_ProductEnumerator() noexcept {
        if (f_LoadLibraryA) {
            char ProductEnumeratordll_str[] = "ProductEnumerator.dll";
            ProductEnumeratordll = f_LoadLibraryA(ProductEnumeratordll_str);
        }
    }
    __forceinline void load_profapi() noexcept {
        if (f_LoadLibraryA) {
            char profapidll_str[] = "profapi.dll";
            profapidll = f_LoadLibraryA(profapidll_str);
        }
    }
    __forceinline void load_profext() noexcept {
        if (f_LoadLibraryA) {
            char profextdll_str[] = "profext.dll";
            profextdll = f_LoadLibraryA(profextdll_str);
        }
    }
    __forceinline void load_profprov() noexcept {
        if (f_LoadLibraryA) {
            char profprovdll_str[] = "profprov.dll";
            profprovdll = f_LoadLibraryA(profprovdll_str);
        }
    }
    __forceinline void load_profsvc() noexcept {
        if (f_LoadLibraryA) {
            char profsvcdll_str[] = "profsvc.dll";
            profsvcdll = f_LoadLibraryA(profsvcdll_str);
        }
    }
    __forceinline void load_profsvcext() noexcept {
        if (f_LoadLibraryA) {
            char profsvcextdll_str[] = "profsvcext.dll";
            profsvcextdll = f_LoadLibraryA(profsvcextdll_str);
        }
    }
    __forceinline void load_propsys() noexcept {
        if (f_LoadLibraryA) {
            char propsysdll_str[] = "propsys.dll";
            propsysdll = f_LoadLibraryA(propsysdll_str);
        }
    }
    __forceinline void load_provcore() noexcept {
        if (f_LoadLibraryA) {
            char provcoredll_str[] = "provcore.dll";
            provcoredll = f_LoadLibraryA(provcoredll_str);
        }
    }
    __forceinline void load_provdatastore() noexcept {
        if (f_LoadLibraryA) {
            char provdatastoredll_str[] = "provdatastore.dll";
            provdatastoredll = f_LoadLibraryA(provdatastoredll_str);
        }
    }
    __forceinline void load_provdiagnostics() noexcept {
        if (f_LoadLibraryA) {
            char provdiagnosticsdll_str[] = "provdiagnostics.dll";
            provdiagnosticsdll = f_LoadLibraryA(provdiagnosticsdll_str);
        }
    }
    __forceinline void load_provengine() noexcept {
        if (f_LoadLibraryA) {
            char provenginedll_str[] = "provengine.dll";
            provenginedll = f_LoadLibraryA(provenginedll_str);
        }
    }
    __forceinline void load_provhandlers() noexcept {
        if (f_LoadLibraryA) {
            char provhandlersdll_str[] = "provhandlers.dll";
            provhandlersdll = f_LoadLibraryA(provhandlersdll_str);
        }
    }
    __forceinline void load_provisioningcommandscsp() noexcept {
        if (f_LoadLibraryA) {
            char provisioningcommandscspdll_str[] = "provisioningcommandscsp.dll";
            provisioningcommandscspdll = f_LoadLibraryA(provisioningcommandscspdll_str);
        }
    }
    __forceinline void load_provisioningcsp() noexcept {
        if (f_LoadLibraryA) {
            char provisioningcspdll_str[] = "provisioningcsp.dll";
            provisioningcspdll = f_LoadLibraryA(provisioningcspdll_str);
        }
    }
    __forceinline void load_ProvisioningHandlers() noexcept {
        if (f_LoadLibraryA) {
            char ProvisioningHandlersdll_str[] = "ProvisioningHandlers.dll";
            ProvisioningHandlersdll = f_LoadLibraryA(ProvisioningHandlersdll_str);
        }
    }
    __forceinline void load_provmigrate() noexcept {
        if (f_LoadLibraryA) {
            char provmigratedll_str[] = "provmigrate.dll";
            provmigratedll = f_LoadLibraryA(provmigratedll_str);
        }
    }
    __forceinline void load_provops() noexcept {
        if (f_LoadLibraryA) {
            char provopsdll_str[] = "provops.dll";
            provopsdll = f_LoadLibraryA(provopsdll_str);
        }
    }
    __forceinline void load_provpackageapidll() noexcept {
        if (f_LoadLibraryA) {
            char provpackageapidlldll_str[] = "provpackageapidll.dll";
            provpackageapidlldll = f_LoadLibraryA(provpackageapidlldll_str);
        }
    }
    __forceinline void load_provplatformdesktop() noexcept {
        if (f_LoadLibraryA) {
            char provplatformdesktopdll_str[] = "provplatformdesktop.dll";
            provplatformdesktopdll = f_LoadLibraryA(provplatformdesktopdll_str);
        }
    }
    __forceinline void load_ProvPluginEng() noexcept {
        if (f_LoadLibraryA) {
            char ProvPluginEngdll_str[] = "ProvPluginEng.dll";
            ProvPluginEngdll = f_LoadLibraryA(ProvPluginEngdll_str);
        }
    }
    __forceinline void load_ProvSysprep() noexcept {
        if (f_LoadLibraryA) {
            char ProvSysprepdll_str[] = "ProvSysprep.dll";
            ProvSysprepdll = f_LoadLibraryA(ProvSysprepdll_str);
        }
    }
    __forceinline void load_provthrd() noexcept {
        if (f_LoadLibraryA) {
            char provthrddll_str[] = "provthrd.dll";
            provthrddll = f_LoadLibraryA(provthrddll_str);
        }
    }
    __forceinline void load_ProximityCommon() noexcept {
        if (f_LoadLibraryA) {
            char ProximityCommondll_str[] = "ProximityCommon.dll";
            ProximityCommondll = f_LoadLibraryA(ProximityCommondll_str);
        }
    }
    __forceinline void load_ProximityCommonPal() noexcept {
        if (f_LoadLibraryA) {
            char ProximityCommonPaldll_str[] = "ProximityCommonPal.dll";
            ProximityCommonPaldll = f_LoadLibraryA(ProximityCommonPaldll_str);
        }
    }
    __forceinline void load_ProximityRtapiPal() noexcept {
        if (f_LoadLibraryA) {
            char ProximityRtapiPaldll_str[] = "ProximityRtapiPal.dll";
            ProximityRtapiPaldll = f_LoadLibraryA(ProximityRtapiPaldll_str);
        }
    }
    __forceinline void load_ProximityService() noexcept {
        if (f_LoadLibraryA) {
            char ProximityServicedll_str[] = "ProximityService.dll";
            ProximityServicedll = f_LoadLibraryA(ProximityServicedll_str);
        }
    }
    __forceinline void load_ProximityServicePal() noexcept {
        if (f_LoadLibraryA) {
            char ProximityServicePaldll_str[] = "ProximityServicePal.dll";
            ProximityServicePaldll = f_LoadLibraryA(ProximityServicePaldll_str);
        }
    }
    __forceinline void load_prvdmofcomp() noexcept {
        if (f_LoadLibraryA) {
            char prvdmofcompdll_str[] = "prvdmofcomp.dll";
            prvdmofcompdll = f_LoadLibraryA(prvdmofcompdll_str);
        }
    }
    __forceinline void load_prxyqry() noexcept {
        if (f_LoadLibraryA) {
            char prxyqrydll_str[] = "prxyqry.dll";
            prxyqrydll = f_LoadLibraryA(prxyqrydll_str);
        }
    }
    __forceinline void load_psapi() noexcept {
        if (f_LoadLibraryA) {
            char psapidll_str[] = "psapi.dll";
            psapidll = f_LoadLibraryA(psapidll_str);
        }
    }
    __forceinline void load_psisdecd() noexcept {
        if (f_LoadLibraryA) {
            char psisdecddll_str[] = "psisdecd.dll";
            psisdecddll = f_LoadLibraryA(psisdecddll_str);
        }
    }
    __forceinline void load_PSModuleDiscoveryProvider() noexcept {
        if (f_LoadLibraryA) {
            char PSModuleDiscoveryProviderdll_str[] = "PSModuleDiscoveryProvider.dll";
            PSModuleDiscoveryProviderdll = f_LoadLibraryA(PSModuleDiscoveryProviderdll_str);
        }
    }
    __forceinline void load_PsmServiceExtHost() noexcept {
        if (f_LoadLibraryA) {
            char PsmServiceExtHostdll_str[] = "PsmServiceExtHost.dll";
            PsmServiceExtHostdll = f_LoadLibraryA(PsmServiceExtHostdll_str);
        }
    }
    __forceinline void load_psmsrv() noexcept {
        if (f_LoadLibraryA) {
            char psmsrvdll_str[] = "psmsrv.dll";
            psmsrvdll = f_LoadLibraryA(psmsrvdll_str);
        }
    }
    __forceinline void load_pstask() noexcept {
        if (f_LoadLibraryA) {
            char pstaskdll_str[] = "pstask.dll";
            pstaskdll = f_LoadLibraryA(pstaskdll_str);
        }
    }
    __forceinline void load_pstorec() noexcept {
        if (f_LoadLibraryA) {
            char pstorecdll_str[] = "pstorec.dll";
            pstorecdll = f_LoadLibraryA(pstorecdll_str);
        }
    }
    __forceinline void load_ptpprov() noexcept {
        if (f_LoadLibraryA) {
            char ptpprovdll_str[] = "ptpprov.dll";
            ptpprovdll = f_LoadLibraryA(ptpprovdll_str);
        }
    }
    __forceinline void load_puiapi() noexcept {
        if (f_LoadLibraryA) {
            char puiapidll_str[] = "puiapi.dll";
            puiapidll = f_LoadLibraryA(puiapidll_str);
        }
    }
    __forceinline void load_puiobj() noexcept {
        if (f_LoadLibraryA) {
            char puiobjdll_str[] = "puiobj.dll";
            puiobjdll = f_LoadLibraryA(puiobjdll_str);
        }
    }
    __forceinline void load_PushToInstall() noexcept {
        if (f_LoadLibraryA) {
            char PushToInstalldll_str[] = "PushToInstall.dll";
            PushToInstalldll = f_LoadLibraryA(PushToInstalldll_str);
        }
    }
    __forceinline void load_PwdlessAggregator() noexcept {
        if (f_LoadLibraryA) {
            char PwdlessAggregatordll_str[] = "PwdlessAggregator.dll";
            PwdlessAggregatordll = f_LoadLibraryA(PwdlessAggregatordll_str);
        }
    }
    __forceinline void load_pwlauncher() noexcept {
        if (f_LoadLibraryA) {
            char pwlauncherdll_str[] = "pwlauncher.dll";
            pwlauncherdll = f_LoadLibraryA(pwlauncherdll_str);
        }
    }
    __forceinline void load_pwrshplugin() noexcept {
        if (f_LoadLibraryA) {
            char pwrshplugindll_str[] = "pwrshplugin.dll";
            pwrshplugindll = f_LoadLibraryA(pwrshplugindll_str);
        }
    }
    __forceinline void load_pwrshsip() noexcept {
        if (f_LoadLibraryA) {
            char pwrshsipdll_str[] = "pwrshsip.dll";
            pwrshsipdll = f_LoadLibraryA(pwrshsipdll_str);
        }
    }
    __forceinline void load_pwsso() noexcept {
        if (f_LoadLibraryA) {
            char pwssodll_str[] = "pwsso.dll";
            pwssodll = f_LoadLibraryA(pwssodll_str);
        }
    }
    __forceinline void load_qasf() noexcept {
        if (f_LoadLibraryA) {
            char qasfdll_str[] = "qasf.dll";
            qasfdll = f_LoadLibraryA(qasfdll_str);
        }
    }
    __forceinline void load_qcap() noexcept {
        if (f_LoadLibraryA) {
            char qcapdll_str[] = "qcap.dll";
            qcapdll = f_LoadLibraryA(qcapdll_str);
        }
    }
    __forceinline void load_qdv() noexcept {
        if (f_LoadLibraryA) {
            char qdvdll_str[] = "qdv.dll";
            qdvdll = f_LoadLibraryA(qdvdll_str);
        }
    }
    __forceinline void load_qdvd() noexcept {
        if (f_LoadLibraryA) {
            char qdvddll_str[] = "qdvd.dll";
            qdvddll = f_LoadLibraryA(qdvddll_str);
        }
    }
    __forceinline void load_qedit() noexcept {
        if (f_LoadLibraryA) {
            char qeditdll_str[] = "qedit.dll";
            qeditdll = f_LoadLibraryA(qeditdll_str);
        }
    }
    __forceinline void load_qedwipes() noexcept {
        if (f_LoadLibraryA) {
            char qedwipesdll_str[] = "qedwipes.dll";
            qedwipesdll = f_LoadLibraryA(qedwipesdll_str);
        }
    }
    __forceinline void load_qmgr() noexcept {
        if (f_LoadLibraryA) {
            char qmgrdll_str[] = "qmgr.dll";
            qmgrdll = f_LoadLibraryA(qmgrdll_str);
        }
    }
    __forceinline void load_QualityUpdateAssistant() noexcept {
        if (f_LoadLibraryA) {
            char QualityUpdateAssistantdll_str[] = "QualityUpdateAssistant.dll";
            QualityUpdateAssistantdll = f_LoadLibraryA(QualityUpdateAssistantdll_str);
        }
    }
    __forceinline void load_quartz() noexcept {
        if (f_LoadLibraryA) {
            char quartzdll_str[] = "quartz.dll";
            quartzdll = f_LoadLibraryA(quartzdll_str);
        }
    }
    __forceinline void load_Query() noexcept {
        if (f_LoadLibraryA) {
            char Querydll_str[] = "Query.dll";
            Querydll = f_LoadLibraryA(Querydll_str);
        }
    }
    __forceinline void load_QuickActionsDataModel() noexcept {
        if (f_LoadLibraryA) {
            char QuickActionsDataModeldll_str[] = "QuickActionsDataModel.dll";
            QuickActionsDataModeldll = f_LoadLibraryA(QuickActionsDataModeldll_str);
        }
    }
    __forceinline void load_QuietHours() noexcept {
        if (f_LoadLibraryA) {
            char QuietHoursdll_str[] = "QuietHours.dll";
            QuietHoursdll = f_LoadLibraryA(QuietHoursdll_str);
        }
    }
    __forceinline void load_qwave() noexcept {
        if (f_LoadLibraryA) {
            char qwavedll_str[] = "qwave.dll";
            qwavedll = f_LoadLibraryA(qwavedll_str);
        }
    }
    __forceinline void load_RacEngn() noexcept {
        if (f_LoadLibraryA) {
            char RacEngndll_str[] = "RacEngn.dll";
            RacEngndll = f_LoadLibraryA(RacEngndll_str);
        }
    }
    __forceinline void load_racpldlg() noexcept {
        if (f_LoadLibraryA) {
            char racpldlgdll_str[] = "racpldlg.dll";
            racpldlgdll = f_LoadLibraryA(racpldlgdll_str);
        }
    }
    __forceinline void load_radardt() noexcept {
        if (f_LoadLibraryA) {
            char radardtdll_str[] = "radardt.dll";
            radardtdll = f_LoadLibraryA(radardtdll_str);
        }
    }
    __forceinline void load_radarrs() noexcept {
        if (f_LoadLibraryA) {
            char radarrsdll_str[] = "radarrs.dll";
            radarrsdll = f_LoadLibraryA(radarrsdll_str);
        }
    }
    __forceinline void load_RADCUI() noexcept {
        if (f_LoadLibraryA) {
            char RADCUIdll_str[] = "RADCUI.dll";
            RADCUIdll = f_LoadLibraryA(RADCUIdll_str);
        }
    }
    __forceinline void load_RandomAccessStreamDataSource() noexcept {
        if (f_LoadLibraryA) {
            char RandomAccessStreamDataSourcedll_str[] = "RandomAccessStreamDataSource.dll";
            RandomAccessStreamDataSourcedll = f_LoadLibraryA(RandomAccessStreamDataSourcedll_str);
        }
    }
    __forceinline void load_rasadhlp() noexcept {
        if (f_LoadLibraryA) {
            char rasadhlpdll_str[] = "rasadhlp.dll";
            rasadhlpdll = f_LoadLibraryA(rasadhlpdll_str);
        }
    }
    __forceinline void load_rasapi32() noexcept {
        if (f_LoadLibraryA) {
            char rasapi32dll_str[] = "rasapi32.dll";
            rasapi32dll = f_LoadLibraryA(rasapi32dll_str);
        }
    }
    __forceinline void load_rasauto() noexcept {
        if (f_LoadLibraryA) {
            char rasautodll_str[] = "rasauto.dll";
            rasautodll = f_LoadLibraryA(rasautodll_str);
        }
    }
    __forceinline void load_raschap() noexcept {
        if (f_LoadLibraryA) {
            char raschapdll_str[] = "raschap.dll";
            raschapdll = f_LoadLibraryA(raschapdll_str);
        }
    }
    __forceinline void load_raschapext() noexcept {
        if (f_LoadLibraryA) {
            char raschapextdll_str[] = "raschapext.dll";
            raschapextdll = f_LoadLibraryA(raschapextdll_str);
        }
    }
    __forceinline void load_rasctrs() noexcept {
        if (f_LoadLibraryA) {
            char rasctrsdll_str[] = "rasctrs.dll";
            rasctrsdll = f_LoadLibraryA(rasctrsdll_str);
        }
    }
    __forceinline void load_rascustom() noexcept {
        if (f_LoadLibraryA) {
            char rascustomdll_str[] = "rascustom.dll";
            rascustomdll = f_LoadLibraryA(rascustomdll_str);
        }
    }
    __forceinline void load_rasdiag() noexcept {
        if (f_LoadLibraryA) {
            char rasdiagdll_str[] = "rasdiag.dll";
            rasdiagdll = f_LoadLibraryA(rasdiagdll_str);
        }
    }
    __forceinline void load_rasdlg() noexcept {
        if (f_LoadLibraryA) {
            char rasdlgdll_str[] = "rasdlg.dll";
            rasdlgdll = f_LoadLibraryA(rasdlgdll_str);
        }
    }
    __forceinline void load_rasgcw() noexcept {
        if (f_LoadLibraryA) {
            char rasgcwdll_str[] = "rasgcw.dll";
            rasgcwdll = f_LoadLibraryA(rasgcwdll_str);
        }
    }
    __forceinline void load_rasman() noexcept {
        if (f_LoadLibraryA) {
            char rasmandll_str[] = "rasman.dll";
            rasmandll = f_LoadLibraryA(rasmandll_str);
        }
    }
    __forceinline void load_rasmans() noexcept {
        if (f_LoadLibraryA) {
            char rasmansdll_str[] = "rasmans.dll";
            rasmansdll = f_LoadLibraryA(rasmansdll_str);
        }
    }
    __forceinline void load_rasmbmgr() noexcept {
        if (f_LoadLibraryA) {
            char rasmbmgrdll_str[] = "rasmbmgr.dll";
            rasmbmgrdll = f_LoadLibraryA(rasmbmgrdll_str);
        }
    }
    __forceinline void load_RasMediaManager() noexcept {
        if (f_LoadLibraryA) {
            char RasMediaManagerdll_str[] = "RasMediaManager.dll";
            RasMediaManagerdll = f_LoadLibraryA(RasMediaManagerdll_str);
        }
    }
    __forceinline void load_RASMM() noexcept {
        if (f_LoadLibraryA) {
            char RASMMdll_str[] = "RASMM.dll";
            RASMMdll = f_LoadLibraryA(RASMMdll_str);
        }
    }
    __forceinline void load_rasmontr() noexcept {
        if (f_LoadLibraryA) {
            char rasmontrdll_str[] = "rasmontr.dll";
            rasmontrdll = f_LoadLibraryA(rasmontrdll_str);
        }
    }
    __forceinline void load_rasplap() noexcept {
        if (f_LoadLibraryA) {
            char rasplapdll_str[] = "rasplap.dll";
            rasplapdll = f_LoadLibraryA(rasplapdll_str);
        }
    }
    __forceinline void load_rasppp() noexcept {
        if (f_LoadLibraryA) {
            char raspppdll_str[] = "rasppp.dll";
            raspppdll = f_LoadLibraryA(raspppdll_str);
        }
    }
    __forceinline void load_rastapi() noexcept {
        if (f_LoadLibraryA) {
            char rastapidll_str[] = "rastapi.dll";
            rastapidll = f_LoadLibraryA(rastapidll_str);
        }
    }
    __forceinline void load_rastls() noexcept {
        if (f_LoadLibraryA) {
            char rastlsdll_str[] = "rastls.dll";
            rastlsdll = f_LoadLibraryA(rastlsdll_str);
        }
    }
    __forceinline void load_rastlsext() noexcept {
        if (f_LoadLibraryA) {
            char rastlsextdll_str[] = "rastlsext.dll";
            rastlsextdll = f_LoadLibraryA(rastlsextdll_str);
        }
    }
    __forceinline void load_rdbui() noexcept {
        if (f_LoadLibraryA) {
            char rdbuidll_str[] = "rdbui.dll";
            rdbuidll = f_LoadLibraryA(rdbuidll_str);
        }
    }
    __forceinline void load_rdp4vs() noexcept {
        if (f_LoadLibraryA) {
            char rdp4vsdll_str[] = "rdp4vs.dll";
            rdp4vsdll = f_LoadLibraryA(rdp4vsdll_str);
        }
    }
    __forceinline void load_RdpAvenc() noexcept {
        if (f_LoadLibraryA) {
            char RdpAvencdll_str[] = "RdpAvenc.dll";
            RdpAvencdll = f_LoadLibraryA(RdpAvencdll_str);
        }
    }
    __forceinline void load_rdpbase() noexcept {
        if (f_LoadLibraryA) {
            char rdpbasedll_str[] = "rdpbase.dll";
            rdpbasedll = f_LoadLibraryA(rdpbasedll_str);
        }
    }
    __forceinline void load_rdpcfgex() noexcept {
        if (f_LoadLibraryA) {
            char rdpcfgexdll_str[] = "rdpcfgex.dll";
            rdpcfgexdll = f_LoadLibraryA(rdpcfgexdll_str);
        }
    }
    __forceinline void load_rdpcorets() noexcept {
        if (f_LoadLibraryA) {
            char rdpcoretsdll_str[] = "rdpcorets.dll";
            rdpcoretsdll = f_LoadLibraryA(rdpcoretsdll_str);
        }
    }
    __forceinline void load_rdpcredentialprovider() noexcept {
        if (f_LoadLibraryA) {
            char rdpcredentialproviderdll_str[] = "rdpcredentialprovider.dll";
            rdpcredentialproviderdll = f_LoadLibraryA(rdpcredentialproviderdll_str);
        }
    }
    __forceinline void load_rdpendp() noexcept {
        if (f_LoadLibraryA) {
            char rdpendpdll_str[] = "rdpendp.dll";
            rdpendpdll = f_LoadLibraryA(rdpendpdll_str);
        }
    }
    __forceinline void load_rdpnanoTransport() noexcept {
        if (f_LoadLibraryA) {
            char rdpnanoTransportdll_str[] = "rdpnanoTransport.dll";
            rdpnanoTransportdll = f_LoadLibraryA(rdpnanoTransportdll_str);
        }
    }
    __forceinline void load_RdpRelayTransport() noexcept {
        if (f_LoadLibraryA) {
            char RdpRelayTransportdll_str[] = "RdpRelayTransport.dll";
            RdpRelayTransportdll = f_LoadLibraryA(RdpRelayTransportdll_str);
        }
    }
    __forceinline void load_RdpSaPs() noexcept {
        if (f_LoadLibraryA) {
            char RdpSaPsdll_str[] = "RdpSaPs.dll";
            RdpSaPsdll = f_LoadLibraryA(RdpSaPsdll_str);
        }
    }
    __forceinline void load_rdpserverbase() noexcept {
        if (f_LoadLibraryA) {
            char rdpserverbasedll_str[] = "rdpserverbase.dll";
            rdpserverbasedll = f_LoadLibraryA(rdpserverbasedll_str);
        }
    }
    __forceinline void load_rdpsharercom() noexcept {
        if (f_LoadLibraryA) {
            char rdpsharercomdll_str[] = "rdpsharercom.dll";
            rdpsharercomdll = f_LoadLibraryA(rdpsharercomdll_str);
        }
    }
    __forceinline void load_rdpudd() noexcept {
        if (f_LoadLibraryA) {
            char rdpudddll_str[] = "rdpudd.dll";
            rdpudddll = f_LoadLibraryA(rdpudddll_str);
        }
    }
    __forceinline void load_rdpviewerax() noexcept {
        if (f_LoadLibraryA) {
            char rdpvieweraxdll_str[] = "rdpviewerax.dll";
            rdpvieweraxdll = f_LoadLibraryA(rdpvieweraxdll_str);
        }
    }
    __forceinline void load_RDSAppXHelper() noexcept {
        if (f_LoadLibraryA) {
            char RDSAppXHelperdll_str[] = "RDSAppXHelper.dll";
            RDSAppXHelperdll = f_LoadLibraryA(RDSAppXHelperdll_str);
        }
    }
    __forceinline void load_rdsdwmdr() noexcept {
        if (f_LoadLibraryA) {
            char rdsdwmdrdll_str[] = "rdsdwmdr.dll";
            rdsdwmdrdll = f_LoadLibraryA(rdsdwmdrdll_str);
        }
    }
    __forceinline void load_rdvvmtransport() noexcept {
        if (f_LoadLibraryA) {
            char rdvvmtransportdll_str[] = "rdvvmtransport.dll";
            rdvvmtransportdll = f_LoadLibraryA(rdvvmtransportdll_str);
        }
    }
    __forceinline void load_RDXService() noexcept {
        if (f_LoadLibraryA) {
            char RDXServicedll_str[] = "RDXService.dll";
            RDXServicedll = f_LoadLibraryA(RDXServicedll_str);
        }
    }
    __forceinline void load_RDXTaskFactory() noexcept {
        if (f_LoadLibraryA) {
            char RDXTaskFactorydll_str[] = "RDXTaskFactory.dll";
            RDXTaskFactorydll = f_LoadLibraryA(RDXTaskFactorydll_str);
        }
    }
    __forceinline void load_ReAgent() noexcept {
        if (f_LoadLibraryA) {
            char ReAgentdll_str[] = "ReAgent.dll";
            ReAgentdll = f_LoadLibraryA(ReAgentdll_str);
        }
    }
    __forceinline void load_ReAgentTask() noexcept {
        if (f_LoadLibraryA) {
            char ReAgentTaskdll_str[] = "ReAgentTask.dll";
            ReAgentTaskdll = f_LoadLibraryA(ReAgentTaskdll_str);
        }
    }
    __forceinline void load_recovery() noexcept {
        if (f_LoadLibraryA) {
            char recoverydll_str[] = "recovery.dll";
            recoverydll = f_LoadLibraryA(recoverydll_str);
        }
    }
    __forceinline void load_regapi() noexcept {
        if (f_LoadLibraryA) {
            char regapidll_str[] = "regapi.dll";
            regapidll = f_LoadLibraryA(regapidll_str);
        }
    }
    __forceinline void load_RegCtrl() noexcept {
        if (f_LoadLibraryA) {
            char RegCtrldll_str[] = "RegCtrl.dll";
            RegCtrldll = f_LoadLibraryA(RegCtrldll_str);
        }
    }
    __forceinline void load_regidle() noexcept {
        if (f_LoadLibraryA) {
            char regidledll_str[] = "regidle.dll";
            regidledll = f_LoadLibraryA(regidledll_str);
        }
    }
    __forceinline void load_regsvc() noexcept {
        if (f_LoadLibraryA) {
            char regsvcdll_str[] = "regsvc.dll";
            regsvcdll = f_LoadLibraryA(regsvcdll_str);
        }
    }
    __forceinline void load_reguwpapi() noexcept {
        if (f_LoadLibraryA) {
            char reguwpapidll_str[] = "reguwpapi.dll";
            reguwpapidll = f_LoadLibraryA(reguwpapidll_str);
        }
    }
    __forceinline void load_ReInfo() noexcept {
        if (f_LoadLibraryA) {
            char ReInfodll_str[] = "ReInfo.dll";
            ReInfodll = f_LoadLibraryA(ReInfodll_str);
        }
    }
    __forceinline void load_RemoteAppLifetimeManagerProxyStub() noexcept {
        if (f_LoadLibraryA) {
            char RemoteAppLifetimeManagerProxyStubdll_str[] = "RemoteAppLifetimeManagerProxyStub.dll";
            RemoteAppLifetimeManagerProxyStubdll = f_LoadLibraryA(RemoteAppLifetimeManagerProxyStubdll_str);
        }
    }
    __forceinline void load_remoteaudioendpoint() noexcept {
        if (f_LoadLibraryA) {
            char remoteaudioendpointdll_str[] = "remoteaudioendpoint.dll";
            remoteaudioendpointdll = f_LoadLibraryA(remoteaudioendpointdll_str);
        }
    }
    __forceinline void load_RemoteFileBrowse() noexcept {
        if (f_LoadLibraryA) {
            char RemoteFileBrowsedll_str[] = "RemoteFileBrowse.dll";
            RemoteFileBrowsedll = f_LoadLibraryA(RemoteFileBrowsedll_str);
        }
    }
    __forceinline void load_remotepg() noexcept {
        if (f_LoadLibraryA) {
            char remotepgdll_str[] = "remotepg.dll";
            remotepgdll = f_LoadLibraryA(remotepgdll_str);
        }
    }
    __forceinline void load_RemoteWipeCSP() noexcept {
        if (f_LoadLibraryA) {
            char RemoteWipeCSPdll_str[] = "RemoteWipeCSP.dll";
            RemoteWipeCSPdll = f_LoadLibraryA(RemoteWipeCSPdll_str);
        }
    }
    __forceinline void load_RemovableMediaProvisioningPlugin() noexcept {
        if (f_LoadLibraryA) {
            char RemovableMediaProvisioningPlugindll_str[] = "RemovableMediaProvisioningPlugin.dll";
            RemovableMediaProvisioningPlugindll = f_LoadLibraryA(RemovableMediaProvisioningPlugindll_str);
        }
    }
    __forceinline void load_RemoveDeviceContextHandler() noexcept {
        if (f_LoadLibraryA) {
            char RemoveDeviceContextHandlerdll_str[] = "RemoveDeviceContextHandler.dll";
            RemoveDeviceContextHandlerdll = f_LoadLibraryA(RemoveDeviceContextHandlerdll_str);
        }
    }
    __forceinline void load_RemoveDeviceElevated() noexcept {
        if (f_LoadLibraryA) {
            char RemoveDeviceElevateddll_str[] = "RemoveDeviceElevated.dll";
            RemoveDeviceElevateddll = f_LoadLibraryA(RemoveDeviceElevateddll_str);
        }
    }
    __forceinline void load_ReportingCSP() noexcept {
        if (f_LoadLibraryA) {
            char ReportingCSPdll_str[] = "ReportingCSP.dll";
            ReportingCSPdll = f_LoadLibraryA(ReportingCSPdll_str);
        }
    }
    __forceinline void load_ResBParser() noexcept {
        if (f_LoadLibraryA) {
            char ResBParserdll_str[] = "ResBParser.dll";
            ResBParserdll = f_LoadLibraryA(ResBParserdll_str);
        }
    }
    __forceinline void load_reseteng() noexcept {
        if (f_LoadLibraryA) {
            char resetengdll_str[] = "reseteng.dll";
            resetengdll = f_LoadLibraryA(resetengdll_str);
        }
    }
    __forceinline void load_ResetEngine() noexcept {
        if (f_LoadLibraryA) {
            char ResetEnginedll_str[] = "ResetEngine.dll";
            ResetEnginedll = f_LoadLibraryA(ResetEnginedll_str);
        }
    }
    __forceinline void load_ResetEngOnline() noexcept {
        if (f_LoadLibraryA) {
            char ResetEngOnlinedll_str[] = "ResetEngOnline.dll";
            ResetEngOnlinedll = f_LoadLibraryA(ResetEngOnlinedll_str);
        }
    }
    __forceinline void load_ResourceMapper() noexcept {
        if (f_LoadLibraryA) {
            char ResourceMapperdll_str[] = "ResourceMapper.dll";
            ResourceMapperdll = f_LoadLibraryA(ResourceMapperdll_str);
        }
    }
    __forceinline void load_ResourcePolicyClient() noexcept {
        if (f_LoadLibraryA) {
            char ResourcePolicyClientdll_str[] = "ResourcePolicyClient.dll";
            ResourcePolicyClientdll = f_LoadLibraryA(ResourcePolicyClientdll_str);
        }
    }
    __forceinline void load_ResourcePolicyServer() noexcept {
        if (f_LoadLibraryA) {
            char ResourcePolicyServerdll_str[] = "ResourcePolicyServer.dll";
            ResourcePolicyServerdll = f_LoadLibraryA(ResourcePolicyServerdll_str);
        }
    }
    __forceinline void load_resutils() noexcept {
        if (f_LoadLibraryA) {
            char resutilsdll_str[] = "resutils.dll";
            resutilsdll = f_LoadLibraryA(resutilsdll_str);
        }
    }
    __forceinline void load_rgb9rast() noexcept {
        if (f_LoadLibraryA) {
            char rgb9rastdll_str[] = "rgb9rast.dll";
            rgb9rastdll = f_LoadLibraryA(rgb9rastdll_str);
        }
    }
    __forceinline void load_riched20() noexcept {
        if (f_LoadLibraryA) {
            char riched20dll_str[] = "riched20.dll";
            riched20dll = f_LoadLibraryA(riched20dll_str);
        }
    }
    __forceinline void load_riched32() noexcept {
        if (f_LoadLibraryA) {
            char riched32dll_str[] = "riched32.dll";
            riched32dll = f_LoadLibraryA(riched32dll_str);
        }
    }
    __forceinline void load_RjvMDMConfig() noexcept {
        if (f_LoadLibraryA) {
            char RjvMDMConfigdll_str[] = "RjvMDMConfig.dll";
            RjvMDMConfigdll = f_LoadLibraryA(RjvMDMConfigdll_str);
        }
    }
    __forceinline void load_RMapi() noexcept {
        if (f_LoadLibraryA) {
            char RMapidll_str[] = "RMapi.dll";
            RMapidll = f_LoadLibraryA(RMapidll_str);
        }
    }
    __forceinline void load_rmclient() noexcept {
        if (f_LoadLibraryA) {
            char rmclientdll_str[] = "rmclient.dll";
            rmclientdll = f_LoadLibraryA(rmclientdll_str);
        }
    }
    __forceinline void load_RMSRoamingSecurity() noexcept {
        if (f_LoadLibraryA) {
            char RMSRoamingSecuritydll_str[] = "RMSRoamingSecurity.dll";
            RMSRoamingSecuritydll = f_LoadLibraryA(RMSRoamingSecuritydll_str);
        }
    }
    __forceinline void load_rnr20() noexcept {
        if (f_LoadLibraryA) {
            char rnr20dll_str[] = "rnr20.dll";
            rnr20dll = f_LoadLibraryA(rnr20dll_str);
        }
    }
    __forceinline void load_RoamingSecurity() noexcept {
        if (f_LoadLibraryA) {
            char RoamingSecuritydll_str[] = "RoamingSecurity.dll";
            RoamingSecuritydll = f_LoadLibraryA(RoamingSecuritydll_str);
        }
    }
    __forceinline void load_rometadata() noexcept {
        if (f_LoadLibraryA) {
            char rometadatadll_str[] = "rometadata.dll";
            rometadatadll = f_LoadLibraryA(rometadatadll_str);
        }
    }
    __forceinline void load_RotMgr() noexcept {
        if (f_LoadLibraryA) {
            char RotMgrdll_str[] = "RotMgr.dll";
            RotMgrdll = f_LoadLibraryA(RotMgrdll_str);
        }
    }
    __forceinline void load_RpcEpMap() noexcept {
        if (f_LoadLibraryA) {
            char RpcEpMapdll_str[] = "RpcEpMap.dll";
            RpcEpMapdll = f_LoadLibraryA(RpcEpMapdll_str);
        }
    }
    __forceinline void load_rpchttp() noexcept {
        if (f_LoadLibraryA) {
            char rpchttpdll_str[] = "rpchttp.dll";
            rpchttpdll = f_LoadLibraryA(rpchttpdll_str);
        }
    }
    __forceinline void load_RpcNs4() noexcept {
        if (f_LoadLibraryA) {
            char RpcNs4dll_str[] = "RpcNs4.dll";
            RpcNs4dll = f_LoadLibraryA(RpcNs4dll_str);
        }
    }
    __forceinline void load_rpcnsh() noexcept {
        if (f_LoadLibraryA) {
            char rpcnshdll_str[] = "rpcnsh.dll";
            rpcnshdll = f_LoadLibraryA(rpcnshdll_str);
        }
    }
    __forceinline void load_rpcrt4() noexcept {
        if (f_LoadLibraryA) {
            char rpcrt4dll_str[] = "rpcrt4.dll";
            rpcrt4dll = f_LoadLibraryA(rpcrt4dll_str);
        }
    }
    __forceinline void load_RpcRtRemote() noexcept {
        if (f_LoadLibraryA) {
            char RpcRtRemotedll_str[] = "RpcRtRemote.dll";
            RpcRtRemotedll = f_LoadLibraryA(RpcRtRemotedll_str);
        }
    }
    __forceinline void load_rpcss() noexcept {
        if (f_LoadLibraryA) {
            char rpcssdll_str[] = "rpcss.dll";
            rpcssdll = f_LoadLibraryA(rpcssdll_str);
        }
    }
    __forceinline void load_rsaenh() noexcept {
        if (f_LoadLibraryA) {
            char rsaenhdll_str[] = "rsaenh.dll";
            rsaenhdll = f_LoadLibraryA(rsaenhdll_str);
        }
    }
    __forceinline void load_rshx32() noexcept {
        if (f_LoadLibraryA) {
            char rshx32dll_str[] = "rshx32.dll";
            rshx32dll = f_LoadLibraryA(rshx32dll_str);
        }
    }
    __forceinline void load_RstMwEventLogMsg() noexcept {
        if (f_LoadLibraryA) {
            char RstMwEventLogMsgdll_str[] = "RstMwEventLogMsg.dll";
            RstMwEventLogMsgdll = f_LoadLibraryA(RstMwEventLogMsgdll_str);
        }
    }
    __forceinline void load_RstrtMgr() noexcept {
        if (f_LoadLibraryA) {
            char RstrtMgrdll_str[] = "RstrtMgr.dll";
            RstrtMgrdll = f_LoadLibraryA(RstrtMgrdll_str);
        }
    }
    __forceinline void load_rtffilt() noexcept {
        if (f_LoadLibraryA) {
            char rtffiltdll_str[] = "rtffilt.dll";
            rtffiltdll = f_LoadLibraryA(rtffiltdll_str);
        }
    }
    __forceinline void load_rtm() noexcept {
        if (f_LoadLibraryA) {
            char rtmdll_str[] = "rtm.dll";
            rtmdll = f_LoadLibraryA(rtmdll_str);
        }
    }
    __forceinline void load_rtmcodecs() noexcept {
        if (f_LoadLibraryA) {
            char rtmcodecsdll_str[] = "rtmcodecs.dll";
            rtmcodecsdll = f_LoadLibraryA(rtmcodecsdll_str);
        }
    }
    __forceinline void load_RTMediaFrame() noexcept {
        if (f_LoadLibraryA) {
            char RTMediaFramedll_str[] = "RTMediaFrame.dll";
            RTMediaFramedll = f_LoadLibraryA(RTMediaFramedll_str);
        }
    }
    __forceinline void load_rtmmvrortc() noexcept {
        if (f_LoadLibraryA) {
            char rtmmvrortcdll_str[] = "rtmmvrortc.dll";
            rtmmvrortcdll = f_LoadLibraryA(rtmmvrortcdll_str);
        }
    }
    __forceinline void load_rtmpal() noexcept {
        if (f_LoadLibraryA) {
            char rtmpaldll_str[] = "rtmpal.dll";
            rtmpaldll = f_LoadLibraryA(rtmpaldll_str);
        }
    }
    __forceinline void load_rtmpltfm() noexcept {
        if (f_LoadLibraryA) {
            char rtmpltfmdll_str[] = "rtmpltfm.dll";
            rtmpltfmdll = f_LoadLibraryA(rtmpltfmdll_str);
        }
    }
    __forceinline void load_rtpm() noexcept {
        if (f_LoadLibraryA) {
            char rtpmdll_str[] = "rtpm.dll";
            rtpmdll = f_LoadLibraryA(rtpmdll_str);
        }
    }
    __forceinline void load_rtutils() noexcept {
        if (f_LoadLibraryA) {
            char rtutilsdll_str[] = "rtutils.dll";
            rtutilsdll = f_LoadLibraryA(rtutilsdll_str);
        }
    }
    __forceinline void load_RTWorkQ() noexcept {
        if (f_LoadLibraryA) {
            char RTWorkQdll_str[] = "RTWorkQ.dll";
            RTWorkQdll = f_LoadLibraryA(RTWorkQdll_str);
        }
    }
    __forceinline void load_RuleBasedDS() noexcept {
        if (f_LoadLibraryA) {
            char RuleBasedDSdll_str[] = "RuleBasedDS.dll";
            RuleBasedDSdll = f_LoadLibraryA(RuleBasedDSdll_str);
        }
    }
    __forceinline void load_samcli() noexcept {
        if (f_LoadLibraryA) {
            char samclidll_str[] = "samcli.dll";
            samclidll = f_LoadLibraryA(samclidll_str);
        }
    }
    __forceinline void load_samlib() noexcept {
        if (f_LoadLibraryA) {
            char samlibdll_str[] = "samlib.dll";
            samlibdll = f_LoadLibraryA(samlibdll_str);
        }
    }
    __forceinline void load_samsrv() noexcept {
        if (f_LoadLibraryA) {
            char samsrvdll_str[] = "samsrv.dll";
            samsrvdll = f_LoadLibraryA(samsrvdll_str);
        }
    }
    __forceinline void load_sas() noexcept {
        if (f_LoadLibraryA) {
            char sasdll_str[] = "sas.dll";
            sasdll = f_LoadLibraryA(sasdll_str);
        }
    }
    __forceinline void load_sbe() noexcept {
        if (f_LoadLibraryA) {
            char sbedll_str[] = "sbe.dll";
            sbedll = f_LoadLibraryA(sbedll_str);
        }
    }
    __forceinline void load_sbeio() noexcept {
        if (f_LoadLibraryA) {
            char sbeiodll_str[] = "sbeio.dll";
            sbeiodll = f_LoadLibraryA(sbeiodll_str);
        }
    }
    __forceinline void load_sberes() noexcept {
        if (f_LoadLibraryA) {
            char sberesdll_str[] = "sberes.dll";
            sberesdll = f_LoadLibraryA(sberesdll_str);
        }
    }
    __forceinline void load_sbresources() noexcept {
        if (f_LoadLibraryA) {
            char sbresourcesdll_str[] = "sbresources.dll";
            sbresourcesdll = f_LoadLibraryA(sbresourcesdll_str);
        }
    }
    __forceinline void load_sbservicetrigger() noexcept {
        if (f_LoadLibraryA) {
            char sbservicetriggerdll_str[] = "sbservicetrigger.dll";
            sbservicetriggerdll = f_LoadLibraryA(sbservicetriggerdll_str);
        }
    }
    __forceinline void load_scansetting() noexcept {
        if (f_LoadLibraryA) {
            char scansettingdll_str[] = "scansetting.dll";
            scansettingdll = f_LoadLibraryA(scansettingdll_str);
        }
    }
    __forceinline void load_SCardBi() noexcept {
        if (f_LoadLibraryA) {
            char SCardBidll_str[] = "SCardBi.dll";
            SCardBidll = f_LoadLibraryA(SCardBidll_str);
        }
    }
    __forceinline void load_SCardDlg() noexcept {
        if (f_LoadLibraryA) {
            char SCardDlgdll_str[] = "SCardDlg.dll";
            SCardDlgdll = f_LoadLibraryA(SCardDlgdll_str);
        }
    }
    __forceinline void load_SCardSvr() noexcept {
        if (f_LoadLibraryA) {
            char SCardSvrdll_str[] = "SCardSvr.dll";
            SCardSvrdll = f_LoadLibraryA(SCardSvrdll_str);
        }
    }
    __forceinline void load_scavengeui() noexcept {
        if (f_LoadLibraryA) {
            char scavengeuidll_str[] = "scavengeui.dll";
            scavengeuidll = f_LoadLibraryA(scavengeuidll_str);
        }
    }
    __forceinline void load_ScDeviceEnum() noexcept {
        if (f_LoadLibraryA) {
            char ScDeviceEnumdll_str[] = "ScDeviceEnum.dll";
            ScDeviceEnumdll = f_LoadLibraryA(ScDeviceEnumdll_str);
        }
    }
    __forceinline void load_scecli() noexcept {
        if (f_LoadLibraryA) {
            char sceclidll_str[] = "scecli.dll";
            sceclidll = f_LoadLibraryA(sceclidll_str);
        }
    }
    __forceinline void load_scesrv() noexcept {
        if (f_LoadLibraryA) {
            char scesrvdll_str[] = "scesrv.dll";
            scesrvdll = f_LoadLibraryA(scesrvdll_str);
        }
    }
    __forceinline void load_schannel() noexcept {
        if (f_LoadLibraryA) {
            char schanneldll_str[] = "schannel.dll";
            schanneldll = f_LoadLibraryA(schanneldll_str);
        }
    }
    __forceinline void load_schedcli() noexcept {
        if (f_LoadLibraryA) {
            char schedclidll_str[] = "schedcli.dll";
            schedclidll = f_LoadLibraryA(schedclidll_str);
        }
    }
    __forceinline void load_schedsvc() noexcept {
        if (f_LoadLibraryA) {
            char schedsvcdll_str[] = "schedsvc.dll";
            schedsvcdll = f_LoadLibraryA(schedsvcdll_str);
        }
    }
    __forceinline void load_scksp() noexcept {
        if (f_LoadLibraryA) {
            char sckspdll_str[] = "scksp.dll";
            sckspdll = f_LoadLibraryA(sckspdll_str);
        }
    }
    __forceinline void load_scripto() noexcept {
        if (f_LoadLibraryA) {
            char scriptodll_str[] = "scripto.dll";
            scriptodll = f_LoadLibraryA(scriptodll_str);
        }
    }
    __forceinline void load_scrobj() noexcept {
        if (f_LoadLibraryA) {
            char scrobjdll_str[] = "scrobj.dll";
            scrobjdll = f_LoadLibraryA(scrobjdll_str);
        }
    }
    __forceinline void load_scrptadm() noexcept {
        if (f_LoadLibraryA) {
            char scrptadmdll_str[] = "scrptadm.dll";
            scrptadmdll = f_LoadLibraryA(scrptadmdll_str);
        }
    }
    __forceinline void load_scrrun() noexcept {
        if (f_LoadLibraryA) {
            char scrrundll_str[] = "scrrun.dll";
            scrrundll = f_LoadLibraryA(scrrundll_str);
        }
    }
    __forceinline void load_sdcpl() noexcept {
        if (f_LoadLibraryA) {
            char sdcpldll_str[] = "sdcpl.dll";
            sdcpldll = f_LoadLibraryA(sdcpldll_str);
        }
    }
    __forceinline void load_SDDS() noexcept {
        if (f_LoadLibraryA) {
            char SDDSdll_str[] = "SDDS.dll";
            SDDSdll = f_LoadLibraryA(SDDSdll_str);
        }
    }
    __forceinline void load_sdengin2() noexcept {
        if (f_LoadLibraryA) {
            char sdengin2dll_str[] = "sdengin2.dll";
            sdengin2dll = f_LoadLibraryA(sdengin2dll_str);
        }
    }
    __forceinline void load_SDFHost() noexcept {
        if (f_LoadLibraryA) {
            char SDFHostdll_str[] = "SDFHost.dll";
            SDFHostdll = f_LoadLibraryA(SDFHostdll_str);
        }
    }
    __forceinline void load_sdhcinst() noexcept {
        if (f_LoadLibraryA) {
            char sdhcinstdll_str[] = "sdhcinst.dll";
            sdhcinstdll = f_LoadLibraryA(sdhcinstdll_str);
        }
    }
    __forceinline void load_sdiageng() noexcept {
        if (f_LoadLibraryA) {
            char sdiagengdll_str[] = "sdiageng.dll";
            sdiagengdll = f_LoadLibraryA(sdiagengdll_str);
        }
    }
    __forceinline void load_sdiagprv() noexcept {
        if (f_LoadLibraryA) {
            char sdiagprvdll_str[] = "sdiagprv.dll";
            sdiagprvdll = f_LoadLibraryA(sdiagprvdll_str);
        }
    }
    __forceinline void load_sdiagschd() noexcept {
        if (f_LoadLibraryA) {
            char sdiagschddll_str[] = "sdiagschd.dll";
            sdiagschddll = f_LoadLibraryA(sdiagschddll_str);
        }
    }
    __forceinline void load_sdohlp() noexcept {
        if (f_LoadLibraryA) {
            char sdohlpdll_str[] = "sdohlp.dll";
            sdohlpdll = f_LoadLibraryA(sdohlpdll_str);
        }
    }
    __forceinline void load_sdrsvc() noexcept {
        if (f_LoadLibraryA) {
            char sdrsvcdll_str[] = "sdrsvc.dll";
            sdrsvcdll = f_LoadLibraryA(sdrsvcdll_str);
        }
    }
    __forceinline void load_sdshext() noexcept {
        if (f_LoadLibraryA) {
            char sdshextdll_str[] = "sdshext.dll";
            sdshextdll = f_LoadLibraryA(sdshextdll_str);
        }
    }
    __forceinline void load_SearchProtocolHandlerMAPI2() noexcept {
        if (f_LoadLibraryA) {
            char SearchProtocolHandlerMAPI2dll_str[] = "Search.ProtocolHandler.MAPI2.dll";
            SearchProtocolHandlerMAPI2dll = f_LoadLibraryA(SearchProtocolHandlerMAPI2dll_str);
        }
    }
    __forceinline void load_SearchFolder() noexcept {
        if (f_LoadLibraryA) {
            char SearchFolderdll_str[] = "SearchFolder.dll";
            SearchFolderdll = f_LoadLibraryA(SearchFolderdll_str);
        }
    }
    __forceinline void load_SearchIndexerCore() noexcept {
        if (f_LoadLibraryA) {
            char SearchIndexerCoredll_str[] = "SearchIndexerCore.dll";
            SearchIndexerCoredll = f_LoadLibraryA(SearchIndexerCoredll_str);
        }
    }
    __forceinline void load_SebBackgroundManagerPolicy() noexcept {
        if (f_LoadLibraryA) {
            char SebBackgroundManagerPolicydll_str[] = "SebBackgroundManagerPolicy.dll";
            SebBackgroundManagerPolicydll = f_LoadLibraryA(SebBackgroundManagerPolicydll_str);
        }
    }
    __forceinline void load_secfw_AuthenticAMD() noexcept {
        if (f_LoadLibraryA) {
            char secfw_AuthenticAMDdll_str[] = "secfw_AuthenticAMD.dll";
            secfw_AuthenticAMDdll = f_LoadLibraryA(secfw_AuthenticAMDdll_str);
        }
    }
    __forceinline void load_sechost() noexcept {
        if (f_LoadLibraryA) {
            char sechostdll_str[] = "sechost.dll";
            sechostdll = f_LoadLibraryA(sechostdll_str);
        }
    }
    __forceinline void load_seclogon() noexcept {
        if (f_LoadLibraryA) {
            char seclogondll_str[] = "seclogon.dll";
            seclogondll = f_LoadLibraryA(seclogondll_str);
        }
    }
    __forceinline void load_secproc() noexcept {
        if (f_LoadLibraryA) {
            char secprocdll_str[] = "secproc.dll";
            secprocdll = f_LoadLibraryA(secprocdll_str);
        }
    }
    __forceinline void load_secproc_isv() noexcept {
        if (f_LoadLibraryA) {
            char secproc_isvdll_str[] = "secproc_isv.dll";
            secproc_isvdll = f_LoadLibraryA(secproc_isvdll_str);
        }
    }
    __forceinline void load_secproc_ssp() noexcept {
        if (f_LoadLibraryA) {
            char secproc_sspdll_str[] = "secproc_ssp.dll";
            secproc_sspdll = f_LoadLibraryA(secproc_sspdll_str);
        }
    }
    __forceinline void load_secproc_ssp_isv() noexcept {
        if (f_LoadLibraryA) {
            char secproc_ssp_isvdll_str[] = "secproc_ssp_isv.dll";
            secproc_ssp_isvdll = f_LoadLibraryA(secproc_ssp_isvdll_str);
        }
    }
    __forceinline void load_secur32() noexcept {
        if (f_LoadLibraryA) {
            char secur32dll_str[] = "secur32.dll";
            secur32dll = f_LoadLibraryA(secur32dll_str);
        }
    }
    __forceinline void load_SecureAssessmentHandlers() noexcept {
        if (f_LoadLibraryA) {
            char SecureAssessmentHandlersdll_str[] = "SecureAssessmentHandlers.dll";
            SecureAssessmentHandlersdll = f_LoadLibraryA(SecureAssessmentHandlersdll_str);
        }
    }
    __forceinline void load_SecureTimeAggregator() noexcept {
        if (f_LoadLibraryA) {
            char SecureTimeAggregatordll_str[] = "SecureTimeAggregator.dll";
            SecureTimeAggregatordll = f_LoadLibraryA(SecureTimeAggregatordll_str);
        }
    }
    __forceinline void load_security() noexcept {
        if (f_LoadLibraryA) {
            char securitydll_str[] = "security.dll";
            securitydll = f_LoadLibraryA(securitydll_str);
        }
    }
    __forceinline void load_SecurityCenterBroker() noexcept {
        if (f_LoadLibraryA) {
            char SecurityCenterBrokerdll_str[] = "SecurityCenterBroker.dll";
            SecurityCenterBrokerdll = f_LoadLibraryA(SecurityCenterBrokerdll_str);
        }
    }
    __forceinline void load_SecurityCenterBrokerPS() noexcept {
        if (f_LoadLibraryA) {
            char SecurityCenterBrokerPSdll_str[] = "SecurityCenterBrokerPS.dll";
            SecurityCenterBrokerPSdll = f_LoadLibraryA(SecurityCenterBrokerPSdll_str);
        }
    }
    __forceinline void load_SecurityHealthAgent() noexcept {
        if (f_LoadLibraryA) {
            char SecurityHealthAgentdll_str[] = "SecurityHealthAgent.dll";
            SecurityHealthAgentdll = f_LoadLibraryA(SecurityHealthAgentdll_str);
        }
    }
    __forceinline void load_SecurityHealthCore() noexcept {
        if (f_LoadLibraryA) {
            char SecurityHealthCoredll_str[] = "SecurityHealthCore.dll";
            SecurityHealthCoredll = f_LoadLibraryA(SecurityHealthCoredll_str);
        }
    }
    __forceinline void load_SecurityHealthProxyStub() noexcept {
        if (f_LoadLibraryA) {
            char SecurityHealthProxyStubdll_str[] = "SecurityHealthProxyStub.dll";
            SecurityHealthProxyStubdll = f_LoadLibraryA(SecurityHealthProxyStubdll_str);
        }
    }
    __forceinline void load_SecurityHealthSSO() noexcept {
        if (f_LoadLibraryA) {
            char SecurityHealthSSOdll_str[] = "SecurityHealthSSO.dll";
            SecurityHealthSSOdll = f_LoadLibraryA(SecurityHealthSSOdll_str);
        }
    }
    __forceinline void load_SecurityHealthSsoUdk() noexcept {
        if (f_LoadLibraryA) {
            char SecurityHealthSsoUdkdll_str[] = "SecurityHealthSsoUdk.dll";
            SecurityHealthSsoUdkdll = f_LoadLibraryA(SecurityHealthSsoUdkdll_str);
        }
    }
    __forceinline void load_SecurityHealthUdk() noexcept {
        if (f_LoadLibraryA) {
            char SecurityHealthUdkdll_str[] = "SecurityHealthUdk.dll";
            SecurityHealthUdkdll = f_LoadLibraryA(SecurityHealthUdkdll_str);
        }
    }
    __forceinline void load_sedplugins() noexcept {
        if (f_LoadLibraryA) {
            char sedpluginsdll_str[] = "sedplugins.dll";
            sedpluginsdll = f_LoadLibraryA(sedpluginsdll_str);
        }
    }
    __forceinline void load_SEMgrPS() noexcept {
        if (f_LoadLibraryA) {
            char SEMgrPSdll_str[] = "SEMgrPS.dll";
            SEMgrPSdll = f_LoadLibraryA(SEMgrPSdll_str);
        }
    }
    __forceinline void load_SEMgrSvc() noexcept {
        if (f_LoadLibraryA) {
            char SEMgrSvcdll_str[] = "SEMgrSvc.dll";
            SEMgrSvcdll = f_LoadLibraryA(SEMgrSvcdll_str);
        }
    }
    __forceinline void load_sendmail() noexcept {
        if (f_LoadLibraryA) {
            char sendmaildll_str[] = "sendmail.dll";
            sendmaildll = f_LoadLibraryA(sendmaildll_str);
        }
    }
    __forceinline void load_Sens() noexcept {
        if (f_LoadLibraryA) {
            char Sensdll_str[] = "Sens.dll";
            Sensdll = f_LoadLibraryA(Sensdll_str);
        }
    }
    __forceinline void load_SensApi() noexcept {
        if (f_LoadLibraryA) {
            char SensApidll_str[] = "SensApi.dll";
            SensApidll = f_LoadLibraryA(SensApidll_str);
        }
    }
    __forceinline void load_SensorPerformanceEvents() noexcept {
        if (f_LoadLibraryA) {
            char SensorPerformanceEventsdll_str[] = "SensorPerformanceEvents.dll";
            SensorPerformanceEventsdll = f_LoadLibraryA(SensorPerformanceEventsdll_str);
        }
    }
    __forceinline void load_SensorsApi() noexcept {
        if (f_LoadLibraryA) {
            char SensorsApidll_str[] = "SensorsApi.dll";
            SensorsApidll = f_LoadLibraryA(SensorsApidll_str);
        }
    }
    __forceinline void load_SensorsClassExtension() noexcept {
        if (f_LoadLibraryA) {
            char SensorsClassExtensiondll_str[] = "SensorsClassExtension.dll";
            SensorsClassExtensiondll = f_LoadLibraryA(SensorsClassExtensiondll_str);
        }
    }
    __forceinline void load_SensorsCpl() noexcept {
        if (f_LoadLibraryA) {
            char SensorsCpldll_str[] = "SensorsCpl.dll";
            SensorsCpldll = f_LoadLibraryA(SensorsCpldll_str);
        }
    }
    __forceinline void load_SensorService() noexcept {
        if (f_LoadLibraryA) {
            char SensorServicedll_str[] = "SensorService.dll";
            SensorServicedll = f_LoadLibraryA(SensorServicedll_str);
        }
    }
    __forceinline void load_SensorsNativeApi() noexcept {
        if (f_LoadLibraryA) {
            char SensorsNativeApidll_str[] = "SensorsNativeApi.dll";
            SensorsNativeApidll = f_LoadLibraryA(SensorsNativeApidll_str);
        }
    }
    __forceinline void load_SensorsNativeApiV2() noexcept {
        if (f_LoadLibraryA) {
            char SensorsNativeApiV2dll_str[] = "SensorsNativeApi.V2.dll";
            SensorsNativeApiV2dll = f_LoadLibraryA(SensorsNativeApiV2dll_str);
        }
    }
    __forceinline void load_SensorsUtilsV2() noexcept {
        if (f_LoadLibraryA) {
            char SensorsUtilsV2dll_str[] = "SensorsUtilsV2.dll";
            SensorsUtilsV2dll = f_LoadLibraryA(SensorsUtilsV2dll_str);
        }
    }
    __forceinline void load_sensrsvc() noexcept {
        if (f_LoadLibraryA) {
            char sensrsvcdll_str[] = "sensrsvc.dll";
            sensrsvcdll = f_LoadLibraryA(sensrsvcdll_str);
        }
    }
    __forceinline void load_serialui() noexcept {
        if (f_LoadLibraryA) {
            char serialuidll_str[] = "serialui.dll";
            serialuidll = f_LoadLibraryA(serialuidll_str);
        }
    }
    __forceinline void load_ServicingCommon() noexcept {
        if (f_LoadLibraryA) {
            char ServicingCommondll_str[] = "ServicingCommon.dll";
            ServicingCommondll = f_LoadLibraryA(ServicingCommondll_str);
        }
    }
    __forceinline void load_ServicingUAPI() noexcept {
        if (f_LoadLibraryA) {
            char ServicingUAPIdll_str[] = "ServicingUAPI.dll";
            ServicingUAPIdll = f_LoadLibraryA(ServicingUAPIdll_str);
        }
    }
    __forceinline void load_serwvdrv() noexcept {
        if (f_LoadLibraryA) {
            char serwvdrvdll_str[] = "serwvdrv.dll";
            serwvdrvdll = f_LoadLibraryA(serwvdrvdll_str);
        }
    }
    __forceinline void load_SessEnv() noexcept {
        if (f_LoadLibraryA) {
            char SessEnvdll_str[] = "SessEnv.dll";
            SessEnvdll = f_LoadLibraryA(SessEnvdll_str);
        }
    }
    __forceinline void load_setbcdlocale() noexcept {
        if (f_LoadLibraryA) {
            char setbcdlocaledll_str[] = "setbcdlocale.dll";
            setbcdlocaledll = f_LoadLibraryA(setbcdlocaledll_str);
        }
    }
    __forceinline void load_SetNetworkLocation() noexcept {
        if (f_LoadLibraryA) {
            char SetNetworkLocationdll_str[] = "SetNetworkLocation.dll";
            SetNetworkLocationdll = f_LoadLibraryA(SetNetworkLocationdll_str);
        }
    }
    __forceinline void load_SetNetworkLocationFlyout() noexcept {
        if (f_LoadLibraryA) {
            char SetNetworkLocationFlyoutdll_str[] = "SetNetworkLocationFlyout.dll";
            SetNetworkLocationFlyoutdll = f_LoadLibraryA(SetNetworkLocationFlyoutdll_str);
        }
    }
    __forceinline void load_SetProxyCredential() noexcept {
        if (f_LoadLibraryA) {
            char SetProxyCredentialdll_str[] = "SetProxyCredential.dll";
            SetProxyCredentialdll = f_LoadLibraryA(SetProxyCredentialdll_str);
        }
    }
    __forceinline void load_SettingsEnvironmentDesktop() noexcept {
        if (f_LoadLibraryA) {
            char SettingsEnvironmentDesktopdll_str[] = "SettingsEnvironment.Desktop.dll";
            SettingsEnvironmentDesktopdll = f_LoadLibraryA(SettingsEnvironmentDesktopdll_str);
        }
    }
    __forceinline void load_SettingsExtensibilityHandlers() noexcept {
        if (f_LoadLibraryA) {
            char SettingsExtensibilityHandlersdll_str[] = "SettingsExtensibilityHandlers.dll";
            SettingsExtensibilityHandlersdll = f_LoadLibraryA(SettingsExtensibilityHandlersdll_str);
        }
    }
    __forceinline void load_SettingsHandlers_Accessibility() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_Accessibilitydll_str[] = "SettingsHandlers_Accessibility.dll";
            SettingsHandlers_Accessibilitydll = f_LoadLibraryA(SettingsHandlers_Accessibilitydll_str);
        }
    }
    __forceinline void load_SettingsHandlers_AdvertisingId() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_AdvertisingIddll_str[] = "SettingsHandlers_AdvertisingId.dll";
            SettingsHandlers_AdvertisingIddll = f_LoadLibraryA(SettingsHandlers_AdvertisingIddll_str);
        }
    }
    __forceinline void load_SettingsHandlers_AnalogShell() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_AnalogShelldll_str[] = "SettingsHandlers_AnalogShell.dll";
            SettingsHandlers_AnalogShelldll = f_LoadLibraryA(SettingsHandlers_AnalogShelldll_str);
        }
    }
    __forceinline void load_SettingsHandlers_AppControl() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_AppControldll_str[] = "SettingsHandlers_AppControl.dll";
            SettingsHandlers_AppControldll = f_LoadLibraryA(SettingsHandlers_AppControldll_str);
        }
    }
    __forceinline void load_SettingsHandlers_AppExecutionAlias() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_AppExecutionAliasdll_str[] = "SettingsHandlers_AppExecutionAlias.dll";
            SettingsHandlers_AppExecutionAliasdll = f_LoadLibraryA(SettingsHandlers_AppExecutionAliasdll_str);
        }
    }
    __forceinline void load_SettingsHandlers_AssignedAccess() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_AssignedAccessdll_str[] = "SettingsHandlers_AssignedAccess.dll";
            SettingsHandlers_AssignedAccessdll = f_LoadLibraryA(SettingsHandlers_AssignedAccessdll_str);
        }
    }
    __forceinline void load_SettingsHandlers_Authentication() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_Authenticationdll_str[] = "SettingsHandlers_Authentication.dll";
            SettingsHandlers_Authenticationdll = f_LoadLibraryA(SettingsHandlers_Authenticationdll_str);
        }
    }
    __forceinline void load_SettingsHandlers_BackgroundApps() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_BackgroundAppsdll_str[] = "SettingsHandlers_BackgroundApps.dll";
            SettingsHandlers_BackgroundAppsdll = f_LoadLibraryA(SettingsHandlers_BackgroundAppsdll_str);
        }
    }
    __forceinline void load_SettingsHandlers_Backup() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_Backupdll_str[] = "SettingsHandlers_Backup.dll";
            SettingsHandlers_Backupdll = f_LoadLibraryA(SettingsHandlers_Backupdll_str);
        }
    }
    __forceinline void load_SettingsHandlers_BatteryUsage() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_BatteryUsagedll_str[] = "SettingsHandlers_BatteryUsage.dll";
            SettingsHandlers_BatteryUsagedll = f_LoadLibraryA(SettingsHandlers_BatteryUsagedll_str);
        }
    }
    __forceinline void load_SettingsHandlers_Camera() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_Cameradll_str[] = "SettingsHandlers_Camera.dll";
            SettingsHandlers_Cameradll = f_LoadLibraryA(SettingsHandlers_Cameradll_str);
        }
    }
    __forceinline void load_SettingsHandlers_CapabilityAccess() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_CapabilityAccessdll_str[] = "SettingsHandlers_CapabilityAccess.dll";
            SettingsHandlers_CapabilityAccessdll = f_LoadLibraryA(SettingsHandlers_CapabilityAccessdll_str);
        }
    }
    __forceinline void load_SettingsHandlers_Clipboard() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_Clipboarddll_str[] = "SettingsHandlers_Clipboard.dll";
            SettingsHandlers_Clipboarddll = f_LoadLibraryA(SettingsHandlers_Clipboarddll_str);
        }
    }
    __forceinline void load_SettingsHandlers_ClosedCaptioning() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_ClosedCaptioningdll_str[] = "SettingsHandlers_ClosedCaptioning.dll";
            SettingsHandlers_ClosedCaptioningdll = f_LoadLibraryA(SettingsHandlers_ClosedCaptioningdll_str);
        }
    }
    __forceinline void load_SettingsHandlers_CloudPC() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_CloudPCdll_str[] = "SettingsHandlers_CloudPC.dll";
            SettingsHandlers_CloudPCdll = f_LoadLibraryA(SettingsHandlers_CloudPCdll_str);
        }
    }
    __forceinline void load_SettingsHandlers_ContentDeliveryManager() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_ContentDeliveryManagerdll_str[] = "SettingsHandlers_ContentDeliveryManager.dll";
            SettingsHandlers_ContentDeliveryManagerdll = f_LoadLibraryA(SettingsHandlers_ContentDeliveryManagerdll_str);
        }
    }
    __forceinline void load_SettingsHandlers_Cortana() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_Cortanadll_str[] = "SettingsHandlers_Cortana.dll";
            SettingsHandlers_Cortanadll = f_LoadLibraryA(SettingsHandlers_Cortanadll_str);
        }
    }
    __forceinline void load_SettingsHandlers_DesktopTaskbar() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_DesktopTaskbardll_str[] = "SettingsHandlers_DesktopTaskbar.dll";
            SettingsHandlers_DesktopTaskbardll = f_LoadLibraryA(SettingsHandlers_DesktopTaskbardll_str);
        }
    }
    __forceinline void load_SettingsHandlers_Devices() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_Devicesdll_str[] = "SettingsHandlers_Devices.dll";
            SettingsHandlers_Devicesdll = f_LoadLibraryA(SettingsHandlers_Devicesdll_str);
        }
    }
    __forceinline void load_SettingsHandlers_Display() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_Displaydll_str[] = "SettingsHandlers_Display.dll";
            SettingsHandlers_Displaydll = f_LoadLibraryA(SettingsHandlers_Displaydll_str);
        }
    }
    __forceinline void load_SettingsHandlers_Flights() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_Flightsdll_str[] = "SettingsHandlers_Flights.dll";
            SettingsHandlers_Flightsdll = f_LoadLibraryA(SettingsHandlers_Flightsdll_str);
        }
    }
    __forceinline void load_SettingsHandlers_Fonts() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_Fontsdll_str[] = "SettingsHandlers_Fonts.dll";
            SettingsHandlers_Fontsdll = f_LoadLibraryA(SettingsHandlers_Fontsdll_str);
        }
    }
    __forceinline void load_SettingsHandlers_ForceSync() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_ForceSyncdll_str[] = "SettingsHandlers_ForceSync.dll";
            SettingsHandlers_ForceSyncdll = f_LoadLibraryA(SettingsHandlers_ForceSyncdll_str);
        }
    }
    __forceinline void load_SettingsHandlers_Gaming() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_Gamingdll_str[] = "SettingsHandlers_Gaming.dll";
            SettingsHandlers_Gamingdll = f_LoadLibraryA(SettingsHandlers_Gamingdll_str);
        }
    }
    __forceinline void load_SettingsHandlers_Geolocation() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_Geolocationdll_str[] = "SettingsHandlers_Geolocation.dll";
            SettingsHandlers_Geolocationdll = f_LoadLibraryA(SettingsHandlers_Geolocationdll_str);
        }
    }
    __forceinline void load_SettingsHandlers_Gpu() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_Gpudll_str[] = "SettingsHandlers_Gpu.dll";
            SettingsHandlers_Gpudll = f_LoadLibraryA(SettingsHandlers_Gpudll_str);
        }
    }
    __forceinline void load_SettingsHandlers_HoloLens_Environment() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_HoloLens_Environmentdll_str[] = "SettingsHandlers_HoloLens_Environment.dll";
            SettingsHandlers_HoloLens_Environmentdll = f_LoadLibraryA(SettingsHandlers_HoloLens_Environmentdll_str);
        }
    }
    __forceinline void load_SettingsHandlers_HumanPresence() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_HumanPresencedll_str[] = "SettingsHandlers_HumanPresence.dll";
            SettingsHandlers_HumanPresencedll = f_LoadLibraryA(SettingsHandlers_HumanPresencedll_str);
        }
    }
    __forceinline void load_SettingsHandlers_IME() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_IMEdll_str[] = "SettingsHandlers_IME.dll";
            SettingsHandlers_IMEdll = f_LoadLibraryA(SettingsHandlers_IMEdll_str);
        }
    }
    __forceinline void load_SettingsHandlers_InkingTypingPrivacy() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_InkingTypingPrivacydll_str[] = "SettingsHandlers_InkingTypingPrivacy.dll";
            SettingsHandlers_InkingTypingPrivacydll = f_LoadLibraryA(SettingsHandlers_InkingTypingPrivacydll_str);
        }
    }
    __forceinline void load_SettingsHandlers_InputPersonalization() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_InputPersonalizationdll_str[] = "SettingsHandlers_InputPersonalization.dll";
            SettingsHandlers_InputPersonalizationdll = f_LoadLibraryA(SettingsHandlers_InputPersonalizationdll_str);
        }
    }
    __forceinline void load_SettingsHandlers_InstalledUpdates() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_InstalledUpdatesdll_str[] = "SettingsHandlers_InstalledUpdates.dll";
            SettingsHandlers_InstalledUpdatesdll = f_LoadLibraryA(SettingsHandlers_InstalledUpdatesdll_str);
        }
    }
    __forceinline void load_SettingsHandlers_Keyboard() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_Keyboarddll_str[] = "SettingsHandlers_Keyboard.dll";
            SettingsHandlers_Keyboarddll = f_LoadLibraryA(SettingsHandlers_Keyboarddll_str);
        }
    }
    __forceinline void load_SettingsHandlers_Language() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_Languagedll_str[] = "SettingsHandlers_Language.dll";
            SettingsHandlers_Languagedll = f_LoadLibraryA(SettingsHandlers_Languagedll_str);
        }
    }
    __forceinline void load_SettingsHandlers_Lighting() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_Lightingdll_str[] = "SettingsHandlers_Lighting.dll";
            SettingsHandlers_Lightingdll = f_LoadLibraryA(SettingsHandlers_Lightingdll_str);
        }
    }
    __forceinline void load_SettingsHandlers_ManagePhone() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_ManagePhonedll_str[] = "SettingsHandlers_ManagePhone.dll";
            SettingsHandlers_ManagePhonedll = f_LoadLibraryA(SettingsHandlers_ManagePhonedll_str);
        }
    }
    __forceinline void load_SettingsHandlers_Maps() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_Mapsdll_str[] = "SettingsHandlers_Maps.dll";
            SettingsHandlers_Mapsdll = f_LoadLibraryA(SettingsHandlers_Mapsdll_str);
        }
    }
    __forceinline void load_SettingsHandlers_Mouse() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_Mousedll_str[] = "SettingsHandlers_Mouse.dll";
            SettingsHandlers_Mousedll = f_LoadLibraryA(SettingsHandlers_Mousedll_str);
        }
    }
    __forceinline void load_SettingsHandlers_Notifications() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_Notificationsdll_str[] = "SettingsHandlers_Notifications.dll";
            SettingsHandlers_Notificationsdll = f_LoadLibraryA(SettingsHandlers_Notificationsdll_str);
        }
    }
    __forceinline void load_SettingsHandlers_nt() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_ntdll_str[] = "SettingsHandlers_nt.dll";
            SettingsHandlers_ntdll = f_LoadLibraryA(SettingsHandlers_ntdll_str);
        }
    }
    __forceinline void load_SettingsHandlers_OneCore_BatterySaver() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_OneCore_BatterySaverdll_str[] = "SettingsHandlers_OneCore_BatterySaver.dll";
            SettingsHandlers_OneCore_BatterySaverdll = f_LoadLibraryA(SettingsHandlers_OneCore_BatterySaverdll_str);
        }
    }
    __forceinline void load_SettingsHandlers_OneCore_PowerAndSleep() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_OneCore_PowerAndSleepdll_str[] = "SettingsHandlers_OneCore_PowerAndSleep.dll";
            SettingsHandlers_OneCore_PowerAndSleepdll = f_LoadLibraryA(SettingsHandlers_OneCore_PowerAndSleepdll_str);
        }
    }
    __forceinline void load_SettingsHandlers_OneDriveBackup() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_OneDriveBackupdll_str[] = "SettingsHandlers_OneDriveBackup.dll";
            SettingsHandlers_OneDriveBackupdll = f_LoadLibraryA(SettingsHandlers_OneDriveBackupdll_str);
        }
    }
    __forceinline void load_SettingsHandlers_OptionalFeatures() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_OptionalFeaturesdll_str[] = "SettingsHandlers_OptionalFeatures.dll";
            SettingsHandlers_OptionalFeaturesdll = f_LoadLibraryA(SettingsHandlers_OptionalFeaturesdll_str);
        }
    }
    __forceinline void load_SettingsHandlers_PCDisplay() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_PCDisplaydll_str[] = "SettingsHandlers_PCDisplay.dll";
            SettingsHandlers_PCDisplaydll = f_LoadLibraryA(SettingsHandlers_PCDisplaydll_str);
        }
    }
    __forceinline void load_SettingsHandlers_Pen() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_Pendll_str[] = "SettingsHandlers_Pen.dll";
            SettingsHandlers_Pendll = f_LoadLibraryA(SettingsHandlers_Pendll_str);
        }
    }
    __forceinline void load_SettingsHandlers_Region() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_Regiondll_str[] = "SettingsHandlers_Region.dll";
            SettingsHandlers_Regiondll = f_LoadLibraryA(SettingsHandlers_Regiondll_str);
        }
    }
    __forceinline void load_SettingsHandlers_SharedExperiences_Rome() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_SharedExperiences_Romedll_str[] = "SettingsHandlers_SharedExperiences_Rome.dll";
            SettingsHandlers_SharedExperiences_Romedll = f_LoadLibraryA(SettingsHandlers_SharedExperiences_Romedll_str);
        }
    }
    __forceinline void load_SettingsHandlers_SIUF() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_SIUFdll_str[] = "SettingsHandlers_SIUF.dll";
            SettingsHandlers_SIUFdll = f_LoadLibraryA(SettingsHandlers_SIUFdll_str);
        }
    }
    __forceinline void load_SettingsHandlers_SpeechPrivacy() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_SpeechPrivacydll_str[] = "SettingsHandlers_SpeechPrivacy.dll";
            SettingsHandlers_SpeechPrivacydll = f_LoadLibraryA(SettingsHandlers_SpeechPrivacydll_str);
        }
    }
    __forceinline void load_SettingsHandlers_Startup() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_Startupdll_str[] = "SettingsHandlers_Startup.dll";
            SettingsHandlers_Startupdll = f_LoadLibraryA(SettingsHandlers_Startupdll_str);
        }
    }
    __forceinline void load_SettingsHandlers_Storage() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_Storagedll_str[] = "SettingsHandlers_Storage.dll";
            SettingsHandlers_Storagedll = f_LoadLibraryA(SettingsHandlers_Storagedll_str);
        }
    }
    __forceinline void load_SettingsHandlers_StorageSense() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_StorageSensedll_str[] = "SettingsHandlers_StorageSense.dll";
            SettingsHandlers_StorageSensedll = f_LoadLibraryA(SettingsHandlers_StorageSensedll_str);
        }
    }
    __forceinline void load_SettingsHandlers_Touch() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_Touchdll_str[] = "SettingsHandlers_Touch.dll";
            SettingsHandlers_Touchdll = f_LoadLibraryA(SettingsHandlers_Touchdll_str);
        }
    }
    __forceinline void load_SettingsHandlers_Troubleshoot() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_Troubleshootdll_str[] = "SettingsHandlers_Troubleshoot.dll";
            SettingsHandlers_Troubleshootdll = f_LoadLibraryA(SettingsHandlers_Troubleshootdll_str);
        }
    }
    __forceinline void load_SettingsHandlers_User() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_Userdll_str[] = "SettingsHandlers_User.dll";
            SettingsHandlers_Userdll = f_LoadLibraryA(SettingsHandlers_Userdll_str);
        }
    }
    __forceinline void load_SettingsHandlers_UserAccount() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_UserAccountdll_str[] = "SettingsHandlers_UserAccount.dll";
            SettingsHandlers_UserAccountdll = f_LoadLibraryA(SettingsHandlers_UserAccountdll_str);
        }
    }
    __forceinline void load_SettingsHandlers_UserExperience() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_UserExperiencedll_str[] = "SettingsHandlers_UserExperience.dll";
            SettingsHandlers_UserExperiencedll = f_LoadLibraryA(SettingsHandlers_UserExperiencedll_str);
        }
    }
    __forceinline void load_SettingsHandlers_UserIntent() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_UserIntentdll_str[] = "SettingsHandlers_UserIntent.dll";
            SettingsHandlers_UserIntentdll = f_LoadLibraryA(SettingsHandlers_UserIntentdll_str);
        }
    }
    __forceinline void load_SettingsHandlers_WorkAccess() noexcept {
        if (f_LoadLibraryA) {
            char SettingsHandlers_WorkAccessdll_str[] = "SettingsHandlers_WorkAccess.dll";
            SettingsHandlers_WorkAccessdll = f_LoadLibraryA(SettingsHandlers_WorkAccessdll_str);
        }
    }
    __forceinline void load_SettingSyncDownloadHelper() noexcept {
        if (f_LoadLibraryA) {
            char SettingSyncDownloadHelperdll_str[] = "SettingSyncDownloadHelper.dll";
            SettingSyncDownloadHelperdll = f_LoadLibraryA(SettingSyncDownloadHelperdll_str);
        }
    }
    __forceinline void load_setupapi() noexcept {
        if (f_LoadLibraryA) {
            char setupapidll_str[] = "setupapi.dll";
            setupapidll = f_LoadLibraryA(setupapidll_str);
        }
    }
    __forceinline void load_setupcl() noexcept {
        if (f_LoadLibraryA) {
            char setupcldll_str[] = "setupcl.dll";
            setupcldll = f_LoadLibraryA(setupcldll_str);
        }
    }
    __forceinline void load_setupcln() noexcept {
        if (f_LoadLibraryA) {
            char setupclndll_str[] = "setupcln.dll";
            setupclndll = f_LoadLibraryA(setupclndll_str);
        }
    }
    __forceinline void load_setupetw() noexcept {
        if (f_LoadLibraryA) {
            char setupetwdll_str[] = "setupetw.dll";
            setupetwdll = f_LoadLibraryA(setupetwdll_str);
        }
    }
    __forceinline void load_SFAPE() noexcept {
        if (f_LoadLibraryA) {
            char SFAPEdll_str[] = "SFAPE.dll";
            SFAPEdll = f_LoadLibraryA(SFAPEdll_str);
        }
    }
    __forceinline void load_SFAPM() noexcept {
        if (f_LoadLibraryA) {
            char SFAPMdll_str[] = "SFAPM.dll";
            SFAPMdll = f_LoadLibraryA(SFAPMdll_str);
        }
    }
    __forceinline void load_sfc() noexcept {
        if (f_LoadLibraryA) {
            char sfcdll_str[] = "sfc.dll";
            sfcdll = f_LoadLibraryA(sfcdll_str);
        }
    }
    __forceinline void load_sfc_os() noexcept {
        if (f_LoadLibraryA) {
            char sfc_osdll_str[] = "sfc_os.dll";
            sfc_osdll = f_LoadLibraryA(sfc_osdll_str);
        }
    }
    __forceinline void load_shacct() noexcept {
        if (f_LoadLibraryA) {
            char shacctdll_str[] = "shacct.dll";
            shacctdll = f_LoadLibraryA(shacctdll_str);
        }
    }
    __forceinline void load_shacctprofile() noexcept {
        if (f_LoadLibraryA) {
            char shacctprofiledll_str[] = "shacctprofile.dll";
            shacctprofiledll = f_LoadLibraryA(shacctprofiledll_str);
        }
    }
    __forceinline void load_SharedPCCSP() noexcept {
        if (f_LoadLibraryA) {
            char SharedPCCSPdll_str[] = "SharedPCCSP.dll";
            SharedPCCSPdll = f_LoadLibraryA(SharedPCCSPdll_str);
        }
    }
    __forceinline void load_SharedRealitySvc() noexcept {
        if (f_LoadLibraryA) {
            char SharedRealitySvcdll_str[] = "SharedRealitySvc.dll";
            SharedRealitySvcdll = f_LoadLibraryA(SharedRealitySvcdll_str);
        }
    }
    __forceinline void load_ShareHost() noexcept {
        if (f_LoadLibraryA) {
            char ShareHostdll_str[] = "ShareHost.dll";
            ShareHostdll = f_LoadLibraryA(ShareHostdll_str);
        }
    }
    __forceinline void load_sharemediacpl() noexcept {
        if (f_LoadLibraryA) {
            char sharemediacpldll_str[] = "sharemediacpl.dll";
            sharemediacpldll = f_LoadLibraryA(sharemediacpldll_str);
        }
    }
    __forceinline void load_SHCore() noexcept {
        if (f_LoadLibraryA) {
            char SHCoredll_str[] = "SHCore.dll";
            SHCoredll = f_LoadLibraryA(SHCoredll_str);
        }
    }
    __forceinline void load_shdocvw() noexcept {
        if (f_LoadLibraryA) {
            char shdocvwdll_str[] = "shdocvw.dll";
            shdocvwdll = f_LoadLibraryA(shdocvwdll_str);
        }
    }
    __forceinline void load_shell32() noexcept {
        if (f_LoadLibraryA) {
            char shell32dll_str[] = "shell32.dll";
            shell32dll = f_LoadLibraryA(shell32dll_str);
        }
    }
    __forceinline void load_ShellCommonCommonProxyStub() noexcept {
        if (f_LoadLibraryA) {
            char ShellCommonCommonProxyStubdll_str[] = "ShellCommonCommonProxyStub.dll";
            ShellCommonCommonProxyStubdll = f_LoadLibraryA(ShellCommonCommonProxyStubdll_str);
        }
    }
    __forceinline void load_shellstyle() noexcept {
        if (f_LoadLibraryA) {
            char shellstyledll_str[] = "shellstyle.dll";
            shellstyledll = f_LoadLibraryA(shellstyledll_str);
        }
    }
    __forceinline void load_shfolder() noexcept {
        if (f_LoadLibraryA) {
            char shfolderdll_str[] = "shfolder.dll";
            shfolderdll = f_LoadLibraryA(shfolderdll_str);
        }
    }
    __forceinline void load_shgina() noexcept {
        if (f_LoadLibraryA) {
            char shginadll_str[] = "shgina.dll";
            shginadll = f_LoadLibraryA(shginadll_str);
        }
    }
    __forceinline void load_shimeng() noexcept {
        if (f_LoadLibraryA) {
            char shimengdll_str[] = "shimeng.dll";
            shimengdll = f_LoadLibraryA(shimengdll_str);
        }
    }
    __forceinline void load_shimgvw() noexcept {
        if (f_LoadLibraryA) {
            char shimgvwdll_str[] = "shimgvw.dll";
            shimgvwdll = f_LoadLibraryA(shimgvwdll_str);
        }
    }
    __forceinline void load_shlwapi() noexcept {
        if (f_LoadLibraryA) {
            char shlwapidll_str[] = "shlwapi.dll";
            shlwapidll = f_LoadLibraryA(shlwapidll_str);
        }
    }
    __forceinline void load_shpafact() noexcept {
        if (f_LoadLibraryA) {
            char shpafactdll_str[] = "shpafact.dll";
            shpafactdll = f_LoadLibraryA(shpafactdll_str);
        }
    }
    __forceinline void load_shsetup() noexcept {
        if (f_LoadLibraryA) {
            char shsetupdll_str[] = "shsetup.dll";
            shsetupdll = f_LoadLibraryA(shsetupdll_str);
        }
    }
    __forceinline void load_shsvcs() noexcept {
        if (f_LoadLibraryA) {
            char shsvcsdll_str[] = "shsvcs.dll";
            shsvcsdll = f_LoadLibraryA(shsvcsdll_str);
        }
    }
    __forceinline void load_shunimpl() noexcept {
        if (f_LoadLibraryA) {
            char shunimpldll_str[] = "shunimpl.dll";
            shunimpldll = f_LoadLibraryA(shunimpldll_str);
        }
    }
    __forceinline void load_shutdownext() noexcept {
        if (f_LoadLibraryA) {
            char shutdownextdll_str[] = "shutdownext.dll";
            shutdownextdll = f_LoadLibraryA(shutdownextdll_str);
        }
    }
    __forceinline void load_shutdownux() noexcept {
        if (f_LoadLibraryA) {
            char shutdownuxdll_str[] = "shutdownux.dll";
            shutdownuxdll = f_LoadLibraryA(shutdownuxdll_str);
        }
    }
    __forceinline void load_shwebsvc() noexcept {
        if (f_LoadLibraryA) {
            char shwebsvcdll_str[] = "shwebsvc.dll";
            shwebsvcdll = f_LoadLibraryA(shwebsvcdll_str);
        }
    }
    __forceinline void load_signdrv() noexcept {
        if (f_LoadLibraryA) {
            char signdrvdll_str[] = "signdrv.dll";
            signdrvdll = f_LoadLibraryA(signdrvdll_str);
        }
    }
    __forceinline void load_SimAuth() noexcept {
        if (f_LoadLibraryA) {
            char SimAuthdll_str[] = "SimAuth.dll";
            SimAuthdll = f_LoadLibraryA(SimAuthdll_str);
        }
    }
    __forceinline void load_SimCfg() noexcept {
        if (f_LoadLibraryA) {
            char SimCfgdll_str[] = "SimCfg.dll";
            SimCfgdll = f_LoadLibraryA(SimCfgdll_str);
        }
    }
    __forceinline void load_skci() noexcept {
        if (f_LoadLibraryA) {
            char skcidll_str[] = "skci.dll";
            skcidll = f_LoadLibraryA(skcidll_str);
        }
    }
    __forceinline void load_slc() noexcept {
        if (f_LoadLibraryA) {
            char slcdll_str[] = "slc.dll";
            slcdll = f_LoadLibraryA(slcdll_str);
        }
    }
    __forceinline void load_slcext() noexcept {
        if (f_LoadLibraryA) {
            char slcextdll_str[] = "slcext.dll";
            slcextdll = f_LoadLibraryA(slcextdll_str);
        }
    }
    __forceinline void load_slwga() noexcept {
        if (f_LoadLibraryA) {
            char slwgadll_str[] = "slwga.dll";
            slwgadll = f_LoadLibraryA(slwgadll_str);
        }
    }
    __forceinline void load_SmartActionPlatform() noexcept {
        if (f_LoadLibraryA) {
            char SmartActionPlatformdll_str[] = "SmartActionPlatform.dll";
            SmartActionPlatformdll = f_LoadLibraryA(SmartActionPlatformdll_str);
        }
    }
    __forceinline void load_SmartCardBackgroundPolicy() noexcept {
        if (f_LoadLibraryA) {
            char SmartCardBackgroundPolicydll_str[] = "SmartCardBackgroundPolicy.dll";
            SmartCardBackgroundPolicydll = f_LoadLibraryA(SmartCardBackgroundPolicydll_str);
        }
    }
    __forceinline void load_SmartcardCredentialProvider() noexcept {
        if (f_LoadLibraryA) {
            char SmartcardCredentialProviderdll_str[] = "SmartcardCredentialProvider.dll";
            SmartcardCredentialProviderdll = f_LoadLibraryA(SmartcardCredentialProviderdll_str);
        }
    }
    __forceinline void load_SmartCardSimulator() noexcept {
        if (f_LoadLibraryA) {
            char SmartCardSimulatordll_str[] = "SmartCardSimulator.dll";
            SmartCardSimulatordll = f_LoadLibraryA(SmartCardSimulatordll_str);
        }
    }
    __forceinline void load_smartscreen() noexcept {
        if (f_LoadLibraryA) {
            char smartscreendll_str[] = "smartscreen.dll";
            smartscreendll = f_LoadLibraryA(smartscreendll_str);
        }
    }
    __forceinline void load_smartscreenps() noexcept {
        if (f_LoadLibraryA) {
            char smartscreenpsdll_str[] = "smartscreenps.dll";
            smartscreenpsdll = f_LoadLibraryA(smartscreenpsdll_str);
        }
    }
    __forceinline void load_SmartWorkflows() noexcept {
        if (f_LoadLibraryA) {
            char SmartWorkflowsdll_str[] = "SmartWorkflows.dll";
            SmartWorkflowsdll = f_LoadLibraryA(SmartWorkflowsdll_str);
        }
    }
    __forceinline void load_SMBHelperClass() noexcept {
        if (f_LoadLibraryA) {
            char SMBHelperClassdll_str[] = "SMBHelperClass.dll";
            SMBHelperClassdll = f_LoadLibraryA(SMBHelperClassdll_str);
        }
    }
    __forceinline void load_smbwmiv2() noexcept {
        if (f_LoadLibraryA) {
            char smbwmiv2dll_str[] = "smbwmiv2.dll";
            smbwmiv2dll = f_LoadLibraryA(smbwmiv2dll_str);
        }
    }
    __forceinline void load_SmiEngine() noexcept {
        if (f_LoadLibraryA) {
            char SmiEnginedll_str[] = "SmiEngine.dll";
            SmiEnginedll = f_LoadLibraryA(SmiEnginedll_str);
        }
    }
    __forceinline void load_smphost() noexcept {
        if (f_LoadLibraryA) {
            char smphostdll_str[] = "smphost.dll";
            smphostdll = f_LoadLibraryA(smphostdll_str);
        }
    }
    __forceinline void load_SmsRouterSvc() noexcept {
        if (f_LoadLibraryA) {
            char SmsRouterSvcdll_str[] = "SmsRouterSvc.dll";
            SmsRouterSvcdll = f_LoadLibraryA(SmsRouterSvcdll_str);
        }
    }
    __forceinline void load_SndVolSSO() noexcept {
        if (f_LoadLibraryA) {
            char SndVolSSOdll_str[] = "SndVolSSO.dll";
            SndVolSSOdll = f_LoadLibraryA(SndVolSSOdll_str);
        }
    }
    __forceinline void load_snmpapi() noexcept {
        if (f_LoadLibraryA) {
            char snmpapidll_str[] = "snmpapi.dll";
            snmpapidll = f_LoadLibraryA(snmpapidll_str);
        }
    }
    __forceinline void load_socialapis() noexcept {
        if (f_LoadLibraryA) {
            char socialapisdll_str[] = "socialapis.dll";
            socialapisdll = f_LoadLibraryA(socialapisdll_str);
        }
    }
    __forceinline void load_softkbd() noexcept {
        if (f_LoadLibraryA) {
            char softkbddll_str[] = "softkbd.dll";
            softkbddll = f_LoadLibraryA(softkbddll_str);
        }
    }
    __forceinline void load_softpub() noexcept {
        if (f_LoadLibraryA) {
            char softpubdll_str[] = "softpub.dll";
            softpubdll = f_LoadLibraryA(softpubdll_str);
        }
    }
    __forceinline void load_SortServer2003Compat() noexcept {
        if (f_LoadLibraryA) {
            char SortServer2003Compatdll_str[] = "SortServer2003Compat.dll";
            SortServer2003Compatdll = f_LoadLibraryA(SortServer2003Compatdll_str);
        }
    }
    __forceinline void load_SortWindows61() noexcept {
        if (f_LoadLibraryA) {
            char SortWindows61dll_str[] = "SortWindows61.dll";
            SortWindows61dll = f_LoadLibraryA(SortWindows61dll_str);
        }
    }
    __forceinline void load_SortWindows62() noexcept {
        if (f_LoadLibraryA) {
            char SortWindows62dll_str[] = "SortWindows62.dll";
            SortWindows62dll = f_LoadLibraryA(SortWindows62dll_str);
        }
    }
    __forceinline void load_SortWindows63() noexcept {
        if (f_LoadLibraryA) {
            char SortWindows63dll_str[] = "SortWindows63.dll";
            SortWindows63dll = f_LoadLibraryA(SortWindows63dll_str);
        }
    }
    __forceinline void load_SortWindows6Compat() noexcept {
        if (f_LoadLibraryA) {
            char SortWindows6Compatdll_str[] = "SortWindows6Compat.dll";
            SortWindows6Compatdll = f_LoadLibraryA(SortWindows6Compatdll_str);
        }
    }
    __forceinline void load_SpaceControl() noexcept {
        if (f_LoadLibraryA) {
            char SpaceControldll_str[] = "SpaceControl.dll";
            SpaceControldll = f_LoadLibraryA(SpaceControldll_str);
        }
    }
    __forceinline void load_spatialinteraction() noexcept {
        if (f_LoadLibraryA) {
            char spatialinteractiondll_str[] = "spatialinteraction.dll";
            spatialinteractiondll = f_LoadLibraryA(spatialinteractiondll_str);
        }
    }
    __forceinline void load_SpatializerApo() noexcept {
        if (f_LoadLibraryA) {
            char SpatializerApodll_str[] = "SpatializerApo.dll";
            SpatializerApodll = f_LoadLibraryA(SpatializerApodll_str);
        }
    }
    __forceinline void load_SpatialStore() noexcept {
        if (f_LoadLibraryA) {
            char SpatialStoredll_str[] = "SpatialStore.dll";
            SpatialStoredll = f_LoadLibraryA(SpatialStoredll_str);
        }
    }
    __forceinline void load_spbcd() noexcept {
        if (f_LoadLibraryA) {
            char spbcddll_str[] = "spbcd.dll";
            spbcddll = f_LoadLibraryA(spbcddll_str);
        }
    }
    __forceinline void load_SpectrumSyncClient() noexcept {
        if (f_LoadLibraryA) {
            char SpectrumSyncClientdll_str[] = "SpectrumSyncClient.dll";
            SpectrumSyncClientdll = f_LoadLibraryA(SpectrumSyncClientdll_str);
        }
    }
    __forceinline void load_spfileq() noexcept {
        if (f_LoadLibraryA) {
            char spfileqdll_str[] = "spfileq.dll";
            spfileqdll = f_LoadLibraryA(spfileqdll_str);
        }
    }
    __forceinline void load_spinf() noexcept {
        if (f_LoadLibraryA) {
            char spinfdll_str[] = "spinf.dll";
            spinfdll = f_LoadLibraryA(spinfdll_str);
        }
    }
    __forceinline void load_spmpm() noexcept {
        if (f_LoadLibraryA) {
            char spmpmdll_str[] = "spmpm.dll";
            spmpmdll = f_LoadLibraryA(spmpmdll_str);
        }
    }
    __forceinline void load_spnet() noexcept {
        if (f_LoadLibraryA) {
            char spnetdll_str[] = "spnet.dll";
            spnetdll = f_LoadLibraryA(spnetdll_str);
        }
    }
    __forceinline void load_spoolss() noexcept {
        if (f_LoadLibraryA) {
            char spoolssdll_str[] = "spoolss.dll";
            spoolssdll = f_LoadLibraryA(spoolssdll_str);
        }
    }
    __forceinline void load_spopk() noexcept {
        if (f_LoadLibraryA) {
            char spopkdll_str[] = "spopk.dll";
            spopkdll = f_LoadLibraryA(spopkdll_str);
        }
    }
    __forceinline void load_spp() noexcept {
        if (f_LoadLibraryA) {
            char sppdll_str[] = "spp.dll";
            sppdll = f_LoadLibraryA(sppdll_str);
        }
    }
    __forceinline void load_sppc() noexcept {
        if (f_LoadLibraryA) {
            char sppcdll_str[] = "sppc.dll";
            sppcdll = f_LoadLibraryA(sppcdll_str);
        }
    }
    __forceinline void load_sppcext() noexcept {
        if (f_LoadLibraryA) {
            char sppcextdll_str[] = "sppcext.dll";
            sppcextdll = f_LoadLibraryA(sppcextdll_str);
        }
    }
    __forceinline void load_sppcomapi() noexcept {
        if (f_LoadLibraryA) {
            char sppcomapidll_str[] = "sppcomapi.dll";
            sppcomapidll = f_LoadLibraryA(sppcomapidll_str);
        }
    }
    __forceinline void load_sppcommdlg() noexcept {
        if (f_LoadLibraryA) {
            char sppcommdlgdll_str[] = "sppcommdlg.dll";
            sppcommdlgdll = f_LoadLibraryA(sppcommdlgdll_str);
        }
    }
    __forceinline void load_sppnp() noexcept {
        if (f_LoadLibraryA) {
            char sppnpdll_str[] = "sppnp.dll";
            sppnpdll = f_LoadLibraryA(sppnpdll_str);
        }
    }
    __forceinline void load_sppobjs() noexcept {
        if (f_LoadLibraryA) {
            char sppobjsdll_str[] = "sppobjs.dll";
            sppobjsdll = f_LoadLibraryA(sppobjsdll_str);
        }
    }
    __forceinline void load_sppwinob() noexcept {
        if (f_LoadLibraryA) {
            char sppwinobdll_str[] = "sppwinob.dll";
            sppwinobdll = f_LoadLibraryA(sppwinobdll_str);
        }
    }
    __forceinline void load_sppwmi() noexcept {
        if (f_LoadLibraryA) {
            char sppwmidll_str[] = "sppwmi.dll";
            sppwmidll = f_LoadLibraryA(sppwmidll_str);
        }
    }
    __forceinline void load_spwinsat() noexcept {
        if (f_LoadLibraryA) {
            char spwinsatdll_str[] = "spwinsat.dll";
            spwinsatdll = f_LoadLibraryA(spwinsatdll_str);
        }
    }
    __forceinline void load_spwizeng() noexcept {
        if (f_LoadLibraryA) {
            char spwizengdll_str[] = "spwizeng.dll";
            spwizengdll = f_LoadLibraryA(spwizengdll_str);
        }
    }
    __forceinline void load_spwizimg() noexcept {
        if (f_LoadLibraryA) {
            char spwizimgdll_str[] = "spwizimg.dll";
            spwizimgdll = f_LoadLibraryA(spwizimgdll_str);
        }
    }
    __forceinline void load_spwizres() noexcept {
        if (f_LoadLibraryA) {
            char spwizresdll_str[] = "spwizres.dll";
            spwizresdll = f_LoadLibraryA(spwizresdll_str);
        }
    }
    __forceinline void load_SqlServerSpatial150() noexcept {
        if (f_LoadLibraryA) {
            char SqlServerSpatial150dll_str[] = "SqlServerSpatial150.dll";
            SqlServerSpatial150dll = f_LoadLibraryA(SqlServerSpatial150dll_str);
        }
    }
    __forceinline void load_sqlsrv32() noexcept {
        if (f_LoadLibraryA) {
            char sqlsrv32dll_str[] = "sqlsrv32.dll";
            sqlsrv32dll = f_LoadLibraryA(sqlsrv32dll_str);
        }
    }
    __forceinline void load_sqmapi() noexcept {
        if (f_LoadLibraryA) {
            char sqmapidll_str[] = "sqmapi.dll";
            sqmapidll = f_LoadLibraryA(sqmapidll_str);
        }
    }
    __forceinline void load_srchadmin() noexcept {
        if (f_LoadLibraryA) {
            char srchadmindll_str[] = "srchadmin.dll";
            srchadmindll = f_LoadLibraryA(srchadmindll_str);
        }
    }
    __forceinline void load_srclient() noexcept {
        if (f_LoadLibraryA) {
            char srclientdll_str[] = "srclient.dll";
            srclientdll = f_LoadLibraryA(srclientdll_str);
        }
    }
    __forceinline void load_srcore() noexcept {
        if (f_LoadLibraryA) {
            char srcoredll_str[] = "srcore.dll";
            srcoredll = f_LoadLibraryA(srcoredll_str);
        }
    }
    __forceinline void load_SrEvents() noexcept {
        if (f_LoadLibraryA) {
            char SrEventsdll_str[] = "SrEvents.dll";
            SrEventsdll = f_LoadLibraryA(SrEventsdll_str);
        }
    }
    __forceinline void load_SRH() noexcept {
        if (f_LoadLibraryA) {
            char SRHdll_str[] = "SRH.dll";
            SRHdll = f_LoadLibraryA(SRHdll_str);
        }
    }
    __forceinline void load_srhelper() noexcept {
        if (f_LoadLibraryA) {
            char srhelperdll_str[] = "srhelper.dll";
            srhelperdll = f_LoadLibraryA(srhelperdll_str);
        }
    }
    __forceinline void load_srm() noexcept {
        if (f_LoadLibraryA) {
            char srmdll_str[] = "srm.dll";
            srmdll = f_LoadLibraryA(srmdll_str);
        }
    }
    __forceinline void load_srmclient() noexcept {
        if (f_LoadLibraryA) {
            char srmclientdll_str[] = "srmclient.dll";
            srmclientdll = f_LoadLibraryA(srmclientdll_str);
        }
    }
    __forceinline void load_srmlib() noexcept {
        if (f_LoadLibraryA) {
            char srmlibdll_str[] = "srmlib.dll";
            srmlibdll = f_LoadLibraryA(srmlibdll_str);
        }
    }
    __forceinline void load_srmscan() noexcept {
        if (f_LoadLibraryA) {
            char srmscandll_str[] = "srmscan.dll";
            srmscandll = f_LoadLibraryA(srmscandll_str);
        }
    }
    __forceinline void load_srmshell() noexcept {
        if (f_LoadLibraryA) {
            char srmshelldll_str[] = "srmshell.dll";
            srmshelldll = f_LoadLibraryA(srmshelldll_str);
        }
    }
    __forceinline void load_srmstormod() noexcept {
        if (f_LoadLibraryA) {
            char srmstormoddll_str[] = "srmstormod.dll";
            srmstormoddll = f_LoadLibraryA(srmstormoddll_str);
        }
    }
    __forceinline void load_srmtrace() noexcept {
        if (f_LoadLibraryA) {
            char srmtracedll_str[] = "srmtrace.dll";
            srmtracedll = f_LoadLibraryA(srmtracedll_str);
        }
    }
    __forceinline void load_srm_ps() noexcept {
        if (f_LoadLibraryA) {
            char srm_psdll_str[] = "srm_ps.dll";
            srm_psdll = f_LoadLibraryA(srm_psdll_str);
        }
    }
    __forceinline void load_srpapi() noexcept {
        if (f_LoadLibraryA) {
            char srpapidll_str[] = "srpapi.dll";
            srpapidll = f_LoadLibraryA(srpapidll_str);
        }
    }
    __forceinline void load_SrpUxNativeSnapIn() noexcept {
        if (f_LoadLibraryA) {
            char SrpUxNativeSnapIndll_str[] = "SrpUxNativeSnapIn.dll";
            SrpUxNativeSnapIndll = f_LoadLibraryA(SrpUxNativeSnapIndll_str);
        }
    }
    __forceinline void load_srrstr() noexcept {
        if (f_LoadLibraryA) {
            char srrstrdll_str[] = "srrstr.dll";
            srrstrdll = f_LoadLibraryA(srrstrdll_str);
        }
    }
    __forceinline void load_srumapi() noexcept {
        if (f_LoadLibraryA) {
            char srumapidll_str[] = "srumapi.dll";
            srumapidll = f_LoadLibraryA(srumapidll_str);
        }
    }
    __forceinline void load_srumsvc() noexcept {
        if (f_LoadLibraryA) {
            char srumsvcdll_str[] = "srumsvc.dll";
            srumsvcdll = f_LoadLibraryA(srumsvcdll_str);
        }
    }
    __forceinline void load_srvcli() noexcept {
        if (f_LoadLibraryA) {
            char srvclidll_str[] = "srvcli.dll";
            srvclidll = f_LoadLibraryA(srvclidll_str);
        }
    }
    __forceinline void load_srvsvc() noexcept {
        if (f_LoadLibraryA) {
            char srvsvcdll_str[] = "srvsvc.dll";
            srvsvcdll = f_LoadLibraryA(srvsvcdll_str);
        }
    }
    __forceinline void load_srwmi() noexcept {
        if (f_LoadLibraryA) {
            char srwmidll_str[] = "srwmi.dll";
            srwmidll = f_LoadLibraryA(srwmidll_str);
        }
    }
    __forceinline void load_sscore() noexcept {
        if (f_LoadLibraryA) {
            char sscoredll_str[] = "sscore.dll";
            sscoredll = f_LoadLibraryA(sscoredll_str);
        }
    }
    __forceinline void load_sscoreext() noexcept {
        if (f_LoadLibraryA) {
            char sscoreextdll_str[] = "sscoreext.dll";
            sscoreextdll = f_LoadLibraryA(sscoreextdll_str);
        }
    }
    __forceinline void load_ssdm() noexcept {
        if (f_LoadLibraryA) {
            char ssdmdll_str[] = "ssdm.dll";
            ssdmdll = f_LoadLibraryA(ssdmdll_str);
        }
    }
    __forceinline void load_ssdpapi() noexcept {
        if (f_LoadLibraryA) {
            char ssdpapidll_str[] = "ssdpapi.dll";
            ssdpapidll = f_LoadLibraryA(ssdpapidll_str);
        }
    }
    __forceinline void load_ssdpsrv() noexcept {
        if (f_LoadLibraryA) {
            char ssdpsrvdll_str[] = "ssdpsrv.dll";
            ssdpsrvdll = f_LoadLibraryA(ssdpsrvdll_str);
        }
    }
    __forceinline void load_SshdBroker() noexcept {
        if (f_LoadLibraryA) {
            char SshdBrokerdll_str[] = "SshdBroker.dll";
            SshdBrokerdll = f_LoadLibraryA(SshdBrokerdll_str);
        }
    }
    __forceinline void load_SshdPinAuthLsa() noexcept {
        if (f_LoadLibraryA) {
            char SshdPinAuthLsadll_str[] = "SshdPinAuthLsa.dll";
            SshdPinAuthLsadll = f_LoadLibraryA(SshdPinAuthLsadll_str);
        }
    }
    __forceinline void load_sspicli() noexcept {
        if (f_LoadLibraryA) {
            char sspiclidll_str[] = "sspicli.dll";
            sspiclidll = f_LoadLibraryA(sspiclidll_str);
        }
    }
    __forceinline void load_sspisrv() noexcept {
        if (f_LoadLibraryA) {
            char sspisrvdll_str[] = "sspisrv.dll";
            sspisrvdll = f_LoadLibraryA(sspisrvdll_str);
        }
    }
    __forceinline void load_SSShim() noexcept {
        if (f_LoadLibraryA) {
            char SSShimdll_str[] = "SSShim.dll";
            SSShimdll = f_LoadLibraryA(SSShimdll_str);
        }
    }
    __forceinline void load_sstpcfg() noexcept {
        if (f_LoadLibraryA) {
            char sstpcfgdll_str[] = "sstpcfg.dll";
            sstpcfgdll = f_LoadLibraryA(sstpcfgdll_str);
        }
    }
    __forceinline void load_sstpsvc() noexcept {
        if (f_LoadLibraryA) {
            char sstpsvcdll_str[] = "sstpsvc.dll";
            sstpsvcdll = f_LoadLibraryA(sstpsvcdll_str);
        }
    }
    __forceinline void load_StartTileData() noexcept {
        if (f_LoadLibraryA) {
            char StartTileDatadll_str[] = "StartTileData.dll";
            StartTileDatadll = f_LoadLibraryA(StartTileDatadll_str);
        }
    }
    __forceinline void load_Startupscan() noexcept {
        if (f_LoadLibraryA) {
            char Startupscandll_str[] = "Startupscan.dll";
            Startupscandll = f_LoadLibraryA(Startupscandll_str);
        }
    }
    __forceinline void load_StateRepositoryCore() noexcept {
        if (f_LoadLibraryA) {
            char StateRepositoryCoredll_str[] = "StateRepository.Core.dll";
            StateRepositoryCoredll = f_LoadLibraryA(StateRepositoryCoredll_str);
        }
    }
    __forceinline void load_stclient() noexcept {
        if (f_LoadLibraryA) {
            char stclientdll_str[] = "stclient.dll";
            stclientdll = f_LoadLibraryA(stclientdll_str);
        }
    }
    __forceinline void load_sti() noexcept {
        if (f_LoadLibraryA) {
            char stidll_str[] = "sti.dll";
            stidll = f_LoadLibraryA(stidll_str);
        }
    }
    __forceinline void load_sti_ci() noexcept {
        if (f_LoadLibraryA) {
            char sti_cidll_str[] = "sti_ci.dll";
            sti_cidll = f_LoadLibraryA(sti_cidll_str);
        }
    }
    __forceinline void load_stobject() noexcept {
        if (f_LoadLibraryA) {
            char stobjectdll_str[] = "stobject.dll";
            stobjectdll = f_LoadLibraryA(stobjectdll_str);
        }
    }
    __forceinline void load_StorageContextHandler() noexcept {
        if (f_LoadLibraryA) {
            char StorageContextHandlerdll_str[] = "StorageContextHandler.dll";
            StorageContextHandlerdll = f_LoadLibraryA(StorageContextHandlerdll_str);
        }
    }
    __forceinline void load_StorageUsage() noexcept {
        if (f_LoadLibraryA) {
            char StorageUsagedll_str[] = "StorageUsage.dll";
            StorageUsagedll = f_LoadLibraryA(StorageUsagedll_str);
        }
    }
    __forceinline void load_storagewmi() noexcept {
        if (f_LoadLibraryA) {
            char storagewmidll_str[] = "storagewmi.dll";
            storagewmidll = f_LoadLibraryA(storagewmidll_str);
        }
    }
    __forceinline void load_storagewmi_passthru() noexcept {
        if (f_LoadLibraryA) {
            char storagewmi_passthrudll_str[] = "storagewmi_passthru.dll";
            storagewmi_passthrudll = f_LoadLibraryA(storagewmi_passthrudll_str);
        }
    }
    __forceinline void load_storewuauth() noexcept {
        if (f_LoadLibraryA) {
            char storewuauthdll_str[] = "storewuauth.dll";
            storewuauthdll = f_LoadLibraryA(storewuauthdll_str);
        }
    }
    __forceinline void load_Storprop() noexcept {
        if (f_LoadLibraryA) {
            char Storpropdll_str[] = "Storprop.dll";
            Storpropdll = f_LoadLibraryA(Storpropdll_str);
        }
    }
    __forceinline void load_StorSvc() noexcept {
        if (f_LoadLibraryA) {
            char StorSvcdll_str[] = "StorSvc.dll";
            StorSvcdll = f_LoadLibraryA(StorSvcdll_str);
        }
    }
    __forceinline void load_streamci() noexcept {
        if (f_LoadLibraryA) {
            char streamcidll_str[] = "streamci.dll";
            streamcidll = f_LoadLibraryA(streamcidll_str);
        }
    }
    __forceinline void load_StringFeedbackEngine() noexcept {
        if (f_LoadLibraryA) {
            char StringFeedbackEnginedll_str[] = "StringFeedbackEngine.dll";
            StringFeedbackEnginedll = f_LoadLibraryA(StringFeedbackEnginedll_str);
        }
    }
    __forceinline void load_StructuredQuery() noexcept {
        if (f_LoadLibraryA) {
            char StructuredQuerydll_str[] = "StructuredQuery.dll";
            StructuredQuerydll = f_LoadLibraryA(StructuredQuerydll_str);
        }
    }
    __forceinline void load_sud() noexcept {
        if (f_LoadLibraryA) {
            char suddll_str[] = "sud.dll";
            suddll = f_LoadLibraryA(suddll_str);
        }
    }
    __forceinline void load_SustainabilityService() noexcept {
        if (f_LoadLibraryA) {
            char SustainabilityServicedll_str[] = "SustainabilityService.dll";
            SustainabilityServicedll = f_LoadLibraryA(SustainabilityServicedll_str);
        }
    }
    __forceinline void load_svf() noexcept {
        if (f_LoadLibraryA) {
            char svfdll_str[] = "svf.dll";
            svfdll = f_LoadLibraryA(svfdll_str);
        }
    }
    __forceinline void load_svsvc() noexcept {
        if (f_LoadLibraryA) {
            char svsvcdll_str[] = "svsvc.dll";
            svsvcdll = f_LoadLibraryA(svsvcdll_str);
        }
    }
    __forceinline void load_SwitcherDataModel() noexcept {
        if (f_LoadLibraryA) {
            char SwitcherDataModeldll_str[] = "SwitcherDataModel.dll";
            SwitcherDataModeldll = f_LoadLibraryA(SwitcherDataModeldll_str);
        }
    }
    __forceinline void load_swprv() noexcept {
        if (f_LoadLibraryA) {
            char swprvdll_str[] = "swprv.dll";
            swprvdll = f_LoadLibraryA(swprvdll_str);
        }
    }
    __forceinline void load_sxproxy() noexcept {
        if (f_LoadLibraryA) {
            char sxproxydll_str[] = "sxproxy.dll";
            sxproxydll = f_LoadLibraryA(sxproxydll_str);
        }
    }
    __forceinline void load_sxs() noexcept {
        if (f_LoadLibraryA) {
            char sxsdll_str[] = "sxs.dll";
            sxsdll = f_LoadLibraryA(sxsdll_str);
        }
    }
    __forceinline void load_sxshared() noexcept {
        if (f_LoadLibraryA) {
            char sxshareddll_str[] = "sxshared.dll";
            sxshareddll = f_LoadLibraryA(sxshareddll_str);
        }
    }
    __forceinline void load_sxssrv() noexcept {
        if (f_LoadLibraryA) {
            char sxssrvdll_str[] = "sxssrv.dll";
            sxssrvdll = f_LoadLibraryA(sxssrvdll_str);
        }
    }
    __forceinline void load_sxsstore() noexcept {
        if (f_LoadLibraryA) {
            char sxsstoredll_str[] = "sxsstore.dll";
            sxsstoredll = f_LoadLibraryA(sxsstoredll_str);
        }
    }
    __forceinline void load_SyncCenter() noexcept {
        if (f_LoadLibraryA) {
            char SyncCenterdll_str[] = "SyncCenter.dll";
            SyncCenterdll = f_LoadLibraryA(SyncCenterdll_str);
        }
    }
    __forceinline void load_SyncController() noexcept {
        if (f_LoadLibraryA) {
            char SyncControllerdll_str[] = "SyncController.dll";
            SyncControllerdll = f_LoadLibraryA(SyncControllerdll_str);
        }
    }
    __forceinline void load_SyncHostps() noexcept {
        if (f_LoadLibraryA) {
            char SyncHostpsdll_str[] = "SyncHostps.dll";
            SyncHostpsdll = f_LoadLibraryA(SyncHostpsdll_str);
        }
    }
    __forceinline void load_SyncInfrastructure() noexcept {
        if (f_LoadLibraryA) {
            char SyncInfrastructuredll_str[] = "SyncInfrastructure.dll";
            SyncInfrastructuredll = f_LoadLibraryA(SyncInfrastructuredll_str);
        }
    }
    __forceinline void load_SyncInfrastructureps() noexcept {
        if (f_LoadLibraryA) {
            char SyncInfrastructurepsdll_str[] = "SyncInfrastructureps.dll";
            SyncInfrastructurepsdll = f_LoadLibraryA(SyncInfrastructurepsdll_str);
        }
    }
    __forceinline void load_SyncProxy() noexcept {
        if (f_LoadLibraryA) {
            char SyncProxydll_str[] = "SyncProxy.dll";
            SyncProxydll = f_LoadLibraryA(SyncProxydll_str);
        }
    }
    __forceinline void load_Syncreg() noexcept {
        if (f_LoadLibraryA) {
            char Syncregdll_str[] = "Syncreg.dll";
            Syncregdll = f_LoadLibraryA(Syncregdll_str);
        }
    }
    __forceinline void load_SyncRes() noexcept {
        if (f_LoadLibraryA) {
            char SyncResdll_str[] = "SyncRes.dll";
            SyncResdll = f_LoadLibraryA(SyncResdll_str);
        }
    }
    __forceinline void load_SyncSettings() noexcept {
        if (f_LoadLibraryA) {
            char SyncSettingsdll_str[] = "SyncSettings.dll";
            SyncSettingsdll = f_LoadLibraryA(SyncSettingsdll_str);
        }
    }
    __forceinline void load_syncutil() noexcept {
        if (f_LoadLibraryA) {
            char syncutildll_str[] = "syncutil.dll";
            syncutildll = f_LoadLibraryA(syncutildll_str);
        }
    }
    __forceinline void load_sysclass() noexcept {
        if (f_LoadLibraryA) {
            char sysclassdll_str[] = "sysclass.dll";
            sysclassdll = f_LoadLibraryA(sysclassdll_str);
        }
    }
    __forceinline void load_SysFxUI() noexcept {
        if (f_LoadLibraryA) {
            char SysFxUIdll_str[] = "SysFxUI.dll";
            SysFxUIdll = f_LoadLibraryA(SysFxUIdll_str);
        }
    }
    __forceinline void load_sysmain() noexcept {
        if (f_LoadLibraryA) {
            char sysmaindll_str[] = "sysmain.dll";
            sysmaindll = f_LoadLibraryA(sysmaindll_str);
        }
    }
    __forceinline void load_sysntfy() noexcept {
        if (f_LoadLibraryA) {
            char sysntfydll_str[] = "sysntfy.dll";
            sysntfydll = f_LoadLibraryA(sysntfydll_str);
        }
    }
    __forceinline void load_syssetup() noexcept {
        if (f_LoadLibraryA) {
            char syssetupdll_str[] = "syssetup.dll";
            syssetupdll = f_LoadLibraryA(syssetupdll_str);
        }
    }
    __forceinline void load_systemcpl() noexcept {
        if (f_LoadLibraryA) {
            char systemcpldll_str[] = "systemcpl.dll";
            systemcpldll = f_LoadLibraryA(systemcpldll_str);
        }
    }
    __forceinline void load_SystemEventsBrokerClient() noexcept {
        if (f_LoadLibraryA) {
            char SystemEventsBrokerClientdll_str[] = "SystemEventsBrokerClient.dll";
            SystemEventsBrokerClientdll = f_LoadLibraryA(SystemEventsBrokerClientdll_str);
        }
    }
    __forceinline void load_SystemEventsBrokerServer() noexcept {
        if (f_LoadLibraryA) {
            char SystemEventsBrokerServerdll_str[] = "SystemEventsBrokerServer.dll";
            SystemEventsBrokerServerdll = f_LoadLibraryA(SystemEventsBrokerServerdll_str);
        }
    }
    __forceinline void load_SystemSettingsDataModel() noexcept {
        if (f_LoadLibraryA) {
            char SystemSettingsDataModeldll_str[] = "SystemSettings.DataModel.dll";
            SystemSettingsDataModeldll = f_LoadLibraryA(SystemSettingsDataModeldll_str);
        }
    }
    __forceinline void load_SystemSettingsDeviceEncryptionHandlers() noexcept {
        if (f_LoadLibraryA) {
            char SystemSettingsDeviceEncryptionHandlersdll_str[] = "SystemSettings.DeviceEncryptionHandlers.dll";
            SystemSettingsDeviceEncryptionHandlersdll = f_LoadLibraryA(SystemSettingsDeviceEncryptionHandlersdll_str);
        }
    }
    __forceinline void load_SystemSettingsHandlers() noexcept {
        if (f_LoadLibraryA) {
            char SystemSettingsHandlersdll_str[] = "SystemSettings.Handlers.dll";
            SystemSettingsHandlersdll = f_LoadLibraryA(SystemSettingsHandlersdll_str);
        }
    }
    __forceinline void load_SystemSettingsSettingsExtensibility() noexcept {
        if (f_LoadLibraryA) {
            char SystemSettingsSettingsExtensibilitydll_str[] = "SystemSettings.SettingsExtensibility.dll";
            SystemSettingsSettingsExtensibilitydll = f_LoadLibraryA(SystemSettingsSettingsExtensibilitydll_str);
        }
    }
    __forceinline void load_SystemSettingsUserAccountsHandlers() noexcept {
        if (f_LoadLibraryA) {
            char SystemSettingsUserAccountsHandlersdll_str[] = "SystemSettings.UserAccountsHandlers.dll";
            SystemSettingsUserAccountsHandlersdll = f_LoadLibraryA(SystemSettingsUserAccountsHandlersdll_str);
        }
    }
    __forceinline void load_SystemSettingsThresholdAdminFlowUI() noexcept {
        if (f_LoadLibraryA) {
            char SystemSettingsThresholdAdminFlowUIdll_str[] = "SystemSettingsThresholdAdminFlowUI.dll";
            SystemSettingsThresholdAdminFlowUIdll = f_LoadLibraryA(SystemSettingsThresholdAdminFlowUIdll_str);
        }
    }
    __forceinline void load_SystemSupportInfo() noexcept {
        if (f_LoadLibraryA) {
            char SystemSupportInfodll_str[] = "SystemSupportInfo.dll";
            SystemSupportInfodll = f_LoadLibraryA(SystemSupportInfodll_str);
        }
    }
    __forceinline void load_t2embed() noexcept {
        if (f_LoadLibraryA) {
            char t2embeddll_str[] = "t2embed.dll";
            t2embeddll = f_LoadLibraryA(t2embeddll_str);
        }
    }
    __forceinline void load_t6indisp() noexcept {
        if (f_LoadLibraryA) {
            char t6indispdll_str[] = "t6indisp.dll";
            t6indispdll = f_LoadLibraryA(t6indispdll_str);
        }
    }
    __forceinline void load_Tabbtn() noexcept {
        if (f_LoadLibraryA) {
            char Tabbtndll_str[] = "Tabbtn.dll";
            Tabbtndll = f_LoadLibraryA(Tabbtndll_str);
        }
    }
    __forceinline void load_TabbtnEx() noexcept {
        if (f_LoadLibraryA) {
            char TabbtnExdll_str[] = "TabbtnEx.dll";
            TabbtnExdll = f_LoadLibraryA(TabbtnExdll_str);
        }
    }
    __forceinline void load_TabSvc() noexcept {
        if (f_LoadLibraryA) {
            char TabSvcdll_str[] = "TabSvc.dll";
            TabSvcdll = f_LoadLibraryA(TabSvcdll_str);
        }
    }
    __forceinline void load_tapi3() noexcept {
        if (f_LoadLibraryA) {
            char tapi3dll_str[] = "tapi3.dll";
            tapi3dll = f_LoadLibraryA(tapi3dll_str);
        }
    }
    __forceinline void load_tapi32() noexcept {
        if (f_LoadLibraryA) {
            char tapi32dll_str[] = "tapi32.dll";
            tapi32dll = f_LoadLibraryA(tapi32dll_str);
        }
    }
    __forceinline void load_tapilua() noexcept {
        if (f_LoadLibraryA) {
            char tapiluadll_str[] = "tapilua.dll";
            tapiluadll = f_LoadLibraryA(tapiluadll_str);
        }
    }
    __forceinline void load_TapiMigPlugin() noexcept {
        if (f_LoadLibraryA) {
            char TapiMigPlugindll_str[] = "TapiMigPlugin.dll";
            TapiMigPlugindll = f_LoadLibraryA(TapiMigPlugindll_str);
        }
    }
    __forceinline void load_tapiperf() noexcept {
        if (f_LoadLibraryA) {
            char tapiperfdll_str[] = "tapiperf.dll";
            tapiperfdll = f_LoadLibraryA(tapiperfdll_str);
        }
    }
    __forceinline void load_tapisrv() noexcept {
        if (f_LoadLibraryA) {
            char tapisrvdll_str[] = "tapisrv.dll";
            tapisrvdll = f_LoadLibraryA(tapisrvdll_str);
        }
    }
    __forceinline void load_TapiSysprep() noexcept {
        if (f_LoadLibraryA) {
            char TapiSysprepdll_str[] = "TapiSysprep.dll";
            TapiSysprepdll = f_LoadLibraryA(TapiSysprepdll_str);
        }
    }
    __forceinline void load_tapiui() noexcept {
        if (f_LoadLibraryA) {
            char tapiuidll_str[] = "tapiui.dll";
            tapiuidll = f_LoadLibraryA(tapiuidll_str);
        }
    }
    __forceinline void load_TaskApis() noexcept {
        if (f_LoadLibraryA) {
            char TaskApisdll_str[] = "TaskApis.dll";
            TaskApisdll = f_LoadLibraryA(TaskApisdll_str);
        }
    }
    __forceinline void load_Taskbar() noexcept {
        if (f_LoadLibraryA) {
            char Taskbardll_str[] = "Taskbar.dll";
            Taskbardll = f_LoadLibraryA(Taskbardll_str);
        }
    }
    __forceinline void load_taskbarcpl() noexcept {
        if (f_LoadLibraryA) {
            char taskbarcpldll_str[] = "taskbarcpl.dll";
            taskbarcpldll = f_LoadLibraryA(taskbarcpldll_str);
        }
    }
    __forceinline void load_taskcomp() noexcept {
        if (f_LoadLibraryA) {
            char taskcompdll_str[] = "taskcomp.dll";
            taskcompdll = f_LoadLibraryA(taskcompdll_str);
        }
    }
    __forceinline void load_TaskFlowDataEngine() noexcept {
        if (f_LoadLibraryA) {
            char TaskFlowDataEnginedll_str[] = "TaskFlowDataEngine.dll";
            TaskFlowDataEnginedll = f_LoadLibraryA(TaskFlowDataEnginedll_str);
        }
    }
    __forceinline void load_TaskManagerDataLayer() noexcept {
        if (f_LoadLibraryA) {
            char TaskManagerDataLayerdll_str[] = "TaskManagerDataLayer.dll";
            TaskManagerDataLayerdll = f_LoadLibraryA(TaskManagerDataLayerdll_str);
        }
    }
    __forceinline void load_taskschd() noexcept {
        if (f_LoadLibraryA) {
            char taskschddll_str[] = "taskschd.dll";
            taskschddll = f_LoadLibraryA(taskschddll_str);
        }
    }
    __forceinline void load_TaskSchdPS() noexcept {
        if (f_LoadLibraryA) {
            char TaskSchdPSdll_str[] = "TaskSchdPS.dll";
            TaskSchdPSdll = f_LoadLibraryA(TaskSchdPSdll_str);
        }
    }
    __forceinline void load_tbauth() noexcept {
        if (f_LoadLibraryA) {
            char tbauthdll_str[] = "tbauth.dll";
            tbauthdll = f_LoadLibraryA(tbauthdll_str);
        }
    }
    __forceinline void load_tbs() noexcept {
        if (f_LoadLibraryA) {
            char tbsdll_str[] = "tbs.dll";
            tbsdll = f_LoadLibraryA(tbsdll_str);
        }
    }
    __forceinline void load_tcbloader() noexcept {
        if (f_LoadLibraryA) {
            char tcbloaderdll_str[] = "tcbloader.dll";
            tcbloaderdll = f_LoadLibraryA(tcbloaderdll_str);
        }
    }
    __forceinline void load_tcpipcfg() noexcept {
        if (f_LoadLibraryA) {
            char tcpipcfgdll_str[] = "tcpipcfg.dll";
            tcpipcfgdll = f_LoadLibraryA(tcpipcfgdll_str);
        }
    }
    __forceinline void load_tcpmib() noexcept {
        if (f_LoadLibraryA) {
            char tcpmibdll_str[] = "tcpmib.dll";
            tcpmibdll = f_LoadLibraryA(tcpmibdll_str);
        }
    }
    __forceinline void load_tcpmon() noexcept {
        if (f_LoadLibraryA) {
            char tcpmondll_str[] = "tcpmon.dll";
            tcpmondll = f_LoadLibraryA(tcpmondll_str);
        }
    }
    __forceinline void load_tcpmonui() noexcept {
        if (f_LoadLibraryA) {
            char tcpmonuidll_str[] = "tcpmonui.dll";
            tcpmonuidll = f_LoadLibraryA(tcpmonuidll_str);
        }
    }
    __forceinline void load_tdh() noexcept {
        if (f_LoadLibraryA) {
            char tdhdll_str[] = "tdh.dll";
            tdhdll = f_LoadLibraryA(tdhdll_str);
        }
    }
    __forceinline void load_tdhres() noexcept {
        if (f_LoadLibraryA) {
            char tdhresdll_str[] = "tdhres.dll";
            tdhresdll = f_LoadLibraryA(tdhresdll_str);
        }
    }
    __forceinline void load_TDLMigration() noexcept {
        if (f_LoadLibraryA) {
            char TDLMigrationdll_str[] = "TDLMigration.dll";
            TDLMigrationdll = f_LoadLibraryA(TDLMigrationdll_str);
        }
    }
    __forceinline void load_TEEManagement64() noexcept {
        if (f_LoadLibraryA) {
            char TEEManagement64dll_str[] = "TEEManagement64.dll";
            TEEManagement64dll = f_LoadLibraryA(TEEManagement64dll_str);
        }
    }
    __forceinline void load_TelephonyInteractiveUser() noexcept {
        if (f_LoadLibraryA) {
            char TelephonyInteractiveUserdll_str[] = "TelephonyInteractiveUser.dll";
            TelephonyInteractiveUserdll = f_LoadLibraryA(TelephonyInteractiveUserdll_str);
        }
    }
    __forceinline void load_TelephonyInteractiveUserRes() noexcept {
        if (f_LoadLibraryA) {
            char TelephonyInteractiveUserResdll_str[] = "TelephonyInteractiveUserRes.dll";
            TelephonyInteractiveUserResdll = f_LoadLibraryA(TelephonyInteractiveUserResdll_str);
        }
    }
    __forceinline void load_tellib() noexcept {
        if (f_LoadLibraryA) {
            char tellibdll_str[] = "tellib.dll";
            tellibdll = f_LoadLibraryA(tellibdll_str);
        }
    }
    __forceinline void load_TempSignedLicenseExchangeTask() noexcept {
        if (f_LoadLibraryA) {
            char TempSignedLicenseExchangeTaskdll_str[] = "TempSignedLicenseExchangeTask.dll";
            TempSignedLicenseExchangeTaskdll = f_LoadLibraryA(TempSignedLicenseExchangeTaskdll_str);
        }
    }
    __forceinline void load_TenantRestrictionsPlugin() noexcept {
        if (f_LoadLibraryA) {
            char TenantRestrictionsPlugindll_str[] = "TenantRestrictionsPlugin.dll";
            TenantRestrictionsPlugindll = f_LoadLibraryA(TenantRestrictionsPlugindll_str);
        }
    }
    __forceinline void load_termmgr() noexcept {
        if (f_LoadLibraryA) {
            char termmgrdll_str[] = "termmgr.dll";
            termmgrdll = f_LoadLibraryA(termmgrdll_str);
        }
    }
    __forceinline void load_termsrv() noexcept {
        if (f_LoadLibraryA) {
            char termsrvdll_str[] = "termsrv.dll";
            termsrvdll = f_LoadLibraryA(termsrvdll_str);
        }
    }
    __forceinline void load_tetheringclient() noexcept {
        if (f_LoadLibraryA) {
            char tetheringclientdll_str[] = "tetheringclient.dll";
            tetheringclientdll = f_LoadLibraryA(tetheringclientdll_str);
        }
    }
    __forceinline void load_tetheringconfigsp() noexcept {
        if (f_LoadLibraryA) {
            char tetheringconfigspdll_str[] = "tetheringconfigsp.dll";
            tetheringconfigspdll = f_LoadLibraryA(tetheringconfigspdll_str);
        }
    }
    __forceinline void load_TetheringIeProvider() noexcept {
        if (f_LoadLibraryA) {
            char TetheringIeProviderdll_str[] = "TetheringIeProvider.dll";
            TetheringIeProviderdll = f_LoadLibraryA(TetheringIeProviderdll_str);
        }
    }
    __forceinline void load_TetheringMgr() noexcept {
        if (f_LoadLibraryA) {
            char TetheringMgrdll_str[] = "TetheringMgr.dll";
            TetheringMgrdll = f_LoadLibraryA(TetheringMgrdll_str);
        }
    }
    __forceinline void load_tetheringservice() noexcept {
        if (f_LoadLibraryA) {
            char tetheringservicedll_str[] = "tetheringservice.dll";
            tetheringservicedll = f_LoadLibraryA(tetheringservicedll_str);
        }
    }
    __forceinline void load_TetheringStation() noexcept {
        if (f_LoadLibraryA) {
            char TetheringStationdll_str[] = "TetheringStation.dll";
            TetheringStationdll = f_LoadLibraryA(TetheringStationdll_str);
        }
    }
    __forceinline void load_TextInputFramework() noexcept {
        if (f_LoadLibraryA) {
            char TextInputFrameworkdll_str[] = "TextInputFramework.dll";
            TextInputFrameworkdll = f_LoadLibraryA(TextInputFrameworkdll_str);
        }
    }
    __forceinline void load_TextInputMethodFormatter() noexcept {
        if (f_LoadLibraryA) {
            char TextInputMethodFormatterdll_str[] = "TextInputMethodFormatter.dll";
            TextInputMethodFormatterdll = f_LoadLibraryA(TextInputMethodFormatterdll_str);
        }
    }
    __forceinline void load_TextShaping() noexcept {
        if (f_LoadLibraryA) {
            char TextShapingdll_str[] = "TextShaping.dll";
            TextShapingdll = f_LoadLibraryA(TextShapingdll_str);
        }
    }
    __forceinline void load_themecpl() noexcept {
        if (f_LoadLibraryA) {
            char themecpldll_str[] = "themecpl.dll";
            themecpldll = f_LoadLibraryA(themecpldll_str);
        }
    }
    __forceinline void load_ThemesSsfDownloadScheduledTask() noexcept {
        if (f_LoadLibraryA) {
            char ThemesSsfDownloadScheduledTaskdll_str[] = "Themes.SsfDownload.ScheduledTask.dll";
            ThemesSsfDownloadScheduledTaskdll = f_LoadLibraryA(ThemesSsfDownloadScheduledTaskdll_str);
        }
    }
    __forceinline void load_themeservice() noexcept {
        if (f_LoadLibraryA) {
            char themeservicedll_str[] = "themeservice.dll";
            themeservicedll = f_LoadLibraryA(themeservicedll_str);
        }
    }
    __forceinline void load_themeui() noexcept {
        if (f_LoadLibraryA) {
            char themeuidll_str[] = "themeui.dll";
            themeuidll = f_LoadLibraryA(themeuidll_str);
        }
    }
    __forceinline void load_threadpoolwinrt() noexcept {
        if (f_LoadLibraryA) {
            char threadpoolwinrtdll_str[] = "threadpoolwinrt.dll";
            threadpoolwinrtdll = f_LoadLibraryA(threadpoolwinrtdll_str);
        }
    }
    __forceinline void load_ThreatAssessment() noexcept {
        if (f_LoadLibraryA) {
            char ThreatAssessmentdll_str[] = "ThreatAssessment.dll";
            ThreatAssessmentdll = f_LoadLibraryA(ThreatAssessmentdll_str);
        }
    }
    __forceinline void load_ThreatExperienceManager() noexcept {
        if (f_LoadLibraryA) {
            char ThreatExperienceManagerdll_str[] = "ThreatExperienceManager.dll";
            ThreatExperienceManagerdll = f_LoadLibraryA(ThreatExperienceManagerdll_str);
        }
    }
    __forceinline void load_ThreatIntelligence() noexcept {
        if (f_LoadLibraryA) {
            char ThreatIntelligencedll_str[] = "ThreatIntelligence.dll";
            ThreatIntelligencedll = f_LoadLibraryA(ThreatIntelligencedll_str);
        }
    }
    __forceinline void load_ThreatResponseEngine() noexcept {
        if (f_LoadLibraryA) {
            char ThreatResponseEnginedll_str[] = "ThreatResponseEngine.dll";
            ThreatResponseEnginedll = f_LoadLibraryA(ThreatResponseEnginedll_str);
        }
    }
    __forceinline void load_thumbcache() noexcept {
        if (f_LoadLibraryA) {
            char thumbcachedll_str[] = "thumbcache.dll";
            thumbcachedll = f_LoadLibraryA(thumbcachedll_str);
        }
    }
    __forceinline void load_tier2punctuations() noexcept {
        if (f_LoadLibraryA) {
            char tier2punctuationsdll_str[] = "tier2punctuations.dll";
            tier2punctuationsdll = f_LoadLibraryA(tier2punctuationsdll_str);
        }
    }
    __forceinline void load_TieringEngineProxy() noexcept {
        if (f_LoadLibraryA) {
            char TieringEngineProxydll_str[] = "TieringEngineProxy.dll";
            TieringEngineProxydll = f_LoadLibraryA(TieringEngineProxydll_str);
        }
    }
    __forceinline void load_TileDataRepository() noexcept {
        if (f_LoadLibraryA) {
            char TileDataRepositorydll_str[] = "TileDataRepository.dll";
            TileDataRepositorydll = f_LoadLibraryA(TileDataRepositorydll_str);
        }
    }
    __forceinline void load_TimeBrokerClient() noexcept {
        if (f_LoadLibraryA) {
            char TimeBrokerClientdll_str[] = "TimeBrokerClient.dll";
            TimeBrokerClientdll = f_LoadLibraryA(TimeBrokerClientdll_str);
        }
    }
    __forceinline void load_TimeBrokerServer() noexcept {
        if (f_LoadLibraryA) {
            char TimeBrokerServerdll_str[] = "TimeBrokerServer.dll";
            TimeBrokerServerdll = f_LoadLibraryA(TimeBrokerServerdll_str);
        }
    }
    __forceinline void load_TimeDateMUICallback() noexcept {
        if (f_LoadLibraryA) {
            char TimeDateMUICallbackdll_str[] = "TimeDateMUICallback.dll";
            TimeDateMUICallbackdll = f_LoadLibraryA(TimeDateMUICallbackdll_str);
        }
    }
    __forceinline void load_timesync() noexcept {
        if (f_LoadLibraryA) {
            char timesyncdll_str[] = "timesync.dll";
            timesyncdll = f_LoadLibraryA(timesyncdll_str);
        }
    }
    __forceinline void load_TimeSyncTask() noexcept {
        if (f_LoadLibraryA) {
            char TimeSyncTaskdll_str[] = "TimeSyncTask.dll";
            TimeSyncTaskdll = f_LoadLibraryA(TimeSyncTaskdll_str);
        }
    }
    __forceinline void load_tlscsp() noexcept {
        if (f_LoadLibraryA) {
            char tlscspdll_str[] = "tlscsp.dll";
            tlscspdll = f_LoadLibraryA(tlscspdll_str);
        }
    }
    __forceinline void load_tokenbinding() noexcept {
        if (f_LoadLibraryA) {
            char tokenbindingdll_str[] = "tokenbinding.dll";
            tokenbindingdll = f_LoadLibraryA(tokenbindingdll_str);
        }
    }
    __forceinline void load_TokenBroker() noexcept {
        if (f_LoadLibraryA) {
            char TokenBrokerdll_str[] = "TokenBroker.dll";
            TokenBrokerdll = f_LoadLibraryA(TokenBrokerdll_str);
        }
    }
    __forceinline void load_TokenBrokerUI() noexcept {
        if (f_LoadLibraryA) {
            char TokenBrokerUIdll_str[] = "TokenBrokerUI.dll";
            TokenBrokerUIdll = f_LoadLibraryA(TokenBrokerUIdll_str);
        }
    }
    __forceinline void load_TpmCertResources() noexcept {
        if (f_LoadLibraryA) {
            char TpmCertResourcesdll_str[] = "TpmCertResources.dll";
            TpmCertResourcesdll = f_LoadLibraryA(TpmCertResourcesdll_str);
        }
    }
    __forceinline void load_tpmcompc() noexcept {
        if (f_LoadLibraryA) {
            char tpmcompcdll_str[] = "tpmcompc.dll";
            tpmcompcdll = f_LoadLibraryA(tpmcompcdll_str);
        }
    }
    __forceinline void load_TpmCoreProvisioning() noexcept {
        if (f_LoadLibraryA) {
            char TpmCoreProvisioningdll_str[] = "TpmCoreProvisioning.dll";
            TpmCoreProvisioningdll = f_LoadLibraryA(TpmCoreProvisioningdll_str);
        }
    }
    __forceinline void load_TpmEngUM() noexcept {
        if (f_LoadLibraryA) {
            char TpmEngUMdll_str[] = "TpmEngUM.dll";
            TpmEngUMdll = f_LoadLibraryA(TpmEngUMdll_str);
        }
    }
    __forceinline void load_TpmEngUM138() noexcept {
        if (f_LoadLibraryA) {
            char TpmEngUM138dll_str[] = "TpmEngUM138.dll";
            TpmEngUM138dll = f_LoadLibraryA(TpmEngUM138dll_str);
        }
    }
    __forceinline void load_TpmTasks() noexcept {
        if (f_LoadLibraryA) {
            char TpmTasksdll_str[] = "TpmTasks.dll";
            TpmTasksdll = f_LoadLibraryA(TpmTasksdll_str);
        }
    }
    __forceinline void load_tpmvsc() noexcept {
        if (f_LoadLibraryA) {
            char tpmvscdll_str[] = "tpmvsc.dll";
            tpmvscdll = f_LoadLibraryA(tpmvscdll_str);
        }
    }
    __forceinline void load_tprtdll() noexcept {
        if (f_LoadLibraryA) {
            char tprtdlldll_str[] = "tprtdll.dll";
            tprtdlldll = f_LoadLibraryA(tprtdlldll_str);
        }
    }
    __forceinline void load_tquery() noexcept {
        if (f_LoadLibraryA) {
            char tquerydll_str[] = "tquery.dll";
            tquerydll = f_LoadLibraryA(tquerydll_str);
        }
    }
    __forceinline void load_traffic() noexcept {
        if (f_LoadLibraryA) {
            char trafficdll_str[] = "traffic.dll";
            trafficdll = f_LoadLibraryA(trafficdll_str);
        }
    }
    __forceinline void load_TransliterationRanker() noexcept {
        if (f_LoadLibraryA) {
            char TransliterationRankerdll_str[] = "TransliterationRanker.dll";
            TransliterationRankerdll = f_LoadLibraryA(TransliterationRankerdll_str);
        }
    }
    __forceinline void load_TransportDSA() noexcept {
        if (f_LoadLibraryA) {
            char TransportDSAdll_str[] = "TransportDSA.dll";
            TransportDSAdll = f_LoadLibraryA(TransportDSAdll_str);
        }
    }
    __forceinline void load_trie() noexcept {
        if (f_LoadLibraryA) {
            char triedll_str[] = "trie.dll";
            triedll = f_LoadLibraryA(triedll_str);
        }
    }
    __forceinline void load_trkwks() noexcept {
        if (f_LoadLibraryA) {
            char trkwksdll_str[] = "trkwks.dll";
            trkwksdll = f_LoadLibraryA(trkwksdll_str);
        }
    }
    __forceinline void load_TrustedSignalCredProv() noexcept {
        if (f_LoadLibraryA) {
            char TrustedSignalCredProvdll_str[] = "TrustedSignalCredProv.dll";
            TrustedSignalCredProvdll = f_LoadLibraryA(TrustedSignalCredProvdll_str);
        }
    }
    __forceinline void load_tsbyuv() noexcept {
        if (f_LoadLibraryA) {
            char tsbyuvdll_str[] = "tsbyuv.dll";
            tsbyuvdll = f_LoadLibraryA(tsbyuvdll_str);
        }
    }
    __forceinline void load_tscfgwmi() noexcept {
        if (f_LoadLibraryA) {
            char tscfgwmidll_str[] = "tscfgwmi.dll";
            tscfgwmidll = f_LoadLibraryA(tscfgwmidll_str);
        }
    }
    __forceinline void load_TSErrRedir() noexcept {
        if (f_LoadLibraryA) {
            char TSErrRedirdll_str[] = "TSErrRedir.dll";
            TSErrRedirdll = f_LoadLibraryA(TSErrRedirdll_str);
        }
    }
    __forceinline void load_tsf3gip() noexcept {
        if (f_LoadLibraryA) {
            char tsf3gipdll_str[] = "tsf3gip.dll";
            tsf3gipdll = f_LoadLibraryA(tsf3gipdll_str);
        }
    }
    __forceinline void load_tsgqec() noexcept {
        if (f_LoadLibraryA) {
            char tsgqecdll_str[] = "tsgqec.dll";
            tsgqecdll = f_LoadLibraryA(tsgqecdll_str);
        }
    }
    __forceinline void load_tsmf() noexcept {
        if (f_LoadLibraryA) {
            char tsmfdll_str[] = "tsmf.dll";
            tsmfdll = f_LoadLibraryA(tsmfdll_str);
        }
    }
    __forceinline void load_TSpkg() noexcept {
        if (f_LoadLibraryA) {
            char TSpkgdll_str[] = "TSpkg.dll";
            TSpkgdll = f_LoadLibraryA(TSpkgdll_str);
        }
    }
    __forceinline void load_tspubwmi() noexcept {
        if (f_LoadLibraryA) {
            char tspubwmidll_str[] = "tspubwmi.dll";
            tspubwmidll = f_LoadLibraryA(tspubwmidll_str);
        }
    }
    __forceinline void load_TSSessionUX() noexcept {
        if (f_LoadLibraryA) {
            char TSSessionUXdll_str[] = "TSSessionUX.dll";
            TSSessionUXdll = f_LoadLibraryA(TSSessionUXdll_str);
        }
    }
    __forceinline void load_tssrvlic() noexcept {
        if (f_LoadLibraryA) {
            char tssrvlicdll_str[] = "tssrvlic.dll";
            tssrvlicdll = f_LoadLibraryA(tssrvlicdll_str);
        }
    }
    __forceinline void load_TsUsbGDCoInstaller() noexcept {
        if (f_LoadLibraryA) {
            char TsUsbGDCoInstallerdll_str[] = "TsUsbGDCoInstaller.dll";
            TsUsbGDCoInstallerdll = f_LoadLibraryA(TsUsbGDCoInstallerdll_str);
        }
    }
    __forceinline void load_TsUsbRedirectionGroupPolicyExtension() noexcept {
        if (f_LoadLibraryA) {
            char TsUsbRedirectionGroupPolicyExtensiondll_str[] = "TsUsbRedirectionGroupPolicyExtension.dll";
            TsUsbRedirectionGroupPolicyExtensiondll = f_LoadLibraryA(TsUsbRedirectionGroupPolicyExtensiondll_str);
        }
    }
    __forceinline void load_TSWorkspace() noexcept {
        if (f_LoadLibraryA) {
            char TSWorkspacedll_str[] = "TSWorkspace.dll";
            TSWorkspacedll = f_LoadLibraryA(TSWorkspacedll_str);
        }
    }
    __forceinline void load_ttdloader() noexcept {
        if (f_LoadLibraryA) {
            char ttdloaderdll_str[] = "ttdloader.dll";
            ttdloaderdll = f_LoadLibraryA(ttdloaderdll_str);
        }
    }
    __forceinline void load_ttdplm() noexcept {
        if (f_LoadLibraryA) {
            char ttdplmdll_str[] = "ttdplm.dll";
            ttdplmdll = f_LoadLibraryA(ttdplmdll_str);
        }
    }
    __forceinline void load_ttdrecord() noexcept {
        if (f_LoadLibraryA) {
            char ttdrecorddll_str[] = "ttdrecord.dll";
            ttdrecorddll = f_LoadLibraryA(ttdrecorddll_str);
        }
    }
    __forceinline void load_ttdrecordcpu() noexcept {
        if (f_LoadLibraryA) {
            char ttdrecordcpudll_str[] = "ttdrecordcpu.dll";
            ttdrecordcpudll = f_LoadLibraryA(ttdrecordcpudll_str);
        }
    }
    __forceinline void load_TtlsAuth() noexcept {
        if (f_LoadLibraryA) {
            char TtlsAuthdll_str[] = "TtlsAuth.dll";
            TtlsAuthdll = f_LoadLibraryA(TtlsAuthdll_str);
        }
    }
    __forceinline void load_TtlsCfg() noexcept {
        if (f_LoadLibraryA) {
            char TtlsCfgdll_str[] = "TtlsCfg.dll";
            TtlsCfgdll = f_LoadLibraryA(TtlsCfgdll_str);
        }
    }
    __forceinline void load_TtlsExt() noexcept {
        if (f_LoadLibraryA) {
            char TtlsExtdll_str[] = "TtlsExt.dll";
            TtlsExtdll = f_LoadLibraryA(TtlsExtdll_str);
        }
    }
    __forceinline void load_tvratings() noexcept {
        if (f_LoadLibraryA) {
            char tvratingsdll_str[] = "tvratings.dll";
            tvratingsdll = f_LoadLibraryA(tvratingsdll_str);
        }
    }
    __forceinline void load_twext() noexcept {
        if (f_LoadLibraryA) {
            char twextdll_str[] = "twext.dll";
            twextdll = f_LoadLibraryA(twextdll_str);
        }
    }
    __forceinline void load_twinapiappcore() noexcept {
        if (f_LoadLibraryA) {
            char twinapiappcoredll_str[] = "twinapi.appcore.dll";
            twinapiappcoredll = f_LoadLibraryA(twinapiappcoredll_str);
        }
    }
    __forceinline void load_twinapi() noexcept {
        if (f_LoadLibraryA) {
            char twinapidll_str[] = "twinapi.dll";
            twinapidll = f_LoadLibraryA(twinapidll_str);
        }
    }
    __forceinline void load_twinuiappcore() noexcept {
        if (f_LoadLibraryA) {
            char twinuiappcoredll_str[] = "twinui.appcore.dll";
            twinuiappcoredll = f_LoadLibraryA(twinuiappcoredll_str);
        }
    }
    __forceinline void load_twinui() noexcept {
        if (f_LoadLibraryA) {
            char twinuidll_str[] = "twinui.dll";
            twinuidll = f_LoadLibraryA(twinuidll_str);
        }
    }
    __forceinline void load_twinuipcshell() noexcept {
        if (f_LoadLibraryA) {
            char twinuipcshelldll_str[] = "twinui.pcshell.dll";
            twinuipcshelldll = f_LoadLibraryA(twinuipcshelldll_str);
        }
    }
    __forceinline void load_txflog() noexcept {
        if (f_LoadLibraryA) {
            char txflogdll_str[] = "txflog.dll";
            txflogdll = f_LoadLibraryA(txflogdll_str);
        }
    }
    __forceinline void load_txfw32() noexcept {
        if (f_LoadLibraryA) {
            char txfw32dll_str[] = "txfw32.dll";
            txfw32dll = f_LoadLibraryA(txfw32dll_str);
        }
    }
    __forceinline void load_tzautoupdate() noexcept {
        if (f_LoadLibraryA) {
            char tzautoupdatedll_str[] = "tzautoupdate.dll";
            tzautoupdatedll = f_LoadLibraryA(tzautoupdatedll_str);
        }
    }
    __forceinline void load_tzres() noexcept {
        if (f_LoadLibraryA) {
            char tzresdll_str[] = "tzres.dll";
            tzresdll = f_LoadLibraryA(tzresdll_str);
        }
    }
    __forceinline void load_tzsyncres() noexcept {
        if (f_LoadLibraryA) {
            char tzsyncresdll_str[] = "tzsyncres.dll";
            tzsyncresdll = f_LoadLibraryA(tzsyncresdll_str);
        }
    }
    __forceinline void load_ubpm() noexcept {
        if (f_LoadLibraryA) {
            char ubpmdll_str[] = "ubpm.dll";
            ubpmdll = f_LoadLibraryA(ubpmdll_str);
        }
    }
    __forceinline void load_ucmhc() noexcept {
        if (f_LoadLibraryA) {
            char ucmhcdll_str[] = "ucmhc.dll";
            ucmhcdll = f_LoadLibraryA(ucmhcdll_str);
        }
    }
    __forceinline void load_ucrtbase() noexcept {
        if (f_LoadLibraryA) {
            char ucrtbasedll_str[] = "ucrtbase.dll";
            ucrtbasedll = f_LoadLibraryA(ucrtbasedll_str);
        }
    }
    __forceinline void load_ucrtbased() noexcept {
        if (f_LoadLibraryA) {
            char ucrtbaseddll_str[] = "ucrtbased.dll";
            ucrtbaseddll = f_LoadLibraryA(ucrtbaseddll_str);
        }
    }
    __forceinline void load_ucrtbase_clr0400() noexcept {
        if (f_LoadLibraryA) {
            char ucrtbase_clr0400dll_str[] = "ucrtbase_clr0400.dll";
            ucrtbase_clr0400dll = f_LoadLibraryA(ucrtbase_clr0400dll_str);
        }
    }
    __forceinline void load_ucrtbase_enclave() noexcept {
        if (f_LoadLibraryA) {
            char ucrtbase_enclavedll_str[] = "ucrtbase_enclave.dll";
            ucrtbase_enclavedll = f_LoadLibraryA(ucrtbase_enclavedll_str);
        }
    }
    __forceinline void load_udhisapi() noexcept {
        if (f_LoadLibraryA) {
            char udhisapidll_str[] = "udhisapi.dll";
            udhisapidll = f_LoadLibraryA(udhisapidll_str);
        }
    }
    __forceinline void load_uDWM() noexcept {
        if (f_LoadLibraryA) {
            char uDWMdll_str[] = "uDWM.dll";
            uDWMdll = f_LoadLibraryA(uDWMdll_str);
        }
    }
    __forceinline void load_UefiCsp() noexcept {
        if (f_LoadLibraryA) {
            char UefiCspdll_str[] = "UefiCsp.dll";
            UefiCspdll = f_LoadLibraryA(UefiCspdll_str);
        }
    }
    __forceinline void load_uexfat() noexcept {
        if (f_LoadLibraryA) {
            char uexfatdll_str[] = "uexfat.dll";
            uexfatdll = f_LoadLibraryA(uexfatdll_str);
        }
    }
    __forceinline void load_ufat() noexcept {
        if (f_LoadLibraryA) {
            char ufatdll_str[] = "ufat.dll";
            ufatdll = f_LoadLibraryA(ufatdll_str);
        }
    }
    __forceinline void load_UiaManager() noexcept {
        if (f_LoadLibraryA) {
            char UiaManagerdll_str[] = "UiaManager.dll";
            UiaManagerdll = f_LoadLibraryA(UiaManagerdll_str);
        }
    }
    __forceinline void load_UIAnimation() noexcept {
        if (f_LoadLibraryA) {
            char UIAnimationdll_str[] = "UIAnimation.dll";
            UIAnimationdll = f_LoadLibraryA(UIAnimationdll_str);
        }
    }
    __forceinline void load_UIAutomationCore() noexcept {
        if (f_LoadLibraryA) {
            char UIAutomationCoredll_str[] = "UIAutomationCore.dll";
            UIAutomationCoredll = f_LoadLibraryA(UIAutomationCoredll_str);
        }
    }
    __forceinline void load_uicom() noexcept {
        if (f_LoadLibraryA) {
            char uicomdll_str[] = "uicom.dll";
            uicomdll = f_LoadLibraryA(uicomdll_str);
        }
    }
    __forceinline void load_UIManagerBrokerps() noexcept {
        if (f_LoadLibraryA) {
            char UIManagerBrokerpsdll_str[] = "UIManagerBrokerps.dll";
            UIManagerBrokerpsdll = f_LoadLibraryA(UIManagerBrokerpsdll_str);
        }
    }
    __forceinline void load_uireng() noexcept {
        if (f_LoadLibraryA) {
            char uirengdll_str[] = "uireng.dll";
            uirengdll = f_LoadLibraryA(uirengdll_str);
        }
    }
    __forceinline void load_UIRibbon() noexcept {
        if (f_LoadLibraryA) {
            char UIRibbondll_str[] = "UIRibbon.dll";
            UIRibbondll = f_LoadLibraryA(UIRibbondll_str);
        }
    }
    __forceinline void load_UIRibbonRes() noexcept {
        if (f_LoadLibraryA) {
            char UIRibbonResdll_str[] = "UIRibbonRes.dll";
            UIRibbonResdll = f_LoadLibraryA(UIRibbonResdll_str);
        }
    }
    __forceinline void load_ulib() noexcept {
        if (f_LoadLibraryA) {
            char ulibdll_str[] = "ulib.dll";
            ulibdll = f_LoadLibraryA(ulibdll_str);
        }
    }
    __forceinline void load_umb() noexcept {
        if (f_LoadLibraryA) {
            char umbdll_str[] = "umb.dll";
            umbdll = f_LoadLibraryA(umbdll_str);
        }
    }
    __forceinline void load_umdmxfrm() noexcept {
        if (f_LoadLibraryA) {
            char umdmxfrmdll_str[] = "umdmxfrm.dll";
            umdmxfrmdll = f_LoadLibraryA(umdmxfrmdll_str);
        }
    }
    __forceinline void load_umpdc() noexcept {
        if (f_LoadLibraryA) {
            char umpdcdll_str[] = "umpdc.dll";
            umpdcdll = f_LoadLibraryA(umpdcdll_str);
        }
    }
    __forceinline void load_umpnpmgr() noexcept {
        if (f_LoadLibraryA) {
            char umpnpmgrdll_str[] = "umpnpmgr.dll";
            umpnpmgrdll = f_LoadLibraryA(umpnpmgrdll_str);
        }
    }
    __forceinline void load_umpo_overrides() noexcept {
        if (f_LoadLibraryA) {
            char umpo_overridesdll_str[] = "umpo-overrides.dll";
            umpo_overridesdll = f_LoadLibraryA(umpo_overridesdll_str);
        }
    }
    __forceinline void load_umpo() noexcept {
        if (f_LoadLibraryA) {
            char umpodll_str[] = "umpo.dll";
            umpodll = f_LoadLibraryA(umpodll_str);
        }
    }
    __forceinline void load_umpodev() noexcept {
        if (f_LoadLibraryA) {
            char umpodevdll_str[] = "umpodev.dll";
            umpodevdll = f_LoadLibraryA(umpodevdll_str);
        }
    }
    __forceinline void load_umpoext() noexcept {
        if (f_LoadLibraryA) {
            char umpoextdll_str[] = "umpoext.dll";
            umpoextdll = f_LoadLibraryA(umpoextdll_str);
        }
    }
    __forceinline void load_umpowmi() noexcept {
        if (f_LoadLibraryA) {
            char umpowmidll_str[] = "umpowmi.dll";
            umpowmidll = f_LoadLibraryA(umpowmidll_str);
        }
    }
    __forceinline void load_umrdp() noexcept {
        if (f_LoadLibraryA) {
            char umrdpdll_str[] = "umrdp.dll";
            umrdpdll = f_LoadLibraryA(umrdpdll_str);
        }
    }
    __forceinline void load_unattend() noexcept {
        if (f_LoadLibraryA) {
            char unattenddll_str[] = "unattend.dll";
            unattenddll = f_LoadLibraryA(unattenddll_str);
        }
    }
    __forceinline void load_unenrollhook() noexcept {
        if (f_LoadLibraryA) {
            char unenrollhookdll_str[] = "unenrollhook.dll";
            unenrollhookdll = f_LoadLibraryA(unenrollhookdll_str);
        }
    }
    __forceinline void load_UnifiedConsent() noexcept {
        if (f_LoadLibraryA) {
            char UnifiedConsentdll_str[] = "UnifiedConsent.dll";
            UnifiedConsentdll = f_LoadLibraryA(UnifiedConsentdll_str);
        }
    }
    __forceinline void load_unimdmat() noexcept {
        if (f_LoadLibraryA) {
            char unimdmatdll_str[] = "unimdmat.dll";
            unimdmatdll = f_LoadLibraryA(unimdmatdll_str);
        }
    }
    __forceinline void load_uniplat() noexcept {
        if (f_LoadLibraryA) {
            char uniplatdll_str[] = "uniplat.dll";
            uniplatdll = f_LoadLibraryA(uniplatdll_str);
        }
    }
    __forceinline void load_Unistore() noexcept {
        if (f_LoadLibraryA) {
            char Unistoredll_str[] = "Unistore.dll";
            Unistoredll = f_LoadLibraryA(Unistoredll_str);
        }
    }
    __forceinline void load_untfs() noexcept {
        if (f_LoadLibraryA) {
            char untfsdll_str[] = "untfs.dll";
            untfsdll = f_LoadLibraryA(untfsdll_str);
        }
    }
    __forceinline void load_UpdateAgent() noexcept {
        if (f_LoadLibraryA) {
            char UpdateAgentdll_str[] = "UpdateAgent.dll";
            UpdateAgentdll = f_LoadLibraryA(UpdateAgentdll_str);
        }
    }
    __forceinline void load_updatecsp() noexcept {
        if (f_LoadLibraryA) {
            char updatecspdll_str[] = "updatecsp.dll";
            updatecspdll = f_LoadLibraryA(updatecspdll_str);
        }
    }
    __forceinline void load_UpdateHeartbeatScan() noexcept {
        if (f_LoadLibraryA) {
            char UpdateHeartbeatScandll_str[] = "UpdateHeartbeatScan.dll";
            UpdateHeartbeatScandll = f_LoadLibraryA(UpdateHeartbeatScandll_str);
        }
    }
    __forceinline void load_updatepolicy() noexcept {
        if (f_LoadLibraryA) {
            char updatepolicydll_str[] = "updatepolicy.dll";
            updatepolicydll = f_LoadLibraryA(updatepolicydll_str);
        }
    }
    __forceinline void load_UpdatePolicyScenarioReliabilityAggregator() noexcept {
        if (f_LoadLibraryA) {
            char UpdatePolicyScenarioReliabilityAggregatordll_str[] = "UpdatePolicyScenarioReliabilityAggregator.dll";
            UpdatePolicyScenarioReliabilityAggregatordll = f_LoadLibraryA(UpdatePolicyScenarioReliabilityAggregatordll_str);
        }
    }
    __forceinline void load_UpdateReboot() noexcept {
        if (f_LoadLibraryA) {
            char UpdateRebootdll_str[] = "UpdateReboot.dll";
            UpdateRebootdll = f_LoadLibraryA(UpdateRebootdll_str);
        }
    }
    __forceinline void load_upnp() noexcept {
        if (f_LoadLibraryA) {
            char upnpdll_str[] = "upnp.dll";
            upnpdll = f_LoadLibraryA(upnpdll_str);
        }
    }
    __forceinline void load_upnphost() noexcept {
        if (f_LoadLibraryA) {
            char upnphostdll_str[] = "upnphost.dll";
            upnphostdll = f_LoadLibraryA(upnphostdll_str);
        }
    }
    __forceinline void load_UPPrinterInstallsCSP() noexcept {
        if (f_LoadLibraryA) {
            char UPPrinterInstallsCSPdll_str[] = "UPPrinterInstallsCSP.dll";
            UPPrinterInstallsCSPdll = f_LoadLibraryA(UPPrinterInstallsCSPdll_str);
        }
    }
    __forceinline void load_upshared() noexcept {
        if (f_LoadLibraryA) {
            char upshareddll_str[] = "upshared.dll";
            upshareddll = f_LoadLibraryA(upshareddll_str);
        }
    }
    __forceinline void load_uReFS() noexcept {
        if (f_LoadLibraryA) {
            char uReFSdll_str[] = "uReFS.dll";
            uReFSdll = f_LoadLibraryA(uReFSdll_str);
        }
    }
    __forceinline void load_uReFSv1() noexcept {
        if (f_LoadLibraryA) {
            char uReFSv1dll_str[] = "uReFSv1.dll";
            uReFSv1dll = f_LoadLibraryA(uReFSv1dll_str);
        }
    }
    __forceinline void load_ureg() noexcept {
        if (f_LoadLibraryA) {
            char uregdll_str[] = "ureg.dll";
            uregdll = f_LoadLibraryA(uregdll_str);
        }
    }
    __forceinline void load_url() noexcept {
        if (f_LoadLibraryA) {
            char urldll_str[] = "url.dll";
            urldll = f_LoadLibraryA(urldll_str);
        }
    }
    __forceinline void load_urlmon() noexcept {
        if (f_LoadLibraryA) {
            char urlmondll_str[] = "urlmon.dll";
            urlmondll = f_LoadLibraryA(urlmondll_str);
        }
    }
    __forceinline void load_UsbCApi() noexcept {
        if (f_LoadLibraryA) {
            char UsbCApidll_str[] = "UsbCApi.dll";
            UsbCApidll = f_LoadLibraryA(UsbCApidll_str);
        }
    }
    __forceinline void load_usbceip() noexcept {
        if (f_LoadLibraryA) {
            char usbceipdll_str[] = "usbceip.dll";
            usbceipdll = f_LoadLibraryA(usbceipdll_str);
        }
    }
    __forceinline void load_usbmon() noexcept {
        if (f_LoadLibraryA) {
            char usbmondll_str[] = "usbmon.dll";
            usbmondll = f_LoadLibraryA(usbmondll_str);
        }
    }
    __forceinline void load_usbperf() noexcept {
        if (f_LoadLibraryA) {
            char usbperfdll_str[] = "usbperf.dll";
            usbperfdll = f_LoadLibraryA(usbperfdll_str);
        }
    }
    __forceinline void load_UsbPmApi() noexcept {
        if (f_LoadLibraryA) {
            char UsbPmApidll_str[] = "UsbPmApi.dll";
            UsbPmApidll = f_LoadLibraryA(UsbPmApidll_str);
        }
    }
    __forceinline void load_UsbSettingsHandlers() noexcept {
        if (f_LoadLibraryA) {
            char UsbSettingsHandlersdll_str[] = "UsbSettingsHandlers.dll";
            UsbSettingsHandlersdll = f_LoadLibraryA(UsbSettingsHandlersdll_str);
        }
    }
    __forceinline void load_UsbTask() noexcept {
        if (f_LoadLibraryA) {
            char UsbTaskdll_str[] = "UsbTask.dll";
            UsbTaskdll = f_LoadLibraryA(UsbTaskdll_str);
        }
    }
    __forceinline void load_usbui() noexcept {
        if (f_LoadLibraryA) {
            char usbuidll_str[] = "usbui.dll";
            usbuidll = f_LoadLibraryA(usbuidll_str);
        }
    }
    __forceinline void load_user32() noexcept {
        if (f_LoadLibraryA) {
            char user32dll_str[] = "user32.dll";
            user32dll = f_LoadLibraryA(user32dll_str);
        }
    }
    __forceinline void load_UserAccountControlSettings() noexcept {
        if (f_LoadLibraryA) {
            char UserAccountControlSettingsdll_str[] = "UserAccountControlSettings.dll";
            UserAccountControlSettingsdll = f_LoadLibraryA(UserAccountControlSettingsdll_str);
        }
    }
    __forceinline void load_useractivitybroker() noexcept {
        if (f_LoadLibraryA) {
            char useractivitybrokerdll_str[] = "useractivitybroker.dll";
            useractivitybrokerdll = f_LoadLibraryA(useractivitybrokerdll_str);
        }
    }
    __forceinline void load_usercpl() noexcept {
        if (f_LoadLibraryA) {
            char usercpldll_str[] = "usercpl.dll";
            usercpldll = f_LoadLibraryA(usercpldll_str);
        }
    }
    __forceinline void load_UserDataAccessRes() noexcept {
        if (f_LoadLibraryA) {
            char UserDataAccessResdll_str[] = "UserDataAccessRes.dll";
            UserDataAccessResdll = f_LoadLibraryA(UserDataAccessResdll_str);
        }
    }
    __forceinline void load_UserDataAccountApis() noexcept {
        if (f_LoadLibraryA) {
            char UserDataAccountApisdll_str[] = "UserDataAccountApis.dll";
            UserDataAccountApisdll = f_LoadLibraryA(UserDataAccountApisdll_str);
        }
    }
    __forceinline void load_UserDataLanguageUtil() noexcept {
        if (f_LoadLibraryA) {
            char UserDataLanguageUtildll_str[] = "UserDataLanguageUtil.dll";
            UserDataLanguageUtildll = f_LoadLibraryA(UserDataLanguageUtildll_str);
        }
    }
    __forceinline void load_UserDataPlatformHelperUtil() noexcept {
        if (f_LoadLibraryA) {
            char UserDataPlatformHelperUtildll_str[] = "UserDataPlatformHelperUtil.dll";
            UserDataPlatformHelperUtildll = f_LoadLibraryA(UserDataPlatformHelperUtildll_str);
        }
    }
    __forceinline void load_UserDataService() noexcept {
        if (f_LoadLibraryA) {
            char UserDataServicedll_str[] = "UserDataService.dll";
            UserDataServicedll = f_LoadLibraryA(UserDataServicedll_str);
        }
    }
    __forceinline void load_UserDataTimeUtil() noexcept {
        if (f_LoadLibraryA) {
            char UserDataTimeUtildll_str[] = "UserDataTimeUtil.dll";
            UserDataTimeUtildll = f_LoadLibraryA(UserDataTimeUtildll_str);
        }
    }
    __forceinline void load_UserDataTypeHelperUtil() noexcept {
        if (f_LoadLibraryA) {
            char UserDataTypeHelperUtildll_str[] = "UserDataTypeHelperUtil.dll";
            UserDataTypeHelperUtildll = f_LoadLibraryA(UserDataTypeHelperUtildll_str);
        }
    }
    __forceinline void load_UserDeviceRegistration() noexcept {
        if (f_LoadLibraryA) {
            char UserDeviceRegistrationdll_str[] = "UserDeviceRegistration.dll";
            UserDeviceRegistrationdll = f_LoadLibraryA(UserDeviceRegistrationdll_str);
        }
    }
    __forceinline void load_UserDeviceRegistrationNgc() noexcept {
        if (f_LoadLibraryA) {
            char UserDeviceRegistrationNgcdll_str[] = "UserDeviceRegistration.Ngc.dll";
            UserDeviceRegistrationNgcdll = f_LoadLibraryA(UserDeviceRegistrationNgcdll_str);
        }
    }
    __forceinline void load_userenv() noexcept {
        if (f_LoadLibraryA) {
            char userenvdll_str[] = "userenv.dll";
            userenvdll = f_LoadLibraryA(userenvdll_str);
        }
    }
    __forceinline void load_userinitext() noexcept {
        if (f_LoadLibraryA) {
            char userinitextdll_str[] = "userinitext.dll";
            userinitextdll = f_LoadLibraryA(userinitextdll_str);
        }
    }
    __forceinline void load_UserLanguageProfileCallback() noexcept {
        if (f_LoadLibraryA) {
            char UserLanguageProfileCallbackdll_str[] = "UserLanguageProfileCallback.dll";
            UserLanguageProfileCallbackdll = f_LoadLibraryA(UserLanguageProfileCallbackdll_str);
        }
    }
    __forceinline void load_usermgr() noexcept {
        if (f_LoadLibraryA) {
            char usermgrdll_str[] = "usermgr.dll";
            usermgrdll = f_LoadLibraryA(usermgrdll_str);
        }
    }
    __forceinline void load_usermgrcli() noexcept {
        if (f_LoadLibraryA) {
            char usermgrclidll_str[] = "usermgrcli.dll";
            usermgrclidll = f_LoadLibraryA(usermgrclidll_str);
        }
    }
    __forceinline void load_UserMgrProxy() noexcept {
        if (f_LoadLibraryA) {
            char UserMgrProxydll_str[] = "UserMgrProxy.dll";
            UserMgrProxydll = f_LoadLibraryA(UserMgrProxydll_str);
        }
    }
    __forceinline void load_usoapi() noexcept {
        if (f_LoadLibraryA) {
            char usoapidll_str[] = "usoapi.dll";
            usoapidll = f_LoadLibraryA(usoapidll_str);
        }
    }
    __forceinline void load_usocoreps() noexcept {
        if (f_LoadLibraryA) {
            char usocorepsdll_str[] = "usocoreps.dll";
            usocorepsdll = f_LoadLibraryA(usocorepsdll_str);
        }
    }
    __forceinline void load_usodocked() noexcept {
        if (f_LoadLibraryA) {
            char usodockeddll_str[] = "usodocked.dll";
            usodockeddll = f_LoadLibraryA(usodockeddll_str);
        }
    }
    __forceinline void load_usosvc() noexcept {
        if (f_LoadLibraryA) {
            char usosvcdll_str[] = "usosvc.dll";
            usosvcdll = f_LoadLibraryA(usosvcdll_str);
        }
    }
    __forceinline void load_usosvcimpl() noexcept {
        if (f_LoadLibraryA) {
            char usosvcimpldll_str[] = "usosvcimpl.dll";
            usosvcimpldll = f_LoadLibraryA(usosvcimpldll_str);
        }
    }
    __forceinline void load_usp10() noexcept {
        if (f_LoadLibraryA) {
            char usp10dll_str[] = "usp10.dll";
            usp10dll = f_LoadLibraryA(usp10dll_str);
        }
    }
    __forceinline void load_ustprov() noexcept {
        if (f_LoadLibraryA) {
            char ustprovdll_str[] = "ustprov.dll";
            ustprovdll = f_LoadLibraryA(ustprovdll_str);
        }
    }
    __forceinline void load_utcapi() noexcept {
        if (f_LoadLibraryA) {
            char utcapidll_str[] = "utcapi.dll";
            utcapidll = f_LoadLibraryA(utcapidll_str);
        }
    }
    __forceinline void load_utcutil() noexcept {
        if (f_LoadLibraryA) {
            char utcutildll_str[] = "utcutil.dll";
            utcutildll = f_LoadLibraryA(utcutildll_str);
        }
    }
    __forceinline void load_utildll() noexcept {
        if (f_LoadLibraryA) {
            char utildlldll_str[] = "utildll.dll";
            utildlldll = f_LoadLibraryA(utildlldll_str);
        }
    }
    __forceinline void load_uudf() noexcept {
        if (f_LoadLibraryA) {
            char uudfdll_str[] = "uudf.dll";
            uudfdll = f_LoadLibraryA(uudfdll_str);
        }
    }
    __forceinline void load_UvcModel() noexcept {
        if (f_LoadLibraryA) {
            char UvcModeldll_str[] = "UvcModel.dll";
            UvcModeldll = f_LoadLibraryA(UvcModeldll_str);
        }
    }
    __forceinline void load_uwfcfgmgmt() noexcept {
        if (f_LoadLibraryA) {
            char uwfcfgmgmtdll_str[] = "uwfcfgmgmt.dll";
            uwfcfgmgmtdll = f_LoadLibraryA(uwfcfgmgmtdll_str);
        }
    }
    __forceinline void load_uwfcsp() noexcept {
        if (f_LoadLibraryA) {
            char uwfcspdll_str[] = "uwfcsp.dll";
            uwfcspdll = f_LoadLibraryA(uwfcspdll_str);
        }
    }
    __forceinline void load_uwfservicingapi() noexcept {
        if (f_LoadLibraryA) {
            char uwfservicingapidll_str[] = "uwfservicingapi.dll";
            uwfservicingapidll = f_LoadLibraryA(uwfservicingapidll_str);
        }
    }
    __forceinline void load_UXInit() noexcept {
        if (f_LoadLibraryA) {
            char UXInitdll_str[] = "UXInit.dll";
            UXInitdll = f_LoadLibraryA(UXInitdll_str);
        }
    }
    __forceinline void load_uxlib() noexcept {
        if (f_LoadLibraryA) {
            char uxlibdll_str[] = "uxlib.dll";
            uxlibdll = f_LoadLibraryA(uxlibdll_str);
        }
    }
    __forceinline void load_uxlibres() noexcept {
        if (f_LoadLibraryA) {
            char uxlibresdll_str[] = "uxlibres.dll";
            uxlibresdll = f_LoadLibraryA(uxlibresdll_str);
        }
    }
    __forceinline void load_uxtheme() noexcept {
        if (f_LoadLibraryA) {
            char uxthemedll_str[] = "uxtheme.dll";
            uxthemedll = f_LoadLibraryA(uxthemedll_str);
        }
    }
    __forceinline void load_vac() noexcept {
        if (f_LoadLibraryA) {
            char vacdll_str[] = "vac.dll";
            vacdll = f_LoadLibraryA(vacdll_str);
        }
    }
    __forceinline void load_VAN() noexcept {
        if (f_LoadLibraryA) {
            char VANdll_str[] = "VAN.dll";
            VANdll = f_LoadLibraryA(VANdll_str);
        }
    }
    __forceinline void load_Vault() noexcept {
        if (f_LoadLibraryA) {
            char Vaultdll_str[] = "Vault.dll";
            Vaultdll = f_LoadLibraryA(Vaultdll_str);
        }
    }
    __forceinline void load_VaultCDS() noexcept {
        if (f_LoadLibraryA) {
            char VaultCDSdll_str[] = "VaultCDS.dll";
            VaultCDSdll = f_LoadLibraryA(VaultCDSdll_str);
        }
    }
    __forceinline void load_vaultcli() noexcept {
        if (f_LoadLibraryA) {
            char vaultclidll_str[] = "vaultcli.dll";
            vaultclidll = f_LoadLibraryA(vaultclidll_str);
        }
    }
    __forceinline void load_VaultRoaming() noexcept {
        if (f_LoadLibraryA) {
            char VaultRoamingdll_str[] = "VaultRoaming.dll";
            VaultRoamingdll = f_LoadLibraryA(VaultRoamingdll_str);
        }
    }
    __forceinline void load_vaultsvc() noexcept {
        if (f_LoadLibraryA) {
            char vaultsvcdll_str[] = "vaultsvc.dll";
            vaultsvcdll = f_LoadLibraryA(vaultsvcdll_str);
        }
    }
    __forceinline void load_vbsapi() noexcept {
        if (f_LoadLibraryA) {
            char vbsapidll_str[] = "vbsapi.dll";
            vbsapidll = f_LoadLibraryA(vbsapidll_str);
        }
    }
    __forceinline void load_vbscript() noexcept {
        if (f_LoadLibraryA) {
            char vbscriptdll_str[] = "vbscript.dll";
            vbscriptdll = f_LoadLibraryA(vbscriptdll_str);
        }
    }
    __forceinline void load_vbssysprep() noexcept {
        if (f_LoadLibraryA) {
            char vbssysprepdll_str[] = "vbssysprep.dll";
            vbssysprepdll = f_LoadLibraryA(vbssysprepdll_str);
        }
    }
    __forceinline void load_vcamp110() noexcept {
        if (f_LoadLibraryA) {
            char vcamp110dll_str[] = "vcamp110.dll";
            vcamp110dll = f_LoadLibraryA(vcamp110dll_str);
        }
    }
    __forceinline void load_vcamp120() noexcept {
        if (f_LoadLibraryA) {
            char vcamp120dll_str[] = "vcamp120.dll";
            vcamp120dll = f_LoadLibraryA(vcamp120dll_str);
        }
    }
    __forceinline void load_vcamp140() noexcept {
        if (f_LoadLibraryA) {
            char vcamp140dll_str[] = "vcamp140.dll";
            vcamp140dll = f_LoadLibraryA(vcamp140dll_str);
        }
    }
    __forceinline void load_vcamp140d() noexcept {
        if (f_LoadLibraryA) {
            char vcamp140ddll_str[] = "vcamp140d.dll";
            vcamp140ddll = f_LoadLibraryA(vcamp140ddll_str);
        }
    }
    __forceinline void load_VCardParser() noexcept {
        if (f_LoadLibraryA) {
            char VCardParserdll_str[] = "VCardParser.dll";
            VCardParserdll = f_LoadLibraryA(VCardParserdll_str);
        }
    }
    __forceinline void load_vccorlib110() noexcept {
        if (f_LoadLibraryA) {
            char vccorlib110dll_str[] = "vccorlib110.dll";
            vccorlib110dll = f_LoadLibraryA(vccorlib110dll_str);
        }
    }
    __forceinline void load_vccorlib120() noexcept {
        if (f_LoadLibraryA) {
            char vccorlib120dll_str[] = "vccorlib120.dll";
            vccorlib120dll = f_LoadLibraryA(vccorlib120dll_str);
        }
    }
    __forceinline void load_vccorlib140() noexcept {
        if (f_LoadLibraryA) {
            char vccorlib140dll_str[] = "vccorlib140.dll";
            vccorlib140dll = f_LoadLibraryA(vccorlib140dll_str);
        }
    }
    __forceinline void load_vccorlib140d() noexcept {
        if (f_LoadLibraryA) {
            char vccorlib140ddll_str[] = "vccorlib140d.dll";
            vccorlib140ddll = f_LoadLibraryA(vccorlib140ddll_str);
        }
    }
    __forceinline void load_vcomp100() noexcept {
        if (f_LoadLibraryA) {
            char vcomp100dll_str[] = "vcomp100.dll";
            vcomp100dll = f_LoadLibraryA(vcomp100dll_str);
        }
    }
    __forceinline void load_vcomp110() noexcept {
        if (f_LoadLibraryA) {
            char vcomp110dll_str[] = "vcomp110.dll";
            vcomp110dll = f_LoadLibraryA(vcomp110dll_str);
        }
    }
    __forceinline void load_vcomp120() noexcept {
        if (f_LoadLibraryA) {
            char vcomp120dll_str[] = "vcomp120.dll";
            vcomp120dll = f_LoadLibraryA(vcomp120dll_str);
        }
    }
    __forceinline void load_vcomp140() noexcept {
        if (f_LoadLibraryA) {
            char vcomp140dll_str[] = "vcomp140.dll";
            vcomp140dll = f_LoadLibraryA(vcomp140dll_str);
        }
    }
    __forceinline void load_vcomp140d() noexcept {
        if (f_LoadLibraryA) {
            char vcomp140ddll_str[] = "vcomp140d.dll";
            vcomp140ddll = f_LoadLibraryA(vcomp140ddll_str);
        }
    }
    __forceinline void load_vcruntime140() noexcept {
        if (f_LoadLibraryA) {
            char vcruntime140dll_str[] = "vcruntime140.dll";
            vcruntime140dll = f_LoadLibraryA(vcruntime140dll_str);
        }
    }
    __forceinline void load_vcruntime140d() noexcept {
        if (f_LoadLibraryA) {
            char vcruntime140ddll_str[] = "vcruntime140d.dll";
            vcruntime140ddll = f_LoadLibraryA(vcruntime140ddll_str);
        }
    }
    __forceinline void load_vcruntime140_1() noexcept {
        if (f_LoadLibraryA) {
            char vcruntime140_1dll_str[] = "vcruntime140_1.dll";
            vcruntime140_1dll = f_LoadLibraryA(vcruntime140_1dll_str);
        }
    }
    __forceinline void load_vcruntime140_1d() noexcept {
        if (f_LoadLibraryA) {
            char vcruntime140_1ddll_str[] = "vcruntime140_1d.dll";
            vcruntime140_1ddll = f_LoadLibraryA(vcruntime140_1ddll_str);
        }
    }
    __forceinline void load_vcruntime140_1_clr0400() noexcept {
        if (f_LoadLibraryA) {
            char vcruntime140_1_clr0400dll_str[] = "vcruntime140_1_clr0400.dll";
            vcruntime140_1_clr0400dll = f_LoadLibraryA(vcruntime140_1_clr0400dll_str);
        }
    }
    __forceinline void load_vcruntime140_clr0400() noexcept {
        if (f_LoadLibraryA) {
            char vcruntime140_clr0400dll_str[] = "vcruntime140_clr0400.dll";
            vcruntime140_clr0400dll = f_LoadLibraryA(vcruntime140_clr0400dll_str);
        }
    }
    __forceinline void load_vcruntime140_threads() noexcept {
        if (f_LoadLibraryA) {
            char vcruntime140_threadsdll_str[] = "vcruntime140_threads.dll";
            vcruntime140_threadsdll = f_LoadLibraryA(vcruntime140_threadsdll_str);
        }
    }
    __forceinline void load_vcruntime140_threadsd() noexcept {
        if (f_LoadLibraryA) {
            char vcruntime140_threadsddll_str[] = "vcruntime140_threadsd.dll";
            vcruntime140_threadsddll = f_LoadLibraryA(vcruntime140_threadsddll_str);
        }
    }
    __forceinline void load_vdsbas() noexcept {
        if (f_LoadLibraryA) {
            char vdsbasdll_str[] = "vdsbas.dll";
            vdsbasdll = f_LoadLibraryA(vdsbasdll_str);
        }
    }
    __forceinline void load_vdsdyn() noexcept {
        if (f_LoadLibraryA) {
            char vdsdyndll_str[] = "vdsdyn.dll";
            vdsdyndll = f_LoadLibraryA(vdsdyndll_str);
        }
    }
    __forceinline void load_vdsutil() noexcept {
        if (f_LoadLibraryA) {
            char vdsutildll_str[] = "vdsutil.dll";
            vdsutildll = f_LoadLibraryA(vdsutildll_str);
        }
    }
    __forceinline void load_vdsvd() noexcept {
        if (f_LoadLibraryA) {
            char vdsvddll_str[] = "vdsvd.dll";
            vdsvddll = f_LoadLibraryA(vdsvddll_str);
        }
    }
    __forceinline void load_vds_ps() noexcept {
        if (f_LoadLibraryA) {
            char vds_psdll_str[] = "vds_ps.dll";
            vds_psdll = f_LoadLibraryA(vds_psdll_str);
        }
    }
    __forceinline void load_verifier() noexcept {
        if (f_LoadLibraryA) {
            char verifierdll_str[] = "verifier.dll";
            verifierdll = f_LoadLibraryA(verifierdll_str);
        }
    }
    __forceinline void load_version() noexcept {
        if (f_LoadLibraryA) {
            char versiondll_str[] = "version.dll";
            versiondll = f_LoadLibraryA(versiondll_str);
        }
    }
    __forceinline void load_vertdll() noexcept {
        if (f_LoadLibraryA) {
            char vertdlldll_str[] = "vertdll.dll";
            vertdlldll = f_LoadLibraryA(vertdlldll_str);
        }
    }
    __forceinline void load_vfbasics() noexcept {
        if (f_LoadLibraryA) {
            char vfbasicsdll_str[] = "vfbasics.dll";
            vfbasicsdll = f_LoadLibraryA(vfbasicsdll_str);
        }
    }
    __forceinline void load_vfcompat() noexcept {
        if (f_LoadLibraryA) {
            char vfcompatdll_str[] = "vfcompat.dll";
            vfcompatdll = f_LoadLibraryA(vfcompatdll_str);
        }
    }
    __forceinline void load_vfcuzz() noexcept {
        if (f_LoadLibraryA) {
            char vfcuzzdll_str[] = "vfcuzz.dll";
            vfcuzzdll = f_LoadLibraryA(vfcuzzdll_str);
        }
    }
    __forceinline void load_vfluapriv() noexcept {
        if (f_LoadLibraryA) {
            char vfluaprivdll_str[] = "vfluapriv.dll";
            vfluaprivdll = f_LoadLibraryA(vfluaprivdll_str);
        }
    }
    __forceinline void load_vfnet() noexcept {
        if (f_LoadLibraryA) {
            char vfnetdll_str[] = "vfnet.dll";
            vfnetdll = f_LoadLibraryA(vfnetdll_str);
        }
    }
    __forceinline void load_vfntlmless() noexcept {
        if (f_LoadLibraryA) {
            char vfntlmlessdll_str[] = "vfntlmless.dll";
            vfntlmlessdll = f_LoadLibraryA(vfntlmlessdll_str);
        }
    }
    __forceinline void load_vfnws() noexcept {
        if (f_LoadLibraryA) {
            char vfnwsdll_str[] = "vfnws.dll";
            vfnwsdll = f_LoadLibraryA(vfnwsdll_str);
        }
    }
    __forceinline void load_vfpapi() noexcept {
        if (f_LoadLibraryA) {
            char vfpapidll_str[] = "vfpapi.dll";
            vfpapidll = f_LoadLibraryA(vfpapidll_str);
        }
    }
    __forceinline void load_vfprint() noexcept {
        if (f_LoadLibraryA) {
            char vfprintdll_str[] = "vfprint.dll";
            vfprintdll = f_LoadLibraryA(vfprintdll_str);
        }
    }
    __forceinline void load_vfprintpthelper() noexcept {
        if (f_LoadLibraryA) {
            char vfprintpthelperdll_str[] = "vfprintpthelper.dll";
            vfprintpthelperdll = f_LoadLibraryA(vfprintpthelperdll_str);
        }
    }
    __forceinline void load_vfrdvcompat() noexcept {
        if (f_LoadLibraryA) {
            char vfrdvcompatdll_str[] = "vfrdvcompat.dll";
            vfrdvcompatdll = f_LoadLibraryA(vfrdvcompatdll_str);
        }
    }
    __forceinline void load_vfuprov() noexcept {
        if (f_LoadLibraryA) {
            char vfuprovdll_str[] = "vfuprov.dll";
            vfuprovdll = f_LoadLibraryA(vfuprovdll_str);
        }
    }
    __forceinline void load_vfwwdm32() noexcept {
        if (f_LoadLibraryA) {
            char vfwwdm32dll_str[] = "vfwwdm32.dll";
            vfwwdm32dll = f_LoadLibraryA(vfwwdm32dll_str);
        }
    }
    __forceinline void load_VhfUm() noexcept {
        if (f_LoadLibraryA) {
            char VhfUmdll_str[] = "VhfUm.dll";
            VhfUmdll = f_LoadLibraryA(VhfUmdll_str);
        }
    }
    __forceinline void load_vid() noexcept {
        if (f_LoadLibraryA) {
            char viddll_str[] = "vid.dll";
            viddll = f_LoadLibraryA(viddll_str);
        }
    }
    __forceinline void load_VideoHandlers() noexcept {
        if (f_LoadLibraryA) {
            char VideoHandlersdll_str[] = "VideoHandlers.dll";
            VideoHandlersdll = f_LoadLibraryA(VideoHandlersdll_str);
        }
    }
    __forceinline void load_virtdisk() noexcept {
        if (f_LoadLibraryA) {
            char virtdiskdll_str[] = "virtdisk.dll";
            virtdiskdll = f_LoadLibraryA(virtdiskdll_str);
        }
    }
    __forceinline void load_VirtualMonitorManager() noexcept {
        if (f_LoadLibraryA) {
            char VirtualMonitorManagerdll_str[] = "VirtualMonitorManager.dll";
            VirtualMonitorManagerdll = f_LoadLibraryA(VirtualMonitorManagerdll_str);
        }
    }
    __forceinline void load_VirtualSurroundApo() noexcept {
        if (f_LoadLibraryA) {
            char VirtualSurroundApodll_str[] = "VirtualSurroundApo.dll";
            VirtualSurroundApodll = f_LoadLibraryA(VirtualSurroundApodll_str);
        }
    }
    __forceinline void load_VmApplicationHealthMonitorProxy() noexcept {
        if (f_LoadLibraryA) {
            char VmApplicationHealthMonitorProxydll_str[] = "VmApplicationHealthMonitorProxy.dll";
            VmApplicationHealthMonitorProxydll = f_LoadLibraryA(VmApplicationHealthMonitorProxydll_str);
        }
    }
    __forceinline void load_vmbuspipe() noexcept {
        if (f_LoadLibraryA) {
            char vmbuspipedll_str[] = "vmbuspipe.dll";
            vmbuspipedll = f_LoadLibraryA(vmbuspipedll_str);
        }
    }
    __forceinline void load_vmbuspiper() noexcept {
        if (f_LoadLibraryA) {
            char vmbuspiperdll_str[] = "vmbuspiper.dll";
            vmbuspiperdll = f_LoadLibraryA(vmbuspiperdll_str);
        }
    }
    __forceinline void load_vmbusvdev() noexcept {
        if (f_LoadLibraryA) {
            char vmbusvdevdll_str[] = "vmbusvdev.dll";
            vmbusvdevdll = f_LoadLibraryA(vmbusvdevdll_str);
        }
    }
    __forceinline void load_vmchipset() noexcept {
        if (f_LoadLibraryA) {
            char vmchipsetdll_str[] = "vmchipset.dll";
            vmchipsetdll = f_LoadLibraryA(vmchipsetdll_str);
        }
    }
    __forceinline void load_vmcompute() noexcept {
        if (f_LoadLibraryA) {
            char vmcomputedll_str[] = "vmcompute.dll";
            vmcomputedll = f_LoadLibraryA(vmcomputedll_str);
        }
    }
    __forceinline void load_vmcomputeeventlog() noexcept {
        if (f_LoadLibraryA) {
            char vmcomputeeventlogdll_str[] = "vmcomputeeventlog.dll";
            vmcomputeeventlogdll = f_LoadLibraryA(vmcomputeeventlogdll_str);
        }
    }
    __forceinline void load_VmCrashDump() noexcept {
        if (f_LoadLibraryA) {
            char VmCrashDumpdll_str[] = "VmCrashDump.dll";
            VmCrashDumpdll = f_LoadLibraryA(VmCrashDumpdll_str);
        }
    }
    __forceinline void load_VmDataStore() noexcept {
        if (f_LoadLibraryA) {
            char VmDataStoredll_str[] = "VmDataStore.dll";
            VmDataStoredll = f_LoadLibraryA(VmDataStoredll_str);
        }
    }
    __forceinline void load_vmdebug() noexcept {
        if (f_LoadLibraryA) {
            char vmdebugdll_str[] = "vmdebug.dll";
            vmdebugdll = f_LoadLibraryA(vmdebugdll_str);
        }
    }
    __forceinline void load_vmdevicehost() noexcept {
        if (f_LoadLibraryA) {
            char vmdevicehostdll_str[] = "vmdevicehost.dll";
            vmdevicehostdll = f_LoadLibraryA(vmdevicehostdll_str);
        }
    }
    __forceinline void load_vmdynmem() noexcept {
        if (f_LoadLibraryA) {
            char vmdynmemdll_str[] = "vmdynmem.dll";
            vmdynmemdll = f_LoadLibraryA(vmdynmemdll_str);
        }
    }
    __forceinline void load_vmemulateddevices() noexcept {
        if (f_LoadLibraryA) {
            char vmemulateddevicesdll_str[] = "vmemulateddevices.dll";
            vmemulateddevicesdll = f_LoadLibraryA(vmemulateddevicesdll_str);
        }
    }
    __forceinline void load_VmEmulatedNic() noexcept {
        if (f_LoadLibraryA) {
            char VmEmulatedNicdll_str[] = "VmEmulatedNic.dll";
            VmEmulatedNicdll = f_LoadLibraryA(VmEmulatedNicdll_str);
        }
    }
    __forceinline void load_VmEmulatedStorage() noexcept {
        if (f_LoadLibraryA) {
            char VmEmulatedStoragedll_str[] = "VmEmulatedStorage.dll";
            VmEmulatedStoragedll = f_LoadLibraryA(VmEmulatedStoragedll_str);
        }
    }
    __forceinline void load_vmfirmware() noexcept {
        if (f_LoadLibraryA) {
            char vmfirmwaredll_str[] = "vmfirmware.dll";
            vmfirmwaredll = f_LoadLibraryA(vmfirmwaredll_str);
        }
    }
    __forceinline void load_vmfirmwarehcl() noexcept {
        if (f_LoadLibraryA) {
            char vmfirmwarehcldll_str[] = "vmfirmwarehcl.dll";
            vmfirmwarehcldll = f_LoadLibraryA(vmfirmwarehcldll_str);
        }
    }
    __forceinline void load_vmfirmwarepcat() noexcept {
        if (f_LoadLibraryA) {
            char vmfirmwarepcatdll_str[] = "vmfirmwarepcat.dll";
            vmfirmwarepcatdll = f_LoadLibraryA(vmfirmwarepcatdll_str);
        }
    }
    __forceinline void load_vmflexio() noexcept {
        if (f_LoadLibraryA) {
            char vmflexiodll_str[] = "vmflexio.dll";
            vmflexiodll = f_LoadLibraryA(vmflexiodll_str);
        }
    }
    __forceinline void load_vmhbmgmt() noexcept {
        if (f_LoadLibraryA) {
            char vmhbmgmtdll_str[] = "vmhbmgmt.dll";
            vmhbmgmtdll = f_LoadLibraryA(vmhbmgmtdll_str);
        }
    }
    __forceinline void load_vmhgs() noexcept {
        if (f_LoadLibraryA) {
            char vmhgsdll_str[] = "vmhgs.dll";
            vmhgsdll = f_LoadLibraryA(vmhgsdll_str);
        }
    }
    __forceinline void load_vmiccore() noexcept {
        if (f_LoadLibraryA) {
            char vmiccoredll_str[] = "vmiccore.dll";
            vmiccoredll = f_LoadLibraryA(vmiccoredll_str);
        }
    }
    __forceinline void load_vmicrdv() noexcept {
        if (f_LoadLibraryA) {
            char vmicrdvdll_str[] = "vmicrdv.dll";
            vmicrdvdll = f_LoadLibraryA(vmicrdvdll_str);
        }
    }
    __forceinline void load_vmictimeprovider() noexcept {
        if (f_LoadLibraryA) {
            char vmictimeproviderdll_str[] = "vmictimeprovider.dll";
            vmictimeproviderdll = f_LoadLibraryA(vmictimeproviderdll_str);
        }
    }
    __forceinline void load_vmicvdev() noexcept {
        if (f_LoadLibraryA) {
            char vmicvdevdll_str[] = "vmicvdev.dll";
            vmicvdevdll = f_LoadLibraryA(vmicvdevdll_str);
        }
    }
    __forceinline void load_vmmsprox() noexcept {
        if (f_LoadLibraryA) {
            char vmmsproxdll_str[] = "vmmsprox.dll";
            vmmsproxdll = f_LoadLibraryA(vmmsproxdll_str);
        }
    }
    __forceinline void load_vmpmem() noexcept {
        if (f_LoadLibraryA) {
            char vmpmemdll_str[] = "vmpmem.dll";
            vmpmemdll = f_LoadLibraryA(vmpmemdll_str);
        }
    }
    __forceinline void load_vmprox() noexcept {
        if (f_LoadLibraryA) {
            char vmproxdll_str[] = "vmprox.dll";
            vmproxdll = f_LoadLibraryA(vmproxdll_str);
        }
    }
    __forceinline void load_vmrdvcore() noexcept {
        if (f_LoadLibraryA) {
            char vmrdvcoredll_str[] = "vmrdvcore.dll";
            vmrdvcoredll = f_LoadLibraryA(vmrdvcoredll_str);
        }
    }
    __forceinline void load_vmserial() noexcept {
        if (f_LoadLibraryA) {
            char vmserialdll_str[] = "vmserial.dll";
            vmserialdll = f_LoadLibraryA(vmserialdll_str);
        }
    }
    __forceinline void load_vmsif() noexcept {
        if (f_LoadLibraryA) {
            char vmsifdll_str[] = "vmsif.dll";
            vmsifdll = f_LoadLibraryA(vmsifdll_str);
        }
    }
    __forceinline void load_vmsifcore() noexcept {
        if (f_LoadLibraryA) {
            char vmsifcoredll_str[] = "vmsifcore.dll";
            vmsifcoredll = f_LoadLibraryA(vmsifcoredll_str);
        }
    }
    __forceinline void load_vmsifproxystub() noexcept {
        if (f_LoadLibraryA) {
            char vmsifproxystubdll_str[] = "vmsifproxystub.dll";
            vmsifproxystubdll = f_LoadLibraryA(vmsifproxystubdll_str);
        }
    }
    __forceinline void load_vmsmb() noexcept {
        if (f_LoadLibraryA) {
            char vmsmbdll_str[] = "vmsmb.dll";
            vmsmbdll = f_LoadLibraryA(vmsmbdll_str);
        }
    }
    __forceinline void load_vmstaging() noexcept {
        if (f_LoadLibraryA) {
            char vmstagingdll_str[] = "vmstaging.dll";
            vmstagingdll = f_LoadLibraryA(vmstagingdll_str);
        }
    }
    __forceinline void load_vmsynthfcvdev() noexcept {
        if (f_LoadLibraryA) {
            char vmsynthfcvdevdll_str[] = "vmsynthfcvdev.dll";
            vmsynthfcvdevdll = f_LoadLibraryA(vmsynthfcvdevdll_str);
        }
    }
    __forceinline void load_VmSynthNic() noexcept {
        if (f_LoadLibraryA) {
            char VmSynthNicdll_str[] = "VmSynthNic.dll";
            VmSynthNicdll = f_LoadLibraryA(VmSynthNicdll_str);
        }
    }
    __forceinline void load_vmsynthstor() noexcept {
        if (f_LoadLibraryA) {
            char vmsynthstordll_str[] = "vmsynthstor.dll";
            vmsynthstordll = f_LoadLibraryA(vmsynthstordll_str);
        }
    }
    __forceinline void load_vmtpm() noexcept {
        if (f_LoadLibraryA) {
            char vmtpmdll_str[] = "vmtpm.dll";
            vmtpmdll = f_LoadLibraryA(vmtpmdll_str);
        }
    }
    __forceinline void load_vmuidevices() noexcept {
        if (f_LoadLibraryA) {
            char vmuidevicesdll_str[] = "vmuidevices.dll";
            vmuidevicesdll = f_LoadLibraryA(vmuidevicesdll_str);
        }
    }
    __forceinline void load_vmusrv() noexcept {
        if (f_LoadLibraryA) {
            char vmusrvdll_str[] = "vmusrv.dll";
            vmusrvdll = f_LoadLibraryA(vmusrvdll_str);
        }
    }
    __forceinline void load_vmvirtio() noexcept {
        if (f_LoadLibraryA) {
            char vmvirtiodll_str[] = "vmvirtio.dll";
            vmvirtiodll = f_LoadLibraryA(vmvirtiodll_str);
        }
    }
    __forceinline void load_vmvpci() noexcept {
        if (f_LoadLibraryA) {
            char vmvpcidll_str[] = "vmvpci.dll";
            vmvpcidll = f_LoadLibraryA(vmvpcidll_str);
        }
    }
    __forceinline void load_vmwpctrl() noexcept {
        if (f_LoadLibraryA) {
            char vmwpctrldll_str[] = "vmwpctrl.dll";
            vmwpctrldll = f_LoadLibraryA(vmwpctrldll_str);
        }
    }
    __forceinline void load_vmwpevents() noexcept {
        if (f_LoadLibraryA) {
            char vmwpeventsdll_str[] = "vmwpevents.dll";
            vmwpeventsdll = f_LoadLibraryA(vmwpeventsdll_str);
        }
    }
    __forceinline void load_VocabRoamingHandler() noexcept {
        if (f_LoadLibraryA) {
            char VocabRoamingHandlerdll_str[] = "VocabRoamingHandler.dll";
            VocabRoamingHandlerdll = f_LoadLibraryA(VocabRoamingHandlerdll_str);
        }
    }
    __forceinline void load_VoiceActivationManager() noexcept {
        if (f_LoadLibraryA) {
            char VoiceActivationManagerdll_str[] = "VoiceActivationManager.dll";
            VoiceActivationManagerdll = f_LoadLibraryA(VoiceActivationManagerdll_str);
        }
    }
    __forceinline void load_VoipRT() noexcept {
        if (f_LoadLibraryA) {
            char VoipRTdll_str[] = "VoipRT.dll";
            VoipRTdll = f_LoadLibraryA(VoipRTdll_str);
        }
    }
    __forceinline void load_vp9fs() noexcept {
        if (f_LoadLibraryA) {
            char vp9fsdll_str[] = "vp9fs.dll";
            vp9fsdll = f_LoadLibraryA(vp9fsdll_str);
        }
    }
    __forceinline void load_vpcievdev() noexcept {
        if (f_LoadLibraryA) {
            char vpcievdevdll_str[] = "vpcievdev.dll";
            vpcievdevdll = f_LoadLibraryA(vpcievdevdll_str);
        }
    }
    __forceinline void load_vpnike() noexcept {
        if (f_LoadLibraryA) {
            char vpnikedll_str[] = "vpnike.dll";
            vpnikedll = f_LoadLibraryA(vpnikedll_str);
        }
    }
    __forceinline void load_vpnikeapi() noexcept {
        if (f_LoadLibraryA) {
            char vpnikeapidll_str[] = "vpnikeapi.dll";
            vpnikeapidll = f_LoadLibraryA(vpnikeapidll_str);
        }
    }
    __forceinline void load_VpnSohDesktop() noexcept {
        if (f_LoadLibraryA) {
            char VpnSohDesktopdll_str[] = "VpnSohDesktop.dll";
            VpnSohDesktopdll = f_LoadLibraryA(VpnSohDesktopdll_str);
        }
    }
    __forceinline void load_VPNv2CSP() noexcept {
        if (f_LoadLibraryA) {
            char VPNv2CSPdll_str[] = "VPNv2CSP.dll";
            VPNv2CSPdll = f_LoadLibraryA(VPNv2CSPdll_str);
        }
    }
    __forceinline void load_VrdUmed() noexcept {
        if (f_LoadLibraryA) {
            char VrdUmeddll_str[] = "VrdUmed.dll";
            VrdUmeddll = f_LoadLibraryA(VrdUmeddll_str);
        }
    }
    __forceinline void load_vrfcore() noexcept {
        if (f_LoadLibraryA) {
            char vrfcoredll_str[] = "vrfcore.dll";
            vrfcoredll = f_LoadLibraryA(vrfcoredll_str);
        }
    }
    __forceinline void load_VscMgrPS() noexcept {
        if (f_LoadLibraryA) {
            char VscMgrPSdll_str[] = "VscMgrPS.dll";
            VscMgrPSdll = f_LoadLibraryA(VscMgrPSdll_str);
        }
    }
    __forceinline void load_vsconfig() noexcept {
        if (f_LoadLibraryA) {
            char vsconfigdll_str[] = "vsconfig.dll";
            vsconfigdll = f_LoadLibraryA(vsconfigdll_str);
        }
    }
    __forceinline void load_vscover170() noexcept {
        if (f_LoadLibraryA) {
            char vscover170dll_str[] = "vscover170.dll";
            vscover170dll = f_LoadLibraryA(vscover170dll_str);
        }
    }
    __forceinline void load_VSD3DWARPDebug() noexcept {
        if (f_LoadLibraryA) {
            char VSD3DWARPDebugdll_str[] = "VSD3DWARPDebug.dll";
            VSD3DWARPDebugdll = f_LoadLibraryA(VSD3DWARPDebugdll_str);
        }
    }
    __forceinline void load_VsGraphicsCapture() noexcept {
        if (f_LoadLibraryA) {
            char VsGraphicsCapturedll_str[] = "VsGraphicsCapture.dll";
            VsGraphicsCapturedll = f_LoadLibraryA(VsGraphicsCapturedll_str);
        }
    }
    __forceinline void load_VsGraphicsExperiment() noexcept {
        if (f_LoadLibraryA) {
            char VsGraphicsExperimentdll_str[] = "VsGraphicsExperiment.dll";
            VsGraphicsExperimentdll = f_LoadLibraryA(VsGraphicsExperimentdll_str);
        }
    }
    __forceinline void load_VsGraphicsHelper() noexcept {
        if (f_LoadLibraryA) {
            char VsGraphicsHelperdll_str[] = "VsGraphicsHelper.dll";
            VsGraphicsHelperdll = f_LoadLibraryA(VsGraphicsHelperdll_str);
        }
    }
    __forceinline void load_VsGraphicsProxyStub() noexcept {
        if (f_LoadLibraryA) {
            char VsGraphicsProxyStubdll_str[] = "VsGraphicsProxyStub.dll";
            VsGraphicsProxyStubdll = f_LoadLibraryA(VsGraphicsProxyStubdll_str);
        }
    }
    __forceinline void load_VSPerf170() noexcept {
        if (f_LoadLibraryA) {
            char VSPerf170dll_str[] = "VSPerf170.dll";
            VSPerf170dll = f_LoadLibraryA(VSPerf170dll_str);
        }
    }
    __forceinline void load_vssapi() noexcept {
        if (f_LoadLibraryA) {
            char vssapidll_str[] = "vssapi.dll";
            vssapidll = f_LoadLibraryA(vssapidll_str);
        }
    }
    __forceinline void load_vsstrace() noexcept {
        if (f_LoadLibraryA) {
            char vsstracedll_str[] = "vsstrace.dll";
            vsstracedll = f_LoadLibraryA(vsstracedll_str);
        }
    }
    __forceinline void load_vss_ps() noexcept {
        if (f_LoadLibraryA) {
            char vss_psdll_str[] = "vss_ps.dll";
            vss_psdll = f_LoadLibraryA(vss_psdll_str);
        }
    }
    __forceinline void load_vulkan_1_999_0_0_0() noexcept {
        if (f_LoadLibraryA) {
            char vulkan_1_999_0_0_0dll_str[] = "vulkan-1-999-0-0-0.dll";
            vulkan_1_999_0_0_0dll = f_LoadLibraryA(vulkan_1_999_0_0_0dll_str);
        }
    }
    __forceinline void load_vulkan_1() noexcept {
        if (f_LoadLibraryA) {
            char vulkan_1dll_str[] = "vulkan-1.dll";
            vulkan_1dll = f_LoadLibraryA(vulkan_1dll_str);
        }
    }
    __forceinline void load_w32time() noexcept {
        if (f_LoadLibraryA) {
            char w32timedll_str[] = "w32time.dll";
            w32timedll = f_LoadLibraryA(w32timedll_str);
        }
    }
    __forceinline void load_w32topl() noexcept {
        if (f_LoadLibraryA) {
            char w32topldll_str[] = "w32topl.dll";
            w32topldll = f_LoadLibraryA(w32topldll_str);
        }
    }
    __forceinline void load_WaaSAssessment() noexcept {
        if (f_LoadLibraryA) {
            char WaaSAssessmentdll_str[] = "WaaSAssessment.dll";
            WaaSAssessmentdll = f_LoadLibraryA(WaaSAssessmentdll_str);
        }
    }
    __forceinline void load_WaaSMedicPS() noexcept {
        if (f_LoadLibraryA) {
            char WaaSMedicPSdll_str[] = "WaaSMedicPS.dll";
            WaaSMedicPSdll = f_LoadLibraryA(WaaSMedicPSdll_str);
        }
    }
    __forceinline void load_WaaSMedicSvc() noexcept {
        if (f_LoadLibraryA) {
            char WaaSMedicSvcdll_str[] = "WaaSMedicSvc.dll";
            WaaSMedicSvcdll = f_LoadLibraryA(WaaSMedicSvcdll_str);
        }
    }
    __forceinline void load_WABSyncProvider() noexcept {
        if (f_LoadLibraryA) {
            char WABSyncProviderdll_str[] = "WABSyncProvider.dll";
            WABSyncProviderdll = f_LoadLibraryA(WABSyncProviderdll_str);
        }
    }
    __forceinline void load_WalletBackgroundServiceProxy() noexcept {
        if (f_LoadLibraryA) {
            char WalletBackgroundServiceProxydll_str[] = "WalletBackgroundServiceProxy.dll";
            WalletBackgroundServiceProxydll = f_LoadLibraryA(WalletBackgroundServiceProxydll_str);
        }
    }
    __forceinline void load_WalletProxy() noexcept {
        if (f_LoadLibraryA) {
            char WalletProxydll_str[] = "WalletProxy.dll";
            WalletProxydll = f_LoadLibraryA(WalletProxydll_str);
        }
    }
    __forceinline void load_WalletService() noexcept {
        if (f_LoadLibraryA) {
            char WalletServicedll_str[] = "WalletService.dll";
            WalletServicedll = f_LoadLibraryA(WalletServicedll_str);
        }
    }
    __forceinline void load_wamregps() noexcept {
        if (f_LoadLibraryA) {
            char wamregpsdll_str[] = "wamregps.dll";
            wamregpsdll = f_LoadLibraryA(wamregpsdll_str);
        }
    }
    __forceinline void load_wavemsp() noexcept {
        if (f_LoadLibraryA) {
            char wavemspdll_str[] = "wavemsp.dll";
            wavemspdll = f_LoadLibraryA(wavemspdll_str);
        }
    }
    __forceinline void load_wbemcomn() noexcept {
        if (f_LoadLibraryA) {
            char wbemcomndll_str[] = "wbemcomn.dll";
            wbemcomndll = f_LoadLibraryA(wbemcomndll_str);
        }
    }
    __forceinline void load_wbiosrvc() noexcept {
        if (f_LoadLibraryA) {
            char wbiosrvcdll_str[] = "wbiosrvc.dll";
            wbiosrvcdll = f_LoadLibraryA(wbiosrvcdll_str);
        }
    }
    __forceinline void load_wci() noexcept {
        if (f_LoadLibraryA) {
            char wcidll_str[] = "wci.dll";
            wcidll = f_LoadLibraryA(wcidll_str);
        }
    }
    __forceinline void load_wcimage() noexcept {
        if (f_LoadLibraryA) {
            char wcimagedll_str[] = "wcimage.dll";
            wcimagedll = f_LoadLibraryA(wcimagedll_str);
        }
    }
    __forceinline void load_wcmapi() noexcept {
        if (f_LoadLibraryA) {
            char wcmapidll_str[] = "wcmapi.dll";
            wcmapidll = f_LoadLibraryA(wcmapidll_str);
        }
    }
    __forceinline void load_wcmcsp() noexcept {
        if (f_LoadLibraryA) {
            char wcmcspdll_str[] = "wcmcsp.dll";
            wcmcspdll = f_LoadLibraryA(wcmcspdll_str);
        }
    }
    __forceinline void load_wcmsvc() noexcept {
        if (f_LoadLibraryA) {
            char wcmsvcdll_str[] = "wcmsvc.dll";
            wcmsvcdll = f_LoadLibraryA(wcmsvcdll_str);
        }
    }
    __forceinline void load_WcnApi() noexcept {
        if (f_LoadLibraryA) {
            char WcnApidll_str[] = "WcnApi.dll";
            WcnApidll = f_LoadLibraryA(WcnApidll_str);
        }
    }
    __forceinline void load_wcncsvc() noexcept {
        if (f_LoadLibraryA) {
            char wcncsvcdll_str[] = "wcncsvc.dll";
            wcncsvcdll = f_LoadLibraryA(wcncsvcdll_str);
        }
    }
    __forceinline void load_WcnEapAuthProxy() noexcept {
        if (f_LoadLibraryA) {
            char WcnEapAuthProxydll_str[] = "WcnEapAuthProxy.dll";
            WcnEapAuthProxydll = f_LoadLibraryA(WcnEapAuthProxydll_str);
        }
    }
    __forceinline void load_WcnEapPeerProxy() noexcept {
        if (f_LoadLibraryA) {
            char WcnEapPeerProxydll_str[] = "WcnEapPeerProxy.dll";
            WcnEapPeerProxydll = f_LoadLibraryA(WcnEapPeerProxydll_str);
        }
    }
    __forceinline void load_WcnNetsh() noexcept {
        if (f_LoadLibraryA) {
            char WcnNetshdll_str[] = "WcnNetsh.dll";
            WcnNetshdll = f_LoadLibraryA(WcnNetshdll_str);
        }
    }
    __forceinline void load_wcnwiz() noexcept {
        if (f_LoadLibraryA) {
            char wcnwizdll_str[] = "wcnwiz.dll";
            wcnwizdll = f_LoadLibraryA(wcnwizdll_str);
        }
    }
    __forceinline void load_wc_storage() noexcept {
        if (f_LoadLibraryA) {
            char wc_storagedll_str[] = "wc_storage.dll";
            wc_storagedll = f_LoadLibraryA(wc_storagedll_str);
        }
    }
    __forceinline void load_wdc() noexcept {
        if (f_LoadLibraryA) {
            char wdcdll_str[] = "wdc.dll";
            wdcdll = f_LoadLibraryA(wdcdll_str);
        }
    }
    __forceinline void load_wdi() noexcept {
        if (f_LoadLibraryA) {
            char wdidll_str[] = "wdi.dll";
            wdidll = f_LoadLibraryA(wdidll_str);
        }
    }
    __forceinline void load_wdigest() noexcept {
        if (f_LoadLibraryA) {
            char wdigestdll_str[] = "wdigest.dll";
            wdigestdll = f_LoadLibraryA(wdigestdll_str);
        }
    }
    __forceinline void load_wdp() noexcept {
        if (f_LoadLibraryA) {
            char wdpdll_str[] = "wdp.dll";
            wdpdll = f_LoadLibraryA(wdpdll_str);
        }
    }
    __forceinline void load_wdscore() noexcept {
        if (f_LoadLibraryA) {
            char wdscoredll_str[] = "wdscore.dll";
            wdscoredll = f_LoadLibraryA(wdscoredll_str);
        }
    }
    __forceinline void load_webauthn() noexcept {
        if (f_LoadLibraryA) {
            char webauthndll_str[] = "webauthn.dll";
            webauthndll = f_LoadLibraryA(webauthndll_str);
        }
    }
    __forceinline void load_WebcamUi() noexcept {
        if (f_LoadLibraryA) {
            char WebcamUidll_str[] = "WebcamUi.dll";
            WebcamUidll = f_LoadLibraryA(WebcamUidll_str);
        }
    }
    __forceinline void load_webcheck() noexcept {
        if (f_LoadLibraryA) {
            char webcheckdll_str[] = "webcheck.dll";
            webcheckdll = f_LoadLibraryA(webcheckdll_str);
        }
    }
    __forceinline void load_WebClnt() noexcept {
        if (f_LoadLibraryA) {
            char WebClntdll_str[] = "WebClnt.dll";
            WebClntdll = f_LoadLibraryA(WebClntdll_str);
        }
    }
    __forceinline void load_webio() noexcept {
        if (f_LoadLibraryA) {
            char webiodll_str[] = "webio.dll";
            webiodll = f_LoadLibraryA(webiodll_str);
        }
    }
    __forceinline void load_WebManagementUser() noexcept {
        if (f_LoadLibraryA) {
            char WebManagementUserdll_str[] = "WebManagementUser.dll";
            WebManagementUserdll = f_LoadLibraryA(WebManagementUserdll_str);
        }
    }
    __forceinline void load_webplatstorageserver() noexcept {
        if (f_LoadLibraryA) {
            char webplatstorageserverdll_str[] = "webplatstorageserver.dll";
            webplatstorageserverdll = f_LoadLibraryA(webplatstorageserverdll_str);
        }
    }
    __forceinline void load_WebRuntimeManager() noexcept {
        if (f_LoadLibraryA) {
            char WebRuntimeManagerdll_str[] = "WebRuntimeManager.dll";
            WebRuntimeManagerdll = f_LoadLibraryA(WebRuntimeManagerdll_str);
        }
    }
    __forceinline void load_webservices() noexcept {
        if (f_LoadLibraryA) {
            char webservicesdll_str[] = "webservices.dll";
            webservicesdll = f_LoadLibraryA(webservicesdll_str);
        }
    }
    __forceinline void load_Websocket() noexcept {
        if (f_LoadLibraryA) {
            char Websocketdll_str[] = "Websocket.dll";
            Websocketdll = f_LoadLibraryA(Websocketdll_str);
        }
    }
    __forceinline void load_webthreatdefsvc() noexcept {
        if (f_LoadLibraryA) {
            char webthreatdefsvcdll_str[] = "webthreatdefsvc.dll";
            webthreatdefsvcdll = f_LoadLibraryA(webthreatdefsvcdll_str);
        }
    }
    __forceinline void load_webthreatdefusersvc() noexcept {
        if (f_LoadLibraryA) {
            char webthreatdefusersvcdll_str[] = "webthreatdefusersvc.dll";
            webthreatdefusersvcdll = f_LoadLibraryA(webthreatdefusersvcdll_str);
        }
    }
    __forceinline void load_wecapi() noexcept {
        if (f_LoadLibraryA) {
            char wecapidll_str[] = "wecapi.dll";
            wecapidll = f_LoadLibraryA(wecapidll_str);
        }
    }
    __forceinline void load_wecsvc() noexcept {
        if (f_LoadLibraryA) {
            char wecsvcdll_str[] = "wecsvc.dll";
            wecsvcdll = f_LoadLibraryA(wecsvcdll_str);
        }
    }
    __forceinline void load_wephostsvc() noexcept {
        if (f_LoadLibraryA) {
            char wephostsvcdll_str[] = "wephostsvc.dll";
            wephostsvcdll = f_LoadLibraryA(wephostsvcdll_str);
        }
    }
    __forceinline void load_wer() noexcept {
        if (f_LoadLibraryA) {
            char werdll_str[] = "wer.dll";
            werdll = f_LoadLibraryA(werdll_str);
        }
    }
    __forceinline void load_werconcpl() noexcept {
        if (f_LoadLibraryA) {
            char werconcpldll_str[] = "werconcpl.dll";
            werconcpldll = f_LoadLibraryA(werconcpldll_str);
        }
    }
    __forceinline void load_wercplsupport() noexcept {
        if (f_LoadLibraryA) {
            char wercplsupportdll_str[] = "wercplsupport.dll";
            wercplsupportdll = f_LoadLibraryA(wercplsupportdll_str);
        }
    }
    __forceinline void load_werdiagcontroller() noexcept {
        if (f_LoadLibraryA) {
            char werdiagcontrollerdll_str[] = "werdiagcontroller.dll";
            werdiagcontrollerdll = f_LoadLibraryA(werdiagcontrollerdll_str);
        }
    }
    __forceinline void load_WerEnc() noexcept {
        if (f_LoadLibraryA) {
            char WerEncdll_str[] = "WerEnc.dll";
            WerEncdll = f_LoadLibraryA(WerEncdll_str);
        }
    }
    __forceinline void load_weretw() noexcept {
        if (f_LoadLibraryA) {
            char weretwdll_str[] = "weretw.dll";
            weretwdll = f_LoadLibraryA(weretwdll_str);
        }
    }
    __forceinline void load_wersvc() noexcept {
        if (f_LoadLibraryA) {
            char wersvcdll_str[] = "wersvc.dll";
            wersvcdll = f_LoadLibraryA(wersvcdll_str);
        }
    }
    __forceinline void load_werui() noexcept {
        if (f_LoadLibraryA) {
            char weruidll_str[] = "werui.dll";
            weruidll = f_LoadLibraryA(weruidll_str);
        }
    }
    __forceinline void load_wevtapi() noexcept {
        if (f_LoadLibraryA) {
            char wevtapidll_str[] = "wevtapi.dll";
            wevtapidll = f_LoadLibraryA(wevtapidll_str);
        }
    }
    __forceinline void load_wevtfwd() noexcept {
        if (f_LoadLibraryA) {
            char wevtfwddll_str[] = "wevtfwd.dll";
            wevtfwddll = f_LoadLibraryA(wevtfwddll_str);
        }
    }
    __forceinline void load_wevtsvc() noexcept {
        if (f_LoadLibraryA) {
            char wevtsvcdll_str[] = "wevtsvc.dll";
            wevtsvcdll = f_LoadLibraryA(wevtsvcdll_str);
        }
    }
    __forceinline void load_wfapigp() noexcept {
        if (f_LoadLibraryA) {
            char wfapigpdll_str[] = "wfapigp.dll";
            wfapigpdll = f_LoadLibraryA(wfapigpdll_str);
        }
    }
    __forceinline void load_wfdprov() noexcept {
        if (f_LoadLibraryA) {
            char wfdprovdll_str[] = "wfdprov.dll";
            wfdprovdll = f_LoadLibraryA(wfdprovdll_str);
        }
    }
    __forceinline void load_WFDSConMgr() noexcept {
        if (f_LoadLibraryA) {
            char WFDSConMgrdll_str[] = "WFDSConMgr.dll";
            WFDSConMgrdll = f_LoadLibraryA(WFDSConMgrdll_str);
        }
    }
    __forceinline void load_WFDSConMgrSvc() noexcept {
        if (f_LoadLibraryA) {
            char WFDSConMgrSvcdll_str[] = "WFDSConMgrSvc.dll";
            WFDSConMgrSvcdll = f_LoadLibraryA(WFDSConMgrSvcdll_str);
        }
    }
    __forceinline void load_WfHC() noexcept {
        if (f_LoadLibraryA) {
            char WfHCdll_str[] = "WfHC.dll";
            WfHCdll = f_LoadLibraryA(WfHCdll_str);
        }
    }
    __forceinline void load_whealogr() noexcept {
        if (f_LoadLibraryA) {
            char whealogrdll_str[] = "whealogr.dll";
            whealogrdll = f_LoadLibraryA(whealogrdll_str);
        }
    }
    __forceinline void load_whhelper() noexcept {
        if (f_LoadLibraryA) {
            char whhelperdll_str[] = "whhelper.dll";
            whhelperdll = f_LoadLibraryA(whhelperdll_str);
        }
    }
    __forceinline void load_wiaaut() noexcept {
        if (f_LoadLibraryA) {
            char wiaautdll_str[] = "wiaaut.dll";
            wiaautdll = f_LoadLibraryA(wiaautdll_str);
        }
    }
    __forceinline void load_wiadefui() noexcept {
        if (f_LoadLibraryA) {
            char wiadefuidll_str[] = "wiadefui.dll";
            wiadefuidll = f_LoadLibraryA(wiadefuidll_str);
        }
    }
    __forceinline void load_wiadss() noexcept {
        if (f_LoadLibraryA) {
            char wiadssdll_str[] = "wiadss.dll";
            wiadssdll = f_LoadLibraryA(wiadssdll_str);
        }
    }
    __forceinline void load_WiaExtensionHost64() noexcept {
        if (f_LoadLibraryA) {
            char WiaExtensionHost64dll_str[] = "WiaExtensionHost64.dll";
            WiaExtensionHost64dll = f_LoadLibraryA(WiaExtensionHost64dll_str);
        }
    }
    __forceinline void load_wiarpc() noexcept {
        if (f_LoadLibraryA) {
            char wiarpcdll_str[] = "wiarpc.dll";
            wiarpcdll = f_LoadLibraryA(wiarpcdll_str);
        }
    }
    __forceinline void load_wiascanprofiles() noexcept {
        if (f_LoadLibraryA) {
            char wiascanprofilesdll_str[] = "wiascanprofiles.dll";
            wiascanprofilesdll = f_LoadLibraryA(wiascanprofilesdll_str);
        }
    }
    __forceinline void load_wiaservc() noexcept {
        if (f_LoadLibraryA) {
            char wiaservcdll_str[] = "wiaservc.dll";
            wiaservcdll = f_LoadLibraryA(wiaservcdll_str);
        }
    }
    __forceinline void load_wiashext() noexcept {
        if (f_LoadLibraryA) {
            char wiashextdll_str[] = "wiashext.dll";
            wiashextdll = f_LoadLibraryA(wiashextdll_str);
        }
    }
    __forceinline void load_wiatrace() noexcept {
        if (f_LoadLibraryA) {
            char wiatracedll_str[] = "wiatrace.dll";
            wiatracedll = f_LoadLibraryA(wiatracedll_str);
        }
    }
    __forceinline void load_WiFiCloudStore() noexcept {
        if (f_LoadLibraryA) {
            char WiFiCloudStoredll_str[] = "WiFiCloudStore.dll";
            WiFiCloudStoredll = f_LoadLibraryA(WiFiCloudStoredll_str);
        }
    }
    __forceinline void load_WiFiConfigSP() noexcept {
        if (f_LoadLibraryA) {
            char WiFiConfigSPdll_str[] = "WiFiConfigSP.dll";
            WiFiConfigSPdll = f_LoadLibraryA(WiFiConfigSPdll_str);
        }
    }
    __forceinline void load_wifidatacapabilityhandler() noexcept {
        if (f_LoadLibraryA) {
            char wifidatacapabilityhandlerdll_str[] = "wifidatacapabilityhandler.dll";
            wifidatacapabilityhandlerdll = f_LoadLibraryA(wifidatacapabilityhandlerdll_str);
        }
    }
    __forceinline void load_WiFiDisplay() noexcept {
        if (f_LoadLibraryA) {
            char WiFiDisplaydll_str[] = "WiFiDisplay.dll";
            WiFiDisplaydll = f_LoadLibraryA(WiFiDisplaydll_str);
        }
    }
    __forceinline void load_wifinetworkmanager() noexcept {
        if (f_LoadLibraryA) {
            char wifinetworkmanagerdll_str[] = "wifinetworkmanager.dll";
            wifinetworkmanagerdll = f_LoadLibraryA(wifinetworkmanagerdll_str);
        }
    }
    __forceinline void load_wimgapi() noexcept {
        if (f_LoadLibraryA) {
            char wimgapidll_str[] = "wimgapi.dll";
            wimgapidll = f_LoadLibraryA(wimgapidll_str);
        }
    }
    __forceinline void load_win32appinventorycsp() noexcept {
        if (f_LoadLibraryA) {
            char win32appinventorycspdll_str[] = "win32appinventorycsp.dll";
            win32appinventorycspdll = f_LoadLibraryA(win32appinventorycspdll_str);
        }
    }
    __forceinline void load_Win32CompatibilityAppraiserCSP() noexcept {
        if (f_LoadLibraryA) {
            char Win32CompatibilityAppraiserCSPdll_str[] = "Win32CompatibilityAppraiserCSP.dll";
            Win32CompatibilityAppraiserCSPdll = f_LoadLibraryA(Win32CompatibilityAppraiserCSPdll_str);
        }
    }
    __forceinline void load_win32spl() noexcept {
        if (f_LoadLibraryA) {
            char win32spldll_str[] = "win32spl.dll";
            win32spldll = f_LoadLibraryA(win32spldll_str);
        }
    }
    __forceinline void load_win32u() noexcept {
        if (f_LoadLibraryA) {
            char win32udll_str[] = "win32u.dll";
            win32udll = f_LoadLibraryA(win32udll_str);
        }
    }
    __forceinline void load_Win32_DeviceGuard() noexcept {
        if (f_LoadLibraryA) {
            char Win32_DeviceGuarddll_str[] = "Win32_DeviceGuard.dll";
            Win32_DeviceGuarddll = f_LoadLibraryA(Win32_DeviceGuarddll_str);
        }
    }
    __forceinline void load_winbio() noexcept {
        if (f_LoadLibraryA) {
            char winbiodll_str[] = "winbio.dll";
            winbiodll = f_LoadLibraryA(winbiodll_str);
        }
    }
    __forceinline void load_WinBioDataModel() noexcept {
        if (f_LoadLibraryA) {
            char WinBioDataModeldll_str[] = "WinBioDataModel.dll";
            WinBioDataModeldll = f_LoadLibraryA(WinBioDataModeldll_str);
        }
    }
    __forceinline void load_winbioext() noexcept {
        if (f_LoadLibraryA) {
            char winbioextdll_str[] = "winbioext.dll";
            winbioextdll = f_LoadLibraryA(winbioextdll_str);
        }
    }
    __forceinline void load_winbrand() noexcept {
        if (f_LoadLibraryA) {
            char winbranddll_str[] = "winbrand.dll";
            winbranddll = f_LoadLibraryA(winbranddll_str);
        }
    }
    __forceinline void load_wincorlib() noexcept {
        if (f_LoadLibraryA) {
            char wincorlibdll_str[] = "wincorlib.dll";
            wincorlibdll = f_LoadLibraryA(wincorlibdll_str);
        }
    }
    __forceinline void load_wincredprovider() noexcept {
        if (f_LoadLibraryA) {
            char wincredproviderdll_str[] = "wincredprovider.dll";
            wincredproviderdll = f_LoadLibraryA(wincredproviderdll_str);
        }
    }
    __forceinline void load_wincredui() noexcept {
        if (f_LoadLibraryA) {
            char wincreduidll_str[] = "wincredui.dll";
            wincreduidll = f_LoadLibraryA(wincreduidll_str);
        }
    }
    __forceinline void load_windlp() noexcept {
        if (f_LoadLibraryA) {
            char windlpdll_str[] = "windlp.dll";
            windlpdll = f_LoadLibraryA(windlpdll_str);
        }
    }
    __forceinline void load_WindowManagement() noexcept {
        if (f_LoadLibraryA) {
            char WindowManagementdll_str[] = "WindowManagement.dll";
            WindowManagementdll = f_LoadLibraryA(WindowManagementdll_str);
        }
    }
    __forceinline void load_WindowManagementAPI() noexcept {
        if (f_LoadLibraryA) {
            char WindowManagementAPIdll_str[] = "WindowManagementAPI.dll";
            WindowManagementAPIdll = f_LoadLibraryA(WindowManagementAPIdll_str);
        }
    }
    __forceinline void load_WindowsAccountsControl() noexcept {
        if (f_LoadLibraryA) {
            char WindowsAccountsControldll_str[] = "Windows.AccountsControl.dll";
            WindowsAccountsControldll = f_LoadLibraryA(WindowsAccountsControldll_str);
        }
    }
    __forceinline void load_WindowsAIMachineLearning() noexcept {
        if (f_LoadLibraryA) {
            char WindowsAIMachineLearningdll_str[] = "Windows.AI.MachineLearning.dll";
            WindowsAIMachineLearningdll = f_LoadLibraryA(WindowsAIMachineLearningdll_str);
        }
    }
    __forceinline void load_WindowsAIMachineLearningPreview() noexcept {
        if (f_LoadLibraryA) {
            char WindowsAIMachineLearningPreviewdll_str[] = "Windows.AI.MachineLearning.Preview.dll";
            WindowsAIMachineLearningPreviewdll = f_LoadLibraryA(WindowsAIMachineLearningPreviewdll_str);
        }
    }
    __forceinline void load_WindowsApplicationModelBackgroundSystemEventsBroker() noexcept {
        if (f_LoadLibraryA) {
            char WindowsApplicationModelBackgroundSystemEventsBrokerdll_str[] = "Windows.ApplicationModel.Background.SystemEventsBroker.dll";
            WindowsApplicationModelBackgroundSystemEventsBrokerdll = f_LoadLibraryA(WindowsApplicationModelBackgroundSystemEventsBrokerdll_str);
        }
    }
    __forceinline void load_WindowsApplicationModelBackgroundTimeBroker() noexcept {
        if (f_LoadLibraryA) {
            char WindowsApplicationModelBackgroundTimeBrokerdll_str[] = "Windows.ApplicationModel.Background.TimeBroker.dll";
            WindowsApplicationModelBackgroundTimeBrokerdll = f_LoadLibraryA(WindowsApplicationModelBackgroundTimeBrokerdll_str);
        }
    }
    __forceinline void load_WindowsApplicationModelConversationalAgent() noexcept {
        if (f_LoadLibraryA) {
            char WindowsApplicationModelConversationalAgentdll_str[] = "Windows.ApplicationModel.ConversationalAgent.dll";
            WindowsApplicationModelConversationalAgentdll = f_LoadLibraryA(WindowsApplicationModelConversationalAgentdll_str);
        }
    }
    __forceinline void load_windowsapplicationmodelconversationalagentinternalproxystub() noexcept {
        if (f_LoadLibraryA) {
            char windowsapplicationmodelconversationalagentinternalproxystubdll_str[] = "windows.applicationmodel.conversationalagent.internal.proxystub.dll";
            windowsapplicationmodelconversationalagentinternalproxystubdll = f_LoadLibraryA(windowsapplicationmodelconversationalagentinternalproxystubdll_str);
        }
    }
    __forceinline void load_windowsapplicationmodelconversationalagentproxystub() noexcept {
        if (f_LoadLibraryA) {
            char windowsapplicationmodelconversationalagentproxystubdll_str[] = "windows.applicationmodel.conversationalagent.proxystub.dll";
            windowsapplicationmodelconversationalagentproxystubdll = f_LoadLibraryA(windowsapplicationmodelconversationalagentproxystubdll_str);
        }
    }
    __forceinline void load_WindowsApplicationModelCore() noexcept {
        if (f_LoadLibraryA) {
            char WindowsApplicationModelCoredll_str[] = "Windows.ApplicationModel.Core.dll";
            WindowsApplicationModelCoredll = f_LoadLibraryA(WindowsApplicationModelCoredll_str);
        }
    }
    __forceinline void load_windowsapplicationmodeldatatransfer() noexcept {
        if (f_LoadLibraryA) {
            char windowsapplicationmodeldatatransferdll_str[] = "windows.applicationmodel.datatransfer.dll";
            windowsapplicationmodeldatatransferdll = f_LoadLibraryA(windowsapplicationmodeldatatransferdll_str);
        }
    }
    __forceinline void load_WindowsApplicationModel() noexcept {
        if (f_LoadLibraryA) {
            char WindowsApplicationModeldll_str[] = "Windows.ApplicationModel.dll";
            WindowsApplicationModeldll = f_LoadLibraryA(WindowsApplicationModeldll_str);
        }
    }
    __forceinline void load_WindowsApplicationModelLockScreen() noexcept {
        if (f_LoadLibraryA) {
            char WindowsApplicationModelLockScreendll_str[] = "Windows.ApplicationModel.LockScreen.dll";
            WindowsApplicationModelLockScreendll = f_LoadLibraryA(WindowsApplicationModelLockScreendll_str);
        }
    }
    __forceinline void load_WindowsApplicationModelStore() noexcept {
        if (f_LoadLibraryA) {
            char WindowsApplicationModelStoredll_str[] = "Windows.ApplicationModel.Store.dll";
            WindowsApplicationModelStoredll = f_LoadLibraryA(WindowsApplicationModelStoredll_str);
        }
    }
    __forceinline void load_WindowsApplicationModelStorePreviewDOSettings() noexcept {
        if (f_LoadLibraryA) {
            char WindowsApplicationModelStorePreviewDOSettingsdll_str[] = "Windows.ApplicationModel.Store.Preview.DOSettings.dll";
            WindowsApplicationModelStorePreviewDOSettingsdll = f_LoadLibraryA(WindowsApplicationModelStorePreviewDOSettingsdll_str);
        }
    }
    __forceinline void load_WindowsApplicationModelStoreTestingFramework() noexcept {
        if (f_LoadLibraryA) {
            char WindowsApplicationModelStoreTestingFrameworkdll_str[] = "Windows.ApplicationModel.Store.TestingFramework.dll";
            WindowsApplicationModelStoreTestingFrameworkdll = f_LoadLibraryA(WindowsApplicationModelStoreTestingFrameworkdll_str);
        }
    }
    __forceinline void load_WindowsApplicationModelWallet() noexcept {
        if (f_LoadLibraryA) {
            char WindowsApplicationModelWalletdll_str[] = "Windows.ApplicationModel.Wallet.dll";
            WindowsApplicationModelWalletdll = f_LoadLibraryA(WindowsApplicationModelWalletdll_str);
        }
    }
    __forceinline void load_WindowsCloudStore() noexcept {
        if (f_LoadLibraryA) {
            char WindowsCloudStoredll_str[] = "Windows.CloudStore.dll";
            WindowsCloudStoredll = f_LoadLibraryA(WindowsCloudStoredll_str);
        }
    }
    __forceinline void load_WindowsCloudStoreEarlyDownloader() noexcept {
        if (f_LoadLibraryA) {
            char WindowsCloudStoreEarlyDownloaderdll_str[] = "Windows.CloudStore.EarlyDownloader.dll";
            WindowsCloudStoreEarlyDownloaderdll = f_LoadLibraryA(WindowsCloudStoreEarlyDownloaderdll_str);
        }
    }
    __forceinline void load_WindowsCloudStoreSchemaDesktopShell() noexcept {
        if (f_LoadLibraryA) {
            char WindowsCloudStoreSchemaDesktopShelldll_str[] = "Windows.CloudStore.Schema.DesktopShell.dll";
            WindowsCloudStoreSchemaDesktopShelldll = f_LoadLibraryA(WindowsCloudStoreSchemaDesktopShelldll_str);
        }
    }
    __forceinline void load_WindowsCloudStoreSchemaShell() noexcept {
        if (f_LoadLibraryA) {
            char WindowsCloudStoreSchemaShelldll_str[] = "Windows.CloudStore.Schema.Shell.dll";
            WindowsCloudStoreSchemaShelldll = f_LoadLibraryA(WindowsCloudStoreSchemaShelldll_str);
        }
    }
    __forceinline void load_WindowsCortanaDesktop() noexcept {
        if (f_LoadLibraryA) {
            char WindowsCortanaDesktopdll_str[] = "Windows.Cortana.Desktop.dll";
            WindowsCortanaDesktopdll = f_LoadLibraryA(WindowsCortanaDesktopdll_str);
        }
    }
    __forceinline void load_WindowsCortanaOneCore() noexcept {
        if (f_LoadLibraryA) {
            char WindowsCortanaOneCoredll_str[] = "Windows.Cortana.OneCore.dll";
            WindowsCortanaOneCoredll = f_LoadLibraryA(WindowsCortanaOneCoredll_str);
        }
    }
    __forceinline void load_WindowsCortanaProxyStub() noexcept {
        if (f_LoadLibraryA) {
            char WindowsCortanaProxyStubdll_str[] = "Windows.Cortana.ProxyStub.dll";
            WindowsCortanaProxyStubdll = f_LoadLibraryA(WindowsCortanaProxyStubdll_str);
        }
    }
    __forceinline void load_WindowsDataActivities() noexcept {
        if (f_LoadLibraryA) {
            char WindowsDataActivitiesdll_str[] = "Windows.Data.Activities.dll";
            WindowsDataActivitiesdll = f_LoadLibraryA(WindowsDataActivitiesdll_str);
        }
    }
    __forceinline void load_WindowsDataPdf() noexcept {
        if (f_LoadLibraryA) {
            char WindowsDataPdfdll_str[] = "Windows.Data.Pdf.dll";
            WindowsDataPdfdll = f_LoadLibraryA(WindowsDataPdfdll_str);
        }
    }
    __forceinline void load_WindowsDevicesAllJoyn() noexcept {
        if (f_LoadLibraryA) {
            char WindowsDevicesAllJoyndll_str[] = "Windows.Devices.AllJoyn.dll";
            WindowsDevicesAllJoyndll = f_LoadLibraryA(WindowsDevicesAllJoyndll_str);
        }
    }
    __forceinline void load_WindowsDevicesBackground() noexcept {
        if (f_LoadLibraryA) {
            char WindowsDevicesBackgrounddll_str[] = "Windows.Devices.Background.dll";
            WindowsDevicesBackgrounddll = f_LoadLibraryA(WindowsDevicesBackgrounddll_str);
        }
    }
    __forceinline void load_WindowsDevicesBackgroundps() noexcept {
        if (f_LoadLibraryA) {
            char WindowsDevicesBackgroundpsdll_str[] = "Windows.Devices.Background.ps.dll";
            WindowsDevicesBackgroundpsdll = f_LoadLibraryA(WindowsDevicesBackgroundpsdll_str);
        }
    }
    __forceinline void load_WindowsDevicesBluetooth() noexcept {
        if (f_LoadLibraryA) {
            char WindowsDevicesBluetoothdll_str[] = "Windows.Devices.Bluetooth.dll";
            WindowsDevicesBluetoothdll = f_LoadLibraryA(WindowsDevicesBluetoothdll_str);
        }
    }
    __forceinline void load_WindowsDevicesCustom() noexcept {
        if (f_LoadLibraryA) {
            char WindowsDevicesCustomdll_str[] = "Windows.Devices.Custom.dll";
            WindowsDevicesCustomdll = f_LoadLibraryA(WindowsDevicesCustomdll_str);
        }
    }
    __forceinline void load_WindowsDevicesCustomps() noexcept {
        if (f_LoadLibraryA) {
            char WindowsDevicesCustompsdll_str[] = "Windows.Devices.Custom.ps.dll";
            WindowsDevicesCustompsdll = f_LoadLibraryA(WindowsDevicesCustompsdll_str);
        }
    }
    __forceinline void load_WindowsDevicesEnumeration() noexcept {
        if (f_LoadLibraryA) {
            char WindowsDevicesEnumerationdll_str[] = "Windows.Devices.Enumeration.dll";
            WindowsDevicesEnumerationdll = f_LoadLibraryA(WindowsDevicesEnumerationdll_str);
        }
    }
    __forceinline void load_WindowsDevicesHaptics() noexcept {
        if (f_LoadLibraryA) {
            char WindowsDevicesHapticsdll_str[] = "Windows.Devices.Haptics.dll";
            WindowsDevicesHapticsdll = f_LoadLibraryA(WindowsDevicesHapticsdll_str);
        }
    }
    __forceinline void load_WindowsDevicesHumanInterfaceDevice() noexcept {
        if (f_LoadLibraryA) {
            char WindowsDevicesHumanInterfaceDevicedll_str[] = "Windows.Devices.HumanInterfaceDevice.dll";
            WindowsDevicesHumanInterfaceDevicedll = f_LoadLibraryA(WindowsDevicesHumanInterfaceDevicedll_str);
        }
    }
    __forceinline void load_WindowsDevicesLights() noexcept {
        if (f_LoadLibraryA) {
            char WindowsDevicesLightsdll_str[] = "Windows.Devices.Lights.dll";
            WindowsDevicesLightsdll = f_LoadLibraryA(WindowsDevicesLightsdll_str);
        }
    }
    __forceinline void load_WindowsDevicesLowLevel() noexcept {
        if (f_LoadLibraryA) {
            char WindowsDevicesLowLeveldll_str[] = "Windows.Devices.LowLevel.dll";
            WindowsDevicesLowLeveldll = f_LoadLibraryA(WindowsDevicesLowLeveldll_str);
        }
    }
    __forceinline void load_WindowsDevicesMidi() noexcept {
        if (f_LoadLibraryA) {
            char WindowsDevicesMididll_str[] = "Windows.Devices.Midi.dll";
            WindowsDevicesMididll = f_LoadLibraryA(WindowsDevicesMididll_str);
        }
    }
    __forceinline void load_WindowsDevicesPerception() noexcept {
        if (f_LoadLibraryA) {
            char WindowsDevicesPerceptiondll_str[] = "Windows.Devices.Perception.dll";
            WindowsDevicesPerceptiondll = f_LoadLibraryA(WindowsDevicesPerceptiondll_str);
        }
    }
    __forceinline void load_WindowsDevicesPicker() noexcept {
        if (f_LoadLibraryA) {
            char WindowsDevicesPickerdll_str[] = "Windows.Devices.Picker.dll";
            WindowsDevicesPickerdll = f_LoadLibraryA(WindowsDevicesPickerdll_str);
        }
    }
    __forceinline void load_WindowsDevicesPointOfService() noexcept {
        if (f_LoadLibraryA) {
            char WindowsDevicesPointOfServicedll_str[] = "Windows.Devices.PointOfService.dll";
            WindowsDevicesPointOfServicedll = f_LoadLibraryA(WindowsDevicesPointOfServicedll_str);
        }
    }
    __forceinline void load_WindowsDevicesPortable() noexcept {
        if (f_LoadLibraryA) {
            char WindowsDevicesPortabledll_str[] = "Windows.Devices.Portable.dll";
            WindowsDevicesPortabledll = f_LoadLibraryA(WindowsDevicesPortabledll_str);
        }
    }
    __forceinline void load_WindowsDevicesPrinters() noexcept {
        if (f_LoadLibraryA) {
            char WindowsDevicesPrintersdll_str[] = "Windows.Devices.Printers.dll";
            WindowsDevicesPrintersdll = f_LoadLibraryA(WindowsDevicesPrintersdll_str);
        }
    }
    __forceinline void load_WindowsDevicesPrintersExtensions() noexcept {
        if (f_LoadLibraryA) {
            char WindowsDevicesPrintersExtensionsdll_str[] = "Windows.Devices.Printers.Extensions.dll";
            WindowsDevicesPrintersExtensionsdll = f_LoadLibraryA(WindowsDevicesPrintersExtensionsdll_str);
        }
    }
    __forceinline void load_WindowsDevicesRadios() noexcept {
        if (f_LoadLibraryA) {
            char WindowsDevicesRadiosdll_str[] = "Windows.Devices.Radios.dll";
            WindowsDevicesRadiosdll = f_LoadLibraryA(WindowsDevicesRadiosdll_str);
        }
    }
    __forceinline void load_WindowsDevicesScanners() noexcept {
        if (f_LoadLibraryA) {
            char WindowsDevicesScannersdll_str[] = "Windows.Devices.Scanners.dll";
            WindowsDevicesScannersdll = f_LoadLibraryA(WindowsDevicesScannersdll_str);
        }
    }
    __forceinline void load_WindowsDevicesSensors() noexcept {
        if (f_LoadLibraryA) {
            char WindowsDevicesSensorsdll_str[] = "Windows.Devices.Sensors.dll";
            WindowsDevicesSensorsdll = f_LoadLibraryA(WindowsDevicesSensorsdll_str);
        }
    }
    __forceinline void load_WindowsDevicesSerialCommunication() noexcept {
        if (f_LoadLibraryA) {
            char WindowsDevicesSerialCommunicationdll_str[] = "Windows.Devices.SerialCommunication.dll";
            WindowsDevicesSerialCommunicationdll = f_LoadLibraryA(WindowsDevicesSerialCommunicationdll_str);
        }
    }
    __forceinline void load_WindowsDevicesSmartCards() noexcept {
        if (f_LoadLibraryA) {
            char WindowsDevicesSmartCardsdll_str[] = "Windows.Devices.SmartCards.dll";
            WindowsDevicesSmartCardsdll = f_LoadLibraryA(WindowsDevicesSmartCardsdll_str);
        }
    }
    __forceinline void load_WindowsDevicesSmartCardsPhone() noexcept {
        if (f_LoadLibraryA) {
            char WindowsDevicesSmartCardsPhonedll_str[] = "Windows.Devices.SmartCards.Phone.dll";
            WindowsDevicesSmartCardsPhonedll = f_LoadLibraryA(WindowsDevicesSmartCardsPhonedll_str);
        }
    }
    __forceinline void load_WindowsDevicesUsb() noexcept {
        if (f_LoadLibraryA) {
            char WindowsDevicesUsbdll_str[] = "Windows.Devices.Usb.dll";
            WindowsDevicesUsbdll = f_LoadLibraryA(WindowsDevicesUsbdll_str);
        }
    }
    __forceinline void load_WindowsDevicesWiFi() noexcept {
        if (f_LoadLibraryA) {
            char WindowsDevicesWiFidll_str[] = "Windows.Devices.WiFi.dll";
            WindowsDevicesWiFidll = f_LoadLibraryA(WindowsDevicesWiFidll_str);
        }
    }
    __forceinline void load_WindowsDevicesWiFiDirect() noexcept {
        if (f_LoadLibraryA) {
            char WindowsDevicesWiFiDirectdll_str[] = "Windows.Devices.WiFiDirect.dll";
            WindowsDevicesWiFiDirectdll = f_LoadLibraryA(WindowsDevicesWiFiDirectdll_str);
        }
    }
    __forceinline void load_WindowsEnergy() noexcept {
        if (f_LoadLibraryA) {
            char WindowsEnergydll_str[] = "Windows.Energy.dll";
            WindowsEnergydll = f_LoadLibraryA(WindowsEnergydll_str);
        }
    }
    __forceinline void load_WindowsFileExplorerCommon() noexcept {
        if (f_LoadLibraryA) {
            char WindowsFileExplorerCommondll_str[] = "Windows.FileExplorer.Common.dll";
            WindowsFileExplorerCommondll = f_LoadLibraryA(WindowsFileExplorerCommondll_str);
        }
    }
    __forceinline void load_WindowsGamingInput() noexcept {
        if (f_LoadLibraryA) {
            char WindowsGamingInputdll_str[] = "Windows.Gaming.Input.dll";
            WindowsGamingInputdll = f_LoadLibraryA(WindowsGamingInputdll_str);
        }
    }
    __forceinline void load_WindowsGamingPreview() noexcept {
        if (f_LoadLibraryA) {
            char WindowsGamingPreviewdll_str[] = "Windows.Gaming.Preview.dll";
            WindowsGamingPreviewdll = f_LoadLibraryA(WindowsGamingPreviewdll_str);
        }
    }
    __forceinline void load_WindowsGamingUIGameBar() noexcept {
        if (f_LoadLibraryA) {
            char WindowsGamingUIGameBardll_str[] = "Windows.Gaming.UI.GameBar.dll";
            WindowsGamingUIGameBardll = f_LoadLibraryA(WindowsGamingUIGameBardll_str);
        }
    }
    __forceinline void load_WindowsGamingXboxLiveStorage() noexcept {
        if (f_LoadLibraryA) {
            char WindowsGamingXboxLiveStoragedll_str[] = "Windows.Gaming.XboxLive.Storage.dll";
            WindowsGamingXboxLiveStoragedll = f_LoadLibraryA(WindowsGamingXboxLiveStoragedll_str);
        }
    }
    __forceinline void load_WindowsGlobalization() noexcept {
        if (f_LoadLibraryA) {
            char WindowsGlobalizationdll_str[] = "Windows.Globalization.dll";
            WindowsGlobalizationdll = f_LoadLibraryA(WindowsGlobalizationdll_str);
        }
    }
    __forceinline void load_WindowsGlobalizationFontgroups() noexcept {
        if (f_LoadLibraryA) {
            char WindowsGlobalizationFontgroupsdll_str[] = "Windows.Globalization.Fontgroups.dll";
            WindowsGlobalizationFontgroupsdll = f_LoadLibraryA(WindowsGlobalizationFontgroupsdll_str);
        }
    }
    __forceinline void load_WindowsGlobalizationPhoneNumberFormatting() noexcept {
        if (f_LoadLibraryA) {
            char WindowsGlobalizationPhoneNumberFormattingdll_str[] = "Windows.Globalization.PhoneNumberFormatting.dll";
            WindowsGlobalizationPhoneNumberFormattingdll = f_LoadLibraryA(WindowsGlobalizationPhoneNumberFormattingdll_str);
        }
    }
    __forceinline void load_WindowsGraphicsDisplayBrightnessOverride() noexcept {
        if (f_LoadLibraryA) {
            char WindowsGraphicsDisplayBrightnessOverridedll_str[] = "Windows.Graphics.Display.BrightnessOverride.dll";
            WindowsGraphicsDisplayBrightnessOverridedll = f_LoadLibraryA(WindowsGraphicsDisplayBrightnessOverridedll_str);
        }
    }
    __forceinline void load_WindowsGraphicsDisplayDisplayEnhancementOverride() noexcept {
        if (f_LoadLibraryA) {
            char WindowsGraphicsDisplayDisplayEnhancementOverridedll_str[] = "Windows.Graphics.Display.DisplayEnhancementOverride.dll";
            WindowsGraphicsDisplayDisplayEnhancementOverridedll = f_LoadLibraryA(WindowsGraphicsDisplayDisplayEnhancementOverridedll_str);
        }
    }
    __forceinline void load_WindowsGraphics() noexcept {
        if (f_LoadLibraryA) {
            char WindowsGraphicsdll_str[] = "Windows.Graphics.dll";
            WindowsGraphicsdll = f_LoadLibraryA(WindowsGraphicsdll_str);
        }
    }
    __forceinline void load_WindowsGraphicsPrinting3D() noexcept {
        if (f_LoadLibraryA) {
            char WindowsGraphicsPrinting3Ddll_str[] = "Windows.Graphics.Printing.3D.dll";
            WindowsGraphicsPrinting3Ddll = f_LoadLibraryA(WindowsGraphicsPrinting3Ddll_str);
        }
    }
    __forceinline void load_WindowsGraphicsPrinting() noexcept {
        if (f_LoadLibraryA) {
            char WindowsGraphicsPrintingdll_str[] = "Windows.Graphics.Printing.dll";
            WindowsGraphicsPrintingdll = f_LoadLibraryA(WindowsGraphicsPrintingdll_str);
        }
    }
    __forceinline void load_WindowsGraphicsPrintingWorkflow() noexcept {
        if (f_LoadLibraryA) {
            char WindowsGraphicsPrintingWorkflowdll_str[] = "Windows.Graphics.Printing.Workflow.dll";
            WindowsGraphicsPrintingWorkflowdll = f_LoadLibraryA(WindowsGraphicsPrintingWorkflowdll_str);
        }
    }
    __forceinline void load_WindowsGraphicsPrintingWorkflowNative() noexcept {
        if (f_LoadLibraryA) {
            char WindowsGraphicsPrintingWorkflowNativedll_str[] = "Windows.Graphics.Printing.Workflow.Native.dll";
            WindowsGraphicsPrintingWorkflowNativedll = f_LoadLibraryA(WindowsGraphicsPrintingWorkflowNativedll_str);
        }
    }
    __forceinline void load_WindowsHelpRuntime() noexcept {
        if (f_LoadLibraryA) {
            char WindowsHelpRuntimedll_str[] = "Windows.Help.Runtime.dll";
            WindowsHelpRuntimedll = f_LoadLibraryA(WindowsHelpRuntimedll_str);
        }
    }
    __forceinline void load_windowsimmersiveshellserviceprovider() noexcept {
        if (f_LoadLibraryA) {
            char windowsimmersiveshellserviceproviderdll_str[] = "windows.immersiveshell.serviceprovider.dll";
            windowsimmersiveshellserviceproviderdll = f_LoadLibraryA(windowsimmersiveshellserviceproviderdll_str);
        }
    }
    __forceinline void load_WindowsInternalAdaptiveCardsXamlCardRenderer() noexcept {
        if (f_LoadLibraryA) {
            char WindowsInternalAdaptiveCardsXamlCardRendererdll_str[] = "Windows.Internal.AdaptiveCards.XamlCardRenderer.dll";
            WindowsInternalAdaptiveCardsXamlCardRendererdll = f_LoadLibraryA(WindowsInternalAdaptiveCardsXamlCardRendererdll_str);
        }
    }
    __forceinline void load_WindowsInternalCapturePickerDesktop() noexcept {
        if (f_LoadLibraryA) {
            char WindowsInternalCapturePickerDesktopdll_str[] = "Windows.Internal.CapturePicker.Desktop.dll";
            WindowsInternalCapturePickerDesktopdll = f_LoadLibraryA(WindowsInternalCapturePickerDesktopdll_str);
        }
    }
    __forceinline void load_WindowsInternalCapturePicker() noexcept {
        if (f_LoadLibraryA) {
            char WindowsInternalCapturePickerdll_str[] = "Windows.Internal.CapturePicker.dll";
            WindowsInternalCapturePickerdll = f_LoadLibraryA(WindowsInternalCapturePickerdll_str);
        }
    }
    __forceinline void load_WindowsInternalDevicesBluetooth() noexcept {
        if (f_LoadLibraryA) {
            char WindowsInternalDevicesBluetoothdll_str[] = "Windows.Internal.Devices.Bluetooth.dll";
            WindowsInternalDevicesBluetoothdll = f_LoadLibraryA(WindowsInternalDevicesBluetoothdll_str);
        }
    }
    __forceinline void load_WindowsInternalDevicesSensors() noexcept {
        if (f_LoadLibraryA) {
            char WindowsInternalDevicesSensorsdll_str[] = "Windows.Internal.Devices.Sensors.dll";
            WindowsInternalDevicesSensorsdll = f_LoadLibraryA(WindowsInternalDevicesSensorsdll_str);
        }
    }
    __forceinline void load_WindowsInternalFeedbackAnalog() noexcept {
        if (f_LoadLibraryA) {
            char WindowsInternalFeedbackAnalogdll_str[] = "Windows.Internal.Feedback.Analog.dll";
            WindowsInternalFeedbackAnalogdll = f_LoadLibraryA(WindowsInternalFeedbackAnalogdll_str);
        }
    }
    __forceinline void load_WindowsInternalFeedbackAnalogProxyStub() noexcept {
        if (f_LoadLibraryA) {
            char WindowsInternalFeedbackAnalogProxyStubdll_str[] = "Windows.Internal.Feedback.Analog.ProxyStub.dll";
            WindowsInternalFeedbackAnalogProxyStubdll = f_LoadLibraryA(WindowsInternalFeedbackAnalogProxyStubdll_str);
        }
    }
    __forceinline void load_WindowsInternalGraphicsDisplayDisplayColorManagement() noexcept {
        if (f_LoadLibraryA) {
            char WindowsInternalGraphicsDisplayDisplayColorManagementdll_str[] = "Windows.Internal.Graphics.Display.DisplayColorManagement.dll";
            WindowsInternalGraphicsDisplayDisplayColorManagementdll = f_LoadLibraryA(WindowsInternalGraphicsDisplayDisplayColorManagementdll_str);
        }
    }
    __forceinline void load_WindowsInternalGraphicsDisplayDisplayEnhancementManagement() noexcept {
        if (f_LoadLibraryA) {
            char WindowsInternalGraphicsDisplayDisplayEnhancementManagementdll_str[] = "Windows.Internal.Graphics.Display.DisplayEnhancementManagement.dll";
            WindowsInternalGraphicsDisplayDisplayEnhancementManagementdll = f_LoadLibraryA(WindowsInternalGraphicsDisplayDisplayEnhancementManagementdll_str);
        }
    }
    __forceinline void load_WindowsInternalHardwareConfirmator() noexcept {
        if (f_LoadLibraryA) {
            char WindowsInternalHardwareConfirmatordll_str[] = "Windows.Internal.HardwareConfirmator.dll";
            WindowsInternalHardwareConfirmatordll = f_LoadLibraryA(WindowsInternalHardwareConfirmatordll_str);
        }
    }
    __forceinline void load_WindowsInternalManagement() noexcept {
        if (f_LoadLibraryA) {
            char WindowsInternalManagementdll_str[] = "Windows.Internal.Management.dll";
            WindowsInternalManagementdll = f_LoadLibraryA(WindowsInternalManagementdll_str);
        }
    }
    __forceinline void load_WindowsInternalManagementSecureAssessment() noexcept {
        if (f_LoadLibraryA) {
            char WindowsInternalManagementSecureAssessmentdll_str[] = "Windows.Internal.Management.SecureAssessment.dll";
            WindowsInternalManagementSecureAssessmentdll = f_LoadLibraryA(WindowsInternalManagementSecureAssessmentdll_str);
        }
    }
    __forceinline void load_WindowsInternalOpenWithHost() noexcept {
        if (f_LoadLibraryA) {
            char WindowsInternalOpenWithHostdll_str[] = "Windows.Internal.OpenWithHost.dll";
            WindowsInternalOpenWithHostdll = f_LoadLibraryA(WindowsInternalOpenWithHostdll_str);
        }
    }
    __forceinline void load_WindowsInternalPlatformExtensionDevicePickerExperience() noexcept {
        if (f_LoadLibraryA) {
            char WindowsInternalPlatformExtensionDevicePickerExperiencedll_str[] = "Windows.Internal.PlatformExtension.DevicePickerExperience.dll";
            WindowsInternalPlatformExtensionDevicePickerExperiencedll = f_LoadLibraryA(WindowsInternalPlatformExtensionDevicePickerExperiencedll_str);
        }
    }
    __forceinline void load_WindowsInternalPlatformExtensionMiracastBannerExperience() noexcept {
        if (f_LoadLibraryA) {
            char WindowsInternalPlatformExtensionMiracastBannerExperiencedll_str[] = "Windows.Internal.PlatformExtension.MiracastBannerExperience.dll";
            WindowsInternalPlatformExtensionMiracastBannerExperiencedll = f_LoadLibraryA(WindowsInternalPlatformExtensionMiracastBannerExperiencedll_str);
        }
    }
    __forceinline void load_WindowsInternalPredictionUnit() noexcept {
        if (f_LoadLibraryA) {
            char WindowsInternalPredictionUnitdll_str[] = "Windows.Internal.PredictionUnit.dll";
            WindowsInternalPredictionUnitdll = f_LoadLibraryA(WindowsInternalPredictionUnitdll_str);
        }
    }
    __forceinline void load_WindowsInternalSecurityAttestationDeviceAttestation() noexcept {
        if (f_LoadLibraryA) {
            char WindowsInternalSecurityAttestationDeviceAttestationdll_str[] = "Windows.Internal.Security.Attestation.DeviceAttestation.dll";
            WindowsInternalSecurityAttestationDeviceAttestationdll = f_LoadLibraryA(WindowsInternalSecurityAttestationDeviceAttestationdll_str);
        }
    }
    __forceinline void load_WindowsInternalSecurityMitigationsBroker() noexcept {
        if (f_LoadLibraryA) {
            char WindowsInternalSecurityMitigationsBrokerdll_str[] = "Windows.Internal.SecurityMitigationsBroker.dll";
            WindowsInternalSecurityMitigationsBrokerdll = f_LoadLibraryA(WindowsInternalSecurityMitigationsBrokerdll_str);
        }
    }
    __forceinline void load_WindowsInternalShellBroker() noexcept {
        if (f_LoadLibraryA) {
            char WindowsInternalShellBrokerdll_str[] = "Windows.Internal.Shell.Broker.dll";
            WindowsInternalShellBrokerdll = f_LoadLibraryA(WindowsInternalShellBrokerdll_str);
        }
    }
    __forceinline void load_WindowsInternalShellCloudDesktopTransitionScreen() noexcept {
        if (f_LoadLibraryA) {
            char WindowsInternalShellCloudDesktopTransitionScreendll_str[] = "Windows.Internal.Shell.CloudDesktop.TransitionScreen.dll";
            WindowsInternalShellCloudDesktopTransitionScreendll = f_LoadLibraryA(WindowsInternalShellCloudDesktopTransitionScreendll_str);
        }
    }
    __forceinline void load_WindowsInternalShellXamlInputViewHost() noexcept {
        if (f_LoadLibraryA) {
            char WindowsInternalShellXamlInputViewHostdll_str[] = "Windows.Internal.Shell.XamlInputViewHost.dll";
            WindowsInternalShellXamlInputViewHostdll = f_LoadLibraryA(WindowsInternalShellXamlInputViewHostdll_str);
        }
    }
    __forceinline void load_windowsinternalshellcommonAccountsControlExperience() noexcept {
        if (f_LoadLibraryA) {
            char windowsinternalshellcommonAccountsControlExperiencedll_str[] = "windows.internal.shellcommon.AccountsControlExperience.dll";
            windowsinternalshellcommonAccountsControlExperiencedll = f_LoadLibraryA(windowsinternalshellcommonAccountsControlExperiencedll_str);
        }
    }
    __forceinline void load_windowsinternalshellcommonAppResolverModal() noexcept {
        if (f_LoadLibraryA) {
            char windowsinternalshellcommonAppResolverModaldll_str[] = "windows.internal.shellcommon.AppResolverModal.dll";
            windowsinternalshellcommonAppResolverModaldll = f_LoadLibraryA(windowsinternalshellcommonAppResolverModaldll_str);
        }
    }
    __forceinline void load_WindowsInternalShellCommonBroker() noexcept {
        if (f_LoadLibraryA) {
            char WindowsInternalShellCommonBrokerdll_str[] = "Windows.Internal.ShellCommon.Broker.dll";
            WindowsInternalShellCommonBrokerdll = f_LoadLibraryA(WindowsInternalShellCommonBrokerdll_str);
        }
    }
    __forceinline void load_WindowsInternalShellCommon() noexcept {
        if (f_LoadLibraryA) {
            char WindowsInternalShellCommondll_str[] = "Windows.Internal.ShellCommon.dll";
            WindowsInternalShellCommondll = f_LoadLibraryA(WindowsInternalShellCommondll_str);
        }
    }
    __forceinline void load_windowsinternalshellcommonFilePickerExperienceMEM() noexcept {
        if (f_LoadLibraryA) {
            char windowsinternalshellcommonFilePickerExperienceMEMdll_str[] = "windows.internal.shellcommon.FilePickerExperienceMEM.dll";
            windowsinternalshellcommonFilePickerExperienceMEMdll = f_LoadLibraryA(windowsinternalshellcommonFilePickerExperienceMEMdll_str);
        }
    }
    __forceinline void load_WindowsInternalShellCommonPrintExperience() noexcept {
        if (f_LoadLibraryA) {
            char WindowsInternalShellCommonPrintExperiencedll_str[] = "Windows.Internal.ShellCommon.PrintExperience.dll";
            WindowsInternalShellCommonPrintExperiencedll = f_LoadLibraryA(WindowsInternalShellCommonPrintExperiencedll_str);
        }
    }
    __forceinline void load_windowsinternalshellcommonshareexperience() noexcept {
        if (f_LoadLibraryA) {
            char windowsinternalshellcommonshareexperiencedll_str[] = "windows.internal.shellcommon.shareexperience.dll";
            windowsinternalshellcommonshareexperiencedll = f_LoadLibraryA(windowsinternalshellcommonshareexperiencedll_str);
        }
    }
    __forceinline void load_windowsinternalshellcommonTokenBrokerModal() noexcept {
        if (f_LoadLibraryA) {
            char windowsinternalshellcommonTokenBrokerModaldll_str[] = "windows.internal.shellcommon.TokenBrokerModal.dll";
            windowsinternalshellcommonTokenBrokerModaldll = f_LoadLibraryA(windowsinternalshellcommonTokenBrokerModaldll_str);
        }
    }
    __forceinline void load_WindowsInternalSignals() noexcept {
        if (f_LoadLibraryA) {
            char WindowsInternalSignalsdll_str[] = "Windows.Internal.Signals.dll";
            WindowsInternalSignalsdll = f_LoadLibraryA(WindowsInternalSignalsdll_str);
        }
    }
    __forceinline void load_WindowsInternalSystemUserProfile() noexcept {
        if (f_LoadLibraryA) {
            char WindowsInternalSystemUserProfiledll_str[] = "Windows.Internal.System.UserProfile.dll";
            WindowsInternalSystemUserProfiledll = f_LoadLibraryA(WindowsInternalSystemUserProfiledll_str);
        }
    }
    __forceinline void load_WindowsInternalTaskbar() noexcept {
        if (f_LoadLibraryA) {
            char WindowsInternalTaskbardll_str[] = "Windows.Internal.Taskbar.dll";
            WindowsInternalTaskbardll = f_LoadLibraryA(WindowsInternalTaskbardll_str);
        }
    }
    __forceinline void load_WindowsInternalUIBioEnrollmentProxyStub() noexcept {
        if (f_LoadLibraryA) {
            char WindowsInternalUIBioEnrollmentProxyStubdll_str[] = "Windows.Internal.UI.BioEnrollment.ProxyStub.dll";
            WindowsInternalUIBioEnrollmentProxyStubdll = f_LoadLibraryA(WindowsInternalUIBioEnrollmentProxyStubdll_str);
        }
    }
    __forceinline void load_WindowsInternalUIDialogs() noexcept {
        if (f_LoadLibraryA) {
            char WindowsInternalUIDialogsdll_str[] = "Windows.Internal.UI.Dialogs.dll";
            WindowsInternalUIDialogsdll = f_LoadLibraryA(WindowsInternalUIDialogsdll_str);
        }
    }
    __forceinline void load_WindowsInternalUILogonProxyStub() noexcept {
        if (f_LoadLibraryA) {
            char WindowsInternalUILogonProxyStubdll_str[] = "Windows.Internal.UI.Logon.ProxyStub.dll";
            WindowsInternalUILogonProxyStubdll = f_LoadLibraryA(WindowsInternalUILogonProxyStubdll_str);
        }
    }
    __forceinline void load_WindowsInternalUIShellWindowTabManager() noexcept {
        if (f_LoadLibraryA) {
            char WindowsInternalUIShellWindowTabManagerdll_str[] = "Windows.Internal.UI.Shell.WindowTabManager.dll";
            WindowsInternalUIShellWindowTabManagerdll = f_LoadLibraryA(WindowsInternalUIShellWindowTabManagerdll_str);
        }
    }
    __forceinline void load_WindowsInternalWaaSMedicDocked() noexcept {
        if (f_LoadLibraryA) {
            char WindowsInternalWaaSMedicDockeddll_str[] = "Windows.Internal.WaaSMedicDocked.dll";
            WindowsInternalWaaSMedicDockeddll = f_LoadLibraryA(WindowsInternalWaaSMedicDockeddll_str);
        }
    }
    __forceinline void load_WindowsManagementEnrollmentStatusTrackingConfigProvider() noexcept {
        if (f_LoadLibraryA) {
            char WindowsManagementEnrollmentStatusTrackingConfigProviderdll_str[] = "Windows.Management.EnrollmentStatusTracking.ConfigProvider.dll";
            WindowsManagementEnrollmentStatusTrackingConfigProviderdll = f_LoadLibraryA(WindowsManagementEnrollmentStatusTrackingConfigProviderdll_str);
        }
    }
    __forceinline void load_WindowsManagementInprocObjects() noexcept {
        if (f_LoadLibraryA) {
            char WindowsManagementInprocObjectsdll_str[] = "Windows.Management.InprocObjects.dll";
            WindowsManagementInprocObjectsdll = f_LoadLibraryA(WindowsManagementInprocObjectsdll_str);
        }
    }
    __forceinline void load_WindowsManagementModernDeploymentConfigProviders() noexcept {
        if (f_LoadLibraryA) {
            char WindowsManagementModernDeploymentConfigProvidersdll_str[] = "Windows.Management.ModernDeployment.ConfigProviders.dll";
            WindowsManagementModernDeploymentConfigProvidersdll = f_LoadLibraryA(WindowsManagementModernDeploymentConfigProvidersdll_str);
        }
    }
    __forceinline void load_WindowsManagementProvisioningProxyStub() noexcept {
        if (f_LoadLibraryA) {
            char WindowsManagementProvisioningProxyStubdll_str[] = "Windows.Management.Provisioning.ProxyStub.dll";
            WindowsManagementProvisioningProxyStubdll = f_LoadLibraryA(WindowsManagementProvisioningProxyStubdll_str);
        }
    }
    __forceinline void load_WindowsManagementSecureAssessmentCfgProvider() noexcept {
        if (f_LoadLibraryA) {
            char WindowsManagementSecureAssessmentCfgProviderdll_str[] = "Windows.Management.SecureAssessment.CfgProvider.dll";
            WindowsManagementSecureAssessmentCfgProviderdll = f_LoadLibraryA(WindowsManagementSecureAssessmentCfgProviderdll_str);
        }
    }
    __forceinline void load_WindowsManagementSecureAssessmentDiagnostics() noexcept {
        if (f_LoadLibraryA) {
            char WindowsManagementSecureAssessmentDiagnosticsdll_str[] = "Windows.Management.SecureAssessment.Diagnostics.dll";
            WindowsManagementSecureAssessmentDiagnosticsdll = f_LoadLibraryA(WindowsManagementSecureAssessmentDiagnosticsdll_str);
        }
    }
    __forceinline void load_WindowsManagementService() noexcept {
        if (f_LoadLibraryA) {
            char WindowsManagementServicedll_str[] = "Windows.Management.Service.dll";
            WindowsManagementServicedll = f_LoadLibraryA(WindowsManagementServicedll_str);
        }
    }
    __forceinline void load_WindowsManagementUpdate() noexcept {
        if (f_LoadLibraryA) {
            char WindowsManagementUpdatedll_str[] = "Windows.Management.Update.dll";
            WindowsManagementUpdatedll = f_LoadLibraryA(WindowsManagementUpdatedll_str);
        }
    }
    __forceinline void load_WindowsManagementWorkplace() noexcept {
        if (f_LoadLibraryA) {
            char WindowsManagementWorkplacedll_str[] = "Windows.Management.Workplace.dll";
            WindowsManagementWorkplacedll = f_LoadLibraryA(WindowsManagementWorkplacedll_str);
        }
    }
    __forceinline void load_WindowsManagementWorkplaceWorkplaceSettings() noexcept {
        if (f_LoadLibraryA) {
            char WindowsManagementWorkplaceWorkplaceSettingsdll_str[] = "Windows.Management.Workplace.WorkplaceSettings.dll";
            WindowsManagementWorkplaceWorkplaceSettingsdll = f_LoadLibraryA(WindowsManagementWorkplaceWorkplaceSettingsdll_str);
        }
    }
    __forceinline void load_WindowsMediaAudio() noexcept {
        if (f_LoadLibraryA) {
            char WindowsMediaAudiodll_str[] = "Windows.Media.Audio.dll";
            WindowsMediaAudiodll = f_LoadLibraryA(WindowsMediaAudiodll_str);
        }
    }
    __forceinline void load_WindowsMediaBackgroundMediaPlayback() noexcept {
        if (f_LoadLibraryA) {
            char WindowsMediaBackgroundMediaPlaybackdll_str[] = "Windows.Media.BackgroundMediaPlayback.dll";
            WindowsMediaBackgroundMediaPlaybackdll = f_LoadLibraryA(WindowsMediaBackgroundMediaPlaybackdll_str);
        }
    }
    __forceinline void load_WindowsMediaDevices() noexcept {
        if (f_LoadLibraryA) {
            char WindowsMediaDevicesdll_str[] = "Windows.Media.Devices.dll";
            WindowsMediaDevicesdll = f_LoadLibraryA(WindowsMediaDevicesdll_str);
        }
    }
    __forceinline void load_WindowsMedia() noexcept {
        if (f_LoadLibraryA) {
            char WindowsMediadll_str[] = "Windows.Media.dll";
            WindowsMediadll = f_LoadLibraryA(WindowsMediadll_str);
        }
    }
    __forceinline void load_WindowsMediaEditing() noexcept {
        if (f_LoadLibraryA) {
            char WindowsMediaEditingdll_str[] = "Windows.Media.Editing.dll";
            WindowsMediaEditingdll = f_LoadLibraryA(WindowsMediaEditingdll_str);
        }
    }
    __forceinline void load_WindowsMediaFaceAnalysis() noexcept {
        if (f_LoadLibraryA) {
            char WindowsMediaFaceAnalysisdll_str[] = "Windows.Media.FaceAnalysis.dll";
            WindowsMediaFaceAnalysisdll = f_LoadLibraryA(WindowsMediaFaceAnalysisdll_str);
        }
    }
    __forceinline void load_WindowsMediaImport() noexcept {
        if (f_LoadLibraryA) {
            char WindowsMediaImportdll_str[] = "Windows.Media.Import.dll";
            WindowsMediaImportdll = f_LoadLibraryA(WindowsMediaImportdll_str);
        }
    }
    __forceinline void load_WindowsMediaMediaControl() noexcept {
        if (f_LoadLibraryA) {
            char WindowsMediaMediaControldll_str[] = "Windows.Media.MediaControl.dll";
            WindowsMediaMediaControldll = f_LoadLibraryA(WindowsMediaMediaControldll_str);
        }
    }
    __forceinline void load_WindowsMediaMixedRealityCapture() noexcept {
        if (f_LoadLibraryA) {
            char WindowsMediaMixedRealityCapturedll_str[] = "Windows.Media.MixedRealityCapture.dll";
            WindowsMediaMixedRealityCapturedll = f_LoadLibraryA(WindowsMediaMixedRealityCapturedll_str);
        }
    }
    __forceinline void load_WindowsMediaOcr() noexcept {
        if (f_LoadLibraryA) {
            char WindowsMediaOcrdll_str[] = "Windows.Media.Ocr.dll";
            WindowsMediaOcrdll = f_LoadLibraryA(WindowsMediaOcrdll_str);
        }
    }
    __forceinline void load_WindowsMediaPlaybackBackgroundMediaPlayer() noexcept {
        if (f_LoadLibraryA) {
            char WindowsMediaPlaybackBackgroundMediaPlayerdll_str[] = "Windows.Media.Playback.BackgroundMediaPlayer.dll";
            WindowsMediaPlaybackBackgroundMediaPlayerdll = f_LoadLibraryA(WindowsMediaPlaybackBackgroundMediaPlayerdll_str);
        }
    }
    __forceinline void load_WindowsMediaPlaybackMediaPlayer() noexcept {
        if (f_LoadLibraryA) {
            char WindowsMediaPlaybackMediaPlayerdll_str[] = "Windows.Media.Playback.MediaPlayer.dll";
            WindowsMediaPlaybackMediaPlayerdll = f_LoadLibraryA(WindowsMediaPlaybackMediaPlayerdll_str);
        }
    }
    __forceinline void load_WindowsMediaPlaybackProxyStub() noexcept {
        if (f_LoadLibraryA) {
            char WindowsMediaPlaybackProxyStubdll_str[] = "Windows.Media.Playback.ProxyStub.dll";
            WindowsMediaPlaybackProxyStubdll = f_LoadLibraryA(WindowsMediaPlaybackProxyStubdll_str);
        }
    }
    __forceinline void load_WindowsMediaProtectionPlayReady() noexcept {
        if (f_LoadLibraryA) {
            char WindowsMediaProtectionPlayReadydll_str[] = "Windows.Media.Protection.PlayReady.dll";
            WindowsMediaProtectionPlayReadydll = f_LoadLibraryA(WindowsMediaProtectionPlayReadydll_str);
        }
    }
    __forceinline void load_WindowsMediaRenewal() noexcept {
        if (f_LoadLibraryA) {
            char WindowsMediaRenewaldll_str[] = "Windows.Media.Renewal.dll";
            WindowsMediaRenewaldll = f_LoadLibraryA(WindowsMediaRenewaldll_str);
        }
    }
    __forceinline void load_WindowsMediaSpeech() noexcept {
        if (f_LoadLibraryA) {
            char WindowsMediaSpeechdll_str[] = "Windows.Media.Speech.dll";
            WindowsMediaSpeechdll = f_LoadLibraryA(WindowsMediaSpeechdll_str);
        }
    }
    __forceinline void load_WindowsMediaSpeechUXRes() noexcept {
        if (f_LoadLibraryA) {
            char WindowsMediaSpeechUXResdll_str[] = "Windows.Media.Speech.UXRes.dll";
            WindowsMediaSpeechUXResdll = f_LoadLibraryA(WindowsMediaSpeechUXResdll_str);
        }
    }
    __forceinline void load_WindowsMediaStreaming() noexcept {
        if (f_LoadLibraryA) {
            char WindowsMediaStreamingdll_str[] = "Windows.Media.Streaming.dll";
            WindowsMediaStreamingdll = f_LoadLibraryA(WindowsMediaStreamingdll_str);
        }
    }
    __forceinline void load_WindowsMediaStreamingps() noexcept {
        if (f_LoadLibraryA) {
            char WindowsMediaStreamingpsdll_str[] = "Windows.Media.Streaming.ps.dll";
            WindowsMediaStreamingpsdll = f_LoadLibraryA(WindowsMediaStreamingpsdll_str);
        }
    }
    __forceinline void load_WindowsMirage() noexcept {
        if (f_LoadLibraryA) {
            char WindowsMiragedll_str[] = "Windows.Mirage.dll";
            WindowsMiragedll = f_LoadLibraryA(WindowsMiragedll_str);
        }
    }
    __forceinline void load_WindowsMirageInternal() noexcept {
        if (f_LoadLibraryA) {
            char WindowsMirageInternaldll_str[] = "Windows.Mirage.Internal.dll";
            WindowsMirageInternaldll = f_LoadLibraryA(WindowsMirageInternaldll_str);
        }
    }
    __forceinline void load_WindowsNetworkingBackgroundTransferBackgroundManagerPolicy() noexcept {
        if (f_LoadLibraryA) {
            char WindowsNetworkingBackgroundTransferBackgroundManagerPolicydll_str[] = "Windows.Networking.BackgroundTransfer.BackgroundManagerPolicy.dll";
            WindowsNetworkingBackgroundTransferBackgroundManagerPolicydll = f_LoadLibraryA(WindowsNetworkingBackgroundTransferBackgroundManagerPolicydll_str);
        }
    }
    __forceinline void load_WindowsNetworkingBackgroundTransferContentPrefetchTask() noexcept {
        if (f_LoadLibraryA) {
            char WindowsNetworkingBackgroundTransferContentPrefetchTaskdll_str[] = "Windows.Networking.BackgroundTransfer.ContentPrefetchTask.dll";
            WindowsNetworkingBackgroundTransferContentPrefetchTaskdll = f_LoadLibraryA(WindowsNetworkingBackgroundTransferContentPrefetchTaskdll_str);
        }
    }
    __forceinline void load_WindowsNetworkingBackgroundTransfer() noexcept {
        if (f_LoadLibraryA) {
            char WindowsNetworkingBackgroundTransferdll_str[] = "Windows.Networking.BackgroundTransfer.dll";
            WindowsNetworkingBackgroundTransferdll = f_LoadLibraryA(WindowsNetworkingBackgroundTransferdll_str);
        }
    }
    __forceinline void load_WindowsNetworkingConnectivity() noexcept {
        if (f_LoadLibraryA) {
            char WindowsNetworkingConnectivitydll_str[] = "Windows.Networking.Connectivity.dll";
            WindowsNetworkingConnectivitydll = f_LoadLibraryA(WindowsNetworkingConnectivitydll_str);
        }
    }
    __forceinline void load_WindowsNetworking() noexcept {
        if (f_LoadLibraryA) {
            char WindowsNetworkingdll_str[] = "Windows.Networking.dll";
            WindowsNetworkingdll = f_LoadLibraryA(WindowsNetworkingdll_str);
        }
    }
    __forceinline void load_WindowsNetworkingHostName() noexcept {
        if (f_LoadLibraryA) {
            char WindowsNetworkingHostNamedll_str[] = "Windows.Networking.HostName.dll";
            WindowsNetworkingHostNamedll = f_LoadLibraryA(WindowsNetworkingHostNamedll_str);
        }
    }
    __forceinline void load_WindowsNetworkingNetworkOperatorsESim() noexcept {
        if (f_LoadLibraryA) {
            char WindowsNetworkingNetworkOperatorsESimdll_str[] = "Windows.Networking.NetworkOperators.ESim.dll";
            WindowsNetworkingNetworkOperatorsESimdll = f_LoadLibraryA(WindowsNetworkingNetworkOperatorsESimdll_str);
        }
    }
    __forceinline void load_WindowsNetworkingNetworkOperatorsHotspotAuthentication() noexcept {
        if (f_LoadLibraryA) {
            char WindowsNetworkingNetworkOperatorsHotspotAuthenticationdll_str[] = "Windows.Networking.NetworkOperators.HotspotAuthentication.dll";
            WindowsNetworkingNetworkOperatorsHotspotAuthenticationdll = f_LoadLibraryA(WindowsNetworkingNetworkOperatorsHotspotAuthenticationdll_str);
        }
    }
    __forceinline void load_WindowsNetworkingProximity() noexcept {
        if (f_LoadLibraryA) {
            char WindowsNetworkingProximitydll_str[] = "Windows.Networking.Proximity.dll";
            WindowsNetworkingProximitydll = f_LoadLibraryA(WindowsNetworkingProximitydll_str);
        }
    }
    __forceinline void load_WindowsNetworkingServiceDiscoveryDnssd() noexcept {
        if (f_LoadLibraryA) {
            char WindowsNetworkingServiceDiscoveryDnssddll_str[] = "Windows.Networking.ServiceDiscovery.Dnssd.dll";
            WindowsNetworkingServiceDiscoveryDnssddll = f_LoadLibraryA(WindowsNetworkingServiceDiscoveryDnssddll_str);
        }
    }
    __forceinline void load_WindowsNetworkingSocketsPushEnabledApplication() noexcept {
        if (f_LoadLibraryA) {
            char WindowsNetworkingSocketsPushEnabledApplicationdll_str[] = "Windows.Networking.Sockets.PushEnabledApplication.dll";
            WindowsNetworkingSocketsPushEnabledApplicationdll = f_LoadLibraryA(WindowsNetworkingSocketsPushEnabledApplicationdll_str);
        }
    }
    __forceinline void load_WindowsNetworkingUXEapRequestHandler() noexcept {
        if (f_LoadLibraryA) {
            char WindowsNetworkingUXEapRequestHandlerdll_str[] = "Windows.Networking.UX.EapRequestHandler.dll";
            WindowsNetworkingUXEapRequestHandlerdll = f_LoadLibraryA(WindowsNetworkingUXEapRequestHandlerdll_str);
        }
    }
    __forceinline void load_WindowsNetworkingVpn() noexcept {
        if (f_LoadLibraryA) {
            char WindowsNetworkingVpndll_str[] = "Windows.Networking.Vpn.dll";
            WindowsNetworkingVpndll = f_LoadLibraryA(WindowsNetworkingVpndll_str);
        }
    }
    __forceinline void load_WindowsNetworkingXboxLiveProxyStub() noexcept {
        if (f_LoadLibraryA) {
            char WindowsNetworkingXboxLiveProxyStubdll_str[] = "Windows.Networking.XboxLive.ProxyStub.dll";
            WindowsNetworkingXboxLiveProxyStubdll = f_LoadLibraryA(WindowsNetworkingXboxLiveProxyStubdll_str);
        }
    }
    __forceinline void load_WindowsPayments() noexcept {
        if (f_LoadLibraryA) {
            char WindowsPaymentsdll_str[] = "Windows.Payments.dll";
            WindowsPaymentsdll = f_LoadLibraryA(WindowsPaymentsdll_str);
        }
    }
    __forceinline void load_WindowsPerceptionStub() noexcept {
        if (f_LoadLibraryA) {
            char WindowsPerceptionStubdll_str[] = "Windows.Perception.Stub.dll";
            WindowsPerceptionStubdll = f_LoadLibraryA(WindowsPerceptionStubdll_str);
        }
    }
    __forceinline void load_WindowsSecurityAuthenticationIdentityProvider() noexcept {
        if (f_LoadLibraryA) {
            char WindowsSecurityAuthenticationIdentityProviderdll_str[] = "Windows.Security.Authentication.Identity.Provider.dll";
            WindowsSecurityAuthenticationIdentityProviderdll = f_LoadLibraryA(WindowsSecurityAuthenticationIdentityProviderdll_str);
        }
    }
    __forceinline void load_WindowsSecurityAuthenticationOnlineId() noexcept {
        if (f_LoadLibraryA) {
            char WindowsSecurityAuthenticationOnlineIddll_str[] = "Windows.Security.Authentication.OnlineId.dll";
            WindowsSecurityAuthenticationOnlineIddll = f_LoadLibraryA(WindowsSecurityAuthenticationOnlineIddll_str);
        }
    }
    __forceinline void load_WindowsSecurityAuthenticationWebCore() noexcept {
        if (f_LoadLibraryA) {
            char WindowsSecurityAuthenticationWebCoredll_str[] = "Windows.Security.Authentication.Web.Core.dll";
            WindowsSecurityAuthenticationWebCoredll = f_LoadLibraryA(WindowsSecurityAuthenticationWebCoredll_str);
        }
    }
    __forceinline void load_WindowsSecurityCredentialsUICredentialPicker() noexcept {
        if (f_LoadLibraryA) {
            char WindowsSecurityCredentialsUICredentialPickerdll_str[] = "Windows.Security.Credentials.UI.CredentialPicker.dll";
            WindowsSecurityCredentialsUICredentialPickerdll = f_LoadLibraryA(WindowsSecurityCredentialsUICredentialPickerdll_str);
        }
    }
    __forceinline void load_WindowsSecurityCredentialsUIUserConsentVerifier() noexcept {
        if (f_LoadLibraryA) {
            char WindowsSecurityCredentialsUIUserConsentVerifierdll_str[] = "Windows.Security.Credentials.UI.UserConsentVerifier.dll";
            WindowsSecurityCredentialsUIUserConsentVerifierdll = f_LoadLibraryA(WindowsSecurityCredentialsUIUserConsentVerifierdll_str);
        }
    }
    __forceinline void load_WindowsSecurityIntegrity() noexcept {
        if (f_LoadLibraryA) {
            char WindowsSecurityIntegritydll_str[] = "Windows.Security.Integrity.dll";
            WindowsSecurityIntegritydll = f_LoadLibraryA(WindowsSecurityIntegritydll_str);
        }
    }
    __forceinline void load_WindowsServicesTargetedContent() noexcept {
        if (f_LoadLibraryA) {
            char WindowsServicesTargetedContentdll_str[] = "Windows.Services.TargetedContent.dll";
            WindowsServicesTargetedContentdll = f_LoadLibraryA(WindowsServicesTargetedContentdll_str);
        }
    }
    __forceinline void load_WindowsSharedPCAccountManager() noexcept {
        if (f_LoadLibraryA) {
            char WindowsSharedPCAccountManagerdll_str[] = "Windows.SharedPC.AccountManager.dll";
            WindowsSharedPCAccountManagerdll = f_LoadLibraryA(WindowsSharedPCAccountManagerdll_str);
        }
    }
    __forceinline void load_WindowsSharedPCCredentialProvider() noexcept {
        if (f_LoadLibraryA) {
            char WindowsSharedPCCredentialProviderdll_str[] = "Windows.SharedPC.CredentialProvider.dll";
            WindowsSharedPCCredentialProviderdll = f_LoadLibraryA(WindowsSharedPCCredentialProviderdll_str);
        }
    }
    __forceinline void load_WindowsShellBlueLightReduction() noexcept {
        if (f_LoadLibraryA) {
            char WindowsShellBlueLightReductiondll_str[] = "Windows.Shell.BlueLightReduction.dll";
            WindowsShellBlueLightReductiondll = f_LoadLibraryA(WindowsShellBlueLightReductiondll_str);
        }
    }
    __forceinline void load_WindowsShellServiceHostBuilder() noexcept {
        if (f_LoadLibraryA) {
            char WindowsShellServiceHostBuilderdll_str[] = "Windows.Shell.ServiceHostBuilder.dll";
            WindowsShellServiceHostBuilderdll = f_LoadLibraryA(WindowsShellServiceHostBuilderdll_str);
        }
    }
    __forceinline void load_WindowsShellStartLayoutPopulationEvents() noexcept {
        if (f_LoadLibraryA) {
            char WindowsShellStartLayoutPopulationEventsdll_str[] = "Windows.Shell.StartLayoutPopulationEvents.dll";
            WindowsShellStartLayoutPopulationEventsdll = f_LoadLibraryA(WindowsShellStartLayoutPopulationEventsdll_str);
        }
    }
    __forceinline void load_WindowsStateRepository() noexcept {
        if (f_LoadLibraryA) {
            char WindowsStateRepositorydll_str[] = "Windows.StateRepository.dll";
            WindowsStateRepositorydll = f_LoadLibraryA(WindowsStateRepositorydll_str);
        }
    }
    __forceinline void load_WindowsStateRepositoryBroker() noexcept {
        if (f_LoadLibraryA) {
            char WindowsStateRepositoryBrokerdll_str[] = "Windows.StateRepositoryBroker.dll";
            WindowsStateRepositoryBrokerdll = f_LoadLibraryA(WindowsStateRepositoryBrokerdll_str);
        }
    }
    __forceinline void load_WindowsStateRepositoryClient() noexcept {
        if (f_LoadLibraryA) {
            char WindowsStateRepositoryClientdll_str[] = "Windows.StateRepositoryClient.dll";
            WindowsStateRepositoryClientdll = f_LoadLibraryA(WindowsStateRepositoryClientdll_str);
        }
    }
    __forceinline void load_WindowsStateRepositoryCore() noexcept {
        if (f_LoadLibraryA) {
            char WindowsStateRepositoryCoredll_str[] = "Windows.StateRepositoryCore.dll";
            WindowsStateRepositoryCoredll = f_LoadLibraryA(WindowsStateRepositoryCoredll_str);
        }
    }
    __forceinline void load_WindowsStateRepositoryPS() noexcept {
        if (f_LoadLibraryA) {
            char WindowsStateRepositoryPSdll_str[] = "Windows.StateRepositoryPS.dll";
            WindowsStateRepositoryPSdll = f_LoadLibraryA(WindowsStateRepositoryPSdll_str);
        }
    }
    __forceinline void load_WindowsStateRepositoryUpgrade() noexcept {
        if (f_LoadLibraryA) {
            char WindowsStateRepositoryUpgradedll_str[] = "Windows.StateRepositoryUpgrade.dll";
            WindowsStateRepositoryUpgradedll = f_LoadLibraryA(WindowsStateRepositoryUpgradedll_str);
        }
    }
    __forceinline void load_WindowsStorageApplicationData() noexcept {
        if (f_LoadLibraryA) {
            char WindowsStorageApplicationDatadll_str[] = "Windows.Storage.ApplicationData.dll";
            WindowsStorageApplicationDatadll = f_LoadLibraryA(WindowsStorageApplicationDatadll_str);
        }
    }
    __forceinline void load_WindowsStorageCompression() noexcept {
        if (f_LoadLibraryA) {
            char WindowsStorageCompressiondll_str[] = "Windows.Storage.Compression.dll";
            WindowsStorageCompressiondll = f_LoadLibraryA(WindowsStorageCompressiondll_str);
        }
    }
    __forceinline void load_windowsstorage() noexcept {
        if (f_LoadLibraryA) {
            char windowsstoragedll_str[] = "windows.storage.dll";
            windowsstoragedll = f_LoadLibraryA(windowsstoragedll_str);
        }
    }
    __forceinline void load_WindowsStorageOneCore() noexcept {
        if (f_LoadLibraryA) {
            char WindowsStorageOneCoredll_str[] = "Windows.Storage.OneCore.dll";
            WindowsStorageOneCoredll = f_LoadLibraryA(WindowsStorageOneCoredll_str);
        }
    }
    __forceinline void load_WindowsStorageSearch() noexcept {
        if (f_LoadLibraryA) {
            char WindowsStorageSearchdll_str[] = "Windows.Storage.Search.dll";
            WindowsStorageSearchdll = f_LoadLibraryA(WindowsStorageSearchdll_str);
        }
    }
    __forceinline void load_WindowsSystemDiagnostics() noexcept {
        if (f_LoadLibraryA) {
            char WindowsSystemDiagnosticsdll_str[] = "Windows.System.Diagnostics.dll";
            WindowsSystemDiagnosticsdll = f_LoadLibraryA(WindowsSystemDiagnosticsdll_str);
        }
    }
    __forceinline void load_WindowsSystemDiagnosticsTelemetryPlatformTelemetryClient() noexcept {
        if (f_LoadLibraryA) {
            char WindowsSystemDiagnosticsTelemetryPlatformTelemetryClientdll_str[] = "Windows.System.Diagnostics.Telemetry.PlatformTelemetryClient.dll";
            WindowsSystemDiagnosticsTelemetryPlatformTelemetryClientdll = f_LoadLibraryA(WindowsSystemDiagnosticsTelemetryPlatformTelemetryClientdll_str);
        }
    }
    __forceinline void load_WindowsSystemDiagnosticsTraceReportingPlatformDiagnosticActions() noexcept {
        if (f_LoadLibraryA) {
            char WindowsSystemDiagnosticsTraceReportingPlatformDiagnosticActionsdll_str[] = "Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticActions.dll";
            WindowsSystemDiagnosticsTraceReportingPlatformDiagnosticActionsdll = f_LoadLibraryA(WindowsSystemDiagnosticsTraceReportingPlatformDiagnosticActionsdll_str);
        }
    }
    __forceinline void load_WindowsSystemLauncher() noexcept {
        if (f_LoadLibraryA) {
            char WindowsSystemLauncherdll_str[] = "Windows.System.Launcher.dll";
            WindowsSystemLauncherdll = f_LoadLibraryA(WindowsSystemLauncherdll_str);
        }
    }
    __forceinline void load_WindowsSystemProfileHardwareId() noexcept {
        if (f_LoadLibraryA) {
            char WindowsSystemProfileHardwareIddll_str[] = "Windows.System.Profile.HardwareId.dll";
            WindowsSystemProfileHardwareIddll = f_LoadLibraryA(WindowsSystemProfileHardwareIddll_str);
        }
    }
    __forceinline void load_WindowsSystemProfilePlatformDiagnosticsAndUsageDataSettings() noexcept {
        if (f_LoadLibraryA) {
            char WindowsSystemProfilePlatformDiagnosticsAndUsageDataSettingsdll_str[] = "Windows.System.Profile.PlatformDiagnosticsAndUsageDataSettings.dll";
            WindowsSystemProfilePlatformDiagnosticsAndUsageDataSettingsdll = f_LoadLibraryA(WindowsSystemProfilePlatformDiagnosticsAndUsageDataSettingsdll_str);
        }
    }
    __forceinline void load_WindowsSystemProfileRetailInfo() noexcept {
        if (f_LoadLibraryA) {
            char WindowsSystemProfileRetailInfodll_str[] = "Windows.System.Profile.RetailInfo.dll";
            WindowsSystemProfileRetailInfodll = f_LoadLibraryA(WindowsSystemProfileRetailInfodll_str);
        }
    }
    __forceinline void load_WindowsSystemProfileSystemId() noexcept {
        if (f_LoadLibraryA) {
            char WindowsSystemProfileSystemIddll_str[] = "Windows.System.Profile.SystemId.dll";
            WindowsSystemProfileSystemIddll = f_LoadLibraryA(WindowsSystemProfileSystemIddll_str);
        }
    }
    __forceinline void load_WindowsSystemProfileSystemManufacturers() noexcept {
        if (f_LoadLibraryA) {
            char WindowsSystemProfileSystemManufacturersdll_str[] = "Windows.System.Profile.SystemManufacturers.dll";
            WindowsSystemProfileSystemManufacturersdll = f_LoadLibraryA(WindowsSystemProfileSystemManufacturersdll_str);
        }
    }
    __forceinline void load_WindowsSystemRemoteDesktop() noexcept {
        if (f_LoadLibraryA) {
            char WindowsSystemRemoteDesktopdll_str[] = "Windows.System.RemoteDesktop.dll";
            WindowsSystemRemoteDesktopdll = f_LoadLibraryA(WindowsSystemRemoteDesktopdll_str);
        }
    }
    __forceinline void load_WindowsSystemSystemManagement() noexcept {
        if (f_LoadLibraryA) {
            char WindowsSystemSystemManagementdll_str[] = "Windows.System.SystemManagement.dll";
            WindowsSystemSystemManagementdll = f_LoadLibraryA(WindowsSystemSystemManagementdll_str);
        }
    }
    __forceinline void load_WindowsSystemUserDeviceAssociation() noexcept {
        if (f_LoadLibraryA) {
            char WindowsSystemUserDeviceAssociationdll_str[] = "Windows.System.UserDeviceAssociation.dll";
            WindowsSystemUserDeviceAssociationdll = f_LoadLibraryA(WindowsSystemUserDeviceAssociationdll_str);
        }
    }
    __forceinline void load_WindowsSystemUserProfileDiagnosticsSettings() noexcept {
        if (f_LoadLibraryA) {
            char WindowsSystemUserProfileDiagnosticsSettingsdll_str[] = "Windows.System.UserProfile.DiagnosticsSettings.dll";
            WindowsSystemUserProfileDiagnosticsSettingsdll = f_LoadLibraryA(WindowsSystemUserProfileDiagnosticsSettingsdll_str);
        }
    }
    __forceinline void load_WindowsUIAccessibility() noexcept {
        if (f_LoadLibraryA) {
            char WindowsUIAccessibilitydll_str[] = "Windows.UI.Accessibility.dll";
            WindowsUIAccessibilitydll = f_LoadLibraryA(WindowsUIAccessibilitydll_str);
        }
    }
    __forceinline void load_WindowsUIAppDefaults() noexcept {
        if (f_LoadLibraryA) {
            char WindowsUIAppDefaultsdll_str[] = "Windows.UI.AppDefaults.dll";
            WindowsUIAppDefaultsdll = f_LoadLibraryA(WindowsUIAppDefaultsdll_str);
        }
    }
    __forceinline void load_WindowsUIBioFeedback() noexcept {
        if (f_LoadLibraryA) {
            char WindowsUIBioFeedbackdll_str[] = "Windows.UI.BioFeedback.dll";
            WindowsUIBioFeedbackdll = f_LoadLibraryA(WindowsUIBioFeedbackdll_str);
        }
    }
    __forceinline void load_WindowsUIBlockedShutdown() noexcept {
        if (f_LoadLibraryA) {
            char WindowsUIBlockedShutdowndll_str[] = "Windows.UI.BlockedShutdown.dll";
            WindowsUIBlockedShutdowndll = f_LoadLibraryA(WindowsUIBlockedShutdowndll_str);
        }
    }
    __forceinline void load_WindowsUICoreTextInput() noexcept {
        if (f_LoadLibraryA) {
            char WindowsUICoreTextInputdll_str[] = "Windows.UI.Core.TextInput.dll";
            WindowsUICoreTextInputdll = f_LoadLibraryA(WindowsUICoreTextInputdll_str);
        }
    }
    __forceinline void load_WindowsUICred() noexcept {
        if (f_LoadLibraryA) {
            char WindowsUICreddll_str[] = "Windows.UI.Cred.dll";
            WindowsUICreddll = f_LoadLibraryA(WindowsUICreddll_str);
        }
    }
    __forceinline void load_WindowsUICredDialogController() noexcept {
        if (f_LoadLibraryA) {
            char WindowsUICredDialogControllerdll_str[] = "Windows.UI.CredDialogController.dll";
            WindowsUICredDialogControllerdll = f_LoadLibraryA(WindowsUICredDialogControllerdll_str);
        }
    }
    __forceinline void load_WindowsUI() noexcept {
        if (f_LoadLibraryA) {
            char WindowsUIdll_str[] = "Windows.UI.dll";
            WindowsUIdll = f_LoadLibraryA(WindowsUIdll_str);
        }
    }
    __forceinline void load_WindowsUIFileExplorer() noexcept {
        if (f_LoadLibraryA) {
            char WindowsUIFileExplorerdll_str[] = "Windows.UI.FileExplorer.dll";
            WindowsUIFileExplorerdll = f_LoadLibraryA(WindowsUIFileExplorerdll_str);
        }
    }
    __forceinline void load_WindowsUIImmersive() noexcept {
        if (f_LoadLibraryA) {
            char WindowsUIImmersivedll_str[] = "Windows.UI.Immersive.dll";
            WindowsUIImmersivedll = f_LoadLibraryA(WindowsUIImmersivedll_str);
        }
    }
    __forceinline void load_WindowsUIInputInkingAnalysis() noexcept {
        if (f_LoadLibraryA) {
            char WindowsUIInputInkingAnalysisdll_str[] = "Windows.UI.Input.Inking.Analysis.dll";
            WindowsUIInputInkingAnalysisdll = f_LoadLibraryA(WindowsUIInputInkingAnalysisdll_str);
        }
    }
    __forceinline void load_WindowsUIInputInking() noexcept {
        if (f_LoadLibraryA) {
            char WindowsUIInputInkingdll_str[] = "Windows.UI.Input.Inking.dll";
            WindowsUIInputInkingdll = f_LoadLibraryA(WindowsUIInputInkingdll_str);
        }
    }
    __forceinline void load_WindowsUILogon() noexcept {
        if (f_LoadLibraryA) {
            char WindowsUILogondll_str[] = "Windows.UI.Logon.dll";
            WindowsUILogondll = f_LoadLibraryA(WindowsUILogondll_str);
        }
    }
    __forceinline void load_WindowsUINetworkUXController() noexcept {
        if (f_LoadLibraryA) {
            char WindowsUINetworkUXControllerdll_str[] = "Windows.UI.NetworkUXController.dll";
            WindowsUINetworkUXControllerdll = f_LoadLibraryA(WindowsUINetworkUXControllerdll_str);
        }
    }
    __forceinline void load_WindowsUIPicturePassword() noexcept {
        if (f_LoadLibraryA) {
            char WindowsUIPicturePassworddll_str[] = "Windows.UI.PicturePassword.dll";
            WindowsUIPicturePassworddll = f_LoadLibraryA(WindowsUIPicturePassworddll_str);
        }
    }
    __forceinline void load_WindowsUISearch() noexcept {
        if (f_LoadLibraryA) {
            char WindowsUISearchdll_str[] = "Windows.UI.Search.dll";
            WindowsUISearchdll = f_LoadLibraryA(WindowsUISearchdll_str);
        }
    }
    __forceinline void load_WindowsUIShell() noexcept {
        if (f_LoadLibraryA) {
            char WindowsUIShelldll_str[] = "Windows.UI.Shell.dll";
            WindowsUIShelldll = f_LoadLibraryA(WindowsUIShelldll_str);
        }
    }
    __forceinline void load_WindowsUIShellInternalAdaptiveCards() noexcept {
        if (f_LoadLibraryA) {
            char WindowsUIShellInternalAdaptiveCardsdll_str[] = "Windows.UI.Shell.Internal.AdaptiveCards.dll";
            WindowsUIShellInternalAdaptiveCardsdll = f_LoadLibraryA(WindowsUIShellInternalAdaptiveCardsdll_str);
        }
    }
    __forceinline void load_WindowsUIStorage() noexcept {
        if (f_LoadLibraryA) {
            char WindowsUIStoragedll_str[] = "Windows.UI.Storage.dll";
            WindowsUIStoragedll = f_LoadLibraryA(WindowsUIStoragedll_str);
        }
    }
    __forceinline void load_WindowsUIXamlControls() noexcept {
        if (f_LoadLibraryA) {
            char WindowsUIXamlControlsdll_str[] = "Windows.UI.Xaml.Controls.dll";
            WindowsUIXamlControlsdll = f_LoadLibraryA(WindowsUIXamlControlsdll_str);
        }
    }
    __forceinline void load_WindowsUIXaml() noexcept {
        if (f_LoadLibraryA) {
            char WindowsUIXamldll_str[] = "Windows.UI.Xaml.dll";
            WindowsUIXamldll = f_LoadLibraryA(WindowsUIXamldll_str);
        }
    }
    __forceinline void load_WindowsUIXamlInkControls() noexcept {
        if (f_LoadLibraryA) {
            char WindowsUIXamlInkControlsdll_str[] = "Windows.UI.Xaml.InkControls.dll";
            WindowsUIXamlInkControlsdll = f_LoadLibraryA(WindowsUIXamlInkControlsdll_str);
        }
    }
    __forceinline void load_WindowsUIXamlMaps() noexcept {
        if (f_LoadLibraryA) {
            char WindowsUIXamlMapsdll_str[] = "Windows.UI.Xaml.Maps.dll";
            WindowsUIXamlMapsdll = f_LoadLibraryA(WindowsUIXamlMapsdll_str);
        }
    }
    __forceinline void load_WindowsUIXamlPhone() noexcept {
        if (f_LoadLibraryA) {
            char WindowsUIXamlPhonedll_str[] = "Windows.UI.Xaml.Phone.dll";
            WindowsUIXamlPhonedll = f_LoadLibraryA(WindowsUIXamlPhonedll_str);
        }
    }
    __forceinline void load_WindowsUIXamlResources19h1() noexcept {
        if (f_LoadLibraryA) {
            char WindowsUIXamlResources19h1dll_str[] = "Windows.UI.Xaml.Resources.19h1.dll";
            WindowsUIXamlResources19h1dll = f_LoadLibraryA(WindowsUIXamlResources19h1dll_str);
        }
    }
    __forceinline void load_WindowsUIXamlResources21h1() noexcept {
        if (f_LoadLibraryA) {
            char WindowsUIXamlResources21h1dll_str[] = "Windows.UI.Xaml.Resources.21h1.dll";
            WindowsUIXamlResources21h1dll = f_LoadLibraryA(WindowsUIXamlResources21h1dll_str);
        }
    }
    __forceinline void load_WindowsUIXamlResourcesCommon() noexcept {
        if (f_LoadLibraryA) {
            char WindowsUIXamlResourcesCommondll_str[] = "Windows.UI.Xaml.Resources.Common.dll";
            WindowsUIXamlResourcesCommondll = f_LoadLibraryA(WindowsUIXamlResourcesCommondll_str);
        }
    }
    __forceinline void load_WindowsUIXamlResourcesrs1() noexcept {
        if (f_LoadLibraryA) {
            char WindowsUIXamlResourcesrs1dll_str[] = "Windows.UI.Xaml.Resources.rs1.dll";
            WindowsUIXamlResourcesrs1dll = f_LoadLibraryA(WindowsUIXamlResourcesrs1dll_str);
        }
    }
    __forceinline void load_WindowsUIXamlResourcesrs2() noexcept {
        if (f_LoadLibraryA) {
            char WindowsUIXamlResourcesrs2dll_str[] = "Windows.UI.Xaml.Resources.rs2.dll";
            WindowsUIXamlResourcesrs2dll = f_LoadLibraryA(WindowsUIXamlResourcesrs2dll_str);
        }
    }
    __forceinline void load_WindowsUIXamlResourcesrs3() noexcept {
        if (f_LoadLibraryA) {
            char WindowsUIXamlResourcesrs3dll_str[] = "Windows.UI.Xaml.Resources.rs3.dll";
            WindowsUIXamlResourcesrs3dll = f_LoadLibraryA(WindowsUIXamlResourcesrs3dll_str);
        }
    }
    __forceinline void load_WindowsUIXamlResourcesrs4() noexcept {
        if (f_LoadLibraryA) {
            char WindowsUIXamlResourcesrs4dll_str[] = "Windows.UI.Xaml.Resources.rs4.dll";
            WindowsUIXamlResourcesrs4dll = f_LoadLibraryA(WindowsUIXamlResourcesrs4dll_str);
        }
    }
    __forceinline void load_WindowsUIXamlResourcesrs5() noexcept {
        if (f_LoadLibraryA) {
            char WindowsUIXamlResourcesrs5dll_str[] = "Windows.UI.Xaml.Resources.rs5.dll";
            WindowsUIXamlResourcesrs5dll = f_LoadLibraryA(WindowsUIXamlResourcesrs5dll_str);
        }
    }
    __forceinline void load_WindowsUIXamlResourcesth() noexcept {
        if (f_LoadLibraryA) {
            char WindowsUIXamlResourcesthdll_str[] = "Windows.UI.Xaml.Resources.th.dll";
            WindowsUIXamlResourcesthdll = f_LoadLibraryA(WindowsUIXamlResourcesthdll_str);
        }
    }
    __forceinline void load_WindowsUIXamlResourceswin81() noexcept {
        if (f_LoadLibraryA) {
            char WindowsUIXamlResourceswin81dll_str[] = "Windows.UI.Xaml.Resources.win81.dll";
            WindowsUIXamlResourceswin81dll = f_LoadLibraryA(WindowsUIXamlResourceswin81dll_str);
        }
    }
    __forceinline void load_WindowsUIXamlResourceswin8rtm() noexcept {
        if (f_LoadLibraryA) {
            char WindowsUIXamlResourceswin8rtmdll_str[] = "Windows.UI.Xaml.Resources.win8rtm.dll";
            WindowsUIXamlResourceswin8rtmdll = f_LoadLibraryA(WindowsUIXamlResourceswin8rtmdll_str);
        }
    }
    __forceinline void load_WindowsUIXamlHost() noexcept {
        if (f_LoadLibraryA) {
            char WindowsUIXamlHostdll_str[] = "Windows.UI.XamlHost.dll";
            WindowsUIXamlHostdll = f_LoadLibraryA(WindowsUIXamlHostdll_str);
        }
    }
    __forceinline void load_WindowsWARPJITService() noexcept {
        if (f_LoadLibraryA) {
            char WindowsWARPJITServicedll_str[] = "Windows.WARP.JITService.dll";
            WindowsWARPJITServicedll = f_LoadLibraryA(WindowsWARPJITServicedll_str);
        }
    }
    __forceinline void load_WindowsWebDiagnostics() noexcept {
        if (f_LoadLibraryA) {
            char WindowsWebDiagnosticsdll_str[] = "Windows.Web.Diagnostics.dll";
            WindowsWebDiagnosticsdll = f_LoadLibraryA(WindowsWebDiagnosticsdll_str);
        }
    }
    __forceinline void load_WindowsWeb() noexcept {
        if (f_LoadLibraryA) {
            char WindowsWebdll_str[] = "Windows.Web.dll";
            WindowsWebdll = f_LoadLibraryA(WindowsWebdll_str);
        }
    }
    __forceinline void load_WindowsWebHttp() noexcept {
        if (f_LoadLibraryA) {
            char WindowsWebHttpdll_str[] = "Windows.Web.Http.dll";
            WindowsWebHttpdll = f_LoadLibraryA(WindowsWebHttpdll_str);
        }
    }
    __forceinline void load_WindowsCodecs() noexcept {
        if (f_LoadLibraryA) {
            char WindowsCodecsdll_str[] = "WindowsCodecs.dll";
            WindowsCodecsdll = f_LoadLibraryA(WindowsCodecsdll_str);
        }
    }
    __forceinline void load_WindowsCodecsExt() noexcept {
        if (f_LoadLibraryA) {
            char WindowsCodecsExtdll_str[] = "WindowsCodecsExt.dll";
            WindowsCodecsExtdll = f_LoadLibraryA(WindowsCodecsExtdll_str);
        }
    }
    __forceinline void load_WindowsDefaultHeatProcessor() noexcept {
        if (f_LoadLibraryA) {
            char WindowsDefaultHeatProcessordll_str[] = "WindowsDefaultHeatProcessor.dll";
            WindowsDefaultHeatProcessordll = f_LoadLibraryA(WindowsDefaultHeatProcessordll_str);
        }
    }
    __forceinline void load_windowsdefenderapplicationguardcsp() noexcept {
        if (f_LoadLibraryA) {
            char windowsdefenderapplicationguardcspdll_str[] = "windowsdefenderapplicationguardcsp.dll";
            windowsdefenderapplicationguardcspdll = f_LoadLibraryA(windowsdefenderapplicationguardcspdll_str);
        }
    }
    __forceinline void load_WindowsInternalComposableShellDisplay() noexcept {
        if (f_LoadLibraryA) {
            char WindowsInternalComposableShellDisplaydll_str[] = "WindowsInternal.ComposableShell.Display.dll";
            WindowsInternalComposableShellDisplaydll = f_LoadLibraryA(WindowsInternalComposableShellDisplaydll_str);
        }
    }
    __forceinline void load_WindowsInternalShellCompUiActivation() noexcept {
        if (f_LoadLibraryA) {
            char WindowsInternalShellCompUiActivationdll_str[] = "WindowsInternal.Shell.CompUiActivation.dll";
            WindowsInternalShellCompUiActivationdll = f_LoadLibraryA(WindowsInternalShellCompUiActivationdll_str);
        }
    }
    __forceinline void load_WindowsIoTCsp() noexcept {
        if (f_LoadLibraryA) {
            char WindowsIoTCspdll_str[] = "WindowsIoTCsp.dll";
            WindowsIoTCspdll = f_LoadLibraryA(WindowsIoTCspdll_str);
        }
    }
    __forceinline void load_windowslivelogin() noexcept {
        if (f_LoadLibraryA) {
            char windowslivelogindll_str[] = "windowslivelogin.dll";
            windowslivelogindll = f_LoadLibraryA(windowslivelogindll_str);
        }
    }
    __forceinline void load_WindowsManagementServiceWinRtProxyStub() noexcept {
        if (f_LoadLibraryA) {
            char WindowsManagementServiceWinRtProxyStubdll_str[] = "WindowsManagementServiceWinRt.ProxyStub.dll";
            WindowsManagementServiceWinRtProxyStubdll = f_LoadLibraryA(WindowsManagementServiceWinRtProxyStubdll_str);
        }
    }
    __forceinline void load_windowsperformancerecordercontrol() noexcept {
        if (f_LoadLibraryA) {
            char windowsperformancerecordercontroldll_str[] = "windowsperformancerecordercontrol.dll";
            windowsperformancerecordercontroldll = f_LoadLibraryA(windowsperformancerecordercontroldll_str);
        }
    }
    __forceinline void load_windowsudkshellcommon() noexcept {
        if (f_LoadLibraryA) {
            char windowsudkshellcommondll_str[] = "windowsudk.shellcommon.dll";
            windowsudkshellcommondll = f_LoadLibraryA(windowsudkshellcommondll_str);
        }
    }
    __forceinline void load_windowsudkservicesshellcommon() noexcept {
        if (f_LoadLibraryA) {
            char windowsudkservicesshellcommondll_str[] = "windowsudkservices.shellcommon.dll";
            windowsudkservicesshellcommondll = f_LoadLibraryA(windowsudkservicesshellcommondll_str);
        }
    }
    __forceinline void load_winethc() noexcept {
        if (f_LoadLibraryA) {
            char winethcdll_str[] = "winethc.dll";
            winethcdll = f_LoadLibraryA(winethcdll_str);
        }
    }
    __forceinline void load_winhttp() noexcept {
        if (f_LoadLibraryA) {
            char winhttpdll_str[] = "winhttp.dll";
            winhttpdll = f_LoadLibraryA(winhttpdll_str);
        }
    }
    __forceinline void load_winhttpcom() noexcept {
        if (f_LoadLibraryA) {
            char winhttpcomdll_str[] = "winhttpcom.dll";
            winhttpcomdll = f_LoadLibraryA(winhttpcomdll_str);
        }
    }
    __forceinline void load_WinHvEmulation() noexcept {
        if (f_LoadLibraryA) {
            char WinHvEmulationdll_str[] = "WinHvEmulation.dll";
            WinHvEmulationdll = f_LoadLibraryA(WinHvEmulationdll_str);
        }
    }
    __forceinline void load_WinHvPlatform() noexcept {
        if (f_LoadLibraryA) {
            char WinHvPlatformdll_str[] = "WinHvPlatform.dll";
            WinHvPlatformdll = f_LoadLibraryA(WinHvPlatformdll_str);
        }
    }
    __forceinline void load_wininet() noexcept {
        if (f_LoadLibraryA) {
            char wininetdll_str[] = "wininet.dll";
            wininetdll = f_LoadLibraryA(wininetdll_str);
        }
    }
    __forceinline void load_wininetlui() noexcept {
        if (f_LoadLibraryA) {
            char wininetluidll_str[] = "wininetlui.dll";
            wininetluidll = f_LoadLibraryA(wininetluidll_str);
        }
    }
    __forceinline void load_wininitext() noexcept {
        if (f_LoadLibraryA) {
            char wininitextdll_str[] = "wininitext.dll";
            wininitextdll = f_LoadLibraryA(wininitextdll_str);
        }
    }
    __forceinline void load_winipcfile() noexcept {
        if (f_LoadLibraryA) {
            char winipcfiledll_str[] = "winipcfile.dll";
            winipcfiledll = f_LoadLibraryA(winipcfiledll_str);
        }
    }
    __forceinline void load_winipcsecproc() noexcept {
        if (f_LoadLibraryA) {
            char winipcsecprocdll_str[] = "winipcsecproc.dll";
            winipcsecprocdll = f_LoadLibraryA(winipcsecprocdll_str);
        }
    }
    __forceinline void load_winipsec() noexcept {
        if (f_LoadLibraryA) {
            char winipsecdll_str[] = "winipsec.dll";
            winipsecdll = f_LoadLibraryA(winipsecdll_str);
        }
    }
    __forceinline void load_Winlangdb() noexcept {
        if (f_LoadLibraryA) {
            char Winlangdbdll_str[] = "Winlangdb.dll";
            Winlangdbdll = f_LoadLibraryA(Winlangdbdll_str);
        }
    }
    __forceinline void load_winlogonext() noexcept {
        if (f_LoadLibraryA) {
            char winlogonextdll_str[] = "winlogonext.dll";
            winlogonextdll = f_LoadLibraryA(winlogonextdll_str);
        }
    }
    __forceinline void load_winmde() noexcept {
        if (f_LoadLibraryA) {
            char winmdedll_str[] = "winmde.dll";
            winmdedll = f_LoadLibraryA(winmdedll_str);
        }
    }
    __forceinline void load_winml() noexcept {
        if (f_LoadLibraryA) {
            char winmldll_str[] = "winml.dll";
            winmldll = f_LoadLibraryA(winmldll_str);
        }
    }
    __forceinline void load_winmm() noexcept {
        if (f_LoadLibraryA) {
            char winmmdll_str[] = "winmm.dll";
            winmmdll = f_LoadLibraryA(winmmdll_str);
        }
    }
    __forceinline void load_winmmbase() noexcept {
        if (f_LoadLibraryA) {
            char winmmbasedll_str[] = "winmmbase.dll";
            winmmbasedll = f_LoadLibraryA(winmmbasedll_str);
        }
    }
    __forceinline void load_winmsipc() noexcept {
        if (f_LoadLibraryA) {
            char winmsipcdll_str[] = "winmsipc.dll";
            winmsipcdll = f_LoadLibraryA(winmsipcdll_str);
        }
    }
    __forceinline void load_WinMsoIrmProtector() noexcept {
        if (f_LoadLibraryA) {
            char WinMsoIrmProtectordll_str[] = "WinMsoIrmProtector.dll";
            WinMsoIrmProtectordll = f_LoadLibraryA(WinMsoIrmProtectordll_str);
        }
    }
    __forceinline void load_winnlsres() noexcept {
        if (f_LoadLibraryA) {
            char winnlsresdll_str[] = "winnlsres.dll";
            winnlsresdll = f_LoadLibraryA(winnlsresdll_str);
        }
    }
    __forceinline void load_winnsi() noexcept {
        if (f_LoadLibraryA) {
            char winnsidll_str[] = "winnsi.dll";
            winnsidll = f_LoadLibraryA(winnsidll_str);
        }
    }
    __forceinline void load_WinOpcIrmProtector() noexcept {
        if (f_LoadLibraryA) {
            char WinOpcIrmProtectordll_str[] = "WinOpcIrmProtector.dll";
            WinOpcIrmProtectordll = f_LoadLibraryA(WinOpcIrmProtectordll_str);
        }
    }
    __forceinline void load_WinREAgent() noexcept {
        if (f_LoadLibraryA) {
            char WinREAgentdll_str[] = "WinREAgent.dll";
            WinREAgentdll = f_LoadLibraryA(WinREAgentdll_str);
        }
    }
    __forceinline void load_winrnr() noexcept {
        if (f_LoadLibraryA) {
            char winrnrdll_str[] = "winrnr.dll";
            winrnrdll = f_LoadLibraryA(winrnrdll_str);
        }
    }
    __forceinline void load_winrscmd() noexcept {
        if (f_LoadLibraryA) {
            char winrscmddll_str[] = "winrscmd.dll";
            winrscmddll = f_LoadLibraryA(winrscmddll_str);
        }
    }
    __forceinline void load_winrsmgr() noexcept {
        if (f_LoadLibraryA) {
            char winrsmgrdll_str[] = "winrsmgr.dll";
            winrsmgrdll = f_LoadLibraryA(winrsmgrdll_str);
        }
    }
    __forceinline void load_winrssrv() noexcept {
        if (f_LoadLibraryA) {
            char winrssrvdll_str[] = "winrssrv.dll";
            winrssrvdll = f_LoadLibraryA(winrssrvdll_str);
        }
    }
    __forceinline void load_WinRtTracing() noexcept {
        if (f_LoadLibraryA) {
            char WinRtTracingdll_str[] = "WinRtTracing.dll";
            WinRtTracingdll = f_LoadLibraryA(WinRtTracingdll_str);
        }
    }
    __forceinline void load_WinSATAPI() noexcept {
        if (f_LoadLibraryA) {
            char WinSATAPIdll_str[] = "WinSATAPI.dll";
            WinSATAPIdll = f_LoadLibraryA(WinSATAPIdll_str);
        }
    }
    __forceinline void load_WinSCard() noexcept {
        if (f_LoadLibraryA) {
            char WinSCarddll_str[] = "WinSCard.dll";
            WinSCarddll = f_LoadLibraryA(WinSCarddll_str);
        }
    }
    __forceinline void load_winshfhc() noexcept {
        if (f_LoadLibraryA) {
            char winshfhcdll_str[] = "winshfhc.dll";
            winshfhcdll = f_LoadLibraryA(winshfhcdll_str);
        }
    }
    __forceinline void load_winsku() noexcept {
        if (f_LoadLibraryA) {
            char winskudll_str[] = "winsku.dll";
            winskudll = f_LoadLibraryA(winskudll_str);
        }
    }
    __forceinline void load_winsockhc() noexcept {
        if (f_LoadLibraryA) {
            char winsockhcdll_str[] = "winsockhc.dll";
            winsockhcdll = f_LoadLibraryA(winsockhcdll_str);
        }
    }
    __forceinline void load_winsqlite3() noexcept {
        if (f_LoadLibraryA) {
            char winsqlite3dll_str[] = "winsqlite3.dll";
            winsqlite3dll = f_LoadLibraryA(winsqlite3dll_str);
        }
    }
    __forceinline void load_winsrv() noexcept {
        if (f_LoadLibraryA) {
            char winsrvdll_str[] = "winsrv.dll";
            winsrvdll = f_LoadLibraryA(winsrvdll_str);
        }
    }
    __forceinline void load_winsrvext() noexcept {
        if (f_LoadLibraryA) {
            char winsrvextdll_str[] = "winsrvext.dll";
            winsrvextdll = f_LoadLibraryA(winsrvextdll_str);
        }
    }
    __forceinline void load_winsta() noexcept {
        if (f_LoadLibraryA) {
            char winstadll_str[] = "winsta.dll";
            winstadll = f_LoadLibraryA(winstadll_str);
        }
    }
    __forceinline void load_WinSync() noexcept {
        if (f_LoadLibraryA) {
            char WinSyncdll_str[] = "WinSync.dll";
            WinSyncdll = f_LoadLibraryA(WinSyncdll_str);
        }
    }
    __forceinline void load_WinSyncMetastore() noexcept {
        if (f_LoadLibraryA) {
            char WinSyncMetastoredll_str[] = "WinSyncMetastore.dll";
            WinSyncMetastoredll = f_LoadLibraryA(WinSyncMetastoredll_str);
        }
    }
    __forceinline void load_WinSyncProviders() noexcept {
        if (f_LoadLibraryA) {
            char WinSyncProvidersdll_str[] = "WinSyncProviders.dll";
            WinSyncProvidersdll = f_LoadLibraryA(WinSyncProvidersdll_str);
        }
    }
    __forceinline void load_wintrust() noexcept {
        if (f_LoadLibraryA) {
            char wintrustdll_str[] = "wintrust.dll";
            wintrustdll = f_LoadLibraryA(wintrustdll_str);
        }
    }
    __forceinline void load_WinTypes() noexcept {
        if (f_LoadLibraryA) {
            char WinTypesdll_str[] = "WinTypes.dll";
            WinTypesdll = f_LoadLibraryA(WinTypesdll_str);
        }
    }
    __forceinline void load_WinUICohabitation() noexcept {
        if (f_LoadLibraryA) {
            char WinUICohabitationdll_str[] = "WinUICohabitation.dll";
            WinUICohabitationdll = f_LoadLibraryA(WinUICohabitationdll_str);
        }
    }
    __forceinline void load_winusb() noexcept {
        if (f_LoadLibraryA) {
            char winusbdll_str[] = "winusb.dll";
            winusbdll = f_LoadLibraryA(winusbdll_str);
        }
    }
    __forceinline void load_WiredNetworkCSP() noexcept {
        if (f_LoadLibraryA) {
            char WiredNetworkCSPdll_str[] = "WiredNetworkCSP.dll";
            WiredNetworkCSPdll = f_LoadLibraryA(WiredNetworkCSPdll_str);
        }
    }
    __forceinline void load_wisp() noexcept {
        if (f_LoadLibraryA) {
            char wispdll_str[] = "wisp.dll";
            wispdll = f_LoadLibraryA(wispdll_str);
        }
    }
    __forceinline void load_witnesswmiv2provider() noexcept {
        if (f_LoadLibraryA) {
            char witnesswmiv2providerdll_str[] = "witnesswmiv2provider.dll";
            witnesswmiv2providerdll = f_LoadLibraryA(witnesswmiv2providerdll_str);
        }
    }
    __forceinline void load_wkscli() noexcept {
        if (f_LoadLibraryA) {
            char wksclidll_str[] = "wkscli.dll";
            wksclidll = f_LoadLibraryA(wksclidll_str);
        }
    }
    __forceinline void load_wkspbrokerAx() noexcept {
        if (f_LoadLibraryA) {
            char wkspbrokerAxdll_str[] = "wkspbrokerAx.dll";
            wkspbrokerAxdll = f_LoadLibraryA(wkspbrokerAxdll_str);
        }
    }
    __forceinline void load_wksprtPS() noexcept {
        if (f_LoadLibraryA) {
            char wksprtPSdll_str[] = "wksprtPS.dll";
            wksprtPSdll = f_LoadLibraryA(wksprtPSdll_str);
        }
    }
    __forceinline void load_wkssvc() noexcept {
        if (f_LoadLibraryA) {
            char wkssvcdll_str[] = "wkssvc.dll";
            wkssvcdll = f_LoadLibraryA(wkssvcdll_str);
        }
    }
    __forceinline void load_wlanapi() noexcept {
        if (f_LoadLibraryA) {
            char wlanapidll_str[] = "wlanapi.dll";
            wlanapidll = f_LoadLibraryA(wlanapidll_str);
        }
    }
    __forceinline void load_wlancfg() noexcept {
        if (f_LoadLibraryA) {
            char wlancfgdll_str[] = "wlancfg.dll";
            wlancfgdll = f_LoadLibraryA(wlancfgdll_str);
        }
    }
    __forceinline void load_WLanConn() noexcept {
        if (f_LoadLibraryA) {
            char WLanConndll_str[] = "WLanConn.dll";
            WLanConndll = f_LoadLibraryA(WLanConndll_str);
        }
    }
    __forceinline void load_wlandlg() noexcept {
        if (f_LoadLibraryA) {
            char wlandlgdll_str[] = "wlandlg.dll";
            wlandlgdll = f_LoadLibraryA(wlandlgdll_str);
        }
    }
    __forceinline void load_wlangpui() noexcept {
        if (f_LoadLibraryA) {
            char wlangpuidll_str[] = "wlangpui.dll";
            wlangpuidll = f_LoadLibraryA(wlangpuidll_str);
        }
    }
    __forceinline void load_WLanHC() noexcept {
        if (f_LoadLibraryA) {
            char WLanHCdll_str[] = "WLanHC.dll";
            WLanHCdll = f_LoadLibraryA(WLanHCdll_str);
        }
    }
    __forceinline void load_wlanhlp() noexcept {
        if (f_LoadLibraryA) {
            char wlanhlpdll_str[] = "wlanhlp.dll";
            wlanhlpdll = f_LoadLibraryA(wlanhlpdll_str);
        }
    }
    __forceinline void load_WlanMediaManager() noexcept {
        if (f_LoadLibraryA) {
            char WlanMediaManagerdll_str[] = "WlanMediaManager.dll";
            WlanMediaManagerdll = f_LoadLibraryA(WlanMediaManagerdll_str);
        }
    }
    __forceinline void load_WlanMM() noexcept {
        if (f_LoadLibraryA) {
            char WlanMMdll_str[] = "WlanMM.dll";
            WlanMMdll = f_LoadLibraryA(WlanMMdll_str);
        }
    }
    __forceinline void load_wlanmsm() noexcept {
        if (f_LoadLibraryA) {
            char wlanmsmdll_str[] = "wlanmsm.dll";
            wlanmsmdll = f_LoadLibraryA(wlanmsmdll_str);
        }
    }
    __forceinline void load_wlanpref() noexcept {
        if (f_LoadLibraryA) {
            char wlanprefdll_str[] = "wlanpref.dll";
            wlanprefdll = f_LoadLibraryA(wlanprefdll_str);
        }
    }
    __forceinline void load_WlanRadioManager() noexcept {
        if (f_LoadLibraryA) {
            char WlanRadioManagerdll_str[] = "WlanRadioManager.dll";
            WlanRadioManagerdll = f_LoadLibraryA(WlanRadioManagerdll_str);
        }
    }
    __forceinline void load_wlansec() noexcept {
        if (f_LoadLibraryA) {
            char wlansecdll_str[] = "wlansec.dll";
            wlansecdll = f_LoadLibraryA(wlansecdll_str);
        }
    }
    __forceinline void load_wlansvc() noexcept {
        if (f_LoadLibraryA) {
            char wlansvcdll_str[] = "wlansvc.dll";
            wlansvcdll = f_LoadLibraryA(wlansvcdll_str);
        }
    }
    __forceinline void load_wlansvcpal() noexcept {
        if (f_LoadLibraryA) {
            char wlansvcpaldll_str[] = "wlansvcpal.dll";
            wlansvcpaldll = f_LoadLibraryA(wlansvcpaldll_str);
        }
    }
    __forceinline void load_wlanui() noexcept {
        if (f_LoadLibraryA) {
            char wlanuidll_str[] = "wlanui.dll";
            wlanuidll = f_LoadLibraryA(wlanuidll_str);
        }
    }
    __forceinline void load_wlanutil() noexcept {
        if (f_LoadLibraryA) {
            char wlanutildll_str[] = "wlanutil.dll";
            wlanutildll = f_LoadLibraryA(wlanutildll_str);
        }
    }
    __forceinline void load_Wldap32() noexcept {
        if (f_LoadLibraryA) {
            char Wldap32dll_str[] = "Wldap32.dll";
            Wldap32dll = f_LoadLibraryA(Wldap32dll_str);
        }
    }
    __forceinline void load_wldp() noexcept {
        if (f_LoadLibraryA) {
            char wldpdll_str[] = "wldp.dll";
            wldpdll = f_LoadLibraryA(wldpdll_str);
        }
    }
    __forceinline void load_wlgpclnt() noexcept {
        if (f_LoadLibraryA) {
            char wlgpclntdll_str[] = "wlgpclnt.dll";
            wlgpclntdll = f_LoadLibraryA(wlgpclntdll_str);
        }
    }
    __forceinline void load_wlidcli() noexcept {
        if (f_LoadLibraryA) {
            char wlidclidll_str[] = "wlidcli.dll";
            wlidclidll = f_LoadLibraryA(wlidclidll_str);
        }
    }
    __forceinline void load_wlidcredprov() noexcept {
        if (f_LoadLibraryA) {
            char wlidcredprovdll_str[] = "wlidcredprov.dll";
            wlidcredprovdll = f_LoadLibraryA(wlidcredprovdll_str);
        }
    }
    __forceinline void load_wlidfdp() noexcept {
        if (f_LoadLibraryA) {
            char wlidfdpdll_str[] = "wlidfdp.dll";
            wlidfdpdll = f_LoadLibraryA(wlidfdpdll_str);
        }
    }
    __forceinline void load_wlidnsp() noexcept {
        if (f_LoadLibraryA) {
            char wlidnspdll_str[] = "wlidnsp.dll";
            wlidnspdll = f_LoadLibraryA(wlidnspdll_str);
        }
    }
    __forceinline void load_wlidprov() noexcept {
        if (f_LoadLibraryA) {
            char wlidprovdll_str[] = "wlidprov.dll";
            wlidprovdll = f_LoadLibraryA(wlidprovdll_str);
        }
    }
    __forceinline void load_wlidres() noexcept {
        if (f_LoadLibraryA) {
            char wlidresdll_str[] = "wlidres.dll";
            wlidresdll = f_LoadLibraryA(wlidresdll_str);
        }
    }
    __forceinline void load_wlidsvc() noexcept {
        if (f_LoadLibraryA) {
            char wlidsvcdll_str[] = "wlidsvc.dll";
            wlidsvcdll = f_LoadLibraryA(wlidsvcdll_str);
        }
    }
    __forceinline void load_WMALFXGFXDSP() noexcept {
        if (f_LoadLibraryA) {
            char WMALFXGFXDSPdll_str[] = "WMALFXGFXDSP.dll";
            WMALFXGFXDSPdll = f_LoadLibraryA(WMALFXGFXDSPdll_str);
        }
    }
    __forceinline void load_wmcodecdspps() noexcept {
        if (f_LoadLibraryA) {
            char wmcodecdsppsdll_str[] = "wmcodecdspps.dll";
            wmcodecdsppsdll = f_LoadLibraryA(wmcodecdsppsdll_str);
        }
    }
    __forceinline void load_wmdmlog() noexcept {
        if (f_LoadLibraryA) {
            char wmdmlogdll_str[] = "wmdmlog.dll";
            wmdmlogdll = f_LoadLibraryA(wmdmlogdll_str);
        }
    }
    __forceinline void load_wmdmps() noexcept {
        if (f_LoadLibraryA) {
            char wmdmpsdll_str[] = "wmdmps.dll";
            wmdmpsdll = f_LoadLibraryA(wmdmpsdll_str);
        }
    }
    __forceinline void load_wmdrmsdk() noexcept {
        if (f_LoadLibraryA) {
            char wmdrmsdkdll_str[] = "wmdrmsdk.dll";
            wmdrmsdkdll = f_LoadLibraryA(wmdrmsdkdll_str);
        }
    }
    __forceinline void load_wmi() noexcept {
        if (f_LoadLibraryA) {
            char wmidll_str[] = "wmi.dll";
            wmidll = f_LoadLibraryA(wmidll_str);
        }
    }
    __forceinline void load_wmiclnt() noexcept {
        if (f_LoadLibraryA) {
            char wmiclntdll_str[] = "wmiclnt.dll";
            wmiclntdll = f_LoadLibraryA(wmiclntdll_str);
        }
    }
    __forceinline void load_wmidcom() noexcept {
        if (f_LoadLibraryA) {
            char wmidcomdll_str[] = "wmidcom.dll";
            wmidcomdll = f_LoadLibraryA(wmidcomdll_str);
        }
    }
    __forceinline void load_wmidx() noexcept {
        if (f_LoadLibraryA) {
            char wmidxdll_str[] = "wmidx.dll";
            wmidxdll = f_LoadLibraryA(wmidxdll_str);
        }
    }
    __forceinline void load_wmiprop() noexcept {
        if (f_LoadLibraryA) {
            char wmipropdll_str[] = "wmiprop.dll";
            wmipropdll = f_LoadLibraryA(wmipropdll_str);
        }
    }
    __forceinline void load_wmitomi() noexcept {
        if (f_LoadLibraryA) {
            char wmitomidll_str[] = "wmitomi.dll";
            wmitomidll = f_LoadLibraryA(wmitomidll_str);
        }
    }
    __forceinline void load_WMNetMgr() noexcept {
        if (f_LoadLibraryA) {
            char WMNetMgrdll_str[] = "WMNetMgr.dll";
            WMNetMgrdll = f_LoadLibraryA(WMNetMgrdll_str);
        }
    }
    __forceinline void load_WmpDui() noexcept {
        if (f_LoadLibraryA) {
            char WmpDuidll_str[] = "WmpDui.dll";
            WmpDuidll = f_LoadLibraryA(WmpDuidll_str);
        }
    }
    __forceinline void load_WMPhoto() noexcept {
        if (f_LoadLibraryA) {
            char WMPhotodll_str[] = "WMPhoto.dll";
            WMPhotodll = f_LoadLibraryA(WMPhotodll_str);
        }
    }
    __forceinline void load_wmsgapi() noexcept {
        if (f_LoadLibraryA) {
            char wmsgapidll_str[] = "wmsgapi.dll";
            wmsgapidll = f_LoadLibraryA(wmsgapidll_str);
        }
    }
    __forceinline void load_wmvdspa() noexcept {
        if (f_LoadLibraryA) {
            char wmvdspadll_str[] = "wmvdspa.dll";
            wmvdspadll = f_LoadLibraryA(wmvdspadll_str);
        }
    }
    __forceinline void load_WofTasks() noexcept {
        if (f_LoadLibraryA) {
            char WofTasksdll_str[] = "WofTasks.dll";
            WofTasksdll = f_LoadLibraryA(WofTasksdll_str);
        }
    }
    __forceinline void load_WofUtil() noexcept {
        if (f_LoadLibraryA) {
            char WofUtildll_str[] = "WofUtil.dll";
            WofUtildll = f_LoadLibraryA(WofUtildll_str);
        }
    }
    __forceinline void load_WordBreakers() noexcept {
        if (f_LoadLibraryA) {
            char WordBreakersdll_str[] = "WordBreakers.dll";
            WordBreakersdll = f_LoadLibraryA(WordBreakersdll_str);
        }
    }
    __forceinline void load_WorkfoldersControl() noexcept {
        if (f_LoadLibraryA) {
            char WorkfoldersControldll_str[] = "WorkfoldersControl.dll";
            WorkfoldersControldll = f_LoadLibraryA(WorkfoldersControldll_str);
        }
    }
    __forceinline void load_WorkFoldersGPExt() noexcept {
        if (f_LoadLibraryA) {
            char WorkFoldersGPExtdll_str[] = "WorkFoldersGPExt.dll";
            WorkFoldersGPExtdll = f_LoadLibraryA(WorkFoldersGPExtdll_str);
        }
    }
    __forceinline void load_WorkFoldersRes() noexcept {
        if (f_LoadLibraryA) {
            char WorkFoldersResdll_str[] = "WorkFoldersRes.dll";
            WorkFoldersResdll = f_LoadLibraryA(WorkFoldersResdll_str);
        }
    }
    __forceinline void load_WorkFoldersShell() noexcept {
        if (f_LoadLibraryA) {
            char WorkFoldersShelldll_str[] = "WorkFoldersShell.dll";
            WorkFoldersShelldll = f_LoadLibraryA(WorkFoldersShelldll_str);
        }
    }
    __forceinline void load_workfolderssvc() noexcept {
        if (f_LoadLibraryA) {
            char workfolderssvcdll_str[] = "workfolderssvc.dll";
            workfolderssvcdll = f_LoadLibraryA(workfolderssvcdll_str);
        }
    }
    __forceinline void load_wosc() noexcept {
        if (f_LoadLibraryA) {
            char woscdll_str[] = "wosc.dll";
            woscdll = f_LoadLibraryA(woscdll_str);
        }
    }
    __forceinline void load_wow64() noexcept {
        if (f_LoadLibraryA) {
            char wow64dll_str[] = "wow64.dll";
            wow64dll = f_LoadLibraryA(wow64dll_str);
        }
    }
    __forceinline void load_wow64base() noexcept {
        if (f_LoadLibraryA) {
            char wow64basedll_str[] = "wow64base.dll";
            wow64basedll = f_LoadLibraryA(wow64basedll_str);
        }
    }
    __forceinline void load_wow64con() noexcept {
        if (f_LoadLibraryA) {
            char wow64condll_str[] = "wow64con.dll";
            wow64condll = f_LoadLibraryA(wow64condll_str);
        }
    }
    __forceinline void load_wow64cpu() noexcept {
        if (f_LoadLibraryA) {
            char wow64cpudll_str[] = "wow64cpu.dll";
            wow64cpudll = f_LoadLibraryA(wow64cpudll_str);
        }
    }
    __forceinline void load_wow64win() noexcept {
        if (f_LoadLibraryA) {
            char wow64windll_str[] = "wow64win.dll";
            wow64windll = f_LoadLibraryA(wow64windll_str);
        }
    }
    __forceinline void load_wpbcreds() noexcept {
        if (f_LoadLibraryA) {
            char wpbcredsdll_str[] = "wpbcreds.dll";
            wpbcredsdll = f_LoadLibraryA(wpbcredsdll_str);
        }
    }
    __forceinline void load_Wpc() noexcept {
        if (f_LoadLibraryA) {
            char Wpcdll_str[] = "Wpc.dll";
            Wpcdll = f_LoadLibraryA(Wpcdll_str);
        }
    }
    __forceinline void load_WpcApi() noexcept {
        if (f_LoadLibraryA) {
            char WpcApidll_str[] = "WpcApi.dll";
            WpcApidll = f_LoadLibraryA(WpcApidll_str);
        }
    }
    __forceinline void load_WpcDesktopMonSvc() noexcept {
        if (f_LoadLibraryA) {
            char WpcDesktopMonSvcdll_str[] = "WpcDesktopMonSvc.dll";
            WpcDesktopMonSvcdll = f_LoadLibraryA(WpcDesktopMonSvcdll_str);
        }
    }
    __forceinline void load_WpcProxyStubs() noexcept {
        if (f_LoadLibraryA) {
            char WpcProxyStubsdll_str[] = "WpcProxyStubs.dll";
            WpcProxyStubsdll = f_LoadLibraryA(WpcProxyStubsdll_str);
        }
    }
    __forceinline void load_WpcRefreshTask() noexcept {
        if (f_LoadLibraryA) {
            char WpcRefreshTaskdll_str[] = "WpcRefreshTask.dll";
            WpcRefreshTaskdll = f_LoadLibraryA(WpcRefreshTaskdll_str);
        }
    }
    __forceinline void load_WpcWebFilter() noexcept {
        if (f_LoadLibraryA) {
            char WpcWebFilterdll_str[] = "WpcWebFilter.dll";
            WpcWebFilterdll = f_LoadLibraryA(WpcWebFilterdll_str);
        }
    }
    __forceinline void load_wpdbusenum() noexcept {
        if (f_LoadLibraryA) {
            char wpdbusenumdll_str[] = "wpdbusenum.dll";
            wpdbusenumdll = f_LoadLibraryA(wpdbusenumdll_str);
        }
    }
    __forceinline void load_WpdMtp() noexcept {
        if (f_LoadLibraryA) {
            char WpdMtpdll_str[] = "WpdMtp.dll";
            WpdMtpdll = f_LoadLibraryA(WpdMtpdll_str);
        }
    }
    __forceinline void load_WpdMtpUS() noexcept {
        if (f_LoadLibraryA) {
            char WpdMtpUSdll_str[] = "WpdMtpUS.dll";
            WpdMtpUSdll = f_LoadLibraryA(WpdMtpUSdll_str);
        }
    }
    __forceinline void load_wpdshext() noexcept {
        if (f_LoadLibraryA) {
            char wpdshextdll_str[] = "wpdshext.dll";
            wpdshextdll = f_LoadLibraryA(wpdshextdll_str);
        }
    }
    __forceinline void load_WPDShServiceObj() noexcept {
        if (f_LoadLibraryA) {
            char WPDShServiceObjdll_str[] = "WPDShServiceObj.dll";
            WPDShServiceObjdll = f_LoadLibraryA(WPDShServiceObjdll_str);
        }
    }
    __forceinline void load_WPDSp() noexcept {
        if (f_LoadLibraryA) {
            char WPDSpdll_str[] = "WPDSp.dll";
            WPDSpdll = f_LoadLibraryA(WPDSpdll_str);
        }
    }
    __forceinline void load_wpd_ci() noexcept {
        if (f_LoadLibraryA) {
            char wpd_cidll_str[] = "wpd_ci.dll";
            wpd_cidll = f_LoadLibraryA(wpd_cidll_str);
        }
    }
    __forceinline void load_wpnapps() noexcept {
        if (f_LoadLibraryA) {
            char wpnappsdll_str[] = "wpnapps.dll";
            wpnappsdll = f_LoadLibraryA(wpnappsdll_str);
        }
    }
    __forceinline void load_wpnclient() noexcept {
        if (f_LoadLibraryA) {
            char wpnclientdll_str[] = "wpnclient.dll";
            wpnclientdll = f_LoadLibraryA(wpnclientdll_str);
        }
    }
    __forceinline void load_wpncore() noexcept {
        if (f_LoadLibraryA) {
            char wpncoredll_str[] = "wpncore.dll";
            wpncoredll = f_LoadLibraryA(wpncoredll_str);
        }
    }
    __forceinline void load_wpninprc() noexcept {
        if (f_LoadLibraryA) {
            char wpninprcdll_str[] = "wpninprc.dll";
            wpninprcdll = f_LoadLibraryA(wpninprcdll_str);
        }
    }
    __forceinline void load_wpnprv() noexcept {
        if (f_LoadLibraryA) {
            char wpnprvdll_str[] = "wpnprv.dll";
            wpnprvdll = f_LoadLibraryA(wpnprvdll_str);
        }
    }
    __forceinline void load_wpnservice() noexcept {
        if (f_LoadLibraryA) {
            char wpnservicedll_str[] = "wpnservice.dll";
            wpnservicedll = f_LoadLibraryA(wpnservicedll_str);
        }
    }
    __forceinline void load_wpnsruprov() noexcept {
        if (f_LoadLibraryA) {
            char wpnsruprovdll_str[] = "wpnsruprov.dll";
            wpnsruprovdll = f_LoadLibraryA(wpnsruprovdll_str);
        }
    }
    __forceinline void load_WpnUserService() noexcept {
        if (f_LoadLibraryA) {
            char WpnUserServicedll_str[] = "WpnUserService.dll";
            WpnUserServicedll = f_LoadLibraryA(WpnUserServicedll_str);
        }
    }
    __forceinline void load_WpPortingLibrary() noexcept {
        if (f_LoadLibraryA) {
            char WpPortingLibrarydll_str[] = "WpPortingLibrary.dll";
            WpPortingLibrarydll = f_LoadLibraryA(WpPortingLibrarydll_str);
        }
    }
    __forceinline void load_WppRecorderUM() noexcept {
        if (f_LoadLibraryA) {
            char WppRecorderUMdll_str[] = "WppRecorderUM.dll";
            WppRecorderUMdll = f_LoadLibraryA(WppRecorderUMdll_str);
        }
    }
    __forceinline void load_WPTaskScheduler() noexcept {
        if (f_LoadLibraryA) {
            char WPTaskSchedulerdll_str[] = "WPTaskScheduler.dll";
            WPTaskSchedulerdll = f_LoadLibraryA(WPTaskSchedulerdll_str);
        }
    }
    __forceinline void load_wpx() noexcept {
        if (f_LoadLibraryA) {
            char wpxdll_str[] = "wpx.dll";
            wpxdll = f_LoadLibraryA(wpxdll_str);
        }
    }
    __forceinline void load_ws2help() noexcept {
        if (f_LoadLibraryA) {
            char ws2helpdll_str[] = "ws2help.dll";
            ws2helpdll = f_LoadLibraryA(ws2helpdll_str);
        }
    }
    __forceinline void load_ws2_32() noexcept {
        if (f_LoadLibraryA) {
            char ws2_32dll_str[] = "ws2_32.dll";
            ws2_32dll = f_LoadLibraryA(ws2_32dll_str);
        }
    }
    __forceinline void load_wscapi() noexcept {
        if (f_LoadLibraryA) {
            char wscapidll_str[] = "wscapi.dll";
            wscapidll = f_LoadLibraryA(wscapidll_str);
        }
    }
    __forceinline void load_wscinterop() noexcept {
        if (f_LoadLibraryA) {
            char wscinteropdll_str[] = "wscinterop.dll";
            wscinteropdll = f_LoadLibraryA(wscinteropdll_str);
        }
    }
    __forceinline void load_wscisvif() noexcept {
        if (f_LoadLibraryA) {
            char wscisvifdll_str[] = "wscisvif.dll";
            wscisvifdll = f_LoadLibraryA(wscisvifdll_str);
        }
    }
    __forceinline void load_WSClient() noexcept {
        if (f_LoadLibraryA) {
            char WSClientdll_str[] = "WSClient.dll";
            WSClientdll = f_LoadLibraryA(WSClientdll_str);
        }
    }
    __forceinline void load_wscproxystub() noexcept {
        if (f_LoadLibraryA) {
            char wscproxystubdll_str[] = "wscproxystub.dll";
            wscproxystubdll = f_LoadLibraryA(wscproxystubdll_str);
        }
    }
    __forceinline void load_wscsvc() noexcept {
        if (f_LoadLibraryA) {
            char wscsvcdll_str[] = "wscsvc.dll";
            wscsvcdll = f_LoadLibraryA(wscsvcdll_str);
        }
    }
    __forceinline void load_WSDApi() noexcept {
        if (f_LoadLibraryA) {
            char WSDApidll_str[] = "WSDApi.dll";
            WSDApidll = f_LoadLibraryA(WSDApidll_str);
        }
    }
    __forceinline void load_wsdchngr() noexcept {
        if (f_LoadLibraryA) {
            char wsdchngrdll_str[] = "wsdchngr.dll";
            wsdchngrdll = f_LoadLibraryA(wsdchngrdll_str);
        }
    }
    __forceinline void load_WsdProviderUtil() noexcept {
        if (f_LoadLibraryA) {
            char WsdProviderUtildll_str[] = "WsdProviderUtil.dll";
            WsdProviderUtildll = f_LoadLibraryA(WsdProviderUtildll_str);
        }
    }
    __forceinline void load_WSDScanProxy() noexcept {
        if (f_LoadLibraryA) {
            char WSDScanProxydll_str[] = "WSDScanProxy.dll";
            WSDScanProxydll = f_LoadLibraryA(WSDScanProxydll_str);
        }
    }
    __forceinline void load_wsecedit() noexcept {
        if (f_LoadLibraryA) {
            char wseceditdll_str[] = "wsecedit.dll";
            wseceditdll = f_LoadLibraryA(wseceditdll_str);
        }
    }
    __forceinline void load_wsepno() noexcept {
        if (f_LoadLibraryA) {
            char wsepnodll_str[] = "wsepno.dll";
            wsepnodll = f_LoadLibraryA(wsepnodll_str);
        }
    }
    __forceinline void load_wshbth() noexcept {
        if (f_LoadLibraryA) {
            char wshbthdll_str[] = "wshbth.dll";
            wshbthdll = f_LoadLibraryA(wshbthdll_str);
        }
    }
    __forceinline void load_wshcon() noexcept {
        if (f_LoadLibraryA) {
            char wshcondll_str[] = "wshcon.dll";
            wshcondll = f_LoadLibraryA(wshcondll_str);
        }
    }
    __forceinline void load_wshelper() noexcept {
        if (f_LoadLibraryA) {
            char wshelperdll_str[] = "wshelper.dll";
            wshelperdll = f_LoadLibraryA(wshelperdll_str);
        }
    }
    __forceinline void load_wshext() noexcept {
        if (f_LoadLibraryA) {
            char wshextdll_str[] = "wshext.dll";
            wshextdll = f_LoadLibraryA(wshextdll_str);
        }
    }
    __forceinline void load_wshhyperv() noexcept {
        if (f_LoadLibraryA) {
            char wshhypervdll_str[] = "wshhyperv.dll";
            wshhypervdll = f_LoadLibraryA(wshhypervdll_str);
        }
    }
    __forceinline void load_wship6() noexcept {
        if (f_LoadLibraryA) {
            char wship6dll_str[] = "wship6.dll";
            wship6dll = f_LoadLibraryA(wship6dll_str);
        }
    }
    __forceinline void load_wshqos() noexcept {
        if (f_LoadLibraryA) {
            char wshqosdll_str[] = "wshqos.dll";
            wshqosdll = f_LoadLibraryA(wshqosdll_str);
        }
    }
    __forceinline void load_wshrm() noexcept {
        if (f_LoadLibraryA) {
            char wshrmdll_str[] = "wshrm.dll";
            wshrmdll = f_LoadLibraryA(wshrmdll_str);
        }
    }
    __forceinline void load_wshunix() noexcept {
        if (f_LoadLibraryA) {
            char wshunixdll_str[] = "wshunix.dll";
            wshunixdll = f_LoadLibraryA(wshunixdll_str);
        }
    }
    __forceinline void load_wslapi() noexcept {
        if (f_LoadLibraryA) {
            char wslapidll_str[] = "wslapi.dll";
            wslapidll = f_LoadLibraryA(wslapidll_str);
        }
    }
    __forceinline void load_WsmAgent() noexcept {
        if (f_LoadLibraryA) {
            char WsmAgentdll_str[] = "WsmAgent.dll";
            WsmAgentdll = f_LoadLibraryA(WsmAgentdll_str);
        }
    }
    __forceinline void load_WSManMigrationPlugin() noexcept {
        if (f_LoadLibraryA) {
            char WSManMigrationPlugindll_str[] = "WSManMigrationPlugin.dll";
            WSManMigrationPlugindll = f_LoadLibraryA(WSManMigrationPlugindll_str);
        }
    }
    __forceinline void load_WsmAuto() noexcept {
        if (f_LoadLibraryA) {
            char WsmAutodll_str[] = "WsmAuto.dll";
            WsmAutodll = f_LoadLibraryA(WsmAutodll_str);
        }
    }
    __forceinline void load_wsmplpxy() noexcept {
        if (f_LoadLibraryA) {
            char wsmplpxydll_str[] = "wsmplpxy.dll";
            wsmplpxydll = f_LoadLibraryA(wsmplpxydll_str);
        }
    }
    __forceinline void load_WsmRes() noexcept {
        if (f_LoadLibraryA) {
            char WsmResdll_str[] = "WsmRes.dll";
            WsmResdll = f_LoadLibraryA(WsmResdll_str);
        }
    }
    __forceinline void load_WsmSvc() noexcept {
        if (f_LoadLibraryA) {
            char WsmSvcdll_str[] = "WsmSvc.dll";
            WsmSvcdll = f_LoadLibraryA(WsmSvcdll_str);
        }
    }
    __forceinline void load_WsmWmiPl() noexcept {
        if (f_LoadLibraryA) {
            char WsmWmiPldll_str[] = "WsmWmiPl.dll";
            WsmWmiPldll = f_LoadLibraryA(WsmWmiPldll_str);
        }
    }
    __forceinline void load_wsnmp32() noexcept {
        if (f_LoadLibraryA) {
            char wsnmp32dll_str[] = "wsnmp32.dll";
            wsnmp32dll = f_LoadLibraryA(wsnmp32dll_str);
        }
    }
    __forceinline void load_wsock32() noexcept {
        if (f_LoadLibraryA) {
            char wsock32dll_str[] = "wsock32.dll";
            wsock32dll = f_LoadLibraryA(wsock32dll_str);
        }
    }
    __forceinline void load_wsplib() noexcept {
        if (f_LoadLibraryA) {
            char wsplibdll_str[] = "wsplib.dll";
            wsplibdll = f_LoadLibraryA(wsplibdll_str);
        }
    }
    __forceinline void load_wsp_fs() noexcept {
        if (f_LoadLibraryA) {
            char wsp_fsdll_str[] = "wsp_fs.dll";
            wsp_fsdll = f_LoadLibraryA(wsp_fsdll_str);
        }
    }
    __forceinline void load_wsp_health() noexcept {
        if (f_LoadLibraryA) {
            char wsp_healthdll_str[] = "wsp_health.dll";
            wsp_healthdll = f_LoadLibraryA(wsp_healthdll_str);
        }
    }
    __forceinline void load_wsp_sr() noexcept {
        if (f_LoadLibraryA) {
            char wsp_srdll_str[] = "wsp_sr.dll";
            wsp_srdll = f_LoadLibraryA(wsp_srdll_str);
        }
    }
    __forceinline void load_wtdccm() noexcept {
        if (f_LoadLibraryA) {
            char wtdccmdll_str[] = "wtdccm.dll";
            wtdccmdll = f_LoadLibraryA(wtdccmdll_str);
        }
    }
    __forceinline void load_wtdhost() noexcept {
        if (f_LoadLibraryA) {
            char wtdhostdll_str[] = "wtdhost.dll";
            wtdhostdll = f_LoadLibraryA(wtdhostdll_str);
        }
    }
    __forceinline void load_wtdsensor() noexcept {
        if (f_LoadLibraryA) {
            char wtdsensordll_str[] = "wtdsensor.dll";
            wtdsensordll = f_LoadLibraryA(wtdsensordll_str);
        }
    }
    __forceinline void load_wtsapi32() noexcept {
        if (f_LoadLibraryA) {
            char wtsapi32dll_str[] = "wtsapi32.dll";
            wtsapi32dll = f_LoadLibraryA(wtsapi32dll_str);
        }
    }
    __forceinline void load_wuapi() noexcept {
        if (f_LoadLibraryA) {
            char wuapidll_str[] = "wuapi.dll";
            wuapidll = f_LoadLibraryA(wuapidll_str);
        }
    }
    __forceinline void load_wuaueng() noexcept {
        if (f_LoadLibraryA) {
            char wuauengdll_str[] = "wuaueng.dll";
            wuauengdll = f_LoadLibraryA(wuauengdll_str);
        }
    }
    __forceinline void load_wuceffects() noexcept {
        if (f_LoadLibraryA) {
            char wuceffectsdll_str[] = "wuceffects.dll";
            wuceffectsdll = f_LoadLibraryA(wuceffectsdll_str);
        }
    }
    __forceinline void load_WUDFCoinstaller() noexcept {
        if (f_LoadLibraryA) {
            char WUDFCoinstallerdll_str[] = "WUDFCoinstaller.dll";
            WUDFCoinstallerdll = f_LoadLibraryA(WUDFCoinstallerdll_str);
        }
    }
    __forceinline void load_WUDFPlatform() noexcept {
        if (f_LoadLibraryA) {
            char WUDFPlatformdll_str[] = "WUDFPlatform.dll";
            WUDFPlatformdll = f_LoadLibraryA(WUDFPlatformdll_str);
        }
    }
    __forceinline void load_WudfSMCClassExt() noexcept {
        if (f_LoadLibraryA) {
            char WudfSMCClassExtdll_str[] = "WudfSMCClassExt.dll";
            WudfSMCClassExtdll = f_LoadLibraryA(WudfSMCClassExtdll_str);
        }
    }
    __forceinline void load_WUDFx() noexcept {
        if (f_LoadLibraryA) {
            char WUDFxdll_str[] = "WUDFx.dll";
            WUDFxdll = f_LoadLibraryA(WUDFxdll_str);
        }
    }
    __forceinline void load_WUDFx02000() noexcept {
        if (f_LoadLibraryA) {
            char WUDFx02000dll_str[] = "WUDFx02000.dll";
            WUDFx02000dll = f_LoadLibraryA(WUDFx02000dll_str);
        }
    }
    __forceinline void load_wudriver() noexcept {
        if (f_LoadLibraryA) {
            char wudriverdll_str[] = "wudriver.dll";
            wudriverdll = f_LoadLibraryA(wudriverdll_str);
        }
    }
    __forceinline void load_wups() noexcept {
        if (f_LoadLibraryA) {
            char wupsdll_str[] = "wups.dll";
            wupsdll = f_LoadLibraryA(wupsdll_str);
        }
    }
    __forceinline void load_wups2() noexcept {
        if (f_LoadLibraryA) {
            char wups2dll_str[] = "wups2.dll";
            wups2dll = f_LoadLibraryA(wups2dll_str);
        }
    }
    __forceinline void load_wusys() noexcept {
        if (f_LoadLibraryA) {
            char wusysdll_str[] = "wusys.dll";
            wusysdll = f_LoadLibraryA(wusysdll_str);
        }
    }
    __forceinline void load_wvc() noexcept {
        if (f_LoadLibraryA) {
            char wvcdll_str[] = "wvc.dll";
            wvcdll = f_LoadLibraryA(wvcdll_str);
        }
    }
    __forceinline void load_WwaApi() noexcept {
        if (f_LoadLibraryA) {
            char WwaApidll_str[] = "WwaApi.dll";
            WwaApidll = f_LoadLibraryA(WwaApidll_str);
        }
    }
    __forceinline void load_WwaExt() noexcept {
        if (f_LoadLibraryA) {
            char WwaExtdll_str[] = "WwaExt.dll";
            WwaExtdll = f_LoadLibraryA(WwaExtdll_str);
        }
    }
    __forceinline void load_WWanAPI() noexcept {
        if (f_LoadLibraryA) {
            char WWanAPIdll_str[] = "WWanAPI.dll";
            WWanAPIdll = f_LoadLibraryA(WWanAPIdll_str);
        }
    }
    __forceinline void load_wwancfg() noexcept {
        if (f_LoadLibraryA) {
            char wwancfgdll_str[] = "wwancfg.dll";
            wwancfgdll = f_LoadLibraryA(wwancfgdll_str);
        }
    }
    __forceinline void load_WWanHC() noexcept {
        if (f_LoadLibraryA) {
            char WWanHCdll_str[] = "WWanHC.dll";
            WWanHCdll = f_LoadLibraryA(WWanHCdll_str);
        }
    }
    __forceinline void load_WwanPrfl() noexcept {
        if (f_LoadLibraryA) {
            char WwanPrfldll_str[] = "WwanPrfl.dll";
            WwanPrfldll = f_LoadLibraryA(WwanPrfldll_str);
        }
    }
    __forceinline void load_wwanprotdim() noexcept {
        if (f_LoadLibraryA) {
            char wwanprotdimdll_str[] = "wwanprotdim.dll";
            wwanprotdimdll = f_LoadLibraryA(wwanprotdimdll_str);
        }
    }
    __forceinline void load_WwanRadioManager() noexcept {
        if (f_LoadLibraryA) {
            char WwanRadioManagerdll_str[] = "WwanRadioManager.dll";
            WwanRadioManagerdll = f_LoadLibraryA(WwanRadioManagerdll_str);
        }
    }
    __forceinline void load_wwansvc() noexcept {
        if (f_LoadLibraryA) {
            char wwansvcdll_str[] = "wwansvc.dll";
            wwansvcdll = f_LoadLibraryA(wwansvcdll_str);
        }
    }
    __forceinline void load_wwapi() noexcept {
        if (f_LoadLibraryA) {
            char wwapidll_str[] = "wwapi.dll";
            wwapidll = f_LoadLibraryA(wwapidll_str);
        }
    }
    __forceinline void load_x3daudio1_0() noexcept {
        if (f_LoadLibraryA) {
            char x3daudio1_0dll_str[] = "x3daudio1_0.dll";
            x3daudio1_0dll = f_LoadLibraryA(x3daudio1_0dll_str);
        }
    }
    __forceinline void load_x3daudio1_1() noexcept {
        if (f_LoadLibraryA) {
            char x3daudio1_1dll_str[] = "x3daudio1_1.dll";
            x3daudio1_1dll = f_LoadLibraryA(x3daudio1_1dll_str);
        }
    }
    __forceinline void load_X3DAudio1_2() noexcept {
        if (f_LoadLibraryA) {
            char X3DAudio1_2dll_str[] = "X3DAudio1_2.dll";
            X3DAudio1_2dll = f_LoadLibraryA(X3DAudio1_2dll_str);
        }
    }
    __forceinline void load_X3DAudio1_3() noexcept {
        if (f_LoadLibraryA) {
            char X3DAudio1_3dll_str[] = "X3DAudio1_3.dll";
            X3DAudio1_3dll = f_LoadLibraryA(X3DAudio1_3dll_str);
        }
    }
    __forceinline void load_X3DAudio1_4() noexcept {
        if (f_LoadLibraryA) {
            char X3DAudio1_4dll_str[] = "X3DAudio1_4.dll";
            X3DAudio1_4dll = f_LoadLibraryA(X3DAudio1_4dll_str);
        }
    }
    __forceinline void load_X3DAudio1_5() noexcept {
        if (f_LoadLibraryA) {
            char X3DAudio1_5dll_str[] = "X3DAudio1_5.dll";
            X3DAudio1_5dll = f_LoadLibraryA(X3DAudio1_5dll_str);
        }
    }
    __forceinline void load_X3DAudio1_6() noexcept {
        if (f_LoadLibraryA) {
            char X3DAudio1_6dll_str[] = "X3DAudio1_6.dll";
            X3DAudio1_6dll = f_LoadLibraryA(X3DAudio1_6dll_str);
        }
    }
    __forceinline void load_X3DAudio1_7() noexcept {
        if (f_LoadLibraryA) {
            char X3DAudio1_7dll_str[] = "X3DAudio1_7.dll";
            X3DAudio1_7dll = f_LoadLibraryA(X3DAudio1_7dll_str);
        }
    }
    __forceinline void load_xactengine2_0() noexcept {
        if (f_LoadLibraryA) {
            char xactengine2_0dll_str[] = "xactengine2_0.dll";
            xactengine2_0dll = f_LoadLibraryA(xactengine2_0dll_str);
        }
    }
    __forceinline void load_xactengine2_1() noexcept {
        if (f_LoadLibraryA) {
            char xactengine2_1dll_str[] = "xactengine2_1.dll";
            xactengine2_1dll = f_LoadLibraryA(xactengine2_1dll_str);
        }
    }
    __forceinline void load_xactengine2_10() noexcept {
        if (f_LoadLibraryA) {
            char xactengine2_10dll_str[] = "xactengine2_10.dll";
            xactengine2_10dll = f_LoadLibraryA(xactengine2_10dll_str);
        }
    }
    __forceinline void load_xactengine2_2() noexcept {
        if (f_LoadLibraryA) {
            char xactengine2_2dll_str[] = "xactengine2_2.dll";
            xactengine2_2dll = f_LoadLibraryA(xactengine2_2dll_str);
        }
    }
    __forceinline void load_xactengine2_3() noexcept {
        if (f_LoadLibraryA) {
            char xactengine2_3dll_str[] = "xactengine2_3.dll";
            xactengine2_3dll = f_LoadLibraryA(xactengine2_3dll_str);
        }
    }
    __forceinline void load_xactengine2_4() noexcept {
        if (f_LoadLibraryA) {
            char xactengine2_4dll_str[] = "xactengine2_4.dll";
            xactengine2_4dll = f_LoadLibraryA(xactengine2_4dll_str);
        }
    }
    __forceinline void load_xactengine2_5() noexcept {
        if (f_LoadLibraryA) {
            char xactengine2_5dll_str[] = "xactengine2_5.dll";
            xactengine2_5dll = f_LoadLibraryA(xactengine2_5dll_str);
        }
    }
    __forceinline void load_xactengine2_6() noexcept {
        if (f_LoadLibraryA) {
            char xactengine2_6dll_str[] = "xactengine2_6.dll";
            xactengine2_6dll = f_LoadLibraryA(xactengine2_6dll_str);
        }
    }
    __forceinline void load_xactengine2_7() noexcept {
        if (f_LoadLibraryA) {
            char xactengine2_7dll_str[] = "xactengine2_7.dll";
            xactengine2_7dll = f_LoadLibraryA(xactengine2_7dll_str);
        }
    }
    __forceinline void load_xactengine2_8() noexcept {
        if (f_LoadLibraryA) {
            char xactengine2_8dll_str[] = "xactengine2_8.dll";
            xactengine2_8dll = f_LoadLibraryA(xactengine2_8dll_str);
        }
    }
    __forceinline void load_xactengine2_9() noexcept {
        if (f_LoadLibraryA) {
            char xactengine2_9dll_str[] = "xactengine2_9.dll";
            xactengine2_9dll = f_LoadLibraryA(xactengine2_9dll_str);
        }
    }
    __forceinline void load_xactengine3_0() noexcept {
        if (f_LoadLibraryA) {
            char xactengine3_0dll_str[] = "xactengine3_0.dll";
            xactengine3_0dll = f_LoadLibraryA(xactengine3_0dll_str);
        }
    }
    __forceinline void load_xactengine3_1() noexcept {
        if (f_LoadLibraryA) {
            char xactengine3_1dll_str[] = "xactengine3_1.dll";
            xactengine3_1dll = f_LoadLibraryA(xactengine3_1dll_str);
        }
    }
    __forceinline void load_xactengine3_2() noexcept {
        if (f_LoadLibraryA) {
            char xactengine3_2dll_str[] = "xactengine3_2.dll";
            xactengine3_2dll = f_LoadLibraryA(xactengine3_2dll_str);
        }
    }
    __forceinline void load_xactengine3_3() noexcept {
        if (f_LoadLibraryA) {
            char xactengine3_3dll_str[] = "xactengine3_3.dll";
            xactengine3_3dll = f_LoadLibraryA(xactengine3_3dll_str);
        }
    }
    __forceinline void load_xactengine3_4() noexcept {
        if (f_LoadLibraryA) {
            char xactengine3_4dll_str[] = "xactengine3_4.dll";
            xactengine3_4dll = f_LoadLibraryA(xactengine3_4dll_str);
        }
    }
    __forceinline void load_xactengine3_5() noexcept {
        if (f_LoadLibraryA) {
            char xactengine3_5dll_str[] = "xactengine3_5.dll";
            xactengine3_5dll = f_LoadLibraryA(xactengine3_5dll_str);
        }
    }
    __forceinline void load_xactengine3_6() noexcept {
        if (f_LoadLibraryA) {
            char xactengine3_6dll_str[] = "xactengine3_6.dll";
            xactengine3_6dll = f_LoadLibraryA(xactengine3_6dll_str);
        }
    }
    __forceinline void load_xactengine3_7() noexcept {
        if (f_LoadLibraryA) {
            char xactengine3_7dll_str[] = "xactengine3_7.dll";
            xactengine3_7dll = f_LoadLibraryA(xactengine3_7dll_str);
        }
    }
    __forceinline void load_XamlTileRender() noexcept {
        if (f_LoadLibraryA) {
            char XamlTileRenderdll_str[] = "XamlTileRender.dll";
            XamlTileRenderdll = f_LoadLibraryA(XamlTileRenderdll_str);
        }
    }
    __forceinline void load_XAPOFX1_0() noexcept {
        if (f_LoadLibraryA) {
            char XAPOFX1_0dll_str[] = "XAPOFX1_0.dll";
            XAPOFX1_0dll = f_LoadLibraryA(XAPOFX1_0dll_str);
        }
    }
    __forceinline void load_XAPOFX1_1() noexcept {
        if (f_LoadLibraryA) {
            char XAPOFX1_1dll_str[] = "XAPOFX1_1.dll";
            XAPOFX1_1dll = f_LoadLibraryA(XAPOFX1_1dll_str);
        }
    }
    __forceinline void load_XAPOFX1_2() noexcept {
        if (f_LoadLibraryA) {
            char XAPOFX1_2dll_str[] = "XAPOFX1_2.dll";
            XAPOFX1_2dll = f_LoadLibraryA(XAPOFX1_2dll_str);
        }
    }
    __forceinline void load_XAPOFX1_3() noexcept {
        if (f_LoadLibraryA) {
            char XAPOFX1_3dll_str[] = "XAPOFX1_3.dll";
            XAPOFX1_3dll = f_LoadLibraryA(XAPOFX1_3dll_str);
        }
    }
    __forceinline void load_XAPOFX1_4() noexcept {
        if (f_LoadLibraryA) {
            char XAPOFX1_4dll_str[] = "XAPOFX1_4.dll";
            XAPOFX1_4dll = f_LoadLibraryA(XAPOFX1_4dll_str);
        }
    }
    __forceinline void load_XAPOFX1_5() noexcept {
        if (f_LoadLibraryA) {
            char XAPOFX1_5dll_str[] = "XAPOFX1_5.dll";
            XAPOFX1_5dll = f_LoadLibraryA(XAPOFX1_5dll_str);
        }
    }
    __forceinline void load_XAudio2_0() noexcept {
        if (f_LoadLibraryA) {
            char XAudio2_0dll_str[] = "XAudio2_0.dll";
            XAudio2_0dll = f_LoadLibraryA(XAudio2_0dll_str);
        }
    }
    __forceinline void load_XAudio2_1() noexcept {
        if (f_LoadLibraryA) {
            char XAudio2_1dll_str[] = "XAudio2_1.dll";
            XAudio2_1dll = f_LoadLibraryA(XAudio2_1dll_str);
        }
    }
    __forceinline void load_XAudio2_2() noexcept {
        if (f_LoadLibraryA) {
            char XAudio2_2dll_str[] = "XAudio2_2.dll";
            XAudio2_2dll = f_LoadLibraryA(XAudio2_2dll_str);
        }
    }
    __forceinline void load_XAudio2_3() noexcept {
        if (f_LoadLibraryA) {
            char XAudio2_3dll_str[] = "XAudio2_3.dll";
            XAudio2_3dll = f_LoadLibraryA(XAudio2_3dll_str);
        }
    }
    __forceinline void load_XAudio2_4() noexcept {
        if (f_LoadLibraryA) {
            char XAudio2_4dll_str[] = "XAudio2_4.dll";
            XAudio2_4dll = f_LoadLibraryA(XAudio2_4dll_str);
        }
    }
    __forceinline void load_XAudio2_5() noexcept {
        if (f_LoadLibraryA) {
            char XAudio2_5dll_str[] = "XAudio2_5.dll";
            XAudio2_5dll = f_LoadLibraryA(XAudio2_5dll_str);
        }
    }
    __forceinline void load_XAudio2_6() noexcept {
        if (f_LoadLibraryA) {
            char XAudio2_6dll_str[] = "XAudio2_6.dll";
            XAudio2_6dll = f_LoadLibraryA(XAudio2_6dll_str);
        }
    }
    __forceinline void load_XAudio2_7() noexcept {
        if (f_LoadLibraryA) {
            char XAudio2_7dll_str[] = "XAudio2_7.dll";
            XAudio2_7dll = f_LoadLibraryA(XAudio2_7dll_str);
        }
    }
    __forceinline void load_XAudio2_8() noexcept {
        if (f_LoadLibraryA) {
            char XAudio2_8dll_str[] = "XAudio2_8.dll";
            XAudio2_8dll = f_LoadLibraryA(XAudio2_8dll_str);
        }
    }
    __forceinline void load_XAudio2_9() noexcept {
        if (f_LoadLibraryA) {
            char XAudio2_9dll_str[] = "XAudio2_9.dll";
            XAudio2_9dll = f_LoadLibraryA(XAudio2_9dll_str);
        }
    }
    __forceinline void load_XblAuthManager() noexcept {
        if (f_LoadLibraryA) {
            char XblAuthManagerdll_str[] = "XblAuthManager.dll";
            XblAuthManagerdll = f_LoadLibraryA(XblAuthManagerdll_str);
        }
    }
    __forceinline void load_XblAuthManagerProxy() noexcept {
        if (f_LoadLibraryA) {
            char XblAuthManagerProxydll_str[] = "XblAuthManagerProxy.dll";
            XblAuthManagerProxydll = f_LoadLibraryA(XblAuthManagerProxydll_str);
        }
    }
    __forceinline void load_XblAuthTokenBrokerExt() noexcept {
        if (f_LoadLibraryA) {
            char XblAuthTokenBrokerExtdll_str[] = "XblAuthTokenBrokerExt.dll";
            XblAuthTokenBrokerExtdll = f_LoadLibraryA(XblAuthTokenBrokerExtdll_str);
        }
    }
    __forceinline void load_XblGameSave() noexcept {
        if (f_LoadLibraryA) {
            char XblGameSavedll_str[] = "XblGameSave.dll";
            XblGameSavedll = f_LoadLibraryA(XblGameSavedll_str);
        }
    }
    __forceinline void load_XblGameSaveExt() noexcept {
        if (f_LoadLibraryA) {
            char XblGameSaveExtdll_str[] = "XblGameSaveExt.dll";
            XblGameSaveExtdll = f_LoadLibraryA(XblGameSaveExtdll_str);
        }
    }
    __forceinline void load_XblGameSaveProxy() noexcept {
        if (f_LoadLibraryA) {
            char XblGameSaveProxydll_str[] = "XblGameSaveProxy.dll";
            XblGameSaveProxydll = f_LoadLibraryA(XblGameSaveProxydll_str);
        }
    }
    __forceinline void load_XboxGipRadioManager() noexcept {
        if (f_LoadLibraryA) {
            char XboxGipRadioManagerdll_str[] = "XboxGipRadioManager.dll";
            XboxGipRadioManagerdll = f_LoadLibraryA(XboxGipRadioManagerdll_str);
        }
    }
    __forceinline void load_xboxgipsvc() noexcept {
        if (f_LoadLibraryA) {
            char xboxgipsvcdll_str[] = "xboxgipsvc.dll";
            xboxgipsvcdll = f_LoadLibraryA(xboxgipsvcdll_str);
        }
    }
    __forceinline void load_xboxgipsynthetic() noexcept {
        if (f_LoadLibraryA) {
            char xboxgipsyntheticdll_str[] = "xboxgipsynthetic.dll";
            xboxgipsyntheticdll = f_LoadLibraryA(xboxgipsyntheticdll_str);
        }
    }
    __forceinline void load_XboxNetApiSvc() noexcept {
        if (f_LoadLibraryA) {
            char XboxNetApiSvcdll_str[] = "XboxNetApiSvc.dll";
            XboxNetApiSvcdll = f_LoadLibraryA(XboxNetApiSvcdll_str);
        }
    }
    __forceinline void load_xinput1_1() noexcept {
        if (f_LoadLibraryA) {
            char xinput1_1dll_str[] = "xinput1_1.dll";
            xinput1_1dll = f_LoadLibraryA(xinput1_1dll_str);
        }
    }
    __forceinline void load_xinput1_2() noexcept {
        if (f_LoadLibraryA) {
            char xinput1_2dll_str[] = "xinput1_2.dll";
            xinput1_2dll = f_LoadLibraryA(xinput1_2dll_str);
        }
    }
    __forceinline void load_xinput1_3() noexcept {
        if (f_LoadLibraryA) {
            char xinput1_3dll_str[] = "xinput1_3.dll";
            xinput1_3dll = f_LoadLibraryA(xinput1_3dll_str);
        }
    }
    __forceinline void load_XInput1_4() noexcept {
        if (f_LoadLibraryA) {
            char XInput1_4dll_str[] = "XInput1_4.dll";
            XInput1_4dll = f_LoadLibraryA(XInput1_4dll_str);
        }
    }
    __forceinline void load_XInput9_1_0() noexcept {
        if (f_LoadLibraryA) {
            char XInput9_1_0dll_str[] = "XInput9_1_0.dll";
            XInput9_1_0dll = f_LoadLibraryA(XInput9_1_0dll_str);
        }
    }
    __forceinline void load_XInputUap() noexcept {
        if (f_LoadLibraryA) {
            char XInputUapdll_str[] = "XInputUap.dll";
            XInputUapdll = f_LoadLibraryA(XInputUapdll_str);
        }
    }
    __forceinline void load_xmlfilter() noexcept {
        if (f_LoadLibraryA) {
            char xmlfilterdll_str[] = "xmlfilter.dll";
            xmlfilterdll = f_LoadLibraryA(xmlfilterdll_str);
        }
    }
    __forceinline void load_xmllite() noexcept {
        if (f_LoadLibraryA) {
            char xmllitedll_str[] = "xmllite.dll";
            xmllitedll = f_LoadLibraryA(xmllitedll_str);
        }
    }
    __forceinline void load_xmlprovi() noexcept {
        if (f_LoadLibraryA) {
            char xmlprovidll_str[] = "xmlprovi.dll";
            xmlprovidll = f_LoadLibraryA(xmlprovidll_str);
        }
    }
    __forceinline void load_xolehlp() noexcept {
        if (f_LoadLibraryA) {
            char xolehlpdll_str[] = "xolehlp.dll";
            xolehlpdll = f_LoadLibraryA(xolehlpdll_str);
        }
    }
    __forceinline void load_XpsDocumentTargetPrint() noexcept {
        if (f_LoadLibraryA) {
            char XpsDocumentTargetPrintdll_str[] = "XpsDocumentTargetPrint.dll";
            XpsDocumentTargetPrintdll = f_LoadLibraryA(XpsDocumentTargetPrintdll_str);
        }
    }
    __forceinline void load_XpsGdiConverter() noexcept {
        if (f_LoadLibraryA) {
            char XpsGdiConverterdll_str[] = "XpsGdiConverter.dll";
            XpsGdiConverterdll = f_LoadLibraryA(XpsGdiConverterdll_str);
        }
    }
    __forceinline void load_XpsPrint() noexcept {
        if (f_LoadLibraryA) {
            char XpsPrintdll_str[] = "XpsPrint.dll";
            XpsPrintdll = f_LoadLibraryA(XpsPrintdll_str);
        }
    }
    __forceinline void load_xpspushlayer() noexcept {
        if (f_LoadLibraryA) {
            char xpspushlayerdll_str[] = "xpspushlayer.dll";
            xpspushlayerdll = f_LoadLibraryA(xpspushlayerdll_str);
        }
    }
    __forceinline void load_XpsRasterService() noexcept {
        if (f_LoadLibraryA) {
            char XpsRasterServicedll_str[] = "XpsRasterService.dll";
            XpsRasterServicedll = f_LoadLibraryA(XpsRasterServicedll_str);
        }
    }
    __forceinline void load_xpsservices() noexcept {
        if (f_LoadLibraryA) {
            char xpsservicesdll_str[] = "xpsservices.dll";
            xpsservicesdll = f_LoadLibraryA(xpsservicesdll_str);
        }
    }
    __forceinline void load_XpsToPclmConverter() noexcept {
        if (f_LoadLibraryA) {
            char XpsToPclmConverterdll_str[] = "XpsToPclmConverter.dll";
            XpsToPclmConverterdll = f_LoadLibraryA(XpsToPclmConverterdll_str);
        }
    }
    __forceinline void load_XpsToPwgrConverter() noexcept {
        if (f_LoadLibraryA) {
            char XpsToPwgrConverterdll_str[] = "XpsToPwgrConverter.dll";
            XpsToPwgrConverterdll = f_LoadLibraryA(XpsToPwgrConverterdll_str);
        }
    }
    __forceinline void load_xwizards() noexcept {
        if (f_LoadLibraryA) {
            char xwizardsdll_str[] = "xwizards.dll";
            xwizardsdll = f_LoadLibraryA(xwizardsdll_str);
        }
    }
    __forceinline void load_xwreg() noexcept {
        if (f_LoadLibraryA) {
            char xwregdll_str[] = "xwreg.dll";
            xwregdll = f_LoadLibraryA(xwregdll_str);
        }
    }
    __forceinline void load_xwtpdui() noexcept {
        if (f_LoadLibraryA) {
            char xwtpduidll_str[] = "xwtpdui.dll";
            xwtpduidll = f_LoadLibraryA(xwtpduidll_str);
        }
    }
    __forceinline void load_xwtpw32() noexcept {
        if (f_LoadLibraryA) {
            char xwtpw32dll_str[] = "xwtpw32.dll";
            xwtpw32dll = f_LoadLibraryA(xwtpw32dll_str);
        }
    }
    __forceinline void load_ze_loader() noexcept {
        if (f_LoadLibraryA) {
            char ze_loaderdll_str[] = "ze_loader.dll";
            ze_loaderdll = f_LoadLibraryA(ze_loaderdll_str);
        }
    }
    __forceinline void load_ze_validation_layer() noexcept {
        if (f_LoadLibraryA) {
            char ze_validation_layerdll_str[] = "ze_validation_layer.dll";
            ze_validation_layerdll = f_LoadLibraryA(ze_validation_layerdll_str);
        }
    }
    __forceinline void load_zipcontainer() noexcept {
        if (f_LoadLibraryA) {
            char zipcontainerdll_str[] = "zipcontainer.dll";
            zipcontainerdll = f_LoadLibraryA(zipcontainerdll_str);
        }
    }
    __forceinline void load_zipfldr() noexcept {
        if (f_LoadLibraryA) {
            char zipfldrdll_str[] = "zipfldr.dll";
            zipfldrdll = f_LoadLibraryA(zipfldrdll_str);
        }
    }
    __forceinline void load_ztrace_maps() noexcept {
        if (f_LoadLibraryA) {
            char ztrace_mapsdll_str[] = "ztrace_maps.dll";
            ztrace_mapsdll = f_LoadLibraryA(ztrace_mapsdll_str);
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    //               Generated using generator python script
    ////////////////////////////////////////////////////////////////////////////

    UINT_PTR        kernel32dll;
    LoadLibraryA_t  f_LoadLibraryA;
    UINT_PTR         aadauthhelperdll;
    UINT_PTR         aadcloudapdll;
    UINT_PTR         aadjcspdll;
    UINT_PTR         aadtbdll;
    UINT_PTR         aadWamExtensiondll;
    UINT_PTR         AarSvcdll;
    UINT_PTR         AboutSettingsHandlersdll;
    UINT_PTR         AboveLockAppHostdll;
    UINT_PTR         accessibilitycpldll;
    UINT_PTR         accountaccessordll;
    UINT_PTR         AccountsRtdll;
    UINT_PTR         AcGenraldll;
    UINT_PTR         AcLayersdll;
    UINT_PTR         acleditdll;
    UINT_PTR         acluidll;
    UINT_PTR         acmigrationdll;
    UINT_PTR         ACPBackgroundManagerPolicydll;
    UINT_PTR         acppagedll;
    UINT_PTR         acproxydll;
    UINT_PTR         AcSpecfcdll;
    UINT_PTR         ActionCenterdll;
    UINT_PTR         ActionCenterCPLdll;
    UINT_PTR         ActionQueuedll;
    UINT_PTR         ActivationClientdll;
    UINT_PTR         ActivationManagerdll;
    UINT_PTR         ActivationVdevdll;
    UINT_PTR         activedsdll;
    UINT_PTR         ActiveSyncCspdll;
    UINT_PTR         ActiveSyncProviderdll;
    UINT_PTR         actxprxydll;
    UINT_PTR         AcWinRTdll;
    UINT_PTR         AcXtrnaldll;
    UINT_PTR         AdaptiveCardsdll;
    UINT_PTR         AddressParserdll;
    UINT_PTR         adhapidll;
    UINT_PTR         adhsvcdll;
    UINT_PTR         AdmTmpldll;
    UINT_PTR         admwproxdll;
    UINT_PTR         adproviderdll;
    UINT_PTR         adrclientdll;
    UINT_PTR         adsldpdll;
    UINT_PTR         adsldpcdll;
    UINT_PTR         adsmsextdll;
    UINT_PTR         adsntdll;
    UINT_PTR         adtschemadll;
    UINT_PTR         AdvancedEmojiDSdll;
    UINT_PTR         advapi32dll;
    UINT_PTR         advapi32resdll;
    UINT_PTR         advpackdll;
    UINT_PTR         aeevtsdll;
    UINT_PTR         aeinvdll;
    UINT_PTR         aemarebackupdll;
    UINT_PTR         aepicdll;
    UINT_PTR         agentactivationruntimedll;
    UINT_PTR         agentactivationruntimewindowsdll;
    UINT_PTR         ahadmindll;
    UINT_PTR         AJRouterdll;
    UINT_PTR         amsidll;
    UINT_PTR         amsiproxydll;
    UINT_PTR         amstreamdll;
    UINT_PTR         AnalogShellBrokerdll;
    UINT_PTR         AnalogCommonProxyStubdll;
    UINT_PTR         apdsdll;
    UINT_PTR         APHostClientdll;
    UINT_PTR         APHostResdll;
    UINT_PTR         APHostServicedll;
    UINT_PTR         apisamplingdll;
    UINT_PTR         ApiSetHostAppExecutionAliasdll;
    UINT_PTR         apisetschemadll;
    UINT_PTR         APMondll;
    UINT_PTR         APMonUIdll;
    UINT_PTR         AppContractsdll;
    UINT_PTR         AppExtensiondll;
    UINT_PTR         apphelpdll;
    UINT_PTR         Apphlpdmdll;
    UINT_PTR         appidapidll;
    UINT_PTR         AppIdPolicyEngineApidll;
    UINT_PTR         appidsvcdll;
    UINT_PTR         appinfodll;
    UINT_PTR         appinfoextdll;
    UINT_PTR         AppInstallerPromptDesktopdll;
    UINT_PTR         ApplicationControlCSPdll;
    UINT_PTR         ApplicationFramedll;
    UINT_PTR         ApplicationTargetedFeatureDatabasedll;
    UINT_PTR         AppListBackupLauncherdll;
    UINT_PTR         AppLockerCSPdll;
    UINT_PTR         AppManagementConfigurationdll;
    UINT_PTR         appmgmtsdll;
    UINT_PTR         appmgrdll;
    UINT_PTR         AppMondll;
    UINT_PTR         AppointmentActivationdll;
    UINT_PTR         AppointmentApisdll;
    UINT_PTR         appraiserdll;
    UINT_PTR         AppReadinessdll;
    UINT_PTR         apprepapidll;
    UINT_PTR         AppResolverdll;
    UINT_PTR         appsruprovdll;
    UINT_PTR         AppVCatalogdll;
    UINT_PTR         AppvClientEventLogdll;
    UINT_PTR         AppVClientPSdll;
    UINT_PTR         AppVEntStreamingManagerdll;
    UINT_PTR         AppVEntSubsystemControllerdll;
    UINT_PTR         AppVEntSubsystems64dll;
    UINT_PTR         AppVEntVirtualizationdll;
    UINT_PTR         appverifUIdll;
    UINT_PTR         appvetwclientresdll;
    UINT_PTR         appvetwsharedperformancedll;
    UINT_PTR         appvetwstreaminguxdll;
    UINT_PTR         AppVFileSystemMetadatadll;
    UINT_PTR         AppVIntegrationdll;
    UINT_PTR         AppVManifestdll;
    UINT_PTR         AppVOrchestrationdll;
    UINT_PTR         AppVPolicydll;
    UINT_PTR         AppVPublishingdll;
    UINT_PTR         AppVReportingdll;
    UINT_PTR         AppVScriptingdll;
    UINT_PTR         AppVSentineldll;
    UINT_PTR         AppVStreamingUXdll;
    UINT_PTR         AppVStreamMapdll;
    UINT_PTR         AppVTerminatordll;
    UINT_PTR         AppxAllUserStoredll;
    UINT_PTR         AppXApplicabilityBlobdll;
    UINT_PTR         AppxApplicabilityEnginedll;
    UINT_PTR         AppXDeploymentClientdll;
    UINT_PTR         AppXDeploymentExtensionsdesktopdll;
    UINT_PTR         AppXDeploymentExtensionsonecoredll;
    UINT_PTR         AppXDeploymentServerdll;
    UINT_PTR         AppxPackagingdll;
    UINT_PTR         AppxSipdll;
    UINT_PTR         AppxStreamingDataSourcePSdll;
    UINT_PTR         AppxSysprepdll;
    UINT_PTR         Apx01000dll;
    UINT_PTR         archiveintdll;
    UINT_PTR         asferrordll;
    UINT_PTR         aspnet_countersdll;
    UINT_PTR         AssignedAccessCspdll;
    UINT_PTR         AssignedAccessManagerdll;
    UINT_PTR         assignedaccessmanagersvcdll;
    UINT_PTR         assignedaccessprovidereventsdll;
    UINT_PTR         AssignedAccessRuntimedll;
    UINT_PTR         AssignedAccessShellProxydll;
    UINT_PTR         asycfiltdll;
    UINT_PTR         atldll;
    UINT_PTR         atl100dll;
    UINT_PTR         atl110dll;
    UINT_PTR         atlthunkdll;
    UINT_PTR         atmlibdll;
    UINT_PTR         AttestationWmiProviderdll;
    UINT_PTR         AudioEndpointBuilderdll;
    UINT_PTR         AudioEngdll;
    UINT_PTR         AudioHandlersdll;
    UINT_PTR         AUDIOKSEdll;
    UINT_PTR         audioresourceregistrardll;
    UINT_PTR         AudioSesdll;
    UINT_PTR         audiosrvdll;
    UINT_PTR         AudioSrvPolicyManagerdll;
    UINT_PTR         auditcsedll;
    UINT_PTR         AuditNativeSnapIndll;
    UINT_PTR         auditpolcoredll;
    UINT_PTR         AuditPolicyGPInteropdll;
    UINT_PTR         auditpolmsgdll;
    UINT_PTR         AuthBrokerdll;
    UINT_PTR         AuthBrokerUIdll;
    UINT_PTR         authenticationdll;
    UINT_PTR         AuthExtdll;
    UINT_PTR         authfwcfgdll;
    UINT_PTR         AuthFWGPdll;
    UINT_PTR         AuthFWSnapindll;
    UINT_PTR         AuthFWWizFwkdll;
    UINT_PTR         AuthHostProxydll;
    UINT_PTR         authuidll;
    UINT_PTR         authzdll;
    UINT_PTR         AutomaticAppSignInPolicydll;
    UINT_PTR         autopilotdll;
    UINT_PTR         autopilotdiagdll;
    UINT_PTR         autoplaydll;
    UINT_PTR         autotimesvcdll;
    UINT_PTR         avicap32dll;
    UINT_PTR         avifil32dll;
    UINT_PTR         avrtdll;
    UINT_PTR         AxInstSvdll;
    UINT_PTR         azrolesdll;
    UINT_PTR         azroleuidll;
    UINT_PTR         AzSqlExtdll;
    UINT_PTR         BackgroundMediaPolicydll;
    UINT_PTR         BamSettingsClientdll;
    UINT_PTR         BarcodeProvisioningPlugindll;
    UINT_PTR         basecspdll;
    UINT_PTR         basesrvdll;
    UINT_PTR         batmeterdll;
    UINT_PTR         bcastdvrproxydll;
    UINT_PTR         BcastDVRBrokerdll;
    UINT_PTR         BcastDVRClientdll;
    UINT_PTR         BcastDVRCommondll;
    UINT_PTR         bcastdvruserservicedll;
    UINT_PTR         bcddll;
    UINT_PTR         bcdprovdll;
    UINT_PTR         bcdsrvdll;
    UINT_PTR         BCP47Langsdll;
    UINT_PTR         BCP47mrmdll;
    UINT_PTR         bcryptdll;
    UINT_PTR         bcryptprimitivesdll;
    UINT_PTR         BdeHdCfgLibdll;
    UINT_PTR         bderepairdll;
    UINT_PTR         bdesvcdll;
    UINT_PTR         BdeSysprepdll;
    UINT_PTR         bdeuidll;
    UINT_PTR         bidll;
    UINT_PTR         bidispldll;
    UINT_PTR         bindfltapidll;
    UINT_PTR         BingASDSdll;
    UINT_PTR         BingFilterDSdll;
    UINT_PTR         BingMapsdll;
    UINT_PTR         BingOnlineServicesdll;
    UINT_PTR         BioCredProvdll;
    UINT_PTR         bisrvdll;
    UINT_PTR         BitLockerCspdll;
    UINT_PTR         bitsigddll;
    UINT_PTR         bitsperfdll;
    UINT_PTR         BitsProxydll;
    UINT_PTR         biwinrtdll;
    UINT_PTR         BlbEventsdll;
    UINT_PTR         blbresdll;
    UINT_PTR         blb_psdll;
    UINT_PTR         BluetoothApisdll;
    UINT_PTR         BluetoothDesktopHandlersdll;
    UINT_PTR         BluetoothOppPushClientdll;
    UINT_PTR         bnmanagerdll;
    UINT_PTR         BootMenuUXdll;
    UINT_PTR         bootstrdll;
    UINT_PTR         bootsvcdll;
    UINT_PTR         bootuxdll;
    UINT_PTR         bridgeresdll;
    UINT_PTR         BrokerFileDialogdll;
    UINT_PTR         BrokerLibdll;
    UINT_PTR         browclidll;
    UINT_PTR         browserbrokerdll;
    UINT_PTR         browseuidll;
    UINT_PTR         BTAGServicedll;
    UINT_PTR         BthAvctpSvcdll;
    UINT_PTR         BthAvrcpdll;
    UINT_PTR         BthAvrcpAppSvcdll;
    UINT_PTR         bthcidll;
    UINT_PTR         BthMtpContextHandlerdll;
    UINT_PTR         bthpanapidll;
    UINT_PTR         BthpanContextHandlerdll;
    UINT_PTR         BthRadioMediadll;
    UINT_PTR         bthservdll;
    UINT_PTR         BthTelemetrydll;
    UINT_PTR         btpanuidll;
    UINT_PTR         BWContextHandlerdll;
    UINT_PTR         c28c7a4e_a619_4463_82b7_0fc9cc7187f5_HyperV_ComputeStoragedll;
    UINT_PTR         c4d66f00_b6f0_4439_ac9b_c5ea13fe54d7_HyperV_ComputeCoredll;
    UINT_PTR         cabapidll;
    UINT_PTR         cabinetdll;
    UINT_PTR         cabviewdll;
    UINT_PTR         CallButtonsdll;
    UINT_PTR         CallButtonsProxyStubdll;
    UINT_PTR         CallHistoryClientdll;
    UINT_PTR         CameraCaptureUIdll;
    UINT_PTR         camextdll;
    UINT_PTR         CapabilityAccessHandlersdll;
    UINT_PTR         CapabilityAccessManagerdll;
    UINT_PTR         CapabilityAccessManagerClientdll;
    UINT_PTR         capauthzdll;
    UINT_PTR         capiproviderdll;
    UINT_PTR         capispdll;
    UINT_PTR         CaptureServicedll;
    UINT_PTR         CastingShellExtdll;
    UINT_PTR         CastLaunchdll;
    UINT_PTR         catsrvdll;
    UINT_PTR         catsrvpsdll;
    UINT_PTR         catsrvutdll;
    UINT_PTR         CBDHSvcdll;
    UINT_PTR         ccadll;
    UINT_PTR         CCGLaunchPaddll;
    UINT_PTR         cdddll;
    UINT_PTR         cdosysdll;
    UINT_PTR         cdpdll;
    UINT_PTR         cdprtdll;
    UINT_PTR         cdpsvcdll;
    UINT_PTR         cdpusersvcdll;
    UINT_PTR         cellulardatacapabilityhandlerdll;
    UINT_PTR         cemapidll;
    UINT_PTR         certcadll;
    UINT_PTR         certclidll;
    UINT_PTR         certCredProviderdll;
    UINT_PTR         certencdll;
    UINT_PTR         CertEnrolldll;
    UINT_PTR         CertEnrollUIdll;
    UINT_PTR         certmgrdll;
    UINT_PTR         CertPKICmdletdll;
    UINT_PTR         CertPolEngdll;
    UINT_PTR         certpropdll;
    UINT_PTR         cewmdmdll;
    UINT_PTR         cfgbkenddll;
    UINT_PTR         cfgmgr32dll;
    UINT_PTR         CfgSPCellulardll;
    UINT_PTR         CfgSPPolicydll;
    UINT_PTR         cflapidll;
    UINT_PTR         cfmifsdll;
    UINT_PTR         cfmifsproxydll;
    UINT_PTR         Chakradll;
    UINT_PTR         Chakradiagdll;
    UINT_PTR         Chakrathunkdll;
    UINT_PTR         chartvdll;
    UINT_PTR         ChatApisdll;
    UINT_PTR         ChsStrokeDSdll;
    UINT_PTR         ChtBopomofoDSdll;
    UINT_PTR         ChtCangjieDSdll;
    UINT_PTR         ChtHkStrokeDSdll;
    UINT_PTR         ChtQuickDSdll;
    UINT_PTR         ChxAPDSdll;
    UINT_PTR         ChxDecoderdll;
    UINT_PTR         ChxHAPDSdll;
    UINT_PTR         chxinputrouterdll;
    UINT_PTR         chxrankerdll;
    UINT_PTR         CHxReadingStringIMEdll;
    UINT_PTR         cidll;
    UINT_PTR         cicdll;
    UINT_PTR         cimfsdll;
    UINT_PTR         CIRCoInstdll;
    UINT_PTR         CIWmidll;
    UINT_PTR         clbcatqdll;
    UINT_PTR         cldapidll;
    UINT_PTR         CleanPCCSPdll;
    UINT_PTR         clfsw32dll;
    UINT_PTR         cliconfgdll;
    UINT_PTR         ClipboardServerdll;
    UINT_PTR         Clipcdll;
    UINT_PTR         ClipSVCdll;
    UINT_PTR         clipwinrtdll;
    UINT_PTR         cloudAPdll;
    UINT_PTR         CloudDesktopCSPdll;
    UINT_PTR         CloudDomainJoinAUGdll;
    UINT_PTR         CloudDomainJoinDataModelServerdll;
    UINT_PTR         CloudExperienceHostdll;
    UINT_PTR         CloudExperienceHostBrokerdll;
    UINT_PTR         CloudExperienceHostCommondll;
    UINT_PTR         CloudExperienceHostRedirectiondll;
    UINT_PTR         CloudExperienceHostUserdll;
    UINT_PTR         cloudidsvcdll;
    UINT_PTR         CloudIdWxhExtensiondll;
    UINT_PTR         CloudRecoveryDownloadTooldll;
    UINT_PTR         CloudRestoreLauncherdll;
    UINT_PTR         clrhostdll;
    UINT_PTR         clusapidll;
    UINT_PTR         cmcfg32dll;
    UINT_PTR         cmdextdll;
    UINT_PTR         cmdial32dll;
    UINT_PTR         cmgrcsppsdll;
    UINT_PTR         cmifwdll;
    UINT_PTR         cmintegratordll;
    UINT_PTR         cmluadll;
    UINT_PTR         cmpbk32dll;
    UINT_PTR         cmstpluadll;
    UINT_PTR         cmutildll;
    UINT_PTR         cngcreduidll;
    UINT_PTR         cngkeyhelperdll;
    UINT_PTR         cngproviderdll;
    UINT_PTR         cnvfatdll;
    UINT_PTR         CodeIntegrityAggregatordll;
    UINT_PTR         cofiredmdll;
    UINT_PTR         colbactdll;
    UINT_PTR         coloruidll;
    UINT_PTR         combasedll;
    UINT_PTR         comcatdll;
    UINT_PTR         comctl32dll;
    UINT_PTR         comdlg32dll;
    UINT_PTR         coml2dll;
    UINT_PTR         CompatAggregatordll;
    UINT_PTR         ComposableShellProxyStubdll;
    UINT_PTR         ComposerFrameworkdll;
    UINT_PTR         CompPkgSupdll;
    UINT_PTR         compstuidll;
    UINT_PTR         computecoredll;
    UINT_PTR         computelibeventlogdll;
    UINT_PTR         computenetworkdll;
    UINT_PTR         computestoragedll;
    UINT_PTR         comrepldll;
    UINT_PTR         comresdll;
    UINT_PTR         comsnapdll;
    UINT_PTR         comsvcsdll;
    UINT_PTR         comuiddll;
    UINT_PTR         concrt140dll;
    UINT_PTR         concrt140ddll;
    UINT_PTR         configmanager2dll;
    UINT_PTR         ConfigureExpandedStoragedll;
    UINT_PTR         ConhostV1dll;
    UINT_PTR         connectdll;
    UINT_PTR         ConnectedAccountStatedll;
    UINT_PTR         ConsentExperienceCommondll;
    UINT_PTR         ConsentUXdll;
    UINT_PTR         ConsentUxClientdll;
    UINT_PTR         consoledll;
    UINT_PTR         ConsoleLogondll;
    UINT_PTR         ConstraintIndexSearchdll;
    UINT_PTR         ContactActivationdll;
    UINT_PTR         ContactApisdll;
    UINT_PTR         ContactHarvesterDSdll;
    UINT_PTR         containerdll;
    UINT_PTR         containerdevicemanagementdll;
    UINT_PTR         ContentDeliveryManagerUtilitiesdll;
    UINT_PTR         coreaudiopolicymanagerextdll;
    UINT_PTR         coredpusdll;
    UINT_PTR         coreglobconfigdll;
    UINT_PTR         CoreMasdll;
    UINT_PTR         CoreMessagingdll;
    UINT_PTR         CoreMmResdll;
    UINT_PTR         CorePrivacySettingsStoredll;
    UINT_PTR         CoreShelldll;
    UINT_PTR         CoreShellAPIdll;
    UINT_PTR         CoreShellExtFrameworkdll;
    UINT_PTR         CoreUIComponentsdll;
    UINT_PTR         correnginedll;
    UINT_PTR         CourtesyEnginedll;
    UINT_PTR         CPFiltersdll;
    UINT_PTR         CredDialogBrokerdll;
    UINT_PTR         CredentialEnrollmentManagerForUserdll;
    UINT_PTR         CredProv2faHelperdll;
    UINT_PTR         CredProvCommonCoredll;
    UINT_PTR         CredProvDataModeldll;
    UINT_PTR         CredProvHelperdll;
    UINT_PTR         credprovhostdll;
    UINT_PTR         credprovsdll;
    UINT_PTR         credprovslegacydll;
    UINT_PTR         credsspdll;
    UINT_PTR         creduidll;
    UINT_PTR         crypt32dll;
    UINT_PTR         cryptbasedll;
    UINT_PTR         cryptcatsvcdll;
    UINT_PTR         cryptdlgdll;
    UINT_PTR         cryptdlldll;
    UINT_PTR         cryptextdll;
    UINT_PTR         cryptnetdll;
    UINT_PTR         cryptngcdll;
    UINT_PTR         CryptoWinRTdll;
    UINT_PTR         cryptspdll;
    UINT_PTR         cryptsvcdll;
    UINT_PTR         crypttpmeksvcdll;
    UINT_PTR         cryptuidll;
    UINT_PTR         cryptuiwizarddll;
    UINT_PTR         cryptxmldll;
    UINT_PTR         cscapidll;
    UINT_PTR         cscdlldll;
    UINT_PTR         CscMigdll;
    UINT_PTR         cscobjdll;
    UINT_PTR         cscsvcdll;
    UINT_PTR         cscuidll;
    UINT_PTR         CspCellularSettingsdll;
    UINT_PTR         cspltedll;
    UINT_PTR         CspProxydll;
    UINT_PTR         csrsrvdll;
    UINT_PTR         CSystemEventsBrokerClientdll;
    UINT_PTR         cuzzapidll;
    UINT_PTR         cxcredprovdll;
    UINT_PTR         CXHProvisioningServerdll;
    UINT_PTR         d2d1dll;
    UINT_PTR         d2d1debug3dll;
    UINT_PTR         d3d10dll;
    UINT_PTR         d3d10coredll;
    UINT_PTR         d3d10level9dll;
    UINT_PTR         d3d10refdll;
    UINT_PTR         d3d10sdklayersdll;
    UINT_PTR         d3d10warpdll;
    UINT_PTR         d3d10_1dll;
    UINT_PTR         d3d10_1coredll;
    UINT_PTR         d3d11dll;
    UINT_PTR         d3d11on12dll;
    UINT_PTR         d3d11_3SDKLayersdll;
    UINT_PTR         D3D12dll;
    UINT_PTR         D3D12Coredll;
    UINT_PTR         d3d12SDKLayersdll;
    UINT_PTR         d3d8thkdll;
    UINT_PTR         d3d9dll;
    UINT_PTR         d3d9on12dll;
    UINT_PTR         D3DCompiler_33dll;
    UINT_PTR         D3DCompiler_34dll;
    UINT_PTR         D3DCompiler_35dll;
    UINT_PTR         D3DCompiler_36dll;
    UINT_PTR         D3DCompiler_37dll;
    UINT_PTR         D3DCompiler_38dll;
    UINT_PTR         D3DCompiler_39dll;
    UINT_PTR         D3DCompiler_40dll;
    UINT_PTR         D3DCompiler_41dll;
    UINT_PTR         D3DCompiler_42dll;
    UINT_PTR         D3DCompiler_43dll;
    UINT_PTR         D3DCompiler_47dll;
    UINT_PTR         d3dcsx_42dll;
    UINT_PTR         d3dcsx_43dll;
    UINT_PTR         d3dref9dll;
    UINT_PTR         D3DSCachedll;
    UINT_PTR         d3dx10dll;
    UINT_PTR         d3dx10_33dll;
    UINT_PTR         d3dx10_34dll;
    UINT_PTR         d3dx10_35dll;
    UINT_PTR         d3dx10_36dll;
    UINT_PTR         d3dx10_37dll;
    UINT_PTR         d3dx10_38dll;
    UINT_PTR         d3dx10_39dll;
    UINT_PTR         d3dx10_40dll;
    UINT_PTR         d3dx10_41dll;
    UINT_PTR         d3dx10_42dll;
    UINT_PTR         d3dx10_43dll;
    UINT_PTR         d3dx11_42dll;
    UINT_PTR         d3dx11_43dll;
    UINT_PTR         d3dx9_24dll;
    UINT_PTR         d3dx9_25dll;
    UINT_PTR         d3dx9_26dll;
    UINT_PTR         d3dx9_27dll;
    UINT_PTR         d3dx9_28dll;
    UINT_PTR         d3dx9_29dll;
    UINT_PTR         d3dx9_30dll;
    UINT_PTR         d3dx9_31dll;
    UINT_PTR         d3dx9_32dll;
    UINT_PTR         d3dx9_33dll;
    UINT_PTR         d3dx9_34dll;
    UINT_PTR         d3dx9_35dll;
    UINT_PTR         d3dx9_36dll;
    UINT_PTR         D3DX9_37dll;
    UINT_PTR         D3DX9_38dll;
    UINT_PTR         D3DX9_39dll;
    UINT_PTR         D3DX9_40dll;
    UINT_PTR         D3DX9_41dll;
    UINT_PTR         D3DX9_42dll;
    UINT_PTR         D3DX9_43dll;
    UINT_PTR         d4d78066_e6db_44b7_b5cd_2eb82dce620c_HyperV_ComputeLegacydll;
    UINT_PTR         dabdll;
    UINT_PTR         dabapidll;
    UINT_PTR         DAConndll;
    UINT_PTR         dafAspInfraProviderdll;
    UINT_PTR         dafBthdll;
    UINT_PTR         DafDnsSddll;
    UINT_PTR         dafDockingProviderdll;
    UINT_PTR         DAFESCLdll;
    UINT_PTR         DafGipdll;
    UINT_PTR         DAFIoTdll;
    UINT_PTR         DAFIPPdll;
    UINT_PTR         DAFMCPdll;
    UINT_PTR         dafposdll;
    UINT_PTR         DafPrintProviderdll;
    UINT_PTR         dafupnpdll;
    UINT_PTR         dafWCNdll;
    UINT_PTR         dafWfdProviderdll;
    UINT_PTR         DAFWiProvdll;
    UINT_PTR         DAFWSDdll;
    UINT_PTR         DAMediaManagerdll;
    UINT_PTR         DAMMdll;
    UINT_PTR         DaOtpCredentialProviderdll;
    UINT_PTR         dasdll;
    UINT_PTR         dataclendll;
    UINT_PTR         DataExchangedll;
    UINT_PTR         datusagedll;
    UINT_PTR         davclntdll;
    UINT_PTR         davhlprdll;
    UINT_PTR         DavSyncProviderdll;
    UINT_PTR         daxexecdll;
    UINT_PTR         dbgcoredll;
    UINT_PTR         dbgengdll;
    UINT_PTR         dbghelpdll;
    UINT_PTR         DbgModeldll;
    UINT_PTR         dbnetlibdll;
    UINT_PTR         dbnmpntwdll;
    UINT_PTR         dciman32dll;
    UINT_PTR         dcnteldll;
    UINT_PTR         dcompdll;
    UINT_PTR         dcsvcdll;
    UINT_PTR         DDACLSysdll;
    UINT_PTR         DdcClaimsApidll;
    UINT_PTR         DdcComImplementationsDesktopdll;
    UINT_PTR         DDDSdll;
    UINT_PTR         ddisplaydll;
    UINT_PTR         DDOIProxydll;
    UINT_PTR         DDOResdll;
    UINT_PTR         ddpchunkdll;
    UINT_PTR         ddptracedll;
    UINT_PTR         ddputilsdll;
    UINT_PTR         ddp_psdll;
    UINT_PTR         ddrawdll;
    UINT_PTR         ddrawexdll;
    UINT_PTR         debugregsvcdll;
    UINT_PTR         debugregsvcapidll;
    UINT_PTR         declaredconfigurationdll;
    UINT_PTR         DefaultDeviceManagerdll;
    UINT_PTR         DefaultPrinterProviderdll;
    UINT_PTR         defragproxydll;
    UINT_PTR         defragresdll;
    UINT_PTR         defragsvcdll;
    UINT_PTR         delegatorproviderdll;
    UINT_PTR         deploymentcspsdll;
    UINT_PTR         deskadpdll;
    UINT_PTR         deskmondll;
    UINT_PTR         DesktopShellAppStateContractdll;
    UINT_PTR         DesktopShellExtdll;
    UINT_PTR         DesktopSwitcherDataModeldll;
    UINT_PTR         DesktopViewInternalBrokerdll;
    UINT_PTR         DesktopViewInternalBrokerProxyStubdll;
    UINT_PTR         DevDispItemProviderdll;
    UINT_PTR         DeveloperOptionsSettingsHandlersdll;
    UINT_PTR         DeveloperSetupCSPdll;
    UINT_PTR         DeveloperToolsProxyStubdll;
    UINT_PTR         DeveloperToolsMgrdll;
    UINT_PTR         devenumdll;
    UINT_PTR         deviceaccessdll;
    UINT_PTR         deviceassociationdll;
    UINT_PTR         DeviceCenterdll;
    UINT_PTR         DeviceCompanionAppInstalldll;
    UINT_PTR         DeviceCredentialdll;
    UINT_PTR         DeviceDirectoryClientdll;
    UINT_PTR         DeviceDisplayStatusManagerdll;
    UINT_PTR         DeviceDriverRetrievalClientdll;
    UINT_PTR         DeviceElementSourcedll;
    UINT_PTR         DeviceFlowsDataModeldll;
    UINT_PTR         DeviceMetadataRetrievalClientdll;
    UINT_PTR         devicengccredprovdll;
    UINT_PTR         DevicePairingdll;
    UINT_PTR         DevicePairingExperienceMEMdll;
    UINT_PTR         DevicePairingFolderdll;
    UINT_PTR         DevicePairingProxydll;
    UINT_PTR         DeviceReactivationdll;
    UINT_PTR         deviceregistrationdll;
    UINT_PTR         DeviceSetupManagerdll;
    UINT_PTR         DeviceSetupManagerAPIdll;
    UINT_PTR         DeviceSetupStatusProviderdll;
    UINT_PTR         DevicesFlowBrokerdll;
    UINT_PTR         DeviceSoftwareInstallationClientdll;
    UINT_PTR         DeviceUpdateAgentdll;
    UINT_PTR         DeviceUpdateCenterCspdll;
    UINT_PTR         DeviceUxResdll;
    UINT_PTR         devinvdll;
    UINT_PTR         devmgrdll;
    UINT_PTR         devobjdll;
    UINT_PTR         DevPropMgrdll;
    UINT_PTR         DevQueryBrokerdll;
    UINT_PTR         devrtldll;
    UINT_PTR         dfdtsdll;
    UINT_PTR         dfsclidll;
    UINT_PTR         dfshimdll;
    UINT_PTR         DfsShlExdll;
    UINT_PTR         dggpextdll;
    UINT_PTR         dhcpcmonitordll;
    UINT_PTR         dhcpcoredll;
    UINT_PTR         dhcpcore6dll;
    UINT_PTR         dhcpcsvcdll;
    UINT_PTR         dhcpcsvc6dll;
    UINT_PTR         dhcpsapidll;
    UINT_PTR         DHolographicDisplaydll;
    UINT_PTR         DiagCpldll;
    UINT_PTR         diagnosticdataquerydll;
    UINT_PTR         DiagnosticDataSettingsdll;
    UINT_PTR         DiagnosticInvokerdll;
    UINT_PTR         DiagnosticLogCSPdll;
    UINT_PTR         diagperfdll;
    UINT_PTR         DiagSvcdll;
    UINT_PTR         diagtrackdll;
    UINT_PTR         dialclientdll;
    UINT_PTR         DialogBlockerProcdll;
    UINT_PTR         DialogBlockingManagerdll;
    UINT_PTR         DialogBlockingServicedll;
    UINT_PTR         dialserverdll;
    UINT_PTR         DictationManagerdll;
    UINT_PTR         difxapidll;
    UINT_PTR         dimsjobdll;
    UINT_PTR         dimsroamdll;
    UINT_PTR         dinputdll;
    UINT_PTR         dinput8dll;
    UINT_PTR         Direct2DDesktopdll;
    UINT_PTR         directmanipulationdll;
    UINT_PTR         DirectMLDebugdll;
    UINT_PTR         directmldll;
    UINT_PTR         directxdatabasehelperdll;
    UINT_PTR         discandll;
    UINT_PTR         DismApidll;
    UINT_PTR         DispBrokerDesktopdll;
    UINT_PTR         DispBrokerdll;
    UINT_PTR         dispexdll;
    UINT_PTR         Displaydll;
    UINT_PTR         DisplayManagerdll;
    UINT_PTR         dlnashextdll;
    UINT_PTR         DMAlertListenerProxyStubdll;
    UINT_PTR         DmApiSetExtImplDesktopdll;
    UINT_PTR         DMAppsResdll;
    UINT_PTR         dmcfgutilsdll;
    UINT_PTR         dmcmnutilsdll;
    UINT_PTR         dmcommandlineutilsdll;
    UINT_PTR         dmcspsdll;
    UINT_PTR         dmdlgsdll;
    UINT_PTR         dmdskmgrdll;
    UINT_PTR         dmdskresdll;
    UINT_PTR         dmdskres2dll;
    UINT_PTR         dmenrollenginedll;
    UINT_PTR         dmenterprisediagnosticsdll;
    UINT_PTR         dmintfdll;
    UINT_PTR         dmiso8601utilsdll;
    UINT_PTR         dmloaderdll;
    UINT_PTR         dmocxdll;
    UINT_PTR         dmoleaututilsdll;
    UINT_PTR         dmprocessxmlfiltereddll;
    UINT_PTR         dmpushproxydll;
    UINT_PTR         DMPushRouterCoredll;
    UINT_PTR         DMRCDecoderdll;
    UINT_PTR         DMRServerdll;
    UINT_PTR         dmsynthdll;
    UINT_PTR         dmusicdll;
    UINT_PTR         dmutildll;
    UINT_PTR         dmvdsitfdll;
    UINT_PTR         dmwappushsvcdll;
    UINT_PTR         dmwmicspdll;
    UINT_PTR         dmxmlhelputilsdll;
    UINT_PTR         dnsapidll;
    UINT_PTR         dnscmmcdll;
    UINT_PTR         dnsextdll;
    UINT_PTR         dnshcdll;
    UINT_PTR         dnsrslvrdll;
    UINT_PTR         DockingVirtualInputdll;
    UINT_PTR         DockInterfaceProxyStubdll;
    UINT_PTR         doclientdll;
    UINT_PTR         docpropdll;
    UINT_PTR         DocumentPerformanceEventsdll;
    UINT_PTR         DolbyDecMFTdll;
    UINT_PTR         domgmtdll;
    UINT_PTR         domiprovdll;
    UINT_PTR         dosettingsdll;
    UINT_PTR         dosvcdll;
    UINT_PTR         dot3apidll;
    UINT_PTR         dot3cfgdll;
    UINT_PTR         Dot3Conndll;
    UINT_PTR         dot3dlgdll;
    UINT_PTR         dot3gpclntdll;
    UINT_PTR         dot3gpuidll;
    UINT_PTR         dot3hcdll;
    UINT_PTR         dot3mmdll;
    UINT_PTR         dot3msmdll;
    UINT_PTR         dot3svcdll;
    UINT_PTR         dot3uidll;
    UINT_PTR         dpapidll;
    UINT_PTR         dpapiproviderdll;
    UINT_PTR         dpapisrvdll;
    UINT_PTR         dplcspdll;
    UINT_PTR         dpnaddrdll;
    UINT_PTR         dpnathlpdll;
    UINT_PTR         dpnetdll;
    UINT_PTR         dpnhpastdll;
    UINT_PTR         dpnhupnpdll;
    UINT_PTR         dpnlobbydll;
    UINT_PTR         dpsdll;
    UINT_PTR         dpxdll;
    UINT_PTR         DragDropExperienceCommondll;
    UINT_PTR         DragDropExperienceDataExchangeDelegateddll;
    UINT_PTR         drprovdll;
    UINT_PTR         drtdll;
    UINT_PTR         drtprovdll;
    UINT_PTR         drttransportdll;
    UINT_PTR         drvsetupdll;
    UINT_PTR         drvstoredll;
    UINT_PTR         dsauthdll;
    UINT_PTR         DscCoredll;
    UINT_PTR         DscCoreConfProvdll;
    UINT_PTR         dsclientdll;
    UINT_PTR         dscproxydll;
    UINT_PTR         DscTimerdll;
    UINT_PTR         dsdmodll;
    UINT_PTR         dskquotadll;
    UINT_PTR         dskquouidll;
    UINT_PTR         dsounddll;
    UINT_PTR         dsparsedll;
    UINT_PTR         dspropdll;
    UINT_PTR         dsquerydll;
    UINT_PTR         dsregdll;
    UINT_PTR         dsregtaskdll;
    UINT_PTR         dsroledll;
    UINT_PTR         dssecdll;
    UINT_PTR         dssenhdll;
    UINT_PTR         dssvcdll;
    UINT_PTR         Dsuidll;
    UINT_PTR         dsuiextdll;
    UINT_PTR         dswavedll;
    UINT_PTR         dtshdll;
    UINT_PTR         DuCspsdll;
    UINT_PTR         dui70dll;
    UINT_PTR         duserdll;
    UINT_PTR         dusmapidll;
    UINT_PTR         dusmsvcdll;
    UINT_PTR         dwmapidll;
    UINT_PTR         dwmcoredll;
    UINT_PTR         dwmghostdll;
    UINT_PTR         dwminitdll;
    UINT_PTR         dwmredirdll;
    UINT_PTR         dwmscenedll;
    UINT_PTR         DWritedll;
    UINT_PTR         DXCaptureReplaydll;
    UINT_PTR         DXCoredll;
    UINT_PTR         dxdiagndll;
    UINT_PTR         dxgidll;
    UINT_PTR         DXGIDebugdll;
    UINT_PTR         dxgwdidll;
    UINT_PTR         dxilconvdll;
    UINT_PTR         DXPdll;
    UINT_PTR         dxppsdll;
    UINT_PTR         DxpTaskSyncdll;
    UINT_PTR         dxtmsftdll;
    UINT_PTR         DXToolsMonitordll;
    UINT_PTR         DXToolsOfflineAnalysisdll;
    UINT_PTR         DxToolsReportGeneratordll;
    UINT_PTR         DXToolsReportingdll;
    UINT_PTR         dxtransdll;
    UINT_PTR         dxva2dll;
    UINT_PTR         dynamoapidll;
    UINT_PTR         EAMProgressHandlerdll;
    UINT_PTR         eapp3hstdll;
    UINT_PTR         eappcfgdll;
    UINT_PTR         eappcfguidll;
    UINT_PTR         eappgnuidll;
    UINT_PTR         eapphostdll;
    UINT_PTR         eappprxydll;
    UINT_PTR         eapprovpdll;
    UINT_PTR         eapputildll;
    UINT_PTR         eapsimextdesktopdll;
    UINT_PTR         eapsvcdll;
    UINT_PTR         EapTeapAuthdll;
    UINT_PTR         EapTeapConfigdll;
    UINT_PTR         EapTeapExtdll;
    UINT_PTR         easconsentdll;
    UINT_PTR         easinvokerproxystubdll;
    UINT_PTR         EasPolicyManagerBrokerPSdll;
    UINT_PTR         easwrtdll;
    UINT_PTR         edgeangledll;
    UINT_PTR         EdgeContentdll;
    UINT_PTR         edgehtmldll;
    UINT_PTR         edgeIsodll;
    UINT_PTR         EdgeManagerdll;
    UINT_PTR         EdgeResetPlugindll;
    UINT_PTR         EditBufferTestHookdll;
    UINT_PTR         EditionUpgradeHelperdll;
    UINT_PTR         EditionUpgradeManagerObjdll;
    UINT_PTR         edpauditapidll;
    UINT_PTR         edpcspdll;
    UINT_PTR         edptaskdll;
    UINT_PTR         edputildll;
    UINT_PTR         eeprovdll;
    UINT_PTR         eeutildll;
    UINT_PTR         efsadudll;
    UINT_PTR         efscoredll;
    UINT_PTR         efsextdll;
    UINT_PTR         efslsaextdll;
    UINT_PTR         efssvcdll;
    UINT_PTR         efsutildll;
    UINT_PTR         efswrtdll;
    UINT_PTR         EhStorAPIdll;
    UINT_PTR         EhStorPwdMgrdll;
    UINT_PTR         EhStorShelldll;
    UINT_PTR         elsdll;
    UINT_PTR         ELSCoredll;
    UINT_PTR         elshyphdll;
    UINT_PTR         elsladdll;
    UINT_PTR         elsTransdll;
    UINT_PTR         EmailApisdll;
    UINT_PTR         embeddedmodesvcdll;
    UINT_PTR         embeddedmodesvcapidll;
    UINT_PTR         EmojiDSdll;
    UINT_PTR         encapidll;
    UINT_PTR         energydll;
    UINT_PTR         energyprovdll;
    UINT_PTR         energytaskdll;
    UINT_PTR         enrollmentapidll;
    UINT_PTR         EnterpriseAPNCspdll;
    UINT_PTR         EnterpriseAppMgmtClientdll;
    UINT_PTR         EnterpriseAppMgmtSvcdll;
    UINT_PTR         EnterpriseAppVMgmtCSPdll;
    UINT_PTR         enterprisecspsdll;
    UINT_PTR         EnterpriseDesktopAppMgmtCSPdll;
    UINT_PTR         enterpriseetwdll;
    UINT_PTR         EnterpriseModernAppMgmtCSPdll;
    UINT_PTR         enterpriseresourcemanagerdll;
    UINT_PTR         eqossnapdll;
    UINT_PTR         ErrorDetailsdll;
    UINT_PTR         ErrorDetailsCoredll;
    UINT_PTR         esdll;
    UINT_PTR         EsclProtocoldll;
    UINT_PTR         EsclScandll;
    UINT_PTR         EsclWiaDriverdll;
    UINT_PTR         EsdSipdll;
    UINT_PTR         esentdll;
    UINT_PTR         esentprfdll;
    UINT_PTR         esevssdll;
    UINT_PTR         eShimsdll;
    UINT_PTR         EthernetMediaManagerdll;
    UINT_PTR         ETWCoreUIComponentsResourcesdll;
    UINT_PTR         ETWESEProviderResourcesdll;
    UINT_PTR         EtwRundowndll;
    UINT_PTR         eUICCsCSPdll;
    UINT_PTR         EventAggregationdll;
    UINT_PTR         eventclsdll;
    UINT_PTR         evrdll;
    UINT_PTR         ExecModelClientdll;
    UINT_PTR         execmodelproxydll;
    UINT_PTR         ExplorerFramedll;
    UINT_PTR         ExSMimedll;
    UINT_PTR         ExtrasXmlParserdll;
    UINT_PTR         f1db7d81_95be_4911_935a_8ab71629112a_HyperV_IsolatedVMdll;
    UINT_PTR         f3ahvoasdll;
    UINT_PTR         f989b52d_f928_44a3_9bf1_bf0c1da6a0d6_HyperV_DeviceVirtualizationdll;
    UINT_PTR         facecredentialproviderdll;
    UINT_PTR         Facilitatordll;
    UINT_PTR         FamilyAuthenticationdll;
    UINT_PTR         FamilyCachedll;
    UINT_PTR         FamilyClientdll;
    UINT_PTR         FamilySyncEnginedll;
    UINT_PTR         FamilySafetyExtdll;
    UINT_PTR         Faultrepdll;
    UINT_PTR         FaxPrinterInstallerdll;
    UINT_PTR         fcondll;
    UINT_PTR         fdBthdll;
    UINT_PTR         fdBthProxydll;
    UINT_PTR         FdDevQuerydll;
    UINT_PTR         fdedll;
    UINT_PTR         fdeploydll;
    UINT_PTR         fdPHostdll;
    UINT_PTR         fdPnpdll;
    UINT_PTR         fdprintdll;
    UINT_PTR         fdProxydll;
    UINT_PTR         FDResPubdll;
    UINT_PTR         fdSSDPdll;
    UINT_PTR         fdWCNdll;
    UINT_PTR         fdWNetdll;
    UINT_PTR         fdWSDdll;
    UINT_PTR         feclientdll;
    UINT_PTR         ffbrokerdll;
    UINT_PTR         fhcatdll;
    UINT_PTR         fhcfgdll;
    UINT_PTR         fhcleanupdll;
    UINT_PTR         fhcpldll;
    UINT_PTR         fhenginedll;
    UINT_PTR         fheventsdll;
    UINT_PTR         fhsettingsproviderdll;
    UINT_PTR         fhshldll;
    UINT_PTR         fhsrchapidll;
    UINT_PTR         fhsrchphdll;
    UINT_PTR         fhsvcdll;
    UINT_PTR         fhsvcctldll;
    UINT_PTR         fhtaskdll;
    UINT_PTR         fhuxadapterdll;
    UINT_PTR         fhuxapidll;
    UINT_PTR         fhuxcommondll;
    UINT_PTR         fhuxgraphicsdll;
    UINT_PTR         fhuxpresentationdll;
    UINT_PTR         fidocredprovdll;
    UINT_PTR         FileAppxStreamingDataSourcedll;
    UINT_PTR         filemgmtdll;
    UINT_PTR         FilterDSdll;
    UINT_PTR         findnetprintersdll;
    UINT_PTR         fingerprintcredentialdll;
    UINT_PTR         FirewallAPIdll;
    UINT_PTR         FirewallControlPaneldll;
    UINT_PTR         FirewallUXdll;
    UINT_PTR         FirmwareAttestationServerProxyStubdll;
    UINT_PTR         FlightSettingsdll;
    UINT_PTR         fltLibdll;
    UINT_PTR         FluencyDSdll;
    UINT_PTR         fmapidll;
    UINT_PTR         fmifsdll;
    UINT_PTR         fmsdll;
    UINT_PTR         FntCachedll;
    UINT_PTR         fontextdll;
    UINT_PTR         FontGlyphAnimatordll;
    UINT_PTR         fontgroupsoverridedll;
    UINT_PTR         FontProviderdll;
    UINT_PTR         fontsubdll;
    UINT_PTR         fphcdll;
    UINT_PTR         framedyndll;
    UINT_PTR         framedynosdll;
    UINT_PTR         FrameServerdll;
    UINT_PTR         FrameServerClientdll;
    UINT_PTR         FrameServerMonitordll;
    UINT_PTR         FrameServerMonitorClientdll;
    UINT_PTR         frprovdll;
    UINT_PTR         FsNVSDeviceSourcedll;
    UINT_PTR         fsutilextdll;
    UINT_PTR         fthsvcdll;
    UINT_PTR         fundiscdll;
    UINT_PTR         fveapidll;
    UINT_PTR         fveapibasedll;
    UINT_PTR         fvecertsdll;
    UINT_PTR         fvecpldll;
    UINT_PTR         fveskybackupdll;
    UINT_PTR         fveuidll;
    UINT_PTR         fvewizdll;
    UINT_PTR         FvSDK_x64dll;
    UINT_PTR         fwbasedll;
    UINT_PTR         fwcfgdll;
    UINT_PTR         fwmdmcspdll;
    UINT_PTR         fwpolicyiomgrdll;
    UINT_PTR         FwRemoteSvrdll;
    UINT_PTR         GameBarPresenceWriterproxydll;
    UINT_PTR         GameChatOverlayExtdll;
    UINT_PTR         GameChatTranscriptiondll;
    UINT_PTR         GameInputdll;
    UINT_PTR         GameInputInboxdll;
    UINT_PTR         gamemodedll;
    UINT_PTR         GamePanelExternalHookdll;
    UINT_PTR         gamestreamingextdll;
    UINT_PTR         gameuxdll;
    UINT_PTR         gamingtcuidll;
    UINT_PTR         gcdefdll;
    UINT_PTR         gdi32dll;
    UINT_PTR         gdi32fulldll;
    UINT_PTR         GdiPlusdll;
    UINT_PTR         generalteldll;
    UINT_PTR         Geocommondll;
    UINT_PTR         Geolocationdll;
    UINT_PTR         getunamedll;
    UINT_PTR         glmf32dll;
    UINT_PTR         globinputhostdll;
    UINT_PTR         glu32dll;
    UINT_PTR         gmsaclientdll;
    UINT_PTR         gpapidll;
    UINT_PTR         GPCSEWrapperCspdll;
    UINT_PTR         gpeditdll;
    UINT_PTR         gpprefcldll;
    UINT_PTR         gpprnextdll;
    UINT_PTR         gpscriptdll;
    UINT_PTR         gpsvcdll;
    UINT_PTR         gptextdll;
    UINT_PTR         gpupvdevdll;
    UINT_PTR         GraphicsCapturedll;
    UINT_PTR         GraphicsPerfSvcdll;
    UINT_PTR         Groupinghcdll;
    UINT_PTR         haldll;
    UINT_PTR         HalExtIntcLpioDMAdll;
    UINT_PTR         HalExtIntcPseDMAdll;
    UINT_PTR         HalExtPL080dll;
    UINT_PTR         HanjaDSdll;
    UINT_PTR         hascspdll;
    UINT_PTR         HashtagDSdll;
    UINT_PTR         hbaapidll;
    UINT_PTR         hcprovidersdll;
    UINT_PTR         HdcpHandlerdll;
    UINT_PTR         HeatCoredll;
    UINT_PTR         HelpPaneProxydll;
    UINT_PTR         hgattestdll;
    UINT_PTR         hgclientservicedll;
    UINT_PTR         hgclientservicepsdll;
    UINT_PTR         hgcpldll;
    UINT_PTR         hgsclientplugindll;
    UINT_PTR         HgsClientWmidll;
    UINT_PTR         hhsetupdll;
    UINT_PTR         hiddll;
    UINT_PTR         HidCfudll;
    UINT_PTR         hidservdll;
    UINT_PTR         hlinkdll;
    UINT_PTR         hmkddll;
    UINT_PTR         hnetcfgdll;
    UINT_PTR         HNetCfgClientdll;
    UINT_PTR         hnetmondll;
    UINT_PTR         hnsproxydll;
    UINT_PTR         HologramCompositordll;
    UINT_PTR         HologramWorlddll;
    UINT_PTR         HolographicExtensionsdll;
    UINT_PTR         HolographicRuntimesdll;
    UINT_PTR         HoloShellRuntimedll;
    UINT_PTR         HoloSHExtensionsdll;
    UINT_PTR         HoloSIPCShelldll;
    UINT_PTR         HostGuardianServiceClientResourcesdll;
    UINT_PTR         HostNetSvcdll;
    UINT_PTR         hotplugdll;
    UINT_PTR         HrtfApodll;
    UINT_PTR         HrtfDspCpudll;
    UINT_PTR         hspapidll;
    UINT_PTR         hspfwdll;
    UINT_PTR         httpapidll;
    UINT_PTR         httpprxcdll;
    UINT_PTR         httpprxmdll;
    UINT_PTR         httpprxpdll;
    UINT_PTR         HttpsDataSourcedll;
    UINT_PTR         htuidll;
    UINT_PTR         hvhostsvcdll;
    UINT_PTR         hvloaderdll;
    UINT_PTR         hvsigpextdll;
    UINT_PTR         HvsiManagementApidll;
    UINT_PTR         HvSocketdll;
    UINT_PTR         hwreqchkdll;
    UINT_PTR         Hydrogendll;
    UINT_PTR         HyperVSysprepProviderdll;
    UINT_PTR         IA2ComProxydll;
    UINT_PTR         iasdll;
    UINT_PTR         iasacctdll;
    UINT_PTR         iasadsdll;
    UINT_PTR         iasdatastoredll;
    UINT_PTR         iashlprdll;
    UINT_PTR         IasMigPlugindll;
    UINT_PTR         iasnapdll;
    UINT_PTR         iaspolcydll;
    UINT_PTR         iasraddll;
    UINT_PTR         iasrecstdll;
    UINT_PTR         iassamdll;
    UINT_PTR         iassdodll;
    UINT_PTR         iassvcsdll;
    UINT_PTR         icfupgddll;
    UINT_PTR         icm32dll;
    UINT_PTR         icmpdll;
    UINT_PTR         icmuidll;
    UINT_PTR         IconCodecServicedll;
    UINT_PTR         icsigddll;
    UINT_PTR         icsvcdll;
    UINT_PTR         icsvcextdll;
    UINT_PTR         icsvcvssdll;
    UINT_PTR         icudll;
    UINT_PTR         icuindll;
    UINT_PTR         icuucdll;
    UINT_PTR         IdCtrlsdll;
    UINT_PTR         IDStoredll;
    UINT_PTR         IEAdvpackdll;
    UINT_PTR         ieapfltrdll;
    UINT_PTR         iedkcs32dll;
    UINT_PTR         ieframedll;
    UINT_PTR         iemigplugindll;
    UINT_PTR         iepeersdll;
    UINT_PTR         ieproxydll;
    UINT_PTR         IEProxyDesktopdll;
    UINT_PTR         iernoncedll;
    UINT_PTR         iertutildll;
    UINT_PTR         iesetupdll;
    UINT_PTR         iesysprepdll;
    UINT_PTR         ieuidll;
    UINT_PTR         ifmondll;
    UINT_PTR         ifsutildll;
    UINT_PTR         ifsutilxdll;
    UINT_PTR         igdDiagdll;
    UINT_PTR         IHDSdll;
    UINT_PTR         iisrstapdll;
    UINT_PTR         iisRtldll;
    UINT_PTR         imagehlpdll;
    UINT_PTR         imageresdll;
    UINT_PTR         imagesp1dll;
    UINT_PTR         imapidll;
    UINT_PTR         imapi2dll;
    UINT_PTR         imapi2fsdll;
    UINT_PTR         ime_textinputhelpersdll;
    UINT_PTR         imgutildll;
    UINT_PTR         imm32dll;
    UINT_PTR         ImplatSetupdll;
    UINT_PTR         IndexedDbLegacydll;
    UINT_PTR         inetcommdll;
    UINT_PTR         inetmib1dll;
    UINT_PTR         INETRESdll;
    UINT_PTR         InkEddll;
    UINT_PTR         InkObjCoredll;
    UINT_PTR         InprocLoggerdll;
    UINT_PTR         inputdll;
    UINT_PTR         InputCloudStoredll;
    UINT_PTR         InputControllerdll;
    UINT_PTR         InputHostdll;
    UINT_PTR         InputInjectionBrokerdll;
    UINT_PTR         InputLocaleManagerdll;
    UINT_PTR         InputServicedll;
    UINT_PTR         InputSwitchdll;
    UINT_PTR         InputViewExperiencedll;
    UINT_PTR         insengdll;
    UINT_PTR         InstallServicedll;
    UINT_PTR         InstallServiceTasksdll;
    UINT_PTR         IntelIHVRouter08dll;
    UINT_PTR         IntelligentPwdlessTaskdll;
    UINT_PTR         intel_gfx_api_x64dll;
    UINT_PTR         internetmaildll;
    UINT_PTR         InternetMailCspdll;
    UINT_PTR         invagentdll;
    UINT_PTR         InventorySvcdll;
    UINT_PTR         iologmsgdll;
    UINT_PTR         IoTAssignedAccessLockFrameworkdll;
    UINT_PTR         IPELoggingDictationHelperdll;
    UINT_PTR         iphlpsvcdll;
    UINT_PTR         ipnathlpdll;
    UINT_PTR         IpNatHlpClientdll;
    UINT_PTR         IppCommondll;
    UINT_PTR         IppCommonProxydll;
    UINT_PTR         iprtpriodll;
    UINT_PTR         iprtrmgrdll;
    UINT_PTR         ipsecsnpdll;
    UINT_PTR         ipsmsnapdll;
    UINT_PTR         ipxlatcfgdll;
    UINT_PTR         iridll;
    UINT_PTR         iscsicpldll;
    UINT_PTR         iscsidscdll;
    UINT_PTR         iscsieddll;
    UINT_PTR         iscsiexedll;
    UINT_PTR         iscsilogdll;
    UINT_PTR         iscsiumdll;
    UINT_PTR         iscsiwmidll;
    UINT_PTR         iscsiwmiv2dll;
    UINT_PTR         ISMdll;
    UINT_PTR         itircldll;
    UINT_PTR         itssdll;
    UINT_PTR         iuilpdll;
    UINT_PTR         iumbasedll;
    UINT_PTR         iumcryptdll;
    UINT_PTR         iumdlldll;
    UINT_PTR         IumSdkdll;
    UINT_PTR         iyuv_32dll;
    UINT_PTR         JavaScriptCollectionAgentdll;
    UINT_PTR         JHI64dll;
    UINT_PTR         joinprovideroldll;
    UINT_PTR         joinutildll;
    UINT_PTR         JpMapControldll;
    UINT_PTR         jpndecoderdll;
    UINT_PTR         jpninputrouterdll;
    UINT_PTR         jpnrankerdll;
    UINT_PTR         JpnServiceDSdll;
    UINT_PTR         jscriptdll;
    UINT_PTR         jscript9dll;
    UINT_PTR         jscript9diagdll;
    UINT_PTR         jscript9Legacydll;
    UINT_PTR         jsproxydll;
    UINT_PTR         kbd101dll;
    UINT_PTR         kbd101adll;
    UINT_PTR         kbd101bdll;
    UINT_PTR         kbd101cdll;
    UINT_PTR         kbd103dll;
    UINT_PTR         kbd106dll;
    UINT_PTR         kbd106ndll;
    UINT_PTR         kbdarmphdll;
    UINT_PTR         kbdarmtydll;
    UINT_PTR         kbdax2dll;
    UINT_PTR         kbdfardll;
    UINT_PTR         kbdgeoerdll;
    UINT_PTR         kbdgeomedll;
    UINT_PTR         kbdgeooadll;
    UINT_PTR         kbdgeoqwdll;
    UINT_PTR         kbdhebl3dll;
    UINT_PTR         kbdibm02dll;
    UINT_PTR         kbdlisubdll;
    UINT_PTR         kbdlisusdll;
    UINT_PTR         kbdlk41adll;
    UINT_PTR         kbdnecdll;
    UINT_PTR         kbdnec95dll;
    UINT_PTR         kbdnecatdll;
    UINT_PTR         kbdnecntdll;
    UINT_PTR         kbdnkodll;
    UINT_PTR         kbdphagsdll;
    UINT_PTR         kddll;
    UINT_PTR         kdcomdll;
    UINT_PTR         kdcpwdll;
    UINT_PTR         kdhvcomdll;
    UINT_PTR         kdnetdll;
    UINT_PTR         kdnet_uart16550dll;
    UINT_PTR         KdsClidll;
    UINT_PTR         kdstubdll;
    UINT_PTR         kdusbdll;
    UINT_PTR         kd_02_10dfdll;
    UINT_PTR         kd_02_10ecdll;
    UINT_PTR         kd_02_1137dll;
    UINT_PTR         kd_02_14e4dll;
    UINT_PTR         kd_02_15b3dll;
    UINT_PTR         kd_02_1969dll;
    UINT_PTR         kd_02_19a2dll;
    UINT_PTR         kd_02_1af4dll;
    UINT_PTR         kd_02_8086dll;
    UINT_PTR         kd_07_1415dll;
    UINT_PTR         kd_0C_8086dll;
    UINT_PTR         keepaliveproviderdll;
    UINT_PTR         KerbClientShareddll;
    UINT_PTR         kerberosdll;
    UINT_PTR         kernelappcoredll;
    UINT_PTR         KernelBasedll;
    UINT_PTR         KeyboardFilterCoredll;
    UINT_PTR         KeyboardFilterManagerdll;
    UINT_PTR         KeyboardFilterShimdll;
    UINT_PTR         KeyboardFilterSvcdll;
    UINT_PTR         KeyCredMgrdll;
    UINT_PTR         keyisodll;
    UINT_PTR         keymgrdll;
    UINT_PTR         KeywordDetectorMsftSidAdapterdll;
    UINT_PTR         KnobsCoredll;
    UINT_PTR         KnobsCspdll;
    UINT_PTR         ksuserdll;
    UINT_PTR         ktmw32dll;
    UINT_PTR         l2gpstoredll;
    UINT_PTR         l2nacpdll;
    UINT_PTR         L2SecHCdll;
    UINT_PTR         LangCleanupSysprepActiondll;
    UINT_PTR         LanguageComponentsInstallerdll;
    UINT_PTR         LanguageOverlayServerdll;
    UINT_PTR         LanguageOverlayUtildll;
    UINT_PTR         LanguagePackDiskCleanupdll;
    UINT_PTR         LanguagePackManagementCSPdll;
    UINT_PTR         lapsdll;
    UINT_PTR         lapscspdll;
    UINT_PTR         LegacyNetUXdll;
    UINT_PTR         LegacySystemSettingsdll;
    UINT_PTR         lfsvcdll;
    UINT_PTR         libcryptodll;
    UINT_PTR         libmfxhw64dll;
    UINT_PTR         libomp140x86_64dll;
    UINT_PTR         libomp140dx86_64dll;
    UINT_PTR         LicenseManagerdll;
    UINT_PTR         LicenseManagerApidll;
    UINT_PTR         LicenseManagerSvcdll;
    UINT_PTR         licenseprotectiondll;
    UINT_PTR         LicensingCSPdll;
    UINT_PTR         LicensingDiagSppdll;
    UINT_PTR         LicensingWinRTdll;
    UINT_PTR         licmgr10dll;
    UINT_PTR         linkinfodll;
    UINT_PTR         lltdapidll;
    UINT_PTR         lltdresdll;
    UINT_PTR         lltdsvcdll;
    UINT_PTR         lmhsvcdll;
    UINT_PTR         loadperfdll;
    UINT_PTR         localsecdll;
    UINT_PTR         localspldll;
    UINT_PTR         localuidll;
    UINT_PTR         LocationApidll;
    UINT_PTR         LocationFrameworkdll;
    UINT_PTR         LocationFrameworkInternalPSdll;
    UINT_PTR         LocationFrameworkPSdll;
    UINT_PTR         LocationWinPalMiscdll;
    UINT_PTR         LockAppBrokerdll;
    UINT_PTR         LockControllerdll;
    UINT_PTR         LockHostingFrameworkdll;
    UINT_PTR         LockScreenContentdll;
    UINT_PTR         LockScreenContentHostdll;
    UINT_PTR         LockScreenDatadll;
    UINT_PTR         loghoursdll;
    UINT_PTR         logonclidll;
    UINT_PTR         LogonControllerdll;
    UINT_PTR         lpasvcdll;
    UINT_PTR         lpkdll;
    UINT_PTR         lpksetupproxyservdll;
    UINT_PTR         lsaadtdll;
    UINT_PTR         lsasrvdll;
    UINT_PTR         LSCSHostPolicydll;
    UINT_PTR         lsmdll;
    UINT_PTR         lsmproxydll;
    UINT_PTR         lstelemetrydll;
    UINT_PTR         luiapidll;
    UINT_PTR         lxutildll;
    UINT_PTR         lz32dll;
    UINT_PTR         Magnificationdll;
    UINT_PTR         MaintenanceUIdll;
    UINT_PTR         ManageCIdll;
    UINT_PTR         MapConfigurationdll;
    UINT_PTR         MapControlCoredll;
    UINT_PTR         MapControlStringsResdll;
    UINT_PTR         MapGeocoderdll;
    UINT_PTR         mapi32dll;
    UINT_PTR         mapistubdll;
    UINT_PTR         MapRouterdll;
    UINT_PTR         MapsBtSvcdll;
    UINT_PTR         MapsBtSvcProxydll;
    UINT_PTR         MapsCSPdll;
    UINT_PTR         MapsStoredll;
    UINT_PTR         mapstoasttaskdll;
    UINT_PTR         mapsupdatetaskdll;
    UINT_PTR         MbaeApidll;
    UINT_PTR         MbaeApiPublicdll;
    UINT_PTR         MBMediaManagerdll;
    UINT_PTR         mbsmsapidll;
    UINT_PTR         mbussdapidll;
    UINT_PTR         MCCSEngineShareddll;
    UINT_PTR         MCCSPaldll;
    UINT_PTR         mciavi32dll;
    UINT_PTR         mcicdadll;
    UINT_PTR         mciqtz32dll;
    UINT_PTR         mciseqdll;
    UINT_PTR         mciwavedll;
    UINT_PTR         McpManagementProxydll;
    UINT_PTR         McpManagementServicedll;
    UINT_PTR         MCRecvSrcdll;
    UINT_PTR         mcupdate_AuthenticAMDdll;
    UINT_PTR         mcupdate_GenuineInteldll;
    UINT_PTR         MdmCommondll;
    UINT_PTR         MdmDiagnosticsdll;
    UINT_PTR         mdminstdll;
    UINT_PTR         mdmlocalmanagementdll;
    UINT_PTR         mdmmigratordll;
    UINT_PTR         mdmpostprocessevaluatordll;
    UINT_PTR         mdmregistrationdll;
    UINT_PTR         MediaFoundationDefaultPerceptionProviderdll;
    UINT_PTR         MediaFoundationAggregatordll;
    UINT_PTR         MemoryDiagnosticdll;
    UINT_PTR         MessagingDataModel2dll;
    UINT_PTR         MessagingServicedll;
    UINT_PTR         mfdll;
    UINT_PTR         mf3216dll;
    UINT_PTR         mfAACEncdll;
    UINT_PTR         mfasfsrcsnkdll;
    UINT_PTR         mfaudiocnvdll;
    UINT_PTR         mfc100dll;
    UINT_PTR         mfc100chsdll;
    UINT_PTR         mfc100chtdll;
    UINT_PTR         mfc100deudll;
    UINT_PTR         mfc100enudll;
    UINT_PTR         mfc100esndll;
    UINT_PTR         mfc100fradll;
    UINT_PTR         mfc100itadll;
    UINT_PTR         mfc100jpndll;
    UINT_PTR         mfc100kordll;
    UINT_PTR         mfc100rusdll;
    UINT_PTR         mfc100udll;
    UINT_PTR         mfc110dll;
    UINT_PTR         mfc110chsdll;
    UINT_PTR         mfc110chtdll;
    UINT_PTR         mfc110deudll;
    UINT_PTR         mfc110enudll;
    UINT_PTR         mfc110esndll;
    UINT_PTR         mfc110fradll;
    UINT_PTR         mfc110itadll;
    UINT_PTR         mfc110jpndll;
    UINT_PTR         mfc110kordll;
    UINT_PTR         mfc110rusdll;
    UINT_PTR         mfc110udll;
    UINT_PTR         mfc120dll;
    UINT_PTR         mfc120chsdll;
    UINT_PTR         mfc120chtdll;
    UINT_PTR         mfc120deudll;
    UINT_PTR         mfc120enudll;
    UINT_PTR         mfc120esndll;
    UINT_PTR         mfc120fradll;
    UINT_PTR         mfc120itadll;
    UINT_PTR         mfc120jpndll;
    UINT_PTR         mfc120kordll;
    UINT_PTR         mfc120rusdll;
    UINT_PTR         mfc120udll;
    UINT_PTR         mfc140dll;
    UINT_PTR         mfc140chsdll;
    UINT_PTR         mfc140chtdll;
    UINT_PTR         mfc140ddll;
    UINT_PTR         mfc140deudll;
    UINT_PTR         mfc140enudll;
    UINT_PTR         mfc140esndll;
    UINT_PTR         mfc140fradll;
    UINT_PTR         mfc140itadll;
    UINT_PTR         mfc140jpndll;
    UINT_PTR         mfc140kordll;
    UINT_PTR         mfc140rusdll;
    UINT_PTR         mfc140udll;
    UINT_PTR         mfc140uddll;
    UINT_PTR         mfc42dll;
    UINT_PTR         mfc42udll;
    UINT_PTR         MFCaptureEnginedll;
    UINT_PTR         mfcm100dll;
    UINT_PTR         mfcm100udll;
    UINT_PTR         mfcm110dll;
    UINT_PTR         mfcm110udll;
    UINT_PTR         mfcm120dll;
    UINT_PTR         mfcm120udll;
    UINT_PTR         mfcm140dll;
    UINT_PTR         mfcm140ddll;
    UINT_PTR         mfcm140udll;
    UINT_PTR         mfcm140uddll;
    UINT_PTR         mfcoredll;
    UINT_PTR         mfcsubsdll;
    UINT_PTR         mfdsdll;
    UINT_PTR         mfdvdecdll;
    UINT_PTR         mferrordll;
    UINT_PTR         mfh263encdll;
    UINT_PTR         mfh264encdll;
    UINT_PTR         mfksproxydll;
    UINT_PTR         MFMediaEnginedll;
    UINT_PTR         mfmjpegdecdll;
    UINT_PTR         mfmkvsrcsnkdll;
    UINT_PTR         mfmp4srcsnkdll;
    UINT_PTR         mfmpeg2srcsnkdll;
    UINT_PTR         mfnetcoredll;
    UINT_PTR         mfnetsrcdll;
    UINT_PTR         mfperfhelperdll;
    UINT_PTR         mfplatdll;
    UINT_PTR         MFPlaydll;
    UINT_PTR         mfpsdll;
    UINT_PTR         mfreadwritedll;
    UINT_PTR         mfsensorgroupdll;
    UINT_PTR         mfsrcsnkdll;
    UINT_PTR         mfsvrdll;
    UINT_PTR         mftranscodedll;
    UINT_PTR         mfvdspdll;
    UINT_PTR         mfvfwdll;
    UINT_PTR         mfxplugin64_hwdll;
    UINT_PTR         mfx_mft_encrypt_64dll;
    UINT_PTR         mfx_mft_h264ve_64dll;
    UINT_PTR         mfx_mft_h265ve_64dll;
    UINT_PTR         mfx_mft_mjpgvd_64dll;
    UINT_PTR         mfx_mft_vp9ve_64dll;
    UINT_PTR         mgmtapidll;
    UINT_PTR         mgmtrefreshcredprovdll;
    UINT_PTR         midll;
    UINT_PTR         mibincodecdll;
    UINT_PTR         Microsoft_Windows_AppModelExecEventsdll;
    UINT_PTR         microsoft_windows_battery_eventsdll;
    UINT_PTR         microsoft_windows_hal_eventsdll;
    UINT_PTR         Microsoft_Windows_Internal_Shell_NearShareExperiencedll;
    UINT_PTR         microsoft_windows_kernel_cc_eventsdll;
    UINT_PTR         microsoft_windows_kernel_pnp_eventsdll;
    UINT_PTR         microsoft_windows_kernel_power_eventsdll;
    UINT_PTR         microsoft_windows_kernel_processor_power_eventsdll;
    UINT_PTR         Microsoft_Windows_MapControlsdll;
    UINT_PTR         Microsoft_Windows_MosHostdll;
    UINT_PTR         microsoft_windows_pdcdll;
    UINT_PTR         microsoft_windows_power_cad_eventsdll;
    UINT_PTR         microsoft_windows_processor_aggregator_eventsdll;
    UINT_PTR         microsoft_windows_sleepstudy_eventsdll;
    UINT_PTR         microsoft_windows_storage_tiering_eventsdll;
    UINT_PTR         microsoft_windows_system_eventsdll;
    UINT_PTR         Microsoft_WindowsPhone_SEManagementProviderdll;
    UINT_PTR         MicrosoftBluetoothAudiodll;
    UINT_PTR         MicrosoftBluetoothProxydll;
    UINT_PTR         MicrosoftBluetoothServicedll;
    UINT_PTR         MicrosoftBluetoothUserServicedll;
    UINT_PTR         MicrosoftGraphicsDisplayDisplayEnhancementServicedll;
    UINT_PTR         MicrosoftInternalFrameworkUdkSystemdll;
    UINT_PTR         MicrosoftLocalUserImageProviderdll;
    UINT_PTR         MicrosoftManagementInfrastructureNativeUnmanageddll;
    UINT_PTR         MicrosoftUevAgentDriverEventsdll;
    UINT_PTR         MicrosoftUevAppAgentdll;
    UINT_PTR         MicrosoftUevCabUtildll;
    UINT_PTR         MicrosoftUevCmUtildll;
    UINT_PTR         MicrosoftUevCommondll;
    UINT_PTR         MicrosoftUevCommonWinRTdll;
    UINT_PTR         MicrosoftUevCommonBridgedll;
    UINT_PTR         MicrosoftUevConfigWrapperdll;
    UINT_PTR         MicrosoftUevEventLogMessagesdll;
    UINT_PTR         MicrosoftUevLocalSyncProviderdll;
    UINT_PTR         MicrosoftUevManagedEventLoggingdll;
    UINT_PTR         MicrosoftUevManagementdll;
    UINT_PTR         MicrosoftUevManagementWmiAccessdll;
    UINT_PTR         MicrosoftUevModernAppAgentdll;
    UINT_PTR         MicrosoftUevModernAppCoredll;
    UINT_PTR         MicrosoftUevModernAppDataWinRTdll;
    UINT_PTR         MicrosoftUevModernSyncdll;
    UINT_PTR         MicrosoftUevMonitorSyncProviderdll;
    UINT_PTR         MicrosoftUevOffice2010CustomActionsdll;
    UINT_PTR         MicrosoftUevOffice2013CustomActionsdll;
    UINT_PTR         MicrosoftUevPrinterCustomActionsdll;
    UINT_PTR         MicrosoftUevSmbSyncProviderdll;
    UINT_PTR         MicrosoftUevSyncCommondll;
    UINT_PTR         MicrosoftUevSyncConditionsdll;
    UINT_PTR         MicrosoftWindowsStorageCoredll;
    UINT_PTR         MicrosoftWindowsStorageStorageBusCachedll;
    UINT_PTR         MicrosoftAccountTokenProviderCoredll;
    UINT_PTR         MicrosoftAccountCloudAPdll;
    UINT_PTR         MicrosoftAccountExtensiondll;
    UINT_PTR         MicrosoftAccountTokenProviderdll;
    UINT_PTR         MicrosoftAccountWAMExtensiondll;
    UINT_PTR         midimapdll;
    UINT_PTR         migisoldll;
    UINT_PTR         miguiresourcedll;
    UINT_PTR         mimefiltdll;
    UINT_PTR         mimofcodecdll;
    UINT_PTR         MinstoreEventsdll;
    UINT_PTR         MiracastInputMgrdll;
    UINT_PTR         MiracastReceiverdll;
    UINT_PTR         MiracastReceiverExtdll;
    UINT_PTR         MirrorDrvCompatdll;
    UINT_PTR         mispacedll;
    UINT_PTR         MitigationClientdll;
    UINT_PTR         MitigationConfigurationdll;
    UINT_PTR         miutilsdll;
    UINT_PTR         MixedRealityBrokerdll;
    UINT_PTR         MixedRealityCapturePipelinedll;
    UINT_PTR         MixedRealityCaptureProxyStubdll;
    UINT_PTR         MixedRealityRuntimedll;
    UINT_PTR         mlangdll;
    UINT_PTR         mmcbasedll;
    UINT_PTR         mmcndmgrdll;
    UINT_PTR         mmcshextdll;
    UINT_PTR         MMDevAPIdll;
    UINT_PTR         mmgaclientdll;
    UINT_PTR         mmgaproxystubdll;
    UINT_PTR         mmresdll;
    UINT_PTR         mobilenetworkingdll;
    UINT_PTR         modemuidll;
    UINT_PTR         modernexecserverdll;
    UINT_PTR         moriconsdll;
    UINT_PTR         moshostdll;
    UINT_PTR         MosHostClientdll;
    UINT_PTR         moshostcoredll;
    UINT_PTR         MosStoragedll;
    UINT_PTR         mpevaldll;
    UINT_PTR         mprdll;
    UINT_PTR         mprapidll;
    UINT_PTR         mprddmdll;
    UINT_PTR         mprdimdll;
    UINT_PTR         mprextdll;
    UINT_PTR         mprmsgdll;
    UINT_PTR         MPSSVCdll;
    UINT_PTR         mpunitsdll;
    UINT_PTR         MrmCoreRdll;
    UINT_PTR         MrmDeploydll;
    UINT_PTR         MrmIndexerdll;
    UINT_PTR         mrt100dll;
    UINT_PTR         mrt_mapdll;
    UINT_PTR         ms3dthumbnailproviderdll;
    UINT_PTR         msaatextdll;
    UINT_PTR         msacm32dll;
    UINT_PTR         msafddll;
    UINT_PTR         MSAJApidll;
    UINT_PTR         MSAlacDecoderdll;
    UINT_PTR         MSAlacEncoderdll;
    UINT_PTR         MSAMRNBDecoderdll;
    UINT_PTR         MSAMRNBEncoderdll;
    UINT_PTR         MSAMRNBSinkdll;
    UINT_PTR         MSAMRNBSourcedll;
    UINT_PTR         MsApoFxProxydll;
    UINT_PTR         MSAProfileNotificationHandlerdll;
    UINT_PTR         msasn1dll;
    UINT_PTR         MSAudDecMFTdll;
    UINT_PTR         msauditedll;
    UINT_PTR         msauserextdll;
    UINT_PTR         mscanduidll;
    UINT_PTR         mscat32dll;
    UINT_PTR         msclmddll;
    UINT_PTR         mscmsdll;
    UINT_PTR         mscoreedll;
    UINT_PTR         mscorierdll;
    UINT_PTR         mscoriesdll;
    UINT_PTR         msctfdll;
    UINT_PTR         MsCtfMonitordll;
    UINT_PTR         msctfpdll;
    UINT_PTR         msctfuidll;
    UINT_PTR         msctfuimanagerdll;
    UINT_PTR         msdadiagdll;
    UINT_PTR         msdartdll;
    UINT_PTR         msdeltadll;
    UINT_PTR         msdmodll;
    UINT_PTR         msdrmdll;
    UINT_PTR         msdtckrmdll;
    UINT_PTR         msdtclogdll;
    UINT_PTR         msdtcprxdll;
    UINT_PTR         msdtcspofflndll;
    UINT_PTR         msdtctmdll;
    UINT_PTR         msdtcuiudll;
    UINT_PTR         msdtcVSp1resdll;
    UINT_PTR         msfeedsdll;
    UINT_PTR         msfeedsbsdll;
    UINT_PTR         MSFlacDecoderdll;
    UINT_PTR         MSFlacEncoderdll;
    UINT_PTR         msfteditdll;
    UINT_PTR         MsftOemDllIgneousdll;
    UINT_PTR         MSHEIFdll;
    UINT_PTR         mshtmldll;
    UINT_PTR         MshtmlDacdll;
    UINT_PTR         mshtmleddll;
    UINT_PTR         mshtmlerdll;
    UINT_PTR         msidll;
    UINT_PTR         MsiCofiredll;
    UINT_PTR         msidcrl40dll;
    UINT_PTR         msidentdll;
    UINT_PTR         msidledll;
    UINT_PTR         msidntlddll;
    UINT_PTR         msieftpdll;
    UINT_PTR         msihnddll;
    UINT_PTR         msiltcfgdll;
    UINT_PTR         msimg32dll;
    UINT_PTR         msimsgdll;
    UINT_PTR         msimtfdll;
    UINT_PTR         msisipdll;
    UINT_PTR         msIsodll;
    UINT_PTR         msiwerdll;
    UINT_PTR         MsixDataSourceExtensionPSdll;
    UINT_PTR         mskeyprotclidll;
    UINT_PTR         mskeyprotectdll;
    UINT_PTR         msls31dll;
    UINT_PTR         msmpeg2adecdll;
    UINT_PTR         msmpeg2vdecdll;
    UINT_PTR         msobjsdll;
    UINT_PTR         msoert2dll;
    UINT_PTR         MSOpusDecoderdll;
    UINT_PTR         mspatchadll;
    UINT_PTR         mspatchcdll;
    UINT_PTR         MSPhotographydll;
    UINT_PTR         msportsdll;
    UINT_PTR         msprivsdll;
    UINT_PTR         msrahcdll;
    UINT_PTR         msratingdll;
    UINT_PTR         MSRAWImagedll;
    UINT_PTR         MsRdpWebAccessdll;
    UINT_PTR         msrle32dll;
    UINT_PTR         msscntrsdll;
    UINT_PTR         mssecuserdll;
    UINT_PTR         mssecwfpudll;
    UINT_PTR         mssign32dll;
    UINT_PTR         mssip32dll;
    UINT_PTR         mssitlbdll;
    UINT_PTR         MsSpellCheckingFacilitydll;
    UINT_PTR         mssphdll;
    UINT_PTR         mssprxydll;
    UINT_PTR         mssrchdll;
    UINT_PTR         mssvpdll;
    UINT_PTR         mstaskdll;
    UINT_PTR         msTextPredictiondll;
    UINT_PTR         mstscaxdll;
    UINT_PTR         msutbdll;
    UINT_PTR         msv1_0dll;
    UINT_PTR         msvcirtdll;
    UINT_PTR         msvcp100dll;
    UINT_PTR         msvcp110dll;
    UINT_PTR         msvcp110_windll;
    UINT_PTR         msvcp120dll;
    UINT_PTR         msvcp120_clr0400dll;
    UINT_PTR         msvcp140dll;
    UINT_PTR         msvcp140ddll;
    UINT_PTR         msvcp140d_atomic_waitdll;
    UINT_PTR         msvcp140d_codecvt_idsdll;
    UINT_PTR         msvcp140_1dll;
    UINT_PTR         msvcp140_1ddll;
    UINT_PTR         msvcp140_2dll;
    UINT_PTR         msvcp140_2ddll;
    UINT_PTR         msvcp140_atomic_waitdll;
    UINT_PTR         msvcp140_clr0400dll;
    UINT_PTR         msvcp140_codecvt_idsdll;
    UINT_PTR         msvcp60dll;
    UINT_PTR         msvcp_windll;
    UINT_PTR         msvcr100dll;
    UINT_PTR         msvcr100_clr0400dll;
    UINT_PTR         msvcr110dll;
    UINT_PTR         msvcr120dll;
    UINT_PTR         msvcr120_clr0400dll;
    UINT_PTR         msvcrtdll;
    UINT_PTR         msvfw32dll;
    UINT_PTR         msvidc32dll;
    UINT_PTR         MSVidCtldll;
    UINT_PTR         MSVideoDSPdll;
    UINT_PTR         MSVP9DECdll;
    UINT_PTR         msvprocdll;
    UINT_PTR         MSVPXENCdll;
    UINT_PTR         MSWB7dll;
    UINT_PTR         MSWebpdll;
    UINT_PTR         mswmdmdll;
    UINT_PTR         mswsockdll;
    UINT_PTR         msxml3dll;
    UINT_PTR         msxml3rdll;
    UINT_PTR         msxml6dll;
    UINT_PTR         msxml6rdll;
    UINT_PTR         msyuvdll;
    UINT_PTR         MtcModeldll;
    UINT_PTR         MTFdll;
    UINT_PTR         MTFAppServiceDSdll;
    UINT_PTR         MtfDecoderdll;
    UINT_PTR         MTFFuzzyDSdll;
    UINT_PTR         MTFServerdll;
    UINT_PTR         MTFSpellcheckDSdll;
    UINT_PTR         mtxcludll;
    UINT_PTR         mtxdmdll;
    UINT_PTR         mtxexdll;
    UINT_PTR         mtxocidll;
    UINT_PTR         muifontsetupdll;
    UINT_PTR         MUILanguageCleanupdll;
    UINT_PTR         museuxdockeddll;
    UINT_PTR         MusUpdateHandlersdll;
    UINT_PTR         mycomputdll;
    UINT_PTR         mydocsdll;
    UINT_PTR         NahimicAPO3ConfiguratorDaemonModuledll;
    UINT_PTR         NahimicAPO4dll;
    UINT_PTR         NahimicAPO4APIdll;
    UINT_PTR         NahimicAPO4ConfiguratorDaemonModuledll;
    UINT_PTR         NahimicAPO4ExpertAPIdll;
    UINT_PTR         NahimicPnPAPO4ConfiguratorDaemonModuledll;
    UINT_PTR         NahimicSharedMemorydll;
    UINT_PTR         NapiNSPdll;
    UINT_PTR         NaturalAuthdll;
    UINT_PTR         NaturalAuthClientdll;
    UINT_PTR         NaturalLanguage6dll;
    UINT_PTR         navshutdowndll;
    UINT_PTR         NcaApidll;
    UINT_PTR         NcaSvcdll;
    UINT_PTR         ncbservicedll;
    UINT_PTR         NcdAutoSetupdll;
    UINT_PTR         NcdPropdll;
    UINT_PTR         ncidll;
    UINT_PTR         ncobjapidll;
    UINT_PTR         ncryptdll;
    UINT_PTR         ncryptprovdll;
    UINT_PTR         ncryptsslpdll;
    UINT_PTR         ncsidll;
    UINT_PTR         ncuprovdll;
    UINT_PTR         nddeapidll;
    UINT_PTR         ndfapidll;
    UINT_PTR         ndfetwdll;
    UINT_PTR         ndfhcdiscoverydll;
    UINT_PTR         ndishcdll;
    UINT_PTR         ndproxystubdll;
    UINT_PTR         nduprovdll;
    UINT_PTR         negoextsdll;
    UINT_PTR         netapi32dll;
    UINT_PTR         netbiosdll;
    UINT_PTR         netcenterdll;
    UINT_PTR         netcfgxdll;
    UINT_PTR         netcorehcdll;
    UINT_PTR         netdiagfxdll;
    UINT_PTR         NetDriverInstalldll;
    UINT_PTR         neteventdll;
    UINT_PTR         netfxperfdll;
    UINT_PTR         nethdll;
    UINT_PTR         netiddll;
    UINT_PTR         netiohlpdll;
    UINT_PTR         netjoindll;
    UINT_PTR         netlogondll;
    UINT_PTR         netmandll;
    UINT_PTR         NetMgmtIFdll;
    UINT_PTR         netmsgdll;
    UINT_PTR         netplwizdll;
    UINT_PTR         netprofmdll;
    UINT_PTR         netprofmsvcdll;
    UINT_PTR         netprovfwdll;
    UINT_PTR         netprovisionspdll;
    UINT_PTR         NetSetupApidll;
    UINT_PTR         NetSetupEnginedll;
    UINT_PTR         NetSetupShimdll;
    UINT_PTR         NetSetupSvcdll;
    UINT_PTR         netshelldll;
    UINT_PTR         nettracedll;
    UINT_PTR         netutilsdll;
    UINT_PTR         NetworkBindingEngineMigPlugindll;
    UINT_PTR         NetworkCollectionAgentdll;
    UINT_PTR         NetworkDesktopSettingsdll;
    UINT_PTR         networkexplorerdll;
    UINT_PTR         networkhelperdll;
    UINT_PTR         NetworkIcondll;
    UINT_PTR         networkitemfactorydll;
    UINT_PTR         NetworkMobileSettingsdll;
    UINT_PTR         NetworkProxyCspdll;
    UINT_PTR         NetworkQoSPolicyCSPdll;
    UINT_PTR         NetworkUXBrokerdll;
    UINT_PTR         newdevdll;
    UINT_PTR         NFCProvisioningPlugindll;
    UINT_PTR         NfcRadioMediadll;
    UINT_PTR         ngccredprovdll;
    UINT_PTR         NgcCtnrdll;
    UINT_PTR         NgcCtnrGidsHandlerdll;
    UINT_PTR         NgcCtnrSvcdll;
    UINT_PTR         NgcIsoCtnrdll;
    UINT_PTR         ngckeyenumdll;
    UINT_PTR         ngckspdll;
    UINT_PTR         ngclocaldll;
    UINT_PTR         ngcpopkeysrvdll;
    UINT_PTR         NgcProCspdll;
    UINT_PTR         ngcrecoverydll;
    UINT_PTR         ngcsvcdll;
    UINT_PTR         ngctasksdll;
    UINT_PTR         ngcutilsdll;
    UINT_PTR         NhNotifSysdll;
    UINT_PTR         ninputdll;
    UINT_PTR         nlaapidll;
    UINT_PTR         nlahcdll;
    UINT_PTR         nlansp_cdll;
    UINT_PTR         nlhtmldll;
    UINT_PTR         nlmgpdll;
    UINT_PTR         nlmproxydll;
    UINT_PTR         nlmsprepdll;
    UINT_PTR         nlsbresdll;
    UINT_PTR         NlsData0000dll;
    UINT_PTR         NlsData0009dll;
    UINT_PTR         Nlsdldll;
    UINT_PTR         NlsLexicons0009dll;
    UINT_PTR         NmaDirectdll;
    UINT_PTR         noisedll;
    UINT_PTR         nonarpinvdll;
    UINT_PTR         normalizdll;
    UINT_PTR         NotificationControllerdll;
    UINT_PTR         NotificationControllerPSdll;
    UINT_PTR         NotificationIntelligencePlatformdll;
    UINT_PTR         notificationplatformcomponentdll;
    UINT_PTR         npmproxydll;
    UINT_PTR         NPSMdll;
    UINT_PTR         NPSMDesktopProviderdll;
    UINT_PTR         nrpsrvdll;
    UINT_PTR         nrtapidll;
    UINT_PTR         nshhttpdll;
    UINT_PTR         nshipsecdll;
    UINT_PTR         nshwfpdll;
    UINT_PTR         nsidll;
    UINT_PTR         nsisvcdll;
    UINT_PTR         ntasn1dll;
    UINT_PTR         ntdlldll;
    UINT_PTR         ntdsapidll;
    UINT_PTR         ntfsresdll;
    UINT_PTR         ntlanmandll;
    UINT_PTR         ntlanui2dll;
    UINT_PTR         NtlmShareddll;
    UINT_PTR         ntmartadll;
    UINT_PTR         ntprintdll;
    UINT_PTR         ntshruidll;
    UINT_PTR         ntvdm64dll;
    UINT_PTR         NvAgentdll;
    UINT_PTR         nvapi64dll;
    UINT_PTR         nvaudcap64vdll;
    UINT_PTR         nvcpldll;
    UINT_PTR         nvcudadll;
    UINT_PTR         nvcudadebuggerdll;
    UINT_PTR         nvcuviddll;
    UINT_PTR         nvEncodeAPI64dll;
    UINT_PTR         NvFBC64dll;
    UINT_PTR         NvIFR64dll;
    UINT_PTR         nvmldll;
    UINT_PTR         nvofapi64dll;
    UINT_PTR         NvRtmpStreamer64dll;
    UINT_PTR         nvspcap64dll;
    UINT_PTR         objseldll;
    UINT_PTR         occachedll;
    UINT_PTR         ocsetapidll;
    UINT_PTR         odbc32dll;
    UINT_PTR         odbcbcpdll;
    UINT_PTR         odbcconfdll;
    UINT_PTR         odbccp32dll;
    UINT_PTR         odbccr32dll;
    UINT_PTR         odbccu32dll;
    UINT_PTR         odbcintdll;
    UINT_PTR         odbctracdll;
    UINT_PTR         OEMDefaultAssociationsdll;
    UINT_PTR         oemlicensedll;
    UINT_PTR         offfiltdll;
    UINT_PTR         officecspdll;
    UINT_PTR         offlinelsadll;
    UINT_PTR         offlinesamdll;
    UINT_PTR         offregdll;
    UINT_PTR         ole32dll;
    UINT_PTR         oleaccdll;
    UINT_PTR         oleacchooksdll;
    UINT_PTR         oleaccrcdll;
    UINT_PTR         oleaut32dll;
    UINT_PTR         oledlgdll;
    UINT_PTR         oleprndll;
    UINT_PTR         OmaDmAgentdll;
    UINT_PTR         omadmapidll;
    UINT_PTR         OnDemandBrokerClientdll;
    UINT_PTR         OnDemandConnRouteHelperdll;
    UINT_PTR         OneBackupHandlerdll;
    UINT_PTR         OneCoreCommonProxyStubdll;
    UINT_PTR         OneCoreUAPCommonProxyStubdll;
    UINT_PTR         OneSettingsClientdll;
    UINT_PTR         onexdll;
    UINT_PTR         onexuidll;
    UINT_PTR         onnxruntimedll;
    UINT_PTR         OpcServicesdll;
    UINT_PTR         OpenCLdll;
    UINT_PTR         opengl32dll;
    UINT_PTR         Optanedll;
    UINT_PTR         OptaneEventLogMsgdll;
    UINT_PTR         ortcenginedll;
    UINT_PTR         osbaselndll;
    UINT_PTR         OskSupportdll;
    UINT_PTR         osuninstdll;
    UINT_PTR         P2Pdll;
    UINT_PTR         P2PGraphdll;
    UINT_PTR         p2pnetshdll;
    UINT_PTR         p2psvcdll;
    UINT_PTR         p9npdll;
    UINT_PTR         p9rdrservicedll;
    UINT_PTR         packagerdll;
    UINT_PTR         PackageStateChangeHandlerdll;
    UINT_PTR         panmapdll;
    UINT_PTR         PasswordEnrollmentManagerdll;
    UINT_PTR         pautoenrdll;
    UINT_PTR         PayloadRestrictionsdll;
    UINT_PTR         PaymentMediatorServiceProxydll;
    UINT_PTR         pcaclidll;
    UINT_PTR         pcadmdll;
    UINT_PTR         pcaevtsdll;
    UINT_PTR         pcasvcdll;
    UINT_PTR         pcauidll;
    UINT_PTR         PCPKspdll;
    UINT_PTR         PCShellCommonProxyStubdll;
    UINT_PTR         pcsvDevicedll;
    UINT_PTR         pcwumdll;
    UINT_PTR         pcwutldll;
    UINT_PTR         pdhdll;
    UINT_PTR         pdhuidll;
    UINT_PTR         PeerDistdll;
    UINT_PTR         PeerDistADdll;
    UINT_PTR         PeerDistCacheProviderdll;
    UINT_PTR         PeerDistCleanerdll;
    UINT_PTR         PeerDistHttpTransdll;
    UINT_PTR         PeerDistShdll;
    UINT_PTR         PeerDistSvcdll;
    UINT_PTR         PeerDistWSDDiscoProvdll;
    UINT_PTR         PenServicedll;
    UINT_PTR         PeopleAPIsdll;
    UINT_PTR         PeopleBanddll;
    UINT_PTR         PerceptionDevicedll;
    UINT_PTR         PerceptionSimulationProxyStubsdll;
    UINT_PTR         PerceptionSimulationManagerdll;
    UINT_PTR         perfdiskdll;
    UINT_PTR         perfnetdll;
    UINT_PTR         perfosdll;
    UINT_PTR         perfprocdll;
    UINT_PTR         perftsdll;
    UINT_PTR         perf_gputimingdll;
    UINT_PTR         PersonalizationCSPdll;
    UINT_PTR         pfclientdll;
    UINT_PTR         PhoneCallHistoryApisdll;
    UINT_PTR         PhoneOmdll;
    UINT_PTR         PhonePlatformAbstractiondll;
    UINT_PTR         PhoneProvidersdll;
    UINT_PTR         PhoneServicedll;
    UINT_PTR         PhoneServiceResdll;
    UINT_PTR         Phoneutildll;
    UINT_PTR         PhoneutilResdll;
    UINT_PTR         PhotoMetadataHandlerdll;
    UINT_PTR         photowizdll;
    UINT_PTR         PickerPlatformdll;
    UINT_PTR         piddll;
    UINT_PTR         pidgenxdll;
    UINT_PTR         pifmgrdll;
    UINT_PTR         PimIndexMaintenancedll;
    UINT_PTR         PimIndexMaintenanceClientdll;
    UINT_PTR         Pimstoredll;
    UINT_PTR         PinEnrollmentHelperdll;
    UINT_PTR         pkeyhelperdll;
    UINT_PTR         PktMonApidll;
    UINT_PTR         pku2udll;
    UINT_PTR         pladll;
    UINT_PTR         playlistfolderdll;
    UINT_PTR         PlaySndSrvdll;
    UINT_PTR         PlayToDevicedll;
    UINT_PTR         PlayToManagerdll;
    UINT_PTR         playtomenudll;
    UINT_PTR         PlayToReceiverdll;
    UINT_PTR         PlayToStatusProviderdll;
    UINT_PTR         ploptindll;
    UINT_PTR         pmcsnapdll;
    UINT_PTR         pngfiltdll;
    UINT_PTR         pniduidll;
    UINT_PTR         pnpcleandll;
    UINT_PTR         pnpdiagdll;
    UINT_PTR         pnppolicydll;
    UINT_PTR         pnptsdll;
    UINT_PTR         pnpuidll;
    UINT_PTR         PNPXAssocdll;
    UINT_PTR         PNPXAssocPrxdll;
    UINT_PTR         pnrpautodll;
    UINT_PTR         Pnrphcdll;
    UINT_PTR         pnrpnspdll;
    UINT_PTR         pnrpsvcdll;
    UINT_PTR         policymanagerdll;
    UINT_PTR         policymanagerprecheckdll;
    UINT_PTR         polstoredll;
    UINT_PTR         PortableDeviceApidll;
    UINT_PTR         PortableDeviceClassExtensiondll;
    UINT_PTR         PortableDeviceConnectApidll;
    UINT_PTR         PortableDeviceStatusdll;
    UINT_PTR         PortableDeviceSyncProviderdll;
    UINT_PTR         PortableDeviceTypesdll;
    UINT_PTR         PortableDeviceWiaCompatdll;
    UINT_PTR         posetupdll;
    UINT_PTR         POSyncServicesdll;
    UINT_PTR         potsdll;
    UINT_PTR         powercpldll;
    UINT_PTR         powrprofdll;
    UINT_PTR         ppcsnapdll;
    UINT_PTR         prauthprovidersdll;
    UINT_PTR         PresentationCFFRasterizerNative_v0300dll;
    UINT_PTR         PresentationHostProxydll;
    UINT_PTR         PresentationNative_v0300dll;
    UINT_PTR         prflbmsgdll;
    UINT_PTR         PrintPrintSupportSourcedll;
    UINT_PTR         PrintWorkflowSourcedll;
    UINT_PTR         PrinterCleanupTaskdll;
    UINT_PTR         printfilterpipelineprxydll;
    UINT_PTR         PrintIsolationProxydll;
    UINT_PTR         PrintNotificationdll;
    UINT_PTR         PrintPlatformConfigdll;
    UINT_PTR         printticketvalidationdll;
    UINT_PTR         printuidll;
    UINT_PTR         PrintWorkflowServicedll;
    UINT_PTR         PrintWSDAHostdll;
    UINT_PTR         prm0009dll;
    UINT_PTR         prncachedll;
    UINT_PTR         prnfldrdll;
    UINT_PTR         prnntfydll;
    UINT_PTR         prntvptdll;
    UINT_PTR         ProductEnumeratordll;
    UINT_PTR         profapidll;
    UINT_PTR         profextdll;
    UINT_PTR         profprovdll;
    UINT_PTR         profsvcdll;
    UINT_PTR         profsvcextdll;
    UINT_PTR         propsysdll;
    UINT_PTR         provcoredll;
    UINT_PTR         provdatastoredll;
    UINT_PTR         provdiagnosticsdll;
    UINT_PTR         provenginedll;
    UINT_PTR         provhandlersdll;
    UINT_PTR         provisioningcommandscspdll;
    UINT_PTR         provisioningcspdll;
    UINT_PTR         ProvisioningHandlersdll;
    UINT_PTR         provmigratedll;
    UINT_PTR         provopsdll;
    UINT_PTR         provpackageapidlldll;
    UINT_PTR         provplatformdesktopdll;
    UINT_PTR         ProvPluginEngdll;
    UINT_PTR         ProvSysprepdll;
    UINT_PTR         provthrddll;
    UINT_PTR         ProximityCommondll;
    UINT_PTR         ProximityCommonPaldll;
    UINT_PTR         ProximityRtapiPaldll;
    UINT_PTR         ProximityServicedll;
    UINT_PTR         ProximityServicePaldll;
    UINT_PTR         prvdmofcompdll;
    UINT_PTR         prxyqrydll;
    UINT_PTR         psapidll;
    UINT_PTR         psisdecddll;
    UINT_PTR         PSModuleDiscoveryProviderdll;
    UINT_PTR         PsmServiceExtHostdll;
    UINT_PTR         psmsrvdll;
    UINT_PTR         pstaskdll;
    UINT_PTR         pstorecdll;
    UINT_PTR         ptpprovdll;
    UINT_PTR         puiapidll;
    UINT_PTR         puiobjdll;
    UINT_PTR         PushToInstalldll;
    UINT_PTR         PwdlessAggregatordll;
    UINT_PTR         pwlauncherdll;
    UINT_PTR         pwrshplugindll;
    UINT_PTR         pwrshsipdll;
    UINT_PTR         pwssodll;
    UINT_PTR         qasfdll;
    UINT_PTR         qcapdll;
    UINT_PTR         qdvdll;
    UINT_PTR         qdvddll;
    UINT_PTR         qeditdll;
    UINT_PTR         qedwipesdll;
    UINT_PTR         qmgrdll;
    UINT_PTR         QualityUpdateAssistantdll;
    UINT_PTR         quartzdll;
    UINT_PTR         Querydll;
    UINT_PTR         QuickActionsDataModeldll;
    UINT_PTR         QuietHoursdll;
    UINT_PTR         qwavedll;
    UINT_PTR         RacEngndll;
    UINT_PTR         racpldlgdll;
    UINT_PTR         radardtdll;
    UINT_PTR         radarrsdll;
    UINT_PTR         RADCUIdll;
    UINT_PTR         RandomAccessStreamDataSourcedll;
    UINT_PTR         rasadhlpdll;
    UINT_PTR         rasapi32dll;
    UINT_PTR         rasautodll;
    UINT_PTR         raschapdll;
    UINT_PTR         raschapextdll;
    UINT_PTR         rasctrsdll;
    UINT_PTR         rascustomdll;
    UINT_PTR         rasdiagdll;
    UINT_PTR         rasdlgdll;
    UINT_PTR         rasgcwdll;
    UINT_PTR         rasmandll;
    UINT_PTR         rasmansdll;
    UINT_PTR         rasmbmgrdll;
    UINT_PTR         RasMediaManagerdll;
    UINT_PTR         RASMMdll;
    UINT_PTR         rasmontrdll;
    UINT_PTR         rasplapdll;
    UINT_PTR         raspppdll;
    UINT_PTR         rastapidll;
    UINT_PTR         rastlsdll;
    UINT_PTR         rastlsextdll;
    UINT_PTR         rdbuidll;
    UINT_PTR         rdp4vsdll;
    UINT_PTR         RdpAvencdll;
    UINT_PTR         rdpbasedll;
    UINT_PTR         rdpcfgexdll;
    UINT_PTR         rdpcoretsdll;
    UINT_PTR         rdpcredentialproviderdll;
    UINT_PTR         rdpendpdll;
    UINT_PTR         rdpnanoTransportdll;
    UINT_PTR         RdpRelayTransportdll;
    UINT_PTR         RdpSaPsdll;
    UINT_PTR         rdpserverbasedll;
    UINT_PTR         rdpsharercomdll;
    UINT_PTR         rdpudddll;
    UINT_PTR         rdpvieweraxdll;
    UINT_PTR         RDSAppXHelperdll;
    UINT_PTR         rdsdwmdrdll;
    UINT_PTR         rdvvmtransportdll;
    UINT_PTR         RDXServicedll;
    UINT_PTR         RDXTaskFactorydll;
    UINT_PTR         ReAgentdll;
    UINT_PTR         ReAgentTaskdll;
    UINT_PTR         recoverydll;
    UINT_PTR         regapidll;
    UINT_PTR         RegCtrldll;
    UINT_PTR         regidledll;
    UINT_PTR         regsvcdll;
    UINT_PTR         reguwpapidll;
    UINT_PTR         ReInfodll;
    UINT_PTR         RemoteAppLifetimeManagerProxyStubdll;
    UINT_PTR         remoteaudioendpointdll;
    UINT_PTR         RemoteFileBrowsedll;
    UINT_PTR         remotepgdll;
    UINT_PTR         RemoteWipeCSPdll;
    UINT_PTR         RemovableMediaProvisioningPlugindll;
    UINT_PTR         RemoveDeviceContextHandlerdll;
    UINT_PTR         RemoveDeviceElevateddll;
    UINT_PTR         ReportingCSPdll;
    UINT_PTR         ResBParserdll;
    UINT_PTR         resetengdll;
    UINT_PTR         ResetEnginedll;
    UINT_PTR         ResetEngOnlinedll;
    UINT_PTR         ResourceMapperdll;
    UINT_PTR         ResourcePolicyClientdll;
    UINT_PTR         ResourcePolicyServerdll;
    UINT_PTR         resutilsdll;
    UINT_PTR         rgb9rastdll;
    UINT_PTR         riched20dll;
    UINT_PTR         riched32dll;
    UINT_PTR         RjvMDMConfigdll;
    UINT_PTR         RMapidll;
    UINT_PTR         rmclientdll;
    UINT_PTR         RMSRoamingSecuritydll;
    UINT_PTR         rnr20dll;
    UINT_PTR         RoamingSecuritydll;
    UINT_PTR         rometadatadll;
    UINT_PTR         RotMgrdll;
    UINT_PTR         RpcEpMapdll;
    UINT_PTR         rpchttpdll;
    UINT_PTR         RpcNs4dll;
    UINT_PTR         rpcnshdll;
    UINT_PTR         rpcrt4dll;
    UINT_PTR         RpcRtRemotedll;
    UINT_PTR         rpcssdll;
    UINT_PTR         rsaenhdll;
    UINT_PTR         rshx32dll;
    UINT_PTR         RstMwEventLogMsgdll;
    UINT_PTR         RstrtMgrdll;
    UINT_PTR         rtffiltdll;
    UINT_PTR         rtmdll;
    UINT_PTR         rtmcodecsdll;
    UINT_PTR         RTMediaFramedll;
    UINT_PTR         rtmmvrortcdll;
    UINT_PTR         rtmpaldll;
    UINT_PTR         rtmpltfmdll;
    UINT_PTR         rtpmdll;
    UINT_PTR         rtutilsdll;
    UINT_PTR         RTWorkQdll;
    UINT_PTR         RuleBasedDSdll;
    UINT_PTR         samclidll;
    UINT_PTR         samlibdll;
    UINT_PTR         samsrvdll;
    UINT_PTR         sasdll;
    UINT_PTR         sbedll;
    UINT_PTR         sbeiodll;
    UINT_PTR         sberesdll;
    UINT_PTR         sbresourcesdll;
    UINT_PTR         sbservicetriggerdll;
    UINT_PTR         scansettingdll;
    UINT_PTR         SCardBidll;
    UINT_PTR         SCardDlgdll;
    UINT_PTR         SCardSvrdll;
    UINT_PTR         scavengeuidll;
    UINT_PTR         ScDeviceEnumdll;
    UINT_PTR         sceclidll;
    UINT_PTR         scesrvdll;
    UINT_PTR         schanneldll;
    UINT_PTR         schedclidll;
    UINT_PTR         schedsvcdll;
    UINT_PTR         sckspdll;
    UINT_PTR         scriptodll;
    UINT_PTR         scrobjdll;
    UINT_PTR         scrptadmdll;
    UINT_PTR         scrrundll;
    UINT_PTR         sdcpldll;
    UINT_PTR         SDDSdll;
    UINT_PTR         sdengin2dll;
    UINT_PTR         SDFHostdll;
    UINT_PTR         sdhcinstdll;
    UINT_PTR         sdiagengdll;
    UINT_PTR         sdiagprvdll;
    UINT_PTR         sdiagschddll;
    UINT_PTR         sdohlpdll;
    UINT_PTR         sdrsvcdll;
    UINT_PTR         sdshextdll;
    UINT_PTR         SearchProtocolHandlerMAPI2dll;
    UINT_PTR         SearchFolderdll;
    UINT_PTR         SearchIndexerCoredll;
    UINT_PTR         SebBackgroundManagerPolicydll;
    UINT_PTR         secfw_AuthenticAMDdll;
    UINT_PTR         sechostdll;
    UINT_PTR         seclogondll;
    UINT_PTR         secprocdll;
    UINT_PTR         secproc_isvdll;
    UINT_PTR         secproc_sspdll;
    UINT_PTR         secproc_ssp_isvdll;
    UINT_PTR         secur32dll;
    UINT_PTR         SecureAssessmentHandlersdll;
    UINT_PTR         SecureTimeAggregatordll;
    UINT_PTR         securitydll;
    UINT_PTR         SecurityCenterBrokerdll;
    UINT_PTR         SecurityCenterBrokerPSdll;
    UINT_PTR         SecurityHealthAgentdll;
    UINT_PTR         SecurityHealthCoredll;
    UINT_PTR         SecurityHealthProxyStubdll;
    UINT_PTR         SecurityHealthSSOdll;
    UINT_PTR         SecurityHealthSsoUdkdll;
    UINT_PTR         SecurityHealthUdkdll;
    UINT_PTR         sedpluginsdll;
    UINT_PTR         SEMgrPSdll;
    UINT_PTR         SEMgrSvcdll;
    UINT_PTR         sendmaildll;
    UINT_PTR         Sensdll;
    UINT_PTR         SensApidll;
    UINT_PTR         SensorPerformanceEventsdll;
    UINT_PTR         SensorsApidll;
    UINT_PTR         SensorsClassExtensiondll;
    UINT_PTR         SensorsCpldll;
    UINT_PTR         SensorServicedll;
    UINT_PTR         SensorsNativeApidll;
    UINT_PTR         SensorsNativeApiV2dll;
    UINT_PTR         SensorsUtilsV2dll;
    UINT_PTR         sensrsvcdll;
    UINT_PTR         serialuidll;
    UINT_PTR         ServicingCommondll;
    UINT_PTR         ServicingUAPIdll;
    UINT_PTR         serwvdrvdll;
    UINT_PTR         SessEnvdll;
    UINT_PTR         setbcdlocaledll;
    UINT_PTR         SetNetworkLocationdll;
    UINT_PTR         SetNetworkLocationFlyoutdll;
    UINT_PTR         SetProxyCredentialdll;
    UINT_PTR         SettingsEnvironmentDesktopdll;
    UINT_PTR         SettingsExtensibilityHandlersdll;
    UINT_PTR         SettingsHandlers_Accessibilitydll;
    UINT_PTR         SettingsHandlers_AdvertisingIddll;
    UINT_PTR         SettingsHandlers_AnalogShelldll;
    UINT_PTR         SettingsHandlers_AppControldll;
    UINT_PTR         SettingsHandlers_AppExecutionAliasdll;
    UINT_PTR         SettingsHandlers_AssignedAccessdll;
    UINT_PTR         SettingsHandlers_Authenticationdll;
    UINT_PTR         SettingsHandlers_BackgroundAppsdll;
    UINT_PTR         SettingsHandlers_Backupdll;
    UINT_PTR         SettingsHandlers_BatteryUsagedll;
    UINT_PTR         SettingsHandlers_Cameradll;
    UINT_PTR         SettingsHandlers_CapabilityAccessdll;
    UINT_PTR         SettingsHandlers_Clipboarddll;
    UINT_PTR         SettingsHandlers_ClosedCaptioningdll;
    UINT_PTR         SettingsHandlers_CloudPCdll;
    UINT_PTR         SettingsHandlers_ContentDeliveryManagerdll;
    UINT_PTR         SettingsHandlers_Cortanadll;
    UINT_PTR         SettingsHandlers_DesktopTaskbardll;
    UINT_PTR         SettingsHandlers_Devicesdll;
    UINT_PTR         SettingsHandlers_Displaydll;
    UINT_PTR         SettingsHandlers_Flightsdll;
    UINT_PTR         SettingsHandlers_Fontsdll;
    UINT_PTR         SettingsHandlers_ForceSyncdll;
    UINT_PTR         SettingsHandlers_Gamingdll;
    UINT_PTR         SettingsHandlers_Geolocationdll;
    UINT_PTR         SettingsHandlers_Gpudll;
    UINT_PTR         SettingsHandlers_HoloLens_Environmentdll;
    UINT_PTR         SettingsHandlers_HumanPresencedll;
    UINT_PTR         SettingsHandlers_IMEdll;
    UINT_PTR         SettingsHandlers_InkingTypingPrivacydll;
    UINT_PTR         SettingsHandlers_InputPersonalizationdll;
    UINT_PTR         SettingsHandlers_InstalledUpdatesdll;
    UINT_PTR         SettingsHandlers_Keyboarddll;
    UINT_PTR         SettingsHandlers_Languagedll;
    UINT_PTR         SettingsHandlers_Lightingdll;
    UINT_PTR         SettingsHandlers_ManagePhonedll;
    UINT_PTR         SettingsHandlers_Mapsdll;
    UINT_PTR         SettingsHandlers_Mousedll;
    UINT_PTR         SettingsHandlers_Notificationsdll;
    UINT_PTR         SettingsHandlers_ntdll;
    UINT_PTR         SettingsHandlers_OneCore_BatterySaverdll;
    UINT_PTR         SettingsHandlers_OneCore_PowerAndSleepdll;
    UINT_PTR         SettingsHandlers_OneDriveBackupdll;
    UINT_PTR         SettingsHandlers_OptionalFeaturesdll;
    UINT_PTR         SettingsHandlers_PCDisplaydll;
    UINT_PTR         SettingsHandlers_Pendll;
    UINT_PTR         SettingsHandlers_Regiondll;
    UINT_PTR         SettingsHandlers_SharedExperiences_Romedll;
    UINT_PTR         SettingsHandlers_SIUFdll;
    UINT_PTR         SettingsHandlers_SpeechPrivacydll;
    UINT_PTR         SettingsHandlers_Startupdll;
    UINT_PTR         SettingsHandlers_Storagedll;
    UINT_PTR         SettingsHandlers_StorageSensedll;
    UINT_PTR         SettingsHandlers_Touchdll;
    UINT_PTR         SettingsHandlers_Troubleshootdll;
    UINT_PTR         SettingsHandlers_Userdll;
    UINT_PTR         SettingsHandlers_UserAccountdll;
    UINT_PTR         SettingsHandlers_UserExperiencedll;
    UINT_PTR         SettingsHandlers_UserIntentdll;
    UINT_PTR         SettingsHandlers_WorkAccessdll;
    UINT_PTR         SettingSyncDownloadHelperdll;
    UINT_PTR         setupapidll;
    UINT_PTR         setupcldll;
    UINT_PTR         setupclndll;
    UINT_PTR         setupetwdll;
    UINT_PTR         SFAPEdll;
    UINT_PTR         SFAPMdll;
    UINT_PTR         sfcdll;
    UINT_PTR         sfc_osdll;
    UINT_PTR         shacctdll;
    UINT_PTR         shacctprofiledll;
    UINT_PTR         SharedPCCSPdll;
    UINT_PTR         SharedRealitySvcdll;
    UINT_PTR         ShareHostdll;
    UINT_PTR         sharemediacpldll;
    UINT_PTR         SHCoredll;
    UINT_PTR         shdocvwdll;
    UINT_PTR         shell32dll;
    UINT_PTR         ShellCommonCommonProxyStubdll;
    UINT_PTR         shellstyledll;
    UINT_PTR         shfolderdll;
    UINT_PTR         shginadll;
    UINT_PTR         shimengdll;
    UINT_PTR         shimgvwdll;
    UINT_PTR         shlwapidll;
    UINT_PTR         shpafactdll;
    UINT_PTR         shsetupdll;
    UINT_PTR         shsvcsdll;
    UINT_PTR         shunimpldll;
    UINT_PTR         shutdownextdll;
    UINT_PTR         shutdownuxdll;
    UINT_PTR         shwebsvcdll;
    UINT_PTR         signdrvdll;
    UINT_PTR         SimAuthdll;
    UINT_PTR         SimCfgdll;
    UINT_PTR         skcidll;
    UINT_PTR         slcdll;
    UINT_PTR         slcextdll;
    UINT_PTR         slwgadll;
    UINT_PTR         SmartActionPlatformdll;
    UINT_PTR         SmartCardBackgroundPolicydll;
    UINT_PTR         SmartcardCredentialProviderdll;
    UINT_PTR         SmartCardSimulatordll;
    UINT_PTR         smartscreendll;
    UINT_PTR         smartscreenpsdll;
    UINT_PTR         SmartWorkflowsdll;
    UINT_PTR         SMBHelperClassdll;
    UINT_PTR         smbwmiv2dll;
    UINT_PTR         SmiEnginedll;
    UINT_PTR         smphostdll;
    UINT_PTR         SmsRouterSvcdll;
    UINT_PTR         SndVolSSOdll;
    UINT_PTR         snmpapidll;
    UINT_PTR         socialapisdll;
    UINT_PTR         softkbddll;
    UINT_PTR         softpubdll;
    UINT_PTR         SortServer2003Compatdll;
    UINT_PTR         SortWindows61dll;
    UINT_PTR         SortWindows62dll;
    UINT_PTR         SortWindows63dll;
    UINT_PTR         SortWindows6Compatdll;
    UINT_PTR         SpaceControldll;
    UINT_PTR         spatialinteractiondll;
    UINT_PTR         SpatializerApodll;
    UINT_PTR         SpatialStoredll;
    UINT_PTR         spbcddll;
    UINT_PTR         SpectrumSyncClientdll;
    UINT_PTR         spfileqdll;
    UINT_PTR         spinfdll;
    UINT_PTR         spmpmdll;
    UINT_PTR         spnetdll;
    UINT_PTR         spoolssdll;
    UINT_PTR         spopkdll;
    UINT_PTR         sppdll;
    UINT_PTR         sppcdll;
    UINT_PTR         sppcextdll;
    UINT_PTR         sppcomapidll;
    UINT_PTR         sppcommdlgdll;
    UINT_PTR         sppnpdll;
    UINT_PTR         sppobjsdll;
    UINT_PTR         sppwinobdll;
    UINT_PTR         sppwmidll;
    UINT_PTR         spwinsatdll;
    UINT_PTR         spwizengdll;
    UINT_PTR         spwizimgdll;
    UINT_PTR         spwizresdll;
    UINT_PTR         SqlServerSpatial150dll;
    UINT_PTR         sqlsrv32dll;
    UINT_PTR         sqmapidll;
    UINT_PTR         srchadmindll;
    UINT_PTR         srclientdll;
    UINT_PTR         srcoredll;
    UINT_PTR         SrEventsdll;
    UINT_PTR         SRHdll;
    UINT_PTR         srhelperdll;
    UINT_PTR         srmdll;
    UINT_PTR         srmclientdll;
    UINT_PTR         srmlibdll;
    UINT_PTR         srmscandll;
    UINT_PTR         srmshelldll;
    UINT_PTR         srmstormoddll;
    UINT_PTR         srmtracedll;
    UINT_PTR         srm_psdll;
    UINT_PTR         srpapidll;
    UINT_PTR         SrpUxNativeSnapIndll;
    UINT_PTR         srrstrdll;
    UINT_PTR         srumapidll;
    UINT_PTR         srumsvcdll;
    UINT_PTR         srvclidll;
    UINT_PTR         srvsvcdll;
    UINT_PTR         srwmidll;
    UINT_PTR         sscoredll;
    UINT_PTR         sscoreextdll;
    UINT_PTR         ssdmdll;
    UINT_PTR         ssdpapidll;
    UINT_PTR         ssdpsrvdll;
    UINT_PTR         SshdBrokerdll;
    UINT_PTR         SshdPinAuthLsadll;
    UINT_PTR         sspiclidll;
    UINT_PTR         sspisrvdll;
    UINT_PTR         SSShimdll;
    UINT_PTR         sstpcfgdll;
    UINT_PTR         sstpsvcdll;
    UINT_PTR         StartTileDatadll;
    UINT_PTR         Startupscandll;
    UINT_PTR         StateRepositoryCoredll;
    UINT_PTR         stclientdll;
    UINT_PTR         stidll;
    UINT_PTR         sti_cidll;
    UINT_PTR         stobjectdll;
    UINT_PTR         StorageContextHandlerdll;
    UINT_PTR         StorageUsagedll;
    UINT_PTR         storagewmidll;
    UINT_PTR         storagewmi_passthrudll;
    UINT_PTR         storewuauthdll;
    UINT_PTR         Storpropdll;
    UINT_PTR         StorSvcdll;
    UINT_PTR         streamcidll;
    UINT_PTR         StringFeedbackEnginedll;
    UINT_PTR         StructuredQuerydll;
    UINT_PTR         suddll;
    UINT_PTR         SustainabilityServicedll;
    UINT_PTR         svfdll;
    UINT_PTR         svsvcdll;
    UINT_PTR         SwitcherDataModeldll;
    UINT_PTR         swprvdll;
    UINT_PTR         sxproxydll;
    UINT_PTR         sxsdll;
    UINT_PTR         sxshareddll;
    UINT_PTR         sxssrvdll;
    UINT_PTR         sxsstoredll;
    UINT_PTR         SyncCenterdll;
    UINT_PTR         SyncControllerdll;
    UINT_PTR         SyncHostpsdll;
    UINT_PTR         SyncInfrastructuredll;
    UINT_PTR         SyncInfrastructurepsdll;
    UINT_PTR         SyncProxydll;
    UINT_PTR         Syncregdll;
    UINT_PTR         SyncResdll;
    UINT_PTR         SyncSettingsdll;
    UINT_PTR         syncutildll;
    UINT_PTR         sysclassdll;
    UINT_PTR         SysFxUIdll;
    UINT_PTR         sysmaindll;
    UINT_PTR         sysntfydll;
    UINT_PTR         syssetupdll;
    UINT_PTR         systemcpldll;
    UINT_PTR         SystemEventsBrokerClientdll;
    UINT_PTR         SystemEventsBrokerServerdll;
    UINT_PTR         SystemSettingsDataModeldll;
    UINT_PTR         SystemSettingsDeviceEncryptionHandlersdll;
    UINT_PTR         SystemSettingsHandlersdll;
    UINT_PTR         SystemSettingsSettingsExtensibilitydll;
    UINT_PTR         SystemSettingsUserAccountsHandlersdll;
    UINT_PTR         SystemSettingsThresholdAdminFlowUIdll;
    UINT_PTR         SystemSupportInfodll;
    UINT_PTR         t2embeddll;
    UINT_PTR         t6indispdll;
    UINT_PTR         Tabbtndll;
    UINT_PTR         TabbtnExdll;
    UINT_PTR         TabSvcdll;
    UINT_PTR         tapi3dll;
    UINT_PTR         tapi32dll;
    UINT_PTR         tapiluadll;
    UINT_PTR         TapiMigPlugindll;
    UINT_PTR         tapiperfdll;
    UINT_PTR         tapisrvdll;
    UINT_PTR         TapiSysprepdll;
    UINT_PTR         tapiuidll;
    UINT_PTR         TaskApisdll;
    UINT_PTR         Taskbardll;
    UINT_PTR         taskbarcpldll;
    UINT_PTR         taskcompdll;
    UINT_PTR         TaskFlowDataEnginedll;
    UINT_PTR         TaskManagerDataLayerdll;
    UINT_PTR         taskschddll;
    UINT_PTR         TaskSchdPSdll;
    UINT_PTR         tbauthdll;
    UINT_PTR         tbsdll;
    UINT_PTR         tcbloaderdll;
    UINT_PTR         tcpipcfgdll;
    UINT_PTR         tcpmibdll;
    UINT_PTR         tcpmondll;
    UINT_PTR         tcpmonuidll;
    UINT_PTR         tdhdll;
    UINT_PTR         tdhresdll;
    UINT_PTR         TDLMigrationdll;
    UINT_PTR         TEEManagement64dll;
    UINT_PTR         TelephonyInteractiveUserdll;
    UINT_PTR         TelephonyInteractiveUserResdll;
    UINT_PTR         tellibdll;
    UINT_PTR         TempSignedLicenseExchangeTaskdll;
    UINT_PTR         TenantRestrictionsPlugindll;
    UINT_PTR         termmgrdll;
    UINT_PTR         termsrvdll;
    UINT_PTR         tetheringclientdll;
    UINT_PTR         tetheringconfigspdll;
    UINT_PTR         TetheringIeProviderdll;
    UINT_PTR         TetheringMgrdll;
    UINT_PTR         tetheringservicedll;
    UINT_PTR         TetheringStationdll;
    UINT_PTR         TextInputFrameworkdll;
    UINT_PTR         TextInputMethodFormatterdll;
    UINT_PTR         TextShapingdll;
    UINT_PTR         themecpldll;
    UINT_PTR         ThemesSsfDownloadScheduledTaskdll;
    UINT_PTR         themeservicedll;
    UINT_PTR         themeuidll;
    UINT_PTR         threadpoolwinrtdll;
    UINT_PTR         ThreatAssessmentdll;
    UINT_PTR         ThreatExperienceManagerdll;
    UINT_PTR         ThreatIntelligencedll;
    UINT_PTR         ThreatResponseEnginedll;
    UINT_PTR         thumbcachedll;
    UINT_PTR         tier2punctuationsdll;
    UINT_PTR         TieringEngineProxydll;
    UINT_PTR         TileDataRepositorydll;
    UINT_PTR         TimeBrokerClientdll;
    UINT_PTR         TimeBrokerServerdll;
    UINT_PTR         TimeDateMUICallbackdll;
    UINT_PTR         timesyncdll;
    UINT_PTR         TimeSyncTaskdll;
    UINT_PTR         tlscspdll;
    UINT_PTR         tokenbindingdll;
    UINT_PTR         TokenBrokerdll;
    UINT_PTR         TokenBrokerUIdll;
    UINT_PTR         TpmCertResourcesdll;
    UINT_PTR         tpmcompcdll;
    UINT_PTR         TpmCoreProvisioningdll;
    UINT_PTR         TpmEngUMdll;
    UINT_PTR         TpmEngUM138dll;
    UINT_PTR         TpmTasksdll;
    UINT_PTR         tpmvscdll;
    UINT_PTR         tprtdlldll;
    UINT_PTR         tquerydll;
    UINT_PTR         trafficdll;
    UINT_PTR         TransliterationRankerdll;
    UINT_PTR         TransportDSAdll;
    UINT_PTR         triedll;
    UINT_PTR         trkwksdll;
    UINT_PTR         TrustedSignalCredProvdll;
    UINT_PTR         tsbyuvdll;
    UINT_PTR         tscfgwmidll;
    UINT_PTR         TSErrRedirdll;
    UINT_PTR         tsf3gipdll;
    UINT_PTR         tsgqecdll;
    UINT_PTR         tsmfdll;
    UINT_PTR         TSpkgdll;
    UINT_PTR         tspubwmidll;
    UINT_PTR         TSSessionUXdll;
    UINT_PTR         tssrvlicdll;
    UINT_PTR         TsUsbGDCoInstallerdll;
    UINT_PTR         TsUsbRedirectionGroupPolicyExtensiondll;
    UINT_PTR         TSWorkspacedll;
    UINT_PTR         ttdloaderdll;
    UINT_PTR         ttdplmdll;
    UINT_PTR         ttdrecorddll;
    UINT_PTR         ttdrecordcpudll;
    UINT_PTR         TtlsAuthdll;
    UINT_PTR         TtlsCfgdll;
    UINT_PTR         TtlsExtdll;
    UINT_PTR         tvratingsdll;
    UINT_PTR         twextdll;
    UINT_PTR         twinapiappcoredll;
    UINT_PTR         twinapidll;
    UINT_PTR         twinuiappcoredll;
    UINT_PTR         twinuidll;
    UINT_PTR         twinuipcshelldll;
    UINT_PTR         txflogdll;
    UINT_PTR         txfw32dll;
    UINT_PTR         tzautoupdatedll;
    UINT_PTR         tzresdll;
    UINT_PTR         tzsyncresdll;
    UINT_PTR         ubpmdll;
    UINT_PTR         ucmhcdll;
    UINT_PTR         ucrtbasedll;
    UINT_PTR         ucrtbaseddll;
    UINT_PTR         ucrtbase_clr0400dll;
    UINT_PTR         ucrtbase_enclavedll;
    UINT_PTR         udhisapidll;
    UINT_PTR         uDWMdll;
    UINT_PTR         UefiCspdll;
    UINT_PTR         uexfatdll;
    UINT_PTR         ufatdll;
    UINT_PTR         UiaManagerdll;
    UINT_PTR         UIAnimationdll;
    UINT_PTR         UIAutomationCoredll;
    UINT_PTR         uicomdll;
    UINT_PTR         UIManagerBrokerpsdll;
    UINT_PTR         uirengdll;
    UINT_PTR         UIRibbondll;
    UINT_PTR         UIRibbonResdll;
    UINT_PTR         ulibdll;
    UINT_PTR         umbdll;
    UINT_PTR         umdmxfrmdll;
    UINT_PTR         umpdcdll;
    UINT_PTR         umpnpmgrdll;
    UINT_PTR         umpo_overridesdll;
    UINT_PTR         umpodll;
    UINT_PTR         umpodevdll;
    UINT_PTR         umpoextdll;
    UINT_PTR         umpowmidll;
    UINT_PTR         umrdpdll;
    UINT_PTR         unattenddll;
    UINT_PTR         unenrollhookdll;
    UINT_PTR         UnifiedConsentdll;
    UINT_PTR         unimdmatdll;
    UINT_PTR         uniplatdll;
    UINT_PTR         Unistoredll;
    UINT_PTR         untfsdll;
    UINT_PTR         UpdateAgentdll;
    UINT_PTR         updatecspdll;
    UINT_PTR         UpdateHeartbeatScandll;
    UINT_PTR         updatepolicydll;
    UINT_PTR         UpdatePolicyScenarioReliabilityAggregatordll;
    UINT_PTR         UpdateRebootdll;
    UINT_PTR         upnpdll;
    UINT_PTR         upnphostdll;
    UINT_PTR         UPPrinterInstallsCSPdll;
    UINT_PTR         upshareddll;
    UINT_PTR         uReFSdll;
    UINT_PTR         uReFSv1dll;
    UINT_PTR         uregdll;
    UINT_PTR         urldll;
    UINT_PTR         urlmondll;
    UINT_PTR         UsbCApidll;
    UINT_PTR         usbceipdll;
    UINT_PTR         usbmondll;
    UINT_PTR         usbperfdll;
    UINT_PTR         UsbPmApidll;
    UINT_PTR         UsbSettingsHandlersdll;
    UINT_PTR         UsbTaskdll;
    UINT_PTR         usbuidll;
    UINT_PTR         user32dll;
    UINT_PTR         UserAccountControlSettingsdll;
    UINT_PTR         useractivitybrokerdll;
    UINT_PTR         usercpldll;
    UINT_PTR         UserDataAccessResdll;
    UINT_PTR         UserDataAccountApisdll;
    UINT_PTR         UserDataLanguageUtildll;
    UINT_PTR         UserDataPlatformHelperUtildll;
    UINT_PTR         UserDataServicedll;
    UINT_PTR         UserDataTimeUtildll;
    UINT_PTR         UserDataTypeHelperUtildll;
    UINT_PTR         UserDeviceRegistrationdll;
    UINT_PTR         UserDeviceRegistrationNgcdll;
    UINT_PTR         userenvdll;
    UINT_PTR         userinitextdll;
    UINT_PTR         UserLanguageProfileCallbackdll;
    UINT_PTR         usermgrdll;
    UINT_PTR         usermgrclidll;
    UINT_PTR         UserMgrProxydll;
    UINT_PTR         usoapidll;
    UINT_PTR         usocorepsdll;
    UINT_PTR         usodockeddll;
    UINT_PTR         usosvcdll;
    UINT_PTR         usosvcimpldll;
    UINT_PTR         usp10dll;
    UINT_PTR         ustprovdll;
    UINT_PTR         utcapidll;
    UINT_PTR         utcutildll;
    UINT_PTR         utildlldll;
    UINT_PTR         uudfdll;
    UINT_PTR         UvcModeldll;
    UINT_PTR         uwfcfgmgmtdll;
    UINT_PTR         uwfcspdll;
    UINT_PTR         uwfservicingapidll;
    UINT_PTR         UXInitdll;
    UINT_PTR         uxlibdll;
    UINT_PTR         uxlibresdll;
    UINT_PTR         uxthemedll;
    UINT_PTR         vacdll;
    UINT_PTR         VANdll;
    UINT_PTR         Vaultdll;
    UINT_PTR         VaultCDSdll;
    UINT_PTR         vaultclidll;
    UINT_PTR         VaultRoamingdll;
    UINT_PTR         vaultsvcdll;
    UINT_PTR         vbsapidll;
    UINT_PTR         vbscriptdll;
    UINT_PTR         vbssysprepdll;
    UINT_PTR         vcamp110dll;
    UINT_PTR         vcamp120dll;
    UINT_PTR         vcamp140dll;
    UINT_PTR         vcamp140ddll;
    UINT_PTR         VCardParserdll;
    UINT_PTR         vccorlib110dll;
    UINT_PTR         vccorlib120dll;
    UINT_PTR         vccorlib140dll;
    UINT_PTR         vccorlib140ddll;
    UINT_PTR         vcomp100dll;
    UINT_PTR         vcomp110dll;
    UINT_PTR         vcomp120dll;
    UINT_PTR         vcomp140dll;
    UINT_PTR         vcomp140ddll;
    UINT_PTR         vcruntime140dll;
    UINT_PTR         vcruntime140ddll;
    UINT_PTR         vcruntime140_1dll;
    UINT_PTR         vcruntime140_1ddll;
    UINT_PTR         vcruntime140_1_clr0400dll;
    UINT_PTR         vcruntime140_clr0400dll;
    UINT_PTR         vcruntime140_threadsdll;
    UINT_PTR         vcruntime140_threadsddll;
    UINT_PTR         vdsbasdll;
    UINT_PTR         vdsdyndll;
    UINT_PTR         vdsutildll;
    UINT_PTR         vdsvddll;
    UINT_PTR         vds_psdll;
    UINT_PTR         verifierdll;
    UINT_PTR         versiondll;
    UINT_PTR         vertdlldll;
    UINT_PTR         vfbasicsdll;
    UINT_PTR         vfcompatdll;
    UINT_PTR         vfcuzzdll;
    UINT_PTR         vfluaprivdll;
    UINT_PTR         vfnetdll;
    UINT_PTR         vfntlmlessdll;
    UINT_PTR         vfnwsdll;
    UINT_PTR         vfpapidll;
    UINT_PTR         vfprintdll;
    UINT_PTR         vfprintpthelperdll;
    UINT_PTR         vfrdvcompatdll;
    UINT_PTR         vfuprovdll;
    UINT_PTR         vfwwdm32dll;
    UINT_PTR         VhfUmdll;
    UINT_PTR         viddll;
    UINT_PTR         VideoHandlersdll;
    UINT_PTR         virtdiskdll;
    UINT_PTR         VirtualMonitorManagerdll;
    UINT_PTR         VirtualSurroundApodll;
    UINT_PTR         VmApplicationHealthMonitorProxydll;
    UINT_PTR         vmbuspipedll;
    UINT_PTR         vmbuspiperdll;
    UINT_PTR         vmbusvdevdll;
    UINT_PTR         vmchipsetdll;
    UINT_PTR         vmcomputedll;
    UINT_PTR         vmcomputeeventlogdll;
    UINT_PTR         VmCrashDumpdll;
    UINT_PTR         VmDataStoredll;
    UINT_PTR         vmdebugdll;
    UINT_PTR         vmdevicehostdll;
    UINT_PTR         vmdynmemdll;
    UINT_PTR         vmemulateddevicesdll;
    UINT_PTR         VmEmulatedNicdll;
    UINT_PTR         VmEmulatedStoragedll;
    UINT_PTR         vmfirmwaredll;
    UINT_PTR         vmfirmwarehcldll;
    UINT_PTR         vmfirmwarepcatdll;
    UINT_PTR         vmflexiodll;
    UINT_PTR         vmhbmgmtdll;
    UINT_PTR         vmhgsdll;
    UINT_PTR         vmiccoredll;
    UINT_PTR         vmicrdvdll;
    UINT_PTR         vmictimeproviderdll;
    UINT_PTR         vmicvdevdll;
    UINT_PTR         vmmsproxdll;
    UINT_PTR         vmpmemdll;
    UINT_PTR         vmproxdll;
    UINT_PTR         vmrdvcoredll;
    UINT_PTR         vmserialdll;
    UINT_PTR         vmsifdll;
    UINT_PTR         vmsifcoredll;
    UINT_PTR         vmsifproxystubdll;
    UINT_PTR         vmsmbdll;
    UINT_PTR         vmstagingdll;
    UINT_PTR         vmsynthfcvdevdll;
    UINT_PTR         VmSynthNicdll;
    UINT_PTR         vmsynthstordll;
    UINT_PTR         vmtpmdll;
    UINT_PTR         vmuidevicesdll;
    UINT_PTR         vmusrvdll;
    UINT_PTR         vmvirtiodll;
    UINT_PTR         vmvpcidll;
    UINT_PTR         vmwpctrldll;
    UINT_PTR         vmwpeventsdll;
    UINT_PTR         VocabRoamingHandlerdll;
    UINT_PTR         VoiceActivationManagerdll;
    UINT_PTR         VoipRTdll;
    UINT_PTR         vp9fsdll;
    UINT_PTR         vpcievdevdll;
    UINT_PTR         vpnikedll;
    UINT_PTR         vpnikeapidll;
    UINT_PTR         VpnSohDesktopdll;
    UINT_PTR         VPNv2CSPdll;
    UINT_PTR         VrdUmeddll;
    UINT_PTR         vrfcoredll;
    UINT_PTR         VscMgrPSdll;
    UINT_PTR         vsconfigdll;
    UINT_PTR         vscover170dll;
    UINT_PTR         VSD3DWARPDebugdll;
    UINT_PTR         VsGraphicsCapturedll;
    UINT_PTR         VsGraphicsExperimentdll;
    UINT_PTR         VsGraphicsHelperdll;
    UINT_PTR         VsGraphicsProxyStubdll;
    UINT_PTR         VSPerf170dll;
    UINT_PTR         vssapidll;
    UINT_PTR         vsstracedll;
    UINT_PTR         vss_psdll;
    UINT_PTR         vulkan_1_999_0_0_0dll;
    UINT_PTR         vulkan_1dll;
    UINT_PTR         w32timedll;
    UINT_PTR         w32topldll;
    UINT_PTR         WaaSAssessmentdll;
    UINT_PTR         WaaSMedicPSdll;
    UINT_PTR         WaaSMedicSvcdll;
    UINT_PTR         WABSyncProviderdll;
    UINT_PTR         WalletBackgroundServiceProxydll;
    UINT_PTR         WalletProxydll;
    UINT_PTR         WalletServicedll;
    UINT_PTR         wamregpsdll;
    UINT_PTR         wavemspdll;
    UINT_PTR         wbemcomndll;
    UINT_PTR         wbiosrvcdll;
    UINT_PTR         wcidll;
    UINT_PTR         wcimagedll;
    UINT_PTR         wcmapidll;
    UINT_PTR         wcmcspdll;
    UINT_PTR         wcmsvcdll;
    UINT_PTR         WcnApidll;
    UINT_PTR         wcncsvcdll;
    UINT_PTR         WcnEapAuthProxydll;
    UINT_PTR         WcnEapPeerProxydll;
    UINT_PTR         WcnNetshdll;
    UINT_PTR         wcnwizdll;
    UINT_PTR         wc_storagedll;
    UINT_PTR         wdcdll;
    UINT_PTR         wdidll;
    UINT_PTR         wdigestdll;
    UINT_PTR         wdpdll;
    UINT_PTR         wdscoredll;
    UINT_PTR         webauthndll;
    UINT_PTR         WebcamUidll;
    UINT_PTR         webcheckdll;
    UINT_PTR         WebClntdll;
    UINT_PTR         webiodll;
    UINT_PTR         WebManagementUserdll;
    UINT_PTR         webplatstorageserverdll;
    UINT_PTR         WebRuntimeManagerdll;
    UINT_PTR         webservicesdll;
    UINT_PTR         Websocketdll;
    UINT_PTR         webthreatdefsvcdll;
    UINT_PTR         webthreatdefusersvcdll;
    UINT_PTR         wecapidll;
    UINT_PTR         wecsvcdll;
    UINT_PTR         wephostsvcdll;
    UINT_PTR         werdll;
    UINT_PTR         werconcpldll;
    UINT_PTR         wercplsupportdll;
    UINT_PTR         werdiagcontrollerdll;
    UINT_PTR         WerEncdll;
    UINT_PTR         weretwdll;
    UINT_PTR         wersvcdll;
    UINT_PTR         weruidll;
    UINT_PTR         wevtapidll;
    UINT_PTR         wevtfwddll;
    UINT_PTR         wevtsvcdll;
    UINT_PTR         wfapigpdll;
    UINT_PTR         wfdprovdll;
    UINT_PTR         WFDSConMgrdll;
    UINT_PTR         WFDSConMgrSvcdll;
    UINT_PTR         WfHCdll;
    UINT_PTR         whealogrdll;
    UINT_PTR         whhelperdll;
    UINT_PTR         wiaautdll;
    UINT_PTR         wiadefuidll;
    UINT_PTR         wiadssdll;
    UINT_PTR         WiaExtensionHost64dll;
    UINT_PTR         wiarpcdll;
    UINT_PTR         wiascanprofilesdll;
    UINT_PTR         wiaservcdll;
    UINT_PTR         wiashextdll;
    UINT_PTR         wiatracedll;
    UINT_PTR         WiFiCloudStoredll;
    UINT_PTR         WiFiConfigSPdll;
    UINT_PTR         wifidatacapabilityhandlerdll;
    UINT_PTR         WiFiDisplaydll;
    UINT_PTR         wifinetworkmanagerdll;
    UINT_PTR         wimgapidll;
    UINT_PTR         win32appinventorycspdll;
    UINT_PTR         Win32CompatibilityAppraiserCSPdll;
    UINT_PTR         win32spldll;
    UINT_PTR         win32udll;
    UINT_PTR         Win32_DeviceGuarddll;
    UINT_PTR         winbiodll;
    UINT_PTR         WinBioDataModeldll;
    UINT_PTR         winbioextdll;
    UINT_PTR         winbranddll;
    UINT_PTR         wincorlibdll;
    UINT_PTR         wincredproviderdll;
    UINT_PTR         wincreduidll;
    UINT_PTR         windlpdll;
    UINT_PTR         WindowManagementdll;
    UINT_PTR         WindowManagementAPIdll;
    UINT_PTR         WindowsAccountsControldll;
    UINT_PTR         WindowsAIMachineLearningdll;
    UINT_PTR         WindowsAIMachineLearningPreviewdll;
    UINT_PTR         WindowsApplicationModelBackgroundSystemEventsBrokerdll;
    UINT_PTR         WindowsApplicationModelBackgroundTimeBrokerdll;
    UINT_PTR         WindowsApplicationModelConversationalAgentdll;
    UINT_PTR         windowsapplicationmodelconversationalagentinternalproxystubdll;
    UINT_PTR         windowsapplicationmodelconversationalagentproxystubdll;
    UINT_PTR         WindowsApplicationModelCoredll;
    UINT_PTR         windowsapplicationmodeldatatransferdll;
    UINT_PTR         WindowsApplicationModeldll;
    UINT_PTR         WindowsApplicationModelLockScreendll;
    UINT_PTR         WindowsApplicationModelStoredll;
    UINT_PTR         WindowsApplicationModelStorePreviewDOSettingsdll;
    UINT_PTR         WindowsApplicationModelStoreTestingFrameworkdll;
    UINT_PTR         WindowsApplicationModelWalletdll;
    UINT_PTR         WindowsCloudStoredll;
    UINT_PTR         WindowsCloudStoreEarlyDownloaderdll;
    UINT_PTR         WindowsCloudStoreSchemaDesktopShelldll;
    UINT_PTR         WindowsCloudStoreSchemaShelldll;
    UINT_PTR         WindowsCortanaDesktopdll;
    UINT_PTR         WindowsCortanaOneCoredll;
    UINT_PTR         WindowsCortanaProxyStubdll;
    UINT_PTR         WindowsDataActivitiesdll;
    UINT_PTR         WindowsDataPdfdll;
    UINT_PTR         WindowsDevicesAllJoyndll;
    UINT_PTR         WindowsDevicesBackgrounddll;
    UINT_PTR         WindowsDevicesBackgroundpsdll;
    UINT_PTR         WindowsDevicesBluetoothdll;
    UINT_PTR         WindowsDevicesCustomdll;
    UINT_PTR         WindowsDevicesCustompsdll;
    UINT_PTR         WindowsDevicesEnumerationdll;
    UINT_PTR         WindowsDevicesHapticsdll;
    UINT_PTR         WindowsDevicesHumanInterfaceDevicedll;
    UINT_PTR         WindowsDevicesLightsdll;
    UINT_PTR         WindowsDevicesLowLeveldll;
    UINT_PTR         WindowsDevicesMididll;
    UINT_PTR         WindowsDevicesPerceptiondll;
    UINT_PTR         WindowsDevicesPickerdll;
    UINT_PTR         WindowsDevicesPointOfServicedll;
    UINT_PTR         WindowsDevicesPortabledll;
    UINT_PTR         WindowsDevicesPrintersdll;
    UINT_PTR         WindowsDevicesPrintersExtensionsdll;
    UINT_PTR         WindowsDevicesRadiosdll;
    UINT_PTR         WindowsDevicesScannersdll;
    UINT_PTR         WindowsDevicesSensorsdll;
    UINT_PTR         WindowsDevicesSerialCommunicationdll;
    UINT_PTR         WindowsDevicesSmartCardsdll;
    UINT_PTR         WindowsDevicesSmartCardsPhonedll;
    UINT_PTR         WindowsDevicesUsbdll;
    UINT_PTR         WindowsDevicesWiFidll;
    UINT_PTR         WindowsDevicesWiFiDirectdll;
    UINT_PTR         WindowsEnergydll;
    UINT_PTR         WindowsFileExplorerCommondll;
    UINT_PTR         WindowsGamingInputdll;
    UINT_PTR         WindowsGamingPreviewdll;
    UINT_PTR         WindowsGamingUIGameBardll;
    UINT_PTR         WindowsGamingXboxLiveStoragedll;
    UINT_PTR         WindowsGlobalizationdll;
    UINT_PTR         WindowsGlobalizationFontgroupsdll;
    UINT_PTR         WindowsGlobalizationPhoneNumberFormattingdll;
    UINT_PTR         WindowsGraphicsDisplayBrightnessOverridedll;
    UINT_PTR         WindowsGraphicsDisplayDisplayEnhancementOverridedll;
    UINT_PTR         WindowsGraphicsdll;
    UINT_PTR         WindowsGraphicsPrinting3Ddll;
    UINT_PTR         WindowsGraphicsPrintingdll;
    UINT_PTR         WindowsGraphicsPrintingWorkflowdll;
    UINT_PTR         WindowsGraphicsPrintingWorkflowNativedll;
    UINT_PTR         WindowsHelpRuntimedll;
    UINT_PTR         windowsimmersiveshellserviceproviderdll;
    UINT_PTR         WindowsInternalAdaptiveCardsXamlCardRendererdll;
    UINT_PTR         WindowsInternalCapturePickerDesktopdll;
    UINT_PTR         WindowsInternalCapturePickerdll;
    UINT_PTR         WindowsInternalDevicesBluetoothdll;
    UINT_PTR         WindowsInternalDevicesSensorsdll;
    UINT_PTR         WindowsInternalFeedbackAnalogdll;
    UINT_PTR         WindowsInternalFeedbackAnalogProxyStubdll;
    UINT_PTR         WindowsInternalGraphicsDisplayDisplayColorManagementdll;
    UINT_PTR         WindowsInternalGraphicsDisplayDisplayEnhancementManagementdll;
    UINT_PTR         WindowsInternalHardwareConfirmatordll;
    UINT_PTR         WindowsInternalManagementdll;
    UINT_PTR         WindowsInternalManagementSecureAssessmentdll;
    UINT_PTR         WindowsInternalOpenWithHostdll;
    UINT_PTR         WindowsInternalPlatformExtensionDevicePickerExperiencedll;
    UINT_PTR         WindowsInternalPlatformExtensionMiracastBannerExperiencedll;
    UINT_PTR         WindowsInternalPredictionUnitdll;
    UINT_PTR         WindowsInternalSecurityAttestationDeviceAttestationdll;
    UINT_PTR         WindowsInternalSecurityMitigationsBrokerdll;
    UINT_PTR         WindowsInternalShellBrokerdll;
    UINT_PTR         WindowsInternalShellCloudDesktopTransitionScreendll;
    UINT_PTR         WindowsInternalShellXamlInputViewHostdll;
    UINT_PTR         windowsinternalshellcommonAccountsControlExperiencedll;
    UINT_PTR         windowsinternalshellcommonAppResolverModaldll;
    UINT_PTR         WindowsInternalShellCommonBrokerdll;
    UINT_PTR         WindowsInternalShellCommondll;
    UINT_PTR         windowsinternalshellcommonFilePickerExperienceMEMdll;
    UINT_PTR         WindowsInternalShellCommonPrintExperiencedll;
    UINT_PTR         windowsinternalshellcommonshareexperiencedll;
    UINT_PTR         windowsinternalshellcommonTokenBrokerModaldll;
    UINT_PTR         WindowsInternalSignalsdll;
    UINT_PTR         WindowsInternalSystemUserProfiledll;
    UINT_PTR         WindowsInternalTaskbardll;
    UINT_PTR         WindowsInternalUIBioEnrollmentProxyStubdll;
    UINT_PTR         WindowsInternalUIDialogsdll;
    UINT_PTR         WindowsInternalUILogonProxyStubdll;
    UINT_PTR         WindowsInternalUIShellWindowTabManagerdll;
    UINT_PTR         WindowsInternalWaaSMedicDockeddll;
    UINT_PTR         WindowsManagementEnrollmentStatusTrackingConfigProviderdll;
    UINT_PTR         WindowsManagementInprocObjectsdll;
    UINT_PTR         WindowsManagementModernDeploymentConfigProvidersdll;
    UINT_PTR         WindowsManagementProvisioningProxyStubdll;
    UINT_PTR         WindowsManagementSecureAssessmentCfgProviderdll;
    UINT_PTR         WindowsManagementSecureAssessmentDiagnosticsdll;
    UINT_PTR         WindowsManagementServicedll;
    UINT_PTR         WindowsManagementUpdatedll;
    UINT_PTR         WindowsManagementWorkplacedll;
    UINT_PTR         WindowsManagementWorkplaceWorkplaceSettingsdll;
    UINT_PTR         WindowsMediaAudiodll;
    UINT_PTR         WindowsMediaBackgroundMediaPlaybackdll;
    UINT_PTR         WindowsMediaDevicesdll;
    UINT_PTR         WindowsMediadll;
    UINT_PTR         WindowsMediaEditingdll;
    UINT_PTR         WindowsMediaFaceAnalysisdll;
    UINT_PTR         WindowsMediaImportdll;
    UINT_PTR         WindowsMediaMediaControldll;
    UINT_PTR         WindowsMediaMixedRealityCapturedll;
    UINT_PTR         WindowsMediaOcrdll;
    UINT_PTR         WindowsMediaPlaybackBackgroundMediaPlayerdll;
    UINT_PTR         WindowsMediaPlaybackMediaPlayerdll;
    UINT_PTR         WindowsMediaPlaybackProxyStubdll;
    UINT_PTR         WindowsMediaProtectionPlayReadydll;
    UINT_PTR         WindowsMediaRenewaldll;
    UINT_PTR         WindowsMediaSpeechdll;
    UINT_PTR         WindowsMediaSpeechUXResdll;
    UINT_PTR         WindowsMediaStreamingdll;
    UINT_PTR         WindowsMediaStreamingpsdll;
    UINT_PTR         WindowsMiragedll;
    UINT_PTR         WindowsMirageInternaldll;
    UINT_PTR         WindowsNetworkingBackgroundTransferBackgroundManagerPolicydll;
    UINT_PTR         WindowsNetworkingBackgroundTransferContentPrefetchTaskdll;
    UINT_PTR         WindowsNetworkingBackgroundTransferdll;
    UINT_PTR         WindowsNetworkingConnectivitydll;
    UINT_PTR         WindowsNetworkingdll;
    UINT_PTR         WindowsNetworkingHostNamedll;
    UINT_PTR         WindowsNetworkingNetworkOperatorsESimdll;
    UINT_PTR         WindowsNetworkingNetworkOperatorsHotspotAuthenticationdll;
    UINT_PTR         WindowsNetworkingProximitydll;
    UINT_PTR         WindowsNetworkingServiceDiscoveryDnssddll;
    UINT_PTR         WindowsNetworkingSocketsPushEnabledApplicationdll;
    UINT_PTR         WindowsNetworkingUXEapRequestHandlerdll;
    UINT_PTR         WindowsNetworkingVpndll;
    UINT_PTR         WindowsNetworkingXboxLiveProxyStubdll;
    UINT_PTR         WindowsPaymentsdll;
    UINT_PTR         WindowsPerceptionStubdll;
    UINT_PTR         WindowsSecurityAuthenticationIdentityProviderdll;
    UINT_PTR         WindowsSecurityAuthenticationOnlineIddll;
    UINT_PTR         WindowsSecurityAuthenticationWebCoredll;
    UINT_PTR         WindowsSecurityCredentialsUICredentialPickerdll;
    UINT_PTR         WindowsSecurityCredentialsUIUserConsentVerifierdll;
    UINT_PTR         WindowsSecurityIntegritydll;
    UINT_PTR         WindowsServicesTargetedContentdll;
    UINT_PTR         WindowsSharedPCAccountManagerdll;
    UINT_PTR         WindowsSharedPCCredentialProviderdll;
    UINT_PTR         WindowsShellBlueLightReductiondll;
    UINT_PTR         WindowsShellServiceHostBuilderdll;
    UINT_PTR         WindowsShellStartLayoutPopulationEventsdll;
    UINT_PTR         WindowsStateRepositorydll;
    UINT_PTR         WindowsStateRepositoryBrokerdll;
    UINT_PTR         WindowsStateRepositoryClientdll;
    UINT_PTR         WindowsStateRepositoryCoredll;
    UINT_PTR         WindowsStateRepositoryPSdll;
    UINT_PTR         WindowsStateRepositoryUpgradedll;
    UINT_PTR         WindowsStorageApplicationDatadll;
    UINT_PTR         WindowsStorageCompressiondll;
    UINT_PTR         windowsstoragedll;
    UINT_PTR         WindowsStorageOneCoredll;
    UINT_PTR         WindowsStorageSearchdll;
    UINT_PTR         WindowsSystemDiagnosticsdll;
    UINT_PTR         WindowsSystemDiagnosticsTelemetryPlatformTelemetryClientdll;
    UINT_PTR         WindowsSystemDiagnosticsTraceReportingPlatformDiagnosticActionsdll;
    UINT_PTR         WindowsSystemLauncherdll;
    UINT_PTR         WindowsSystemProfileHardwareIddll;
    UINT_PTR         WindowsSystemProfilePlatformDiagnosticsAndUsageDataSettingsdll;
    UINT_PTR         WindowsSystemProfileRetailInfodll;
    UINT_PTR         WindowsSystemProfileSystemIddll;
    UINT_PTR         WindowsSystemProfileSystemManufacturersdll;
    UINT_PTR         WindowsSystemRemoteDesktopdll;
    UINT_PTR         WindowsSystemSystemManagementdll;
    UINT_PTR         WindowsSystemUserDeviceAssociationdll;
    UINT_PTR         WindowsSystemUserProfileDiagnosticsSettingsdll;
    UINT_PTR         WindowsUIAccessibilitydll;
    UINT_PTR         WindowsUIAppDefaultsdll;
    UINT_PTR         WindowsUIBioFeedbackdll;
    UINT_PTR         WindowsUIBlockedShutdowndll;
    UINT_PTR         WindowsUICoreTextInputdll;
    UINT_PTR         WindowsUICreddll;
    UINT_PTR         WindowsUICredDialogControllerdll;
    UINT_PTR         WindowsUIdll;
    UINT_PTR         WindowsUIFileExplorerdll;
    UINT_PTR         WindowsUIImmersivedll;
    UINT_PTR         WindowsUIInputInkingAnalysisdll;
    UINT_PTR         WindowsUIInputInkingdll;
    UINT_PTR         WindowsUILogondll;
    UINT_PTR         WindowsUINetworkUXControllerdll;
    UINT_PTR         WindowsUIPicturePassworddll;
    UINT_PTR         WindowsUISearchdll;
    UINT_PTR         WindowsUIShelldll;
    UINT_PTR         WindowsUIShellInternalAdaptiveCardsdll;
    UINT_PTR         WindowsUIStoragedll;
    UINT_PTR         WindowsUIXamlControlsdll;
    UINT_PTR         WindowsUIXamldll;
    UINT_PTR         WindowsUIXamlInkControlsdll;
    UINT_PTR         WindowsUIXamlMapsdll;
    UINT_PTR         WindowsUIXamlPhonedll;
    UINT_PTR         WindowsUIXamlResources19h1dll;
    UINT_PTR         WindowsUIXamlResources21h1dll;
    UINT_PTR         WindowsUIXamlResourcesCommondll;
    UINT_PTR         WindowsUIXamlResourcesrs1dll;
    UINT_PTR         WindowsUIXamlResourcesrs2dll;
    UINT_PTR         WindowsUIXamlResourcesrs3dll;
    UINT_PTR         WindowsUIXamlResourcesrs4dll;
    UINT_PTR         WindowsUIXamlResourcesrs5dll;
    UINT_PTR         WindowsUIXamlResourcesthdll;
    UINT_PTR         WindowsUIXamlResourceswin81dll;
    UINT_PTR         WindowsUIXamlResourceswin8rtmdll;
    UINT_PTR         WindowsUIXamlHostdll;
    UINT_PTR         WindowsWARPJITServicedll;
    UINT_PTR         WindowsWebDiagnosticsdll;
    UINT_PTR         WindowsWebdll;
    UINT_PTR         WindowsWebHttpdll;
    UINT_PTR         WindowsCodecsdll;
    UINT_PTR         WindowsCodecsExtdll;
    UINT_PTR         WindowsDefaultHeatProcessordll;
    UINT_PTR         windowsdefenderapplicationguardcspdll;
    UINT_PTR         WindowsInternalComposableShellDisplaydll;
    UINT_PTR         WindowsInternalShellCompUiActivationdll;
    UINT_PTR         WindowsIoTCspdll;
    UINT_PTR         windowslivelogindll;
    UINT_PTR         WindowsManagementServiceWinRtProxyStubdll;
    UINT_PTR         windowsperformancerecordercontroldll;
    UINT_PTR         windowsudkshellcommondll;
    UINT_PTR         windowsudkservicesshellcommondll;
    UINT_PTR         winethcdll;
    UINT_PTR         winhttpdll;
    UINT_PTR         winhttpcomdll;
    UINT_PTR         WinHvEmulationdll;
    UINT_PTR         WinHvPlatformdll;
    UINT_PTR         wininetdll;
    UINT_PTR         wininetluidll;
    UINT_PTR         wininitextdll;
    UINT_PTR         winipcfiledll;
    UINT_PTR         winipcsecprocdll;
    UINT_PTR         winipsecdll;
    UINT_PTR         Winlangdbdll;
    UINT_PTR         winlogonextdll;
    UINT_PTR         winmdedll;
    UINT_PTR         winmldll;
    UINT_PTR         winmmdll;
    UINT_PTR         winmmbasedll;
    UINT_PTR         winmsipcdll;
    UINT_PTR         WinMsoIrmProtectordll;
    UINT_PTR         winnlsresdll;
    UINT_PTR         winnsidll;
    UINT_PTR         WinOpcIrmProtectordll;
    UINT_PTR         WinREAgentdll;
    UINT_PTR         winrnrdll;
    UINT_PTR         winrscmddll;
    UINT_PTR         winrsmgrdll;
    UINT_PTR         winrssrvdll;
    UINT_PTR         WinRtTracingdll;
    UINT_PTR         WinSATAPIdll;
    UINT_PTR         WinSCarddll;
    UINT_PTR         winshfhcdll;
    UINT_PTR         winskudll;
    UINT_PTR         winsockhcdll;
    UINT_PTR         winsqlite3dll;
    UINT_PTR         winsrvdll;
    UINT_PTR         winsrvextdll;
    UINT_PTR         winstadll;
    UINT_PTR         WinSyncdll;
    UINT_PTR         WinSyncMetastoredll;
    UINT_PTR         WinSyncProvidersdll;
    UINT_PTR         wintrustdll;
    UINT_PTR         WinTypesdll;
    UINT_PTR         WinUICohabitationdll;
    UINT_PTR         winusbdll;
    UINT_PTR         WiredNetworkCSPdll;
    UINT_PTR         wispdll;
    UINT_PTR         witnesswmiv2providerdll;
    UINT_PTR         wksclidll;
    UINT_PTR         wkspbrokerAxdll;
    UINT_PTR         wksprtPSdll;
    UINT_PTR         wkssvcdll;
    UINT_PTR         wlanapidll;
    UINT_PTR         wlancfgdll;
    UINT_PTR         WLanConndll;
    UINT_PTR         wlandlgdll;
    UINT_PTR         wlangpuidll;
    UINT_PTR         WLanHCdll;
    UINT_PTR         wlanhlpdll;
    UINT_PTR         WlanMediaManagerdll;
    UINT_PTR         WlanMMdll;
    UINT_PTR         wlanmsmdll;
    UINT_PTR         wlanprefdll;
    UINT_PTR         WlanRadioManagerdll;
    UINT_PTR         wlansecdll;
    UINT_PTR         wlansvcdll;
    UINT_PTR         wlansvcpaldll;
    UINT_PTR         wlanuidll;
    UINT_PTR         wlanutildll;
    UINT_PTR         Wldap32dll;
    UINT_PTR         wldpdll;
    UINT_PTR         wlgpclntdll;
    UINT_PTR         wlidclidll;
    UINT_PTR         wlidcredprovdll;
    UINT_PTR         wlidfdpdll;
    UINT_PTR         wlidnspdll;
    UINT_PTR         wlidprovdll;
    UINT_PTR         wlidresdll;
    UINT_PTR         wlidsvcdll;
    UINT_PTR         WMALFXGFXDSPdll;
    UINT_PTR         wmcodecdsppsdll;
    UINT_PTR         wmdmlogdll;
    UINT_PTR         wmdmpsdll;
    UINT_PTR         wmdrmsdkdll;
    UINT_PTR         wmidll;
    UINT_PTR         wmiclntdll;
    UINT_PTR         wmidcomdll;
    UINT_PTR         wmidxdll;
    UINT_PTR         wmipropdll;
    UINT_PTR         wmitomidll;
    UINT_PTR         WMNetMgrdll;
    UINT_PTR         WmpDuidll;
    UINT_PTR         WMPhotodll;
    UINT_PTR         wmsgapidll;
    UINT_PTR         wmvdspadll;
    UINT_PTR         WofTasksdll;
    UINT_PTR         WofUtildll;
    UINT_PTR         WordBreakersdll;
    UINT_PTR         WorkfoldersControldll;
    UINT_PTR         WorkFoldersGPExtdll;
    UINT_PTR         WorkFoldersResdll;
    UINT_PTR         WorkFoldersShelldll;
    UINT_PTR         workfolderssvcdll;
    UINT_PTR         woscdll;
    UINT_PTR         wow64dll;
    UINT_PTR         wow64basedll;
    UINT_PTR         wow64condll;
    UINT_PTR         wow64cpudll;
    UINT_PTR         wow64windll;
    UINT_PTR         wpbcredsdll;
    UINT_PTR         Wpcdll;
    UINT_PTR         WpcApidll;
    UINT_PTR         WpcDesktopMonSvcdll;
    UINT_PTR         WpcProxyStubsdll;
    UINT_PTR         WpcRefreshTaskdll;
    UINT_PTR         WpcWebFilterdll;
    UINT_PTR         wpdbusenumdll;
    UINT_PTR         WpdMtpdll;
    UINT_PTR         WpdMtpUSdll;
    UINT_PTR         wpdshextdll;
    UINT_PTR         WPDShServiceObjdll;
    UINT_PTR         WPDSpdll;
    UINT_PTR         wpd_cidll;
    UINT_PTR         wpnappsdll;
    UINT_PTR         wpnclientdll;
    UINT_PTR         wpncoredll;
    UINT_PTR         wpninprcdll;
    UINT_PTR         wpnprvdll;
    UINT_PTR         wpnservicedll;
    UINT_PTR         wpnsruprovdll;
    UINT_PTR         WpnUserServicedll;
    UINT_PTR         WpPortingLibrarydll;
    UINT_PTR         WppRecorderUMdll;
    UINT_PTR         WPTaskSchedulerdll;
    UINT_PTR         wpxdll;
    UINT_PTR         ws2helpdll;
    UINT_PTR         ws2_32dll;
    UINT_PTR         wscapidll;
    UINT_PTR         wscinteropdll;
    UINT_PTR         wscisvifdll;
    UINT_PTR         WSClientdll;
    UINT_PTR         wscproxystubdll;
    UINT_PTR         wscsvcdll;
    UINT_PTR         WSDApidll;
    UINT_PTR         wsdchngrdll;
    UINT_PTR         WsdProviderUtildll;
    UINT_PTR         WSDScanProxydll;
    UINT_PTR         wseceditdll;
    UINT_PTR         wsepnodll;
    UINT_PTR         wshbthdll;
    UINT_PTR         wshcondll;
    UINT_PTR         wshelperdll;
    UINT_PTR         wshextdll;
    UINT_PTR         wshhypervdll;
    UINT_PTR         wship6dll;
    UINT_PTR         wshqosdll;
    UINT_PTR         wshrmdll;
    UINT_PTR         wshunixdll;
    UINT_PTR         wslapidll;
    UINT_PTR         WsmAgentdll;
    UINT_PTR         WSManMigrationPlugindll;
    UINT_PTR         WsmAutodll;
    UINT_PTR         wsmplpxydll;
    UINT_PTR         WsmResdll;
    UINT_PTR         WsmSvcdll;
    UINT_PTR         WsmWmiPldll;
    UINT_PTR         wsnmp32dll;
    UINT_PTR         wsock32dll;
    UINT_PTR         wsplibdll;
    UINT_PTR         wsp_fsdll;
    UINT_PTR         wsp_healthdll;
    UINT_PTR         wsp_srdll;
    UINT_PTR         wtdccmdll;
    UINT_PTR         wtdhostdll;
    UINT_PTR         wtdsensordll;
    UINT_PTR         wtsapi32dll;
    UINT_PTR         wuapidll;
    UINT_PTR         wuauengdll;
    UINT_PTR         wuceffectsdll;
    UINT_PTR         WUDFCoinstallerdll;
    UINT_PTR         WUDFPlatformdll;
    UINT_PTR         WudfSMCClassExtdll;
    UINT_PTR         WUDFxdll;
    UINT_PTR         WUDFx02000dll;
    UINT_PTR         wudriverdll;
    UINT_PTR         wupsdll;
    UINT_PTR         wups2dll;
    UINT_PTR         wusysdll;
    UINT_PTR         wvcdll;
    UINT_PTR         WwaApidll;
    UINT_PTR         WwaExtdll;
    UINT_PTR         WWanAPIdll;
    UINT_PTR         wwancfgdll;
    UINT_PTR         WWanHCdll;
    UINT_PTR         WwanPrfldll;
    UINT_PTR         wwanprotdimdll;
    UINT_PTR         WwanRadioManagerdll;
    UINT_PTR         wwansvcdll;
    UINT_PTR         wwapidll;
    UINT_PTR         x3daudio1_0dll;
    UINT_PTR         x3daudio1_1dll;
    UINT_PTR         X3DAudio1_2dll;
    UINT_PTR         X3DAudio1_3dll;
    UINT_PTR         X3DAudio1_4dll;
    UINT_PTR         X3DAudio1_5dll;
    UINT_PTR         X3DAudio1_6dll;
    UINT_PTR         X3DAudio1_7dll;
    UINT_PTR         xactengine2_0dll;
    UINT_PTR         xactengine2_1dll;
    UINT_PTR         xactengine2_10dll;
    UINT_PTR         xactengine2_2dll;
    UINT_PTR         xactengine2_3dll;
    UINT_PTR         xactengine2_4dll;
    UINT_PTR         xactengine2_5dll;
    UINT_PTR         xactengine2_6dll;
    UINT_PTR         xactengine2_7dll;
    UINT_PTR         xactengine2_8dll;
    UINT_PTR         xactengine2_9dll;
    UINT_PTR         xactengine3_0dll;
    UINT_PTR         xactengine3_1dll;
    UINT_PTR         xactengine3_2dll;
    UINT_PTR         xactengine3_3dll;
    UINT_PTR         xactengine3_4dll;
    UINT_PTR         xactengine3_5dll;
    UINT_PTR         xactengine3_6dll;
    UINT_PTR         xactengine3_7dll;
    UINT_PTR         XamlTileRenderdll;
    UINT_PTR         XAPOFX1_0dll;
    UINT_PTR         XAPOFX1_1dll;
    UINT_PTR         XAPOFX1_2dll;
    UINT_PTR         XAPOFX1_3dll;
    UINT_PTR         XAPOFX1_4dll;
    UINT_PTR         XAPOFX1_5dll;
    UINT_PTR         XAudio2_0dll;
    UINT_PTR         XAudio2_1dll;
    UINT_PTR         XAudio2_2dll;
    UINT_PTR         XAudio2_3dll;
    UINT_PTR         XAudio2_4dll;
    UINT_PTR         XAudio2_5dll;
    UINT_PTR         XAudio2_6dll;
    UINT_PTR         XAudio2_7dll;
    UINT_PTR         XAudio2_8dll;
    UINT_PTR         XAudio2_9dll;
    UINT_PTR         XblAuthManagerdll;
    UINT_PTR         XblAuthManagerProxydll;
    UINT_PTR         XblAuthTokenBrokerExtdll;
    UINT_PTR         XblGameSavedll;
    UINT_PTR         XblGameSaveExtdll;
    UINT_PTR         XblGameSaveProxydll;
    UINT_PTR         XboxGipRadioManagerdll;
    UINT_PTR         xboxgipsvcdll;
    UINT_PTR         xboxgipsyntheticdll;
    UINT_PTR         XboxNetApiSvcdll;
    UINT_PTR         xinput1_1dll;
    UINT_PTR         xinput1_2dll;
    UINT_PTR         xinput1_3dll;
    UINT_PTR         XInput1_4dll;
    UINT_PTR         XInput9_1_0dll;
    UINT_PTR         XInputUapdll;
    UINT_PTR         xmlfilterdll;
    UINT_PTR         xmllitedll;
    UINT_PTR         xmlprovidll;
    UINT_PTR         xolehlpdll;
    UINT_PTR         XpsDocumentTargetPrintdll;
    UINT_PTR         XpsGdiConverterdll;
    UINT_PTR         XpsPrintdll;
    UINT_PTR         xpspushlayerdll;
    UINT_PTR         XpsRasterServicedll;
    UINT_PTR         xpsservicesdll;
    UINT_PTR         XpsToPclmConverterdll;
    UINT_PTR         XpsToPwgrConverterdll;
    UINT_PTR         xwizardsdll;
    UINT_PTR         xwregdll;
    UINT_PTR         xwtpduidll;
    UINT_PTR         xwtpw32dll;
    UINT_PTR         ze_loaderdll;
    UINT_PTR         ze_validation_layerdll;
    UINT_PTR         zipcontainerdll;
    UINT_PTR         zipfldrdll;
    UINT_PTR         ztrace_mapsdll;
};

////////////////////////////////////////////////////////////////////////////////
//                      Payload Extraction Helper (GNU ONLY)
////////////////////////////////////////////////////////////////////////////////

#if defined(__GNUC__) || defined(__MINGW32__) || defined(__MINGW64__)

class [[nodiscard]] payload_data {
    typedef std::unique_ptr<const uint8_t[]> byte_ptr;
public:
    payload_data(const payload_data&) = delete;
    payload_data& operator=(const payload_data&) = delete;
    
    explicit payload_data() noexcept
    : failed_( true )
    {
    }

    explicit payload_data(payload_data&& other) noexcept
    : bytes_(std::move(other.bytes_))
    , size_(other.size_)
    , failed_( false )
    {
        other.size_ = 0;
    }

    payload_data& operator=(payload_data&& other) noexcept {
        if (this != &other) {
            bytes_ = std::move(other.bytes_);
            size_ = other.size_;

            other.size_ = 0;
        }

        return *this;
    }

    template <typename FPTR_T, typename STUB_T>
    static payload_data build_from_payload(FPTR_T payload, STUB_T stub) {
        if ( +stub <= +payload )
        {
            return payload_data();
        }

        std::size_t size =
            reinterpret_cast<uintptr_t>(stub) - reinterpret_cast<uintptr_t>(payload);

        // Deal with MSVC padding

        return payload_data(payload, size);
    }

    bool extract_to_file(std::filesystem::path outfile) const noexcept {
        if ( failed_ ) {
            return false;
        }

        std::ofstream file(outfile, std::ios::binary);

        if (!file.is_open()) {
            return false;
        }

        file.write(reinterpret_cast<const char*>(bytes_.get()), size_ & INT64_MAX);
        if (file.fail()) {
            return false;
        }

        return true;
    }

    const uint8_t* bytes() const noexcept { return bytes_.get(); }
    std::size_t size() const noexcept     { return size_;  }
private:
    byte_ptr    bytes_;
    std::size_t size_;
    const bool failed_;

    template <typename FPTR_T>
    payload_data(FPTR_T payload, std::size_t size)
    : bytes_( new uint8_t[size] )
    , size_( size )
    , failed_( false )
    {
        std::memcpy(const_cast<uint8_t *>(bytes_.get()), reinterpret_cast<void *>(payload), size_);
    }
};
#endif // defined(__GNUC__) || defined(__MINGW32__) || defined(__MINGW64__)

} // namepsace ss
} // namespace vpr

#endif // defined(__cplusplus)
#endif // VPR_SHELL_SHOCK_HEADER

